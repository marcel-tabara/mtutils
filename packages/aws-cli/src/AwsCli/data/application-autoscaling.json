{
  "service_name": "application-autoscaling",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/index.html",
  "service_commands": [
    {
      "command_name": "delete-scaling-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/delete-scaling-policy.html",
      "command_description": "Description\n\nDeletes the specified scaling policy for an Application Auto Scaling scalable target.\n\nDeleting a step scaling policy deletes the underlying alarm action, but does not delete the CloudWatch alarm associated with the scaling policy, even if it no longer has an associated action.\n\nFor more information, see Delete a step scaling policy and Delete a target tracking scaling policy in the Application Auto Scaling User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-scaling-policy\n--policy-name <value>\n--service-namespace <value>\n--resource-id <value>\n--scalable-dimension <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--policy-name <value>",
        "--service-namespace <value>",
        "--resource-id <value>",
        "--scalable-dimension <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--policy-name (string)\n\nThe name of the scaling policy.\n\n--service-namespace (string)\n\nThe namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.\n\nPossible values:\n\necs\n\nelasticmapreduce\n\nec2\n\nappstream\n\ndynamodb\n\nrds\n\nsagemaker\n\ncustom-resource\n\ncomprehend\n\nlambda\n\ncassandra\n\nkafka\n\nelasticache\n\nneptune\n\n--resource-id (string)\n\nThe identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\n--scalable-dimension (string)\n\nThe scalable dimension. This string consists of the service namespace, resource type, and scaling property.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPossible values:\n\necs:service:DesiredCount\n\nec2:spot-fleet-request:TargetCapacity\n\nelasticmapreduce:instancegroup:InstanceCount\n\nappstream:fleet:DesiredCapacity\n\ndynamodb:table:ReadCapacityUnits\n\ndynamodb:table:WriteCapacityUnits\n\ndynamodb:index:ReadCapacityUnits\n\ndynamodb:index:WriteCapacityUnits\n\nrds:cluster:ReadReplicaCount\n\nsagemaker:variant:DesiredInstanceCount\n\ncustom-resource:ResourceType:Property\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits\n\nlambda:function:ProvisionedConcurrency\n\ncassandra:table:ReadCapacityUnits\n\ncassandra:table:WriteCapacityUnits\n\nkafka:broker-storage:VolumeSize\n\nelasticache:replication-group:NodeGroups\n\nelasticache:replication-group:Replicas\n\nneptune:cluster:ReadReplicaCount\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete a scaling policy\n\nThis example deletes a scaling policy for the Amazon ECS service web-app running in the default cluster.\n\nCommand:\n\naws application-autoscaling delete-scaling-policy --policy-name web-app-cpu-lt-25 --scalable-dimension ecs:service:DesiredCount --resource-id service/default/web-app --service-namespace ecs\n"
    },
    {
      "command_name": "delete-scheduled-action",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/delete-scheduled-action.html",
      "command_description": "Description\n\nDeletes the specified scheduled action for an Application Auto Scaling scalable target.\n\nFor more information, see Delete a scheduled action in the Application Auto Scaling User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-scheduled-action\n--service-namespace <value>\n--scheduled-action-name <value>\n--resource-id <value>\n--scalable-dimension <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--service-namespace <value>",
        "--scheduled-action-name <value>",
        "--resource-id <value>",
        "--scalable-dimension <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--service-namespace (string)\n\nThe namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.\n\nPossible values:\n\necs\n\nelasticmapreduce\n\nec2\n\nappstream\n\ndynamodb\n\nrds\n\nsagemaker\n\ncustom-resource\n\ncomprehend\n\nlambda\n\ncassandra\n\nkafka\n\nelasticache\n\nneptune\n\n--scheduled-action-name (string)\n\nThe name of the scheduled action.\n\n--resource-id (string)\n\nThe identifier of the resource associated with the scheduled action. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\n--scalable-dimension (string)\n\nThe scalable dimension. This string consists of the service namespace, resource type, and scaling property.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPossible values:\n\necs:service:DesiredCount\n\nec2:spot-fleet-request:TargetCapacity\n\nelasticmapreduce:instancegroup:InstanceCount\n\nappstream:fleet:DesiredCapacity\n\ndynamodb:table:ReadCapacityUnits\n\ndynamodb:table:WriteCapacityUnits\n\ndynamodb:index:ReadCapacityUnits\n\ndynamodb:index:WriteCapacityUnits\n\nrds:cluster:ReadReplicaCount\n\nsagemaker:variant:DesiredInstanceCount\n\ncustom-resource:ResourceType:Property\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits\n\nlambda:function:ProvisionedConcurrency\n\ncassandra:table:ReadCapacityUnits\n\ncassandra:table:WriteCapacityUnits\n\nkafka:broker-storage:VolumeSize\n\nelasticache:replication-group:NodeGroups\n\nelasticache:replication-group:Replicas\n\nneptune:cluster:ReadReplicaCount\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete a scheduled action\n\nThe follwing delete-scheduled-action example deletes the specified scheduled action from the specified Amazon AppStream 2.0 fleet:\n\naws application-autoscaling delete-scheduled-action \\\n    --service-namespace appstream \\\n    --scalable-dimension appstream:fleet:DesiredCapacity \\\n    --resource-id fleet/sample-fleet \\\n    --scheduled-action-name my-recurring-action\n\n\nThis command produces no output.\n\nFor more information, see Scheduled Scaling in the Application Auto Scaling User Guide."
    },
    {
      "command_name": "deregister-scalable-target",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/deregister-scalable-target.html",
      "command_description": "Description\n\nDeregisters an Application Auto Scaling scalable target when you have finished using it. To see which resources have been registered, use DescribeScalableTargets .\n\nNote\n\nDeregistering a scalable target deletes the scaling policies and the scheduled actions that are associated with it.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  deregister-scalable-target\n--service-namespace <value>\n--resource-id <value>\n--scalable-dimension <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--service-namespace <value>",
        "--resource-id <value>",
        "--scalable-dimension <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--service-namespace (string)\n\nThe namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.\n\nPossible values:\n\necs\n\nelasticmapreduce\n\nec2\n\nappstream\n\ndynamodb\n\nrds\n\nsagemaker\n\ncustom-resource\n\ncomprehend\n\nlambda\n\ncassandra\n\nkafka\n\nelasticache\n\nneptune\n\n--resource-id (string)\n\nThe identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\n--scalable-dimension (string)\n\nThe scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPossible values:\n\necs:service:DesiredCount\n\nec2:spot-fleet-request:TargetCapacity\n\nelasticmapreduce:instancegroup:InstanceCount\n\nappstream:fleet:DesiredCapacity\n\ndynamodb:table:ReadCapacityUnits\n\ndynamodb:table:WriteCapacityUnits\n\ndynamodb:index:ReadCapacityUnits\n\ndynamodb:index:WriteCapacityUnits\n\nrds:cluster:ReadReplicaCount\n\nsagemaker:variant:DesiredInstanceCount\n\ncustom-resource:ResourceType:Property\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits\n\nlambda:function:ProvisionedConcurrency\n\ncassandra:table:ReadCapacityUnits\n\ncassandra:table:WriteCapacityUnits\n\nkafka:broker-storage:VolumeSize\n\nelasticache:replication-group:NodeGroups\n\nelasticache:replication-group:Replicas\n\nneptune:cluster:ReadReplicaCount\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo deregister a scalable target\n\nThis example deregisters a scalable target for an Amazon ECS service called web-app that is running in the default cluster.\n\nCommand:\n\naws application-autoscaling deregister-scalable-target --service-namespace ecs --scalable-dimension ecs:service:DesiredCount --resource-id service/default/web-app\n\n\nThis example deregisters a scalable target for a custom resource. The custom-resource-id.txt file contains a string that identifies the Resource ID, which, for a custom resource, is the path to the custom resource through your Amazon API Gateway endpoint.\n\nCommand:\n\naws application-autoscaling deregister-scalable-target --service-namespace custom-resource --scalable-dimension custom-resource:ResourceType:Property --resource-id file://~/custom-resource-id.txt\n\n\nContents of custom-resource-id.txt file:\n\nhttps://example.execute-api.us-west-2.amazonaws.com/prod/scalableTargetDimensions/1-23456789\n"
    },
    {
      "command_name": "describe-scalable-targets",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/describe-scalable-targets.html",
      "command_description": "Description\n\nGets information about the scalable targets in the specified namespace.\n\nYou can filter the results using ResourceIds and ScalableDimension .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\ndescribe-scalable-targets is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: ScalableTargets",
      "command_synopsis": "Synopsis\n  describe-scalable-targets\n--service-namespace <value>\n[--resource-ids <value>]\n[--scalable-dimension <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--service-namespace <value>",
        "[--resource-ids <value>]",
        "[--scalable-dimension <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--service-namespace (string)\n\nThe namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.\n\nPossible values:\n\necs\n\nelasticmapreduce\n\nec2\n\nappstream\n\ndynamodb\n\nrds\n\nsagemaker\n\ncustom-resource\n\ncomprehend\n\nlambda\n\ncassandra\n\nkafka\n\nelasticache\n\nneptune\n\n--resource-ids (list)\n\nThe identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--scalable-dimension (string)\n\nThe scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPossible values:\n\necs:service:DesiredCount\n\nec2:spot-fleet-request:TargetCapacity\n\nelasticmapreduce:instancegroup:InstanceCount\n\nappstream:fleet:DesiredCapacity\n\ndynamodb:table:ReadCapacityUnits\n\ndynamodb:table:WriteCapacityUnits\n\ndynamodb:index:ReadCapacityUnits\n\ndynamodb:index:WriteCapacityUnits\n\nrds:cluster:ReadReplicaCount\n\nsagemaker:variant:DesiredInstanceCount\n\ncustom-resource:ResourceType:Property\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits\n\nlambda:function:ProvisionedConcurrency\n\ncassandra:table:ReadCapacityUnits\n\ncassandra:table:WriteCapacityUnits\n\nkafka:broker-storage:VolumeSize\n\nelasticache:replication-group:NodeGroups\n\nelasticache:replication-group:Replicas\n\nneptune:cluster:ReadReplicaCount\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nScalableTargets -> (list)\n\nThe scalable targets that match the request parameters.\n\n(structure)\n\nRepresents a scalable target.\n\nServiceNamespace -> (string)\n\nThe namespace of the Amazon Web Services service that provides the resource, or a custom-resource .\n\nResourceId -> (string)\n\nThe identifier of the resource associated with the scalable target. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\nScalableDimension -> (string)\n\nThe scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nMinCapacity -> (integer)\n\nThe minimum value to scale to in response to a scale-in activity.\n\nMaxCapacity -> (integer)\n\nThe maximum value to scale to in response to a scale-out activity.\n\nRoleARN -> (string)\n\nThe ARN of an IAM role that allows Application Auto Scaling to modify the scalable target on your behalf.\n\nCreationTime -> (timestamp)\n\nThe Unix timestamp for when the scalable target was created.\n\nSuspendedState -> (structure)\n\nSpecifies whether the scaling activities for a scalable target are in a suspended state.\n\nDynamicScalingInSuspended -> (boolean)\n\nWhether scale in by a target tracking scaling policy or a step scaling policy is suspended. Set the value to true if you don’t want Application Auto Scaling to remove capacity when a scaling policy is triggered. The default is false .\n\nDynamicScalingOutSuspended -> (boolean)\n\nWhether scale out by a target tracking scaling policy or a step scaling policy is suspended. Set the value to true if you don’t want Application Auto Scaling to add capacity when a scaling policy is triggered. The default is false .\n\nScheduledScalingSuspended -> (boolean)\n\nWhether scheduled scaling is suspended. Set the value to true if you don’t want Application Auto Scaling to add or remove capacity by initiating scheduled actions. The default is false .\n\nNextToken -> (string)\n\nThe token required to get the next set of results. This value is null if there are no more results to return.",
      "command_examples": "Examples\n\nTo describe scalable targets\n\nThe following describe-scalable-targets example command displays details for the the scalable targets for the ecs service namespace:\n\naws application-autoscaling describe-scalable-targets \\\n    --service-namespace ecs\n\n\nOutput:\n\n{\n    \"ScalableTargets\": [\n        {\n            \"ScalableDimension\": \"ecs:service:DesiredCount\",\n            \"ResourceId\": \"service/default/web-app\",\n            \"RoleARN\": \"arn:aws:iam::123456789012:role/ApplicationAutoscalingECSRole\",\n            \"SuspendedState\": {\n                \"DynamicScalingOutSuspended\": false,\n                \"ScheduledScalingSuspended\": false,\n                \"DynamicScalingInSuspended\": false\n            },\n            \"CreationTime\": 1462558906.199,\n            \"MinCapacity\": 1,\n            \"ServiceNamespace\": \"ecs\",\n            \"MaxCapacity\": 10\n        }\n    ]\n}\n\n\nFor more information, see What Is Application Auto Scaling? in the Application Auto Scaling User Guide."
    },
    {
      "command_name": "describe-scaling-activities",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/describe-scaling-activities.html",
      "command_description": "Description\n\nProvides descriptive information about the scaling activities in the specified namespace from the previous six weeks.\n\nYou can filter the results using ResourceId and ScalableDimension .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\ndescribe-scaling-activities is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: ScalingActivities",
      "command_synopsis": "Synopsis\n  describe-scaling-activities\n--service-namespace <value>\n[--resource-id <value>]\n[--scalable-dimension <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--service-namespace <value>",
        "[--resource-id <value>]",
        "[--scalable-dimension <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--service-namespace (string)\n\nThe namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.\n\nPossible values:\n\necs\n\nelasticmapreduce\n\nec2\n\nappstream\n\ndynamodb\n\nrds\n\nsagemaker\n\ncustom-resource\n\ncomprehend\n\nlambda\n\ncassandra\n\nkafka\n\nelasticache\n\nneptune\n\n--resource-id (string)\n\nThe identifier of the resource associated with the scaling activity. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\n--scalable-dimension (string)\n\nThe scalable dimension. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPossible values:\n\necs:service:DesiredCount\n\nec2:spot-fleet-request:TargetCapacity\n\nelasticmapreduce:instancegroup:InstanceCount\n\nappstream:fleet:DesiredCapacity\n\ndynamodb:table:ReadCapacityUnits\n\ndynamodb:table:WriteCapacityUnits\n\ndynamodb:index:ReadCapacityUnits\n\ndynamodb:index:WriteCapacityUnits\n\nrds:cluster:ReadReplicaCount\n\nsagemaker:variant:DesiredInstanceCount\n\ncustom-resource:ResourceType:Property\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits\n\nlambda:function:ProvisionedConcurrency\n\ncassandra:table:ReadCapacityUnits\n\ncassandra:table:WriteCapacityUnits\n\nkafka:broker-storage:VolumeSize\n\nelasticache:replication-group:NodeGroups\n\nelasticache:replication-group:Replicas\n\nneptune:cluster:ReadReplicaCount\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nScalingActivities -> (list)\n\nA list of scaling activity objects.\n\n(structure)\n\nRepresents a scaling activity.\n\nActivityId -> (string)\n\nThe unique identifier of the scaling activity.\n\nServiceNamespace -> (string)\n\nThe namespace of the Amazon Web Services service that provides the resource, or a custom-resource .\n\nResourceId -> (string)\n\nThe identifier of the resource associated with the scaling activity. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\nScalableDimension -> (string)\n\nThe scalable dimension. This string consists of the service namespace, resource type, and scaling property.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nDescription -> (string)\n\nA simple description of what action the scaling activity intends to accomplish.\n\nCause -> (string)\n\nA simple description of what caused the scaling activity to happen.\n\nStartTime -> (timestamp)\n\nThe Unix timestamp for when the scaling activity began.\n\nEndTime -> (timestamp)\n\nThe Unix timestamp for when the scaling activity ended.\n\nStatusCode -> (string)\n\nIndicates the status of the scaling activity.\n\nStatusMessage -> (string)\n\nA simple message about the current status of the scaling activity.\n\nDetails -> (string)\n\nThe details about the scaling activity.\n\nNextToken -> (string)\n\nThe token required to get the next set of results. This value is null if there are no more results to return.",
      "command_examples": "Examples\n\nExample 1: To describe scaling activities for a scalable target\n\nThe following describe-scaling-activities example displays details for th the scaling activities for an Amazon ECS service called web-app that is running in the default cluster.\n\naws application-autoscaling describe-scaling-activities \\\n    --service-namespace ecs \\\n    --scalable-dimension ecs:service:DesiredCount \\\n    --resource-id service/default/web-app\n\n\nOutput:\n\n{\n    \"ScalingActivities\": [\n        {\n            \"ScalableDimension\": \"ecs:service:DesiredCount\",\n            \"Description\": \"Setting desired count to 1.\",\n            \"ResourceId\": \"service/default/web-app\",\n            \"ActivityId\": \"e6c5f7d1-dbbb-4a3f-89b2-51f33e766399\",\n            \"StartTime\": 1462575838.171,\n            \"ServiceNamespace\": \"ecs\",\n            \"EndTime\": 1462575872.111,\n            \"Cause\": \"monitor alarm web-app-cpu-lt-25 in state ALARM triggered policy web-app-cpu-lt-25\",\n            \"StatusMessage\": \"Successfully set desired count to 1. Change successfully fulfilled by ecs.\",\n            \"StatusCode\": \"Successful\"\n        }\n    ]\n}\n\n\nExample 2: To describe scaling activities triggered by scheduled actions\n\nThe following describe-scaling-activities example describes the scaling activities for the specified DynamoDB table. The output shows scaling activities triggered by two different scheduled actions:\n\naws application-autoscaling describe-scaling-activities \\\n    --service-namespace dynamodb \\\n    --scalable-dimension dynamodb:table:WriteCapacityUnits \\\n    --resource-id table/my-table\n\n\nOutput:\n\n{\n    \"ScalingActivities\": [\n        {\n            \"ScalableDimension\": \"dynamodb:table:WriteCapacityUnits\",\n            \"Description\": \"Setting write capacity units to 10.\",\n            \"ResourceId\": \"table/my-table\",\n            \"ActivityId\": \"4d1308c0-bbcf-4514-a673-b0220ae38547\",\n            \"StartTime\": 1561574415.086,\n            \"ServiceNamespace\": \"dynamodb\",\n            \"EndTime\": 1561574449.51,\n            \"Cause\": \"maximum capacity was set to 10\",\n            \"StatusMessage\": \"Successfully set write capacity units to 10. Change successfully fulfilled by dynamodb.\",\n            \"StatusCode\": \"Successful\"\n        },\n        {\n            \"ScalableDimension\": \"dynamodb:table:WriteCapacityUnits\",\n            \"Description\": \"Setting min capacity to 5 and max capacity to 10\",\n            \"ResourceId\": \"table/my-table\",\n            \"ActivityId\": \"f2b7847b-721d-4e01-8ef0-0c8d3bacc1c7\",\n            \"StartTime\": 1561574414.644,\n            \"ServiceNamespace\": \"dynamodb\",\n            \"Cause\": \"scheduled action name my-second-scheduled-action was triggered\",\n            \"StatusMessage\": \"Successfully set min capacity to 5 and max capacity to 10\",\n            \"StatusCode\": \"Successful\"\n        },\n        {\n            \"ScalableDimension\": \"dynamodb:table:WriteCapacityUnits\",\n            \"Description\": \"Setting write capacity units to 15.\",\n            \"ResourceId\": \"table/my-table\",\n            \"ActivityId\": \"d8ea4de6-9eaa-499f-b466-2cc5e681ba8b\",\n            \"StartTime\": 1561574108.904,\n            \"ServiceNamespace\": \"dynamodb\",\n            \"EndTime\": 1561574140.255,\n            \"Cause\": \"minimum capacity was set to 15\",\n            \"StatusMessage\": \"Successfully set write capacity units to 15. Change successfully fulfilled by dynamodb.\",\n            \"StatusCode\": \"Successful\"\n        },\n        {\n            \"ScalableDimension\": \"dynamodb:table:WriteCapacityUnits\",\n            \"Description\": \"Setting min capacity to 15 and max capacity to 20\",\n            \"ResourceId\": \"table/my-table\",\n            \"ActivityId\": \"3250fd06-6940-4e8e-bb1f-d494db7554d2\",\n            \"StartTime\": 1561574108.512,\n            \"ServiceNamespace\": \"dynamodb\",\n            \"Cause\": \"scheduled action name my-first-scheduled-action was triggered\",\n            \"StatusMessage\": \"Successfully set min capacity to 15 and max capacity to 20\",\n            \"StatusCode\": \"Successful\"\n        }\n    ]\n}\n\n\nFor more information, see Scheduled Scaling in the Application Auto Scaling User Guide."
    },
    {
      "command_name": "describe-scaling-policies",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/describe-scaling-policies.html",
      "command_description": "Description\n\nDescribes the Application Auto Scaling scaling policies for the specified service namespace.\n\nYou can filter the results using ResourceId , ScalableDimension , and PolicyNames .\n\nFor more information, see Target tracking scaling policies and Step scaling policies in the Application Auto Scaling User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\ndescribe-scaling-policies is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: ScalingPolicies",
      "command_synopsis": "Synopsis\n  describe-scaling-policies\n[--policy-names <value>]\n--service-namespace <value>\n[--resource-id <value>]\n[--scalable-dimension <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--policy-names <value>]",
        "--service-namespace <value>",
        "[--resource-id <value>]",
        "[--scalable-dimension <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--policy-names (list)\n\nThe names of the scaling policies to describe.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--service-namespace (string)\n\nThe namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.\n\nPossible values:\n\necs\n\nelasticmapreduce\n\nec2\n\nappstream\n\ndynamodb\n\nrds\n\nsagemaker\n\ncustom-resource\n\ncomprehend\n\nlambda\n\ncassandra\n\nkafka\n\nelasticache\n\nneptune\n\n--resource-id (string)\n\nThe identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\n--scalable-dimension (string)\n\nThe scalable dimension. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPossible values:\n\necs:service:DesiredCount\n\nec2:spot-fleet-request:TargetCapacity\n\nelasticmapreduce:instancegroup:InstanceCount\n\nappstream:fleet:DesiredCapacity\n\ndynamodb:table:ReadCapacityUnits\n\ndynamodb:table:WriteCapacityUnits\n\ndynamodb:index:ReadCapacityUnits\n\ndynamodb:index:WriteCapacityUnits\n\nrds:cluster:ReadReplicaCount\n\nsagemaker:variant:DesiredInstanceCount\n\ncustom-resource:ResourceType:Property\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits\n\nlambda:function:ProvisionedConcurrency\n\ncassandra:table:ReadCapacityUnits\n\ncassandra:table:WriteCapacityUnits\n\nkafka:broker-storage:VolumeSize\n\nelasticache:replication-group:NodeGroups\n\nelasticache:replication-group:Replicas\n\nneptune:cluster:ReadReplicaCount\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents a scaling policy to use with Application Auto Scaling.\n\nFor more information about configuring scaling policies for a specific service, see Getting started with Application Auto Scaling in the Application Auto Scaling User Guide .\n\nPolicyARN -> (string)\n\nThe Amazon Resource Name (ARN) of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nServiceNamespace -> (string)\n\nThe namespace of the Amazon Web Services service that provides the resource, or a custom-resource .\n\nResourceId -> (string)\n\nThe identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\nScalableDimension -> (string)\n\nThe scalable dimension. This string consists of the service namespace, resource type, and scaling property.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPolicyType -> (string)\n\nThe scaling policy type.\n\nStepScalingPolicyConfiguration -> (structure)\n\nA step scaling policy.\n\nAdjustmentType -> (string)\n\nSpecifies how the ScalingAdjustment value in a StepAdjustment is interpreted (for example, an absolute number or a percentage). The valid values are ChangeInCapacity , ExactCapacity , and PercentChangeInCapacity .\n\nAdjustmentType is required if you are adding a new step scaling policy configuration.\n\nStepAdjustments -> (list)\n\nA set of adjustments that enable you to scale based on the size of the alarm breach.\n\nAt least one step adjustment is required if you are adding a new step scaling policy configuration.\n\n(structure)\n\nRepresents a step adjustment for a StepScalingPolicyConfiguration . Describes an adjustment based on the difference between the value of the aggregated CloudWatch metric and the breach threshold that you’ve defined for the alarm.\n\nFor the following examples, suppose that you have an alarm with a breach threshold of 50:\n\nTo trigger the adjustment when the metric is greater than or equal to 50 and less than 60, specify a lower bound of 0 and an upper bound of 10.\n\nTo trigger the adjustment when the metric is greater than 40 and less than or equal to 50, specify a lower bound of -10 and an upper bound of 0.\n\nThere are a few rules for the step adjustments for your step policy:\n\nThe ranges of your step adjustments can’t overlap or have a gap.\n\nAt most one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound.\n\nAt most one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound.\n\nThe upper and lower bound can’t be null in the same step adjustment.\n\nMetricIntervalLowerBound -> (double)\n\nThe lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.\n\nMetricIntervalUpperBound -> (double)\n\nThe upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.\n\nThe upper bound must be greater than the lower bound.\n\nScalingAdjustment -> (integer)\n\nThe amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.\n\nMinAdjustmentMagnitude -> (integer)\n\nThe minimum value to scale by when the adjustment type is PercentChangeInCapacity . For example, suppose that you create a step scaling policy to scale out an Amazon ECS service by 25 percent and you specify a MinAdjustmentMagnitude of 2. If the service has 4 tasks and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a MinAdjustmentMagnitude of 2, Application Auto Scaling scales out the service by 2 tasks.\n\nCooldown -> (integer)\n\nThe amount of time, in seconds, to wait for a previous scaling activity to take effect.\n\nWith scale-out policies, the intention is to continuously (but not excessively) scale out. After Application Auto Scaling successfully scales out using a step scaling policy, it starts to calculate the cooldown time. The scaling policy won’t increase the desired capacity again unless either a larger scale out is triggered or the cooldown period ends. While the cooldown period is in effect, capacity added by the initiating scale-out activity is calculated as part of the desired capacity for the next scale-out activity. For example, when an alarm triggers a step scaling policy to increase the capacity by 2, the scaling activity completes successfully, and a cooldown period starts. If the alarm triggers again during the cooldown period but at a more aggressive step adjustment of 3, the previous increase of 2 is considered part of the current capacity. Therefore, only 1 is added to the capacity.\n\nWith scale-in policies, the intention is to scale in conservatively to protect your application’s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the cooldown period after a scale-in activity, Application Auto Scaling scales out the target immediately. In this case, the cooldown period for the scale-in activity stops and doesn’t complete.\n\nApplication Auto Scaling provides a default value of 600 for Amazon ElastiCache replication groups and a default value of 300 for the following scalable targets:\n\nAppStream 2.0 fleets\n\nAurora DB clusters\n\nECS services\n\nEMR clusters\n\nNeptune clusters\n\nSageMaker endpoint variants\n\nSpot Fleets\n\nCustom resources\n\nFor all other scalable targets, the default value is 0:\n\nAmazon Comprehend document classification and entity recognizer endpoints\n\nDynamoDB tables and global secondary indexes\n\nAmazon Keyspaces tables\n\nLambda provisioned concurrency\n\nAmazon MSK broker storage\n\nMetricAggregationType -> (string)\n\nThe aggregation type for the CloudWatch metrics. Valid values are Minimum , Maximum , and Average . If the aggregation type is null, the value is treated as Average .\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nA target tracking scaling policy.\n\nTargetValue -> (double)\n\nThe target value for the metric. Although this property accepts numbers of type Double, it won’t accept values that are either too small or too large. Values must be in the range of -2^360 to 2^360. The value must be a valid number based on the choice of metric. For example, if the metric is CPU utilization, then the target value is a percent value that represents how much of the CPU can be used before scaling out.\n\nPredefinedMetricSpecification -> (structure)\n\nA predefined metric. You can specify either a predefined metric or a customized metric.\n\nPredefinedMetricType -> (string)\n\nThe metric type. The ALBRequestCountPerTarget metric type applies only to Spot Fleet requests and ECS services.\n\nResourceLabel -> (string)\n\nIdentifies the resource associated with the metric type. You can’t specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group attached to the Spot Fleet request or ECS service.\n\nYou create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is:\n\napp/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff .\n\nWhere:\n\napp/<load-balancer-name>/<load-balancer-id> is the final portion of the load balancer ARN\n\ntargetgroup/<target-group-name>/<target-group-id> is the final portion of the target group ARN.\n\nTo find the ARN for an Application Load Balancer, use the DescribeLoadBalancers API operation. To find the ARN for the target group, use the DescribeTargetGroups API operation.\n\nCustomizedMetricSpecification -> (structure)\n\nA customized metric. You can specify either a predefined metric or a customized metric.\n\nMetricName -> (string)\n\nThe name of the metric.\n\nNamespace -> (string)\n\nThe namespace of the metric.\n\nDimensions -> (list)\n\nThe dimensions of the metric.\n\nConditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.\n\n(structure)\n\nDescribes the dimension names and values associated with a metric.\n\nName -> (string)\n\nThe name of the dimension.\n\nValue -> (string)\n\nThe value of the dimension.\n\nStatistic -> (string)\n\nThe statistic of the metric.\n\nUnit -> (string)\n\nThe unit of the metric.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, to wait for a previous scale-out activity to take effect.\n\nWith the scale-out cooldown period , the intention is to continuously (but not excessively) scale out. After Application Auto Scaling successfully scales out using a target tracking scaling policy, it starts to calculate the cooldown time. The scaling policy won’t increase the desired capacity again unless either a larger scale out is triggered or the cooldown period ends. While the cooldown period is in effect, the capacity added by the initiating scale-out activity is calculated as part of the desired capacity for the next scale-out activity.\n\nApplication Auto Scaling provides a default value of 600 for Amazon ElastiCache replication groups and a default value of 300 for the following scalable targets:\n\nAppStream 2.0 fleets\n\nAurora DB clusters\n\nECS services\n\nEMR clusters\n\nNeptune clusters\n\nSageMaker endpoint variants\n\nSpot Fleets\n\nCustom resources\n\nFor all other scalable targets, the default value is 0:\n\nAmazon Comprehend document classification and entity recognizer endpoints\n\nDynamoDB tables and global secondary indexes\n\nAmazon Keyspaces tables\n\nLambda provisioned concurrency\n\nAmazon MSK broker storage\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale-in activity completes before another scale-in activity can start.\n\nWith the scale-in cooldown period , the intention is to scale in conservatively to protect your application’s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the scale-in cooldown period, Application Auto Scaling scales out the target immediately. In this case, the scale-in cooldown period stops and doesn’t complete.\n\nApplication Auto Scaling provides a default value of 600 for Amazon ElastiCache replication groups and a default value of 300 for the following scalable targets:\n\nAppStream 2.0 fleets\n\nAurora DB clusters\n\nECS services\n\nEMR clusters\n\nNeptune clusters\n\nSageMaker endpoint variants\n\nSpot Fleets\n\nCustom resources\n\nFor all other scalable targets, the default value is 0:\n\nAmazon Comprehend document classification and entity recognizer endpoints\n\nDynamoDB tables and global secondary indexes\n\nAmazon Keyspaces tables\n\nLambda provisioned concurrency\n\nAmazon MSK broker storage\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking scaling policy is disabled. If the value is true , scale in is disabled and the target tracking scaling policy won’t remove capacity from the scalable target. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable target. The default value is false .\n\nAlarms -> (list)\n\nThe CloudWatch alarms associated with the scaling policy.\n\n(structure)\n\nRepresents a CloudWatch alarm associated with a scaling policy.\n\nAlarmName -> (string)\n\nThe name of the alarm.\n\nAlarmARN -> (string)\n\nThe Amazon Resource Name (ARN) of the alarm.\n\nCreationTime -> (timestamp)\n\nThe Unix timestamp for when the scaling policy was created.\n\nNextToken -> (string)\n\nThe token required to get the next set of results. This value is null if there are no more results to return.",
      "command_examples": "Examples\n\nTo describe scaling policies\n\nThis example command describes the scaling policies for the ecs service namespace.\n\nCommand:\n\naws application-autoscaling describe-scaling-policies --service-namespace ecs\n\n\nOutput:\n\n{\n    \"ScalingPolicies\": [\n        {\n            \"PolicyName\": \"web-app-cpu-gt-75\",\n            \"ScalableDimension\": \"ecs:service:DesiredCount\",\n            \"ResourceId\": \"service/default/web-app\",\n            \"CreationTime\": 1462561899.23,\n            \"StepScalingPolicyConfiguration\": {\n                \"Cooldown\": 60,\n                \"StepAdjustments\": [\n                    {\n                        \"ScalingAdjustment\": 200,\n                        \"MetricIntervalLowerBound\": 0.0\n                    }\n                ],\n                \"AdjustmentType\": \"PercentChangeInCapacity\"\n            },\n            \"PolicyARN\": \"arn:aws:autoscaling:us-west-2:012345678910:scalingPolicy:6d8972f3-efc8-437c-92d1-6270f29a66e7:resource/ecs/service/default/web-app:policyName/web-app-cpu-gt-75\",\n            \"PolicyType\": \"StepScaling\",\n            \"Alarms\": [\n                {\n                    \"AlarmName\": \"web-app-cpu-gt-75\",\n                    \"AlarmARN\": \"arn:aws:cloudwatch:us-west-2:012345678910:alarm:web-app-cpu-gt-75\"\n                }\n            ],\n            \"ServiceNamespace\": \"ecs\"\n        },\n        {\n            \"PolicyName\": \"web-app-cpu-lt-25\",\n            \"ScalableDimension\": \"ecs:service:DesiredCount\",\n            \"ResourceId\": \"service/default/web-app\",\n            \"CreationTime\": 1462562575.099,\n            \"StepScalingPolicyConfiguration\": {\n                \"Cooldown\": 1,\n                \"StepAdjustments\": [\n                    {\n                        \"ScalingAdjustment\": -50,\n                        \"MetricIntervalUpperBound\": 0.0\n                    }\n                ],\n                \"AdjustmentType\": \"PercentChangeInCapacity\"\n            },\n            \"PolicyARN\": \"arn:aws:autoscaling:us-west-2:012345678910:scalingPolicy:6d8972f3-efc8-437c-92d1-6270f29a66e7:resource/ecs/service/default/web-app:policyName/web-app-cpu-lt-25\",\n            \"PolicyType\": \"StepScaling\",\n            \"Alarms\": [\n                {\n                    \"AlarmName\": \"web-app-cpu-lt-25\",\n                    \"AlarmARN\": \"arn:aws:cloudwatch:us-west-2:012345678910:alarm:web-app-cpu-lt-25\"\n                }\n            ],\n            \"ServiceNamespace\": \"ecs\"\n        }\n    ]\n}\n"
    },
    {
      "command_name": "describe-scheduled-actions",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/describe-scheduled-actions.html",
      "command_description": "Description\n\nDescribes the Application Auto Scaling scheduled actions for the specified service namespace.\n\nYou can filter the results using the ResourceId , ScalableDimension , and ScheduledActionNames parameters.\n\nFor more information, see Scheduled scaling and Managing scheduled scaling in the Application Auto Scaling User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\ndescribe-scheduled-actions is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: ScheduledActions",
      "command_synopsis": "Synopsis\n  describe-scheduled-actions\n[--scheduled-action-names <value>]\n--service-namespace <value>\n[--resource-id <value>]\n[--scalable-dimension <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--scheduled-action-names <value>]",
        "--service-namespace <value>",
        "[--resource-id <value>]",
        "[--scalable-dimension <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--scheduled-action-names (list)\n\nThe names of the scheduled actions to describe.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--service-namespace (string)\n\nThe namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.\n\nPossible values:\n\necs\n\nelasticmapreduce\n\nec2\n\nappstream\n\ndynamodb\n\nrds\n\nsagemaker\n\ncustom-resource\n\ncomprehend\n\nlambda\n\ncassandra\n\nkafka\n\nelasticache\n\nneptune\n\n--resource-id (string)\n\nThe identifier of the resource associated with the scheduled action. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\n--scalable-dimension (string)\n\nThe scalable dimension. This string consists of the service namespace, resource type, and scaling property. If you specify a scalable dimension, you must also specify a resource ID.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPossible values:\n\necs:service:DesiredCount\n\nec2:spot-fleet-request:TargetCapacity\n\nelasticmapreduce:instancegroup:InstanceCount\n\nappstream:fleet:DesiredCapacity\n\ndynamodb:table:ReadCapacityUnits\n\ndynamodb:table:WriteCapacityUnits\n\ndynamodb:index:ReadCapacityUnits\n\ndynamodb:index:WriteCapacityUnits\n\nrds:cluster:ReadReplicaCount\n\nsagemaker:variant:DesiredInstanceCount\n\ncustom-resource:ResourceType:Property\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits\n\nlambda:function:ProvisionedConcurrency\n\ncassandra:table:ReadCapacityUnits\n\ncassandra:table:WriteCapacityUnits\n\nkafka:broker-storage:VolumeSize\n\nelasticache:replication-group:NodeGroups\n\nelasticache:replication-group:Replicas\n\nneptune:cluster:ReadReplicaCount\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nScheduledActions -> (list)\n\nInformation about the scheduled actions.\n\n(structure)\n\nRepresents a scheduled action.\n\nScheduledActionName -> (string)\n\nThe name of the scheduled action.\n\nScheduledActionARN -> (string)\n\nThe Amazon Resource Name (ARN) of the scheduled action.\n\nServiceNamespace -> (string)\n\nThe namespace of the Amazon Web Services service that provides the resource, or a custom-resource .\n\nSchedule -> (string)\n\nThe schedule for this action. The following formats are supported:\n\nAt expressions - “at(*yyyy* -*mm* -*dd* T*hh* :*mm* :*ss* ) “\n\nRate expressions - “rate(*value*  *unit* ) “\n\nCron expressions - “cron(*fields* ) “\n\nAt expressions are useful for one-time schedules. Cron expressions are useful for scheduled actions that run periodically at a specified date and time, and rate expressions are useful for scheduled actions that run at a regular interval.\n\nAt and cron expressions use Universal Coordinated Time (UTC) by default.\n\nThe cron format consists of six fields separated by white spaces: [Minutes] [Hours] [Day_of_Month] [Month] [Day_of_Week] [Year].\n\nFor rate expressions, value is a positive integer and unit is minute | minutes | hour | hours | day | days .\n\nFor more information and examples, see Example scheduled actions for Application Auto Scaling in the Application Auto Scaling User Guide .\n\nTimezone -> (string)\n\nThe time zone used when referring to the date and time of a scheduled action, when the scheduled action uses an at or cron expression.\n\nResourceId -> (string)\n\nThe identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\nScalableDimension -> (string)\n\nThe scalable dimension. This string consists of the service namespace, resource type, and scaling property.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nStartTime -> (timestamp)\n\nThe date and time that the action is scheduled to begin, in UTC.\n\nEndTime -> (timestamp)\n\nThe date and time that the action is scheduled to end, in UTC.\n\nScalableTargetAction -> (structure)\n\nThe new minimum and maximum capacity. You can set both values or just one. At the scheduled time, if the current capacity is below the minimum capacity, Application Auto Scaling scales out to the minimum capacity. If the current capacity is above the maximum capacity, Application Auto Scaling scales in to the maximum capacity.\n\nMinCapacity -> (integer)\n\nThe minimum capacity.\n\nFor certain resources, the minimum value allowed is 0. This includes Lambda provisioned concurrency, Spot Fleet, ECS services, Aurora DB clusters, EMR clusters, and custom resources. For all other resources, the minimum value allowed is 1.\n\nMaxCapacity -> (integer)\n\nThe maximum capacity.\n\nAlthough you can specify a large maximum capacity, note that service quotas may impose lower limits. Each service has its own default quotas for the maximum capacity of the resource. If you want to specify a higher limit, you can request an increase. For more information, consult the documentation for that service. For information about the default quotas for each service, see Service Endpoints and Quotas in the Amazon Web Services General Reference .\n\nCreationTime -> (timestamp)\n\nThe date and time that the scheduled action was created.\n\nNextToken -> (string)\n\nThe token required to get the next set of results. This value is null if there are no more results to return.",
      "command_examples": "Examples\n\nTo describe scheduled actions\n\nThe following describe-scheduled-actions example displays details for the scheduled actions for the specified service namespace:\n\naws application-autoscaling describe-scheduled-actions \\\n    --service-namespace dynamodb\n\n\nOutput:\n\n{\n    \"ScheduledActions\": [\n        {\n            \"ScalableDimension\": \"dynamodb:table:WriteCapacityUnits\",\n            \"Schedule\": \"at(2019-05-20T18:35:00)\",\n            \"ResourceId\": \"table/my-table\",\n            \"CreationTime\": 1561571888.361,\n            \"ScheduledActionARN\": \"arn:aws:autoscaling:us-west-2:123456789012:scheduledAction:2d36aa3b-cdf9-4565-b290-81db519b227d:resource/dynamodb/table/my-table:scheduledActionName/my-first-scheduled-action\",\n            \"ScalableTargetAction\": {\n                \"MinCapacity\": 15,\n                \"MaxCapacity\": 20\n            },\n            \"ScheduledActionName\": \"my-first-scheduled-action\",\n            \"ServiceNamespace\": \"dynamodb\"\n        },\n        {\n            \"ScalableDimension\": \"dynamodb:table:WriteCapacityUnits\",\n            \"Schedule\": \"at(2019-05-20T18:40:00)\",\n            \"ResourceId\": \"table/my-table\",\n            \"CreationTime\": 1561571946.021,\n            \"ScheduledActionARN\": \"arn:aws:autoscaling:us-west-2:123456789012:scheduledAction:2d36aa3b-cdf9-4565-b290-81db519b227d:resource/dynamodb/table/my-table:scheduledActionName/my-second-scheduled-action\",\n            \"ScalableTargetAction\": {\n                \"MinCapacity\": 5,\n                \"MaxCapacity\": 10\n            },\n            \"ScheduledActionName\": \"my-second-scheduled-action\",\n            \"ServiceNamespace\": \"dynamodb\"\n        }\n    ]\n}\n\n\nFor more information, see Scheduled Scaling in the Application Auto Scaling User Guide."
    },
    {
      "command_name": "put-scaling-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/put-scaling-policy.html",
      "command_description": "Description\n\nCreates or updates a scaling policy for an Application Auto Scaling scalable target.\n\nEach scalable target is identified by a service namespace, resource ID, and scalable dimension. A scaling policy applies to the scalable target identified by those three attributes. You cannot create a scaling policy until you have registered the resource as a scalable target.\n\nMultiple scaling policies can be in force at the same time for the same scalable target. You can have one or more target tracking scaling policies, one or more step scaling policies, or both. However, there is a chance that multiple policies could conflict, instructing the scalable target to scale out or in at the same time. Application Auto Scaling gives precedence to the policy that provides the largest capacity for both scale out and scale in. For example, if one policy increases capacity by 3, another policy increases capacity by 200 percent, and the current capacity is 10, Application Auto Scaling uses the policy with the highest calculated capacity (200% of 10 = 20) and scales out to 30.\n\nWe recommend caution, however, when using target tracking scaling policies with step scaling policies because conflicts between these policies can cause undesirable behavior. For example, if the step scaling policy initiates a scale-in activity before the target tracking policy is ready to scale in, the scale-in activity will not be blocked. After the scale-in activity completes, the target tracking policy could instruct the scalable target to scale out again.\n\nFor more information, see Target tracking scaling policies and Step scaling policies in the Application Auto Scaling User Guide .\n\nNote\n\nIf a scalable target is deregistered, the scalable target is no longer available to execute scaling policies. Any scaling policies that were specified for the scalable target are deleted.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-scaling-policy\n--policy-name <value>\n--service-namespace <value>\n--resource-id <value>\n--scalable-dimension <value>\n[--policy-type <value>]\n[--step-scaling-policy-configuration <value>]\n[--target-tracking-scaling-policy-configuration <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--policy-name <value>",
        "--service-namespace <value>",
        "--resource-id <value>",
        "--scalable-dimension <value>",
        "[--policy-type <value>]",
        "[--step-scaling-policy-configuration <value>]",
        "[--target-tracking-scaling-policy-configuration <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--policy-name (string)\n\nThe name of the scaling policy.\n\n--service-namespace (string)\n\nThe namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.\n\nPossible values:\n\necs\n\nelasticmapreduce\n\nec2\n\nappstream\n\ndynamodb\n\nrds\n\nsagemaker\n\ncustom-resource\n\ncomprehend\n\nlambda\n\ncassandra\n\nkafka\n\nelasticache\n\nneptune\n\n--resource-id (string)\n\nThe identifier of the resource associated with the scaling policy. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\n--scalable-dimension (string)\n\nThe scalable dimension. This string consists of the service namespace, resource type, and scaling property.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPossible values:\n\necs:service:DesiredCount\n\nec2:spot-fleet-request:TargetCapacity\n\nelasticmapreduce:instancegroup:InstanceCount\n\nappstream:fleet:DesiredCapacity\n\ndynamodb:table:ReadCapacityUnits\n\ndynamodb:table:WriteCapacityUnits\n\ndynamodb:index:ReadCapacityUnits\n\ndynamodb:index:WriteCapacityUnits\n\nrds:cluster:ReadReplicaCount\n\nsagemaker:variant:DesiredInstanceCount\n\ncustom-resource:ResourceType:Property\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits\n\nlambda:function:ProvisionedConcurrency\n\ncassandra:table:ReadCapacityUnits\n\ncassandra:table:WriteCapacityUnits\n\nkafka:broker-storage:VolumeSize\n\nelasticache:replication-group:NodeGroups\n\nelasticache:replication-group:Replicas\n\nneptune:cluster:ReadReplicaCount\n\n--policy-type (string)\n\nThe policy type. This parameter is required if you are creating a scaling policy.\n\nThe following policy types are supported:\n\nTargetTrackingScaling —Not supported for Amazon EMR\n\nStepScaling —Not supported for DynamoDB, Amazon Comprehend, Lambda, Amazon Keyspaces, Amazon MSK, Amazon ElastiCache, or Neptune.\n\nFor more information, see Target tracking scaling policies and Step scaling policies in the Application Auto Scaling User Guide .\n\nPossible values:\n\nStepScaling\n\nTargetTrackingScaling\n\n--step-scaling-policy-configuration (structure)\n\nA step scaling policy.\n\nThis parameter is required if you are creating a policy and the policy type is StepScaling .\n\nAdjustmentType -> (string)\n\nSpecifies how the ScalingAdjustment value in a StepAdjustment is interpreted (for example, an absolute number or a percentage). The valid values are ChangeInCapacity , ExactCapacity , and PercentChangeInCapacity .\n\nAdjustmentType is required if you are adding a new step scaling policy configuration.\n\nStepAdjustments -> (list)\n\nA set of adjustments that enable you to scale based on the size of the alarm breach.\n\nAt least one step adjustment is required if you are adding a new step scaling policy configuration.\n\n(structure)\n\nRepresents a step adjustment for a StepScalingPolicyConfiguration . Describes an adjustment based on the difference between the value of the aggregated CloudWatch metric and the breach threshold that you’ve defined for the alarm.\n\nFor the following examples, suppose that you have an alarm with a breach threshold of 50:\n\nTo trigger the adjustment when the metric is greater than or equal to 50 and less than 60, specify a lower bound of 0 and an upper bound of 10.\n\nTo trigger the adjustment when the metric is greater than 40 and less than or equal to 50, specify a lower bound of -10 and an upper bound of 0.\n\nThere are a few rules for the step adjustments for your step policy:\n\nThe ranges of your step adjustments can’t overlap or have a gap.\n\nAt most one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound.\n\nAt most one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound.\n\nThe upper and lower bound can’t be null in the same step adjustment.\n\nMetricIntervalLowerBound -> (double)\n\nThe lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.\n\nMetricIntervalUpperBound -> (double)\n\nThe upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity.\n\nThe upper bound must be greater than the lower bound.\n\nScalingAdjustment -> (integer)\n\nThe amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a positive value.\n\nMinAdjustmentMagnitude -> (integer)\n\nThe minimum value to scale by when the adjustment type is PercentChangeInCapacity . For example, suppose that you create a step scaling policy to scale out an Amazon ECS service by 25 percent and you specify a MinAdjustmentMagnitude of 2. If the service has 4 tasks and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a MinAdjustmentMagnitude of 2, Application Auto Scaling scales out the service by 2 tasks.\n\nCooldown -> (integer)\n\nThe amount of time, in seconds, to wait for a previous scaling activity to take effect.\n\nWith scale-out policies, the intention is to continuously (but not excessively) scale out. After Application Auto Scaling successfully scales out using a step scaling policy, it starts to calculate the cooldown time. The scaling policy won’t increase the desired capacity again unless either a larger scale out is triggered or the cooldown period ends. While the cooldown period is in effect, capacity added by the initiating scale-out activity is calculated as part of the desired capacity for the next scale-out activity. For example, when an alarm triggers a step scaling policy to increase the capacity by 2, the scaling activity completes successfully, and a cooldown period starts. If the alarm triggers again during the cooldown period but at a more aggressive step adjustment of 3, the previous increase of 2 is considered part of the current capacity. Therefore, only 1 is added to the capacity.\n\nWith scale-in policies, the intention is to scale in conservatively to protect your application’s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the cooldown period after a scale-in activity, Application Auto Scaling scales out the target immediately. In this case, the cooldown period for the scale-in activity stops and doesn’t complete.\n\nApplication Auto Scaling provides a default value of 600 for Amazon ElastiCache replication groups and a default value of 300 for the following scalable targets:\n\nAppStream 2.0 fleets\n\nAurora DB clusters\n\nECS services\n\nEMR clusters\n\nNeptune clusters\n\nSageMaker endpoint variants\n\nSpot Fleets\n\nCustom resources\n\nFor all other scalable targets, the default value is 0:\n\nAmazon Comprehend document classification and entity recognizer endpoints\n\nDynamoDB tables and global secondary indexes\n\nAmazon Keyspaces tables\n\nLambda provisioned concurrency\n\nAmazon MSK broker storage\n\nMetricAggregationType -> (string)\n\nThe aggregation type for the CloudWatch metrics. Valid values are Minimum , Maximum , and Average . If the aggregation type is null, the value is treated as Average .\n\nShorthand Syntax:\n\nAdjustmentType=string,StepAdjustments=[{MetricIntervalLowerBound=double,MetricIntervalUpperBound=double,ScalingAdjustment=integer},{MetricIntervalLowerBound=double,MetricIntervalUpperBound=double,ScalingAdjustment=integer}],MinAdjustmentMagnitude=integer,Cooldown=integer,MetricAggregationType=string\n\n\nJSON Syntax:\n\n{\n  \"AdjustmentType\": \"ChangeInCapacity\"|\"PercentChangeInCapacity\"|\"ExactCapacity\",\n  \"StepAdjustments\": [\n    {\n      \"MetricIntervalLowerBound\": double,\n      \"MetricIntervalUpperBound\": double,\n      \"ScalingAdjustment\": integer\n    }\n    ...\n  ],\n  \"MinAdjustmentMagnitude\": integer,\n  \"Cooldown\": integer,\n  \"MetricAggregationType\": \"Average\"|\"Minimum\"|\"Maximum\"\n}\n\n\n--target-tracking-scaling-policy-configuration (structure)\n\nA target tracking scaling policy. Includes support for predefined or customized metrics.\n\nThis parameter is required if you are creating a policy and the policy type is TargetTrackingScaling .\n\nTargetValue -> (double)\n\nThe target value for the metric. Although this property accepts numbers of type Double, it won’t accept values that are either too small or too large. Values must be in the range of -2^360 to 2^360. The value must be a valid number based on the choice of metric. For example, if the metric is CPU utilization, then the target value is a percent value that represents how much of the CPU can be used before scaling out.\n\nPredefinedMetricSpecification -> (structure)\n\nA predefined metric. You can specify either a predefined metric or a customized metric.\n\nPredefinedMetricType -> (string)\n\nThe metric type. The ALBRequestCountPerTarget metric type applies only to Spot Fleet requests and ECS services.\n\nResourceLabel -> (string)\n\nIdentifies the resource associated with the metric type. You can’t specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group attached to the Spot Fleet request or ECS service.\n\nYou create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is:\n\napp/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff .\n\nWhere:\n\napp/<load-balancer-name>/<load-balancer-id> is the final portion of the load balancer ARN\n\ntargetgroup/<target-group-name>/<target-group-id> is the final portion of the target group ARN.\n\nTo find the ARN for an Application Load Balancer, use the DescribeLoadBalancers API operation. To find the ARN for the target group, use the DescribeTargetGroups API operation.\n\nCustomizedMetricSpecification -> (structure)\n\nA customized metric. You can specify either a predefined metric or a customized metric.\n\nMetricName -> (string)\n\nThe name of the metric.\n\nNamespace -> (string)\n\nThe namespace of the metric.\n\nDimensions -> (list)\n\nThe dimensions of the metric.\n\nConditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.\n\n(structure)\n\nDescribes the dimension names and values associated with a metric.\n\nName -> (string)\n\nThe name of the dimension.\n\nValue -> (string)\n\nThe value of the dimension.\n\nStatistic -> (string)\n\nThe statistic of the metric.\n\nUnit -> (string)\n\nThe unit of the metric.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, to wait for a previous scale-out activity to take effect.\n\nWith the scale-out cooldown period , the intention is to continuously (but not excessively) scale out. After Application Auto Scaling successfully scales out using a target tracking scaling policy, it starts to calculate the cooldown time. The scaling policy won’t increase the desired capacity again unless either a larger scale out is triggered or the cooldown period ends. While the cooldown period is in effect, the capacity added by the initiating scale-out activity is calculated as part of the desired capacity for the next scale-out activity.\n\nApplication Auto Scaling provides a default value of 600 for Amazon ElastiCache replication groups and a default value of 300 for the following scalable targets:\n\nAppStream 2.0 fleets\n\nAurora DB clusters\n\nECS services\n\nEMR clusters\n\nNeptune clusters\n\nSageMaker endpoint variants\n\nSpot Fleets\n\nCustom resources\n\nFor all other scalable targets, the default value is 0:\n\nAmazon Comprehend document classification and entity recognizer endpoints\n\nDynamoDB tables and global secondary indexes\n\nAmazon Keyspaces tables\n\nLambda provisioned concurrency\n\nAmazon MSK broker storage\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale-in activity completes before another scale-in activity can start.\n\nWith the scale-in cooldown period , the intention is to scale in conservatively to protect your application’s availability, so scale-in activities are blocked until the cooldown period has expired. However, if another alarm triggers a scale-out activity during the scale-in cooldown period, Application Auto Scaling scales out the target immediately. In this case, the scale-in cooldown period stops and doesn’t complete.\n\nApplication Auto Scaling provides a default value of 600 for Amazon ElastiCache replication groups and a default value of 300 for the following scalable targets:\n\nAppStream 2.0 fleets\n\nAurora DB clusters\n\nECS services\n\nEMR clusters\n\nNeptune clusters\n\nSageMaker endpoint variants\n\nSpot Fleets\n\nCustom resources\n\nFor all other scalable targets, the default value is 0:\n\nAmazon Comprehend document classification and entity recognizer endpoints\n\nDynamoDB tables and global secondary indexes\n\nAmazon Keyspaces tables\n\nLambda provisioned concurrency\n\nAmazon MSK broker storage\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking scaling policy is disabled. If the value is true , scale in is disabled and the target tracking scaling policy won’t remove capacity from the scalable target. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable target. The default value is false .\n\nJSON Syntax:\n\n{\n  \"TargetValue\": double,\n  \"PredefinedMetricSpecification\": {\n    \"PredefinedMetricType\": \"DynamoDBReadCapacityUtilization\"|\"DynamoDBWriteCapacityUtilization\"|\"ALBRequestCountPerTarget\"|\"RDSReaderAverageCPUUtilization\"|\"RDSReaderAverageDatabaseConnections\"|\"EC2SpotFleetRequestAverageCPUUtilization\"|\"EC2SpotFleetRequestAverageNetworkIn\"|\"EC2SpotFleetRequestAverageNetworkOut\"|\"SageMakerVariantInvocationsPerInstance\"|\"ECSServiceAverageCPUUtilization\"|\"ECSServiceAverageMemoryUtilization\"|\"AppStreamAverageCapacityUtilization\"|\"ComprehendInferenceUtilization\"|\"LambdaProvisionedConcurrencyUtilization\"|\"CassandraReadCapacityUtilization\"|\"CassandraWriteCapacityUtilization\"|\"KafkaBrokerStorageUtilization\"|\"ElastiCachePrimaryEngineCPUUtilization\"|\"ElastiCacheReplicaEngineCPUUtilization\"|\"ElastiCacheDatabaseMemoryUsageCountedForEvictPercentage\"|\"NeptuneReaderAverageCPUUtilization\",\n    \"ResourceLabel\": \"string\"\n  },\n  \"CustomizedMetricSpecification\": {\n    \"MetricName\": \"string\",\n    \"Namespace\": \"string\",\n    \"Dimensions\": [\n      {\n        \"Name\": \"string\",\n        \"Value\": \"string\"\n      }\n      ...\n    ],\n    \"Statistic\": \"Average\"|\"Minimum\"|\"Maximum\"|\"SampleCount\"|\"Sum\",\n    \"Unit\": \"string\"\n  },\n  \"ScaleOutCooldown\": integer,\n  \"ScaleInCooldown\": integer,\n  \"DisableScaleIn\": true|false\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nPolicyARN -> (string)\n\nThe Amazon Resource Name (ARN) of the resulting scaling policy.\n\nAlarms -> (list)\n\nThe CloudWatch alarms created for the target tracking scaling policy.\n\n(structure)\n\nRepresents a CloudWatch alarm associated with a scaling policy.\n\nAlarmName -> (string)\n\nThe name of the alarm.\n\nAlarmARN -> (string)\n\nThe Amazon Resource Name (ARN) of the alarm.",
      "command_examples": "Examples\n\nExample 1: To apply a target tracking scaling policy with a predefined metric specification\n\nThe following put-scaling-policy example applies a target tracking scaling policy with a predefined metric specification to an Amazon ECS service called web-app in the default cluster. The policy keeps the average CPU utilization of the service at 75 percent, with scale-out and scale-in cooldown periods of 60 seconds. The output contains the ARNs and names of the two CloudWatch alarms created on your behalf.\n\naws application-autoscaling put-scaling-policy --service-namespace ecs \\\n--scalable-dimension ecs:service:DesiredCount \\\n--resource-id service/default/web-app \\\n--policy-name cpu75-target-tracking-scaling-policy --policy-type TargetTrackingScaling \\\n--target-tracking-scaling-policy-configuration file://config.json\n\n\nThis example assumes that you have a config.json file in the current directory with the following contents:\n\n{\n     \"TargetValue\": 75.0,\n     \"PredefinedMetricSpecification\": {\n         \"PredefinedMetricType\": \"ECSServiceAverageCPUUtilization\"\n     },\n     \"ScaleOutCooldown\": 60,\n    \"ScaleInCooldown\": 60\n}\n\n\nOutput:\n\n{\n    \"PolicyARN\": \"arn:aws:autoscaling:us-west-2:012345678910:scalingPolicy:6d8972f3-efc8-437c-92d1-6270f29a66e7:resource/ecs/service/default/web-app:policyName/cpu75-target-tracking-scaling-policy\",\n    \"Alarms\": [\n        {\n            \"AlarmARN\": \"arn:aws:cloudwatch:us-west-2:012345678910:alarm:TargetTracking-service/default/web-app-AlarmHigh-d4f0770c-b46e-434a-a60f-3b36d653feca\",\n            \"AlarmName\": \"TargetTracking-service/default/web-app-AlarmHigh-d4f0770c-b46e-434a-a60f-3b36d653feca\"\n        },\n        {\n            \"AlarmARN\": \"arn:aws:cloudwatch:us-west-2:012345678910:alarm:TargetTracking-service/default/web-app-AlarmLow-1b437334-d19b-4a63-a812-6c67aaf2910d\",\n            \"AlarmName\": \"TargetTracking-service/default/web-app-AlarmLow-1b437334-d19b-4a63-a812-6c67aaf2910d\"\n        }\n    ]\n}\n\n\nExample 2: To apply a target tracking scaling policy with a customized metric specification\n\nThe following put-scaling-policy example applies a target tracking scaling policy with a customized metric specification to an Amazon ECS service called web-app in the default cluster. The policy keeps the average utilization of the service at 75 percent, with scale-out and scale-in cooldown periods of 60 seconds. The output contains the ARNs and names of the two CloudWatch alarms created on your behalf.\n\naws application-autoscaling put-scaling-policy --service-namespace ecs \\\n--scalable-dimension ecs:service:DesiredCount \\\n--resource-id service/default/web-app \\\n--policy-name cms75-target-tracking-scaling-policy\n--policy-type TargetTrackingScaling \\\n--target-tracking-scaling-policy-configuration file://config.json\n\n\nThis example assumes that you have a config.json file in the current directory with the following contents:\n\n{\n    \"TargetValue\":75.0,\n    \"CustomizedMetricSpecification\":{\n        \"MetricName\":\"MyUtilizationMetric\",\n        \"Namespace\":\"MyNamespace\",\n        \"Dimensions\": [\n            {\n                \"Name\":\"MyOptionalMetricDimensionName\",\n                \"Value\":\"MyOptionalMetricDimensionValue\"\n            }\n        ],\n        \"Statistic\":\"Average\",\n        \"Unit\":\"Percent\"\n    },\n    \"ScaleOutCooldown\": 60,\n    \"ScaleInCooldown\": 60\n}\n\n\nOutput:\n\n{\n    \"PolicyARN\": \"arn:aws:autoscaling:us-west-2:012345678910:scalingPolicy: 8784a896-b2ba-47a1-b08c-27301cc499a1:resource/ecs/service/default/web-app:policyName/cms75-target-tracking-scaling-policy\",\n    \"Alarms\": [\n        {\n            \"AlarmARN\": \"arn:aws:cloudwatch:us-west-2:012345678910:alarm:TargetTracking-service/default/web-app-AlarmHigh-9bc77b56-0571-4276-ba0f-d4178882e0a0\",\n            \"AlarmName\": \"TargetTracking-service/default/web-app-AlarmHigh-9bc77b56-0571-4276-ba0f-d4178882e0a0\"\n        },\n        {\n            \"AlarmARN\": \"arn:aws:cloudwatch:us-west-2:012345678910:alarm:TargetTracking-service/default/web-app-AlarmLow-9b6ad934-6d37-438e-9e05-02836ddcbdc4\",\n            \"AlarmName\": \"TargetTracking-service/default/web-app-AlarmLow-9b6ad934-6d37-438e-9e05-02836ddcbdc4\"\n        }\n    ]\n}\n\n\nExample 3: To apply a target tracking scaling policy for scale out only\n\nThe following put-scaling-policy example applies a target tracking scaling policy to an Amazon ECS service called web-app in the default cluster. The policy is used to scale out the ECS service when the RequestCountPerTarget metric from the Application Load Balancer exceeds the threshold. The output contains the ARN and name of the CloudWatch alarm created on your behalf.\n\naws application-autoscaling put-scaling-policy \\\n    --service-namespace ecs \\\n    --scalable-dimension ecs:service:DesiredCount \\\n    --resource-id service/default/web-app \\\n    --policy-name alb-scale-out-target-tracking-scaling-policy \\\n    --policy-type TargetTrackingScaling \\\n    --target-tracking-scaling-policy-configuration file://config.json\n\n\nContents of config.json:\n\n{\n     \"TargetValue\": 1000.0,\n     \"PredefinedMetricSpecification\": {\n         \"PredefinedMetricType\": \"ALBRequestCountPerTarget\",\n         \"ResourceLabel\": \"app/EC2Co-EcsEl-1TKLTMITMM0EO/f37c06a68c1748aa/targetgroup/EC2Co-Defau-LDNM7Q3ZH1ZN/6d4ea56ca2d6a18d\"\n     },\n     \"ScaleOutCooldown\": 60,\n    \"ScaleInCooldown\": 60,\n    \"DisableScaleIn\": true\n}\n\n\nOutput:\n\n{\n    \"PolicyARN\": \"arn:aws:autoscaling:us-west-2:123456789012:scalingPolicy:6d8972f3-efc8-437c-92d1-6270f29a66e7:resource/ecs/service/default/web-app:policyName/alb-scale-out-target-tracking-scaling-policy\",\n    \"Alarms\": [\n        {\n            \"AlarmName\": \"TargetTracking-service/default/web-app-AlarmHigh-d4f0770c-b46e-434a-a60f-3b36d653feca\",\n            \"AlarmARN\": \"arn:aws:cloudwatch:us-west-2:123456789012:alarm:TargetTracking-service/default/web-app-AlarmHigh-d4f0770c-b46e-434a-a60f-3b36d653feca\"\n        }\n    ]\n}\n\n\nFor more information, see Target Tracking Scaling Policies for Application Auto Scaling in the AWS Application Auto Scaling User Guide."
    },
    {
      "command_name": "put-scheduled-action",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/put-scheduled-action.html",
      "command_description": "Description\n\nCreates or updates a scheduled action for an Application Auto Scaling scalable target.\n\nEach scalable target is identified by a service namespace, resource ID, and scalable dimension. A scheduled action applies to the scalable target identified by those three attributes. You cannot create a scheduled action until you have registered the resource as a scalable target.\n\nWhen start and end times are specified with a recurring schedule using a cron expression or rates, they form the boundaries for when the recurring action starts and stops.\n\nTo update a scheduled action, specify the parameters that you want to change. If you don’t specify start and end times, the old values are deleted.\n\nFor more information, see Scheduled scaling in the Application Auto Scaling User Guide .\n\nNote\n\nIf a scalable target is deregistered, the scalable target is no longer available to run scheduled actions. Any scheduled actions that were specified for the scalable target are deleted.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-scheduled-action\n--service-namespace <value>\n[--schedule <value>]\n[--timezone <value>]\n--scheduled-action-name <value>\n--resource-id <value>\n--scalable-dimension <value>\n[--start-time <value>]\n[--end-time <value>]\n[--scalable-target-action <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--service-namespace <value>",
        "[--schedule <value>]",
        "[--timezone <value>]",
        "--scheduled-action-name <value>",
        "--resource-id <value>",
        "--scalable-dimension <value>",
        "[--start-time <value>]",
        "[--end-time <value>]",
        "[--scalable-target-action <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--service-namespace (string)\n\nThe namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.\n\nPossible values:\n\necs\n\nelasticmapreduce\n\nec2\n\nappstream\n\ndynamodb\n\nrds\n\nsagemaker\n\ncustom-resource\n\ncomprehend\n\nlambda\n\ncassandra\n\nkafka\n\nelasticache\n\nneptune\n\n--schedule (string)\n\nThe schedule for this action. The following formats are supported:\n\nAt expressions - “at(*yyyy* -*mm* -*dd* T*hh* :*mm* :*ss* ) “\n\nRate expressions - “rate(*value*  *unit* ) “\n\nCron expressions - “cron(*fields* ) “\n\nAt expressions are useful for one-time schedules. Cron expressions are useful for scheduled actions that run periodically at a specified date and time, and rate expressions are useful for scheduled actions that run at a regular interval.\n\nAt and cron expressions use Universal Coordinated Time (UTC) by default.\n\nThe cron format consists of six fields separated by white spaces: [Minutes] [Hours] [Day_of_Month] [Month] [Day_of_Week] [Year].\n\nFor rate expressions, value is a positive integer and unit is minute | minutes | hour | hours | day | days .\n\nFor more information and examples, see Example scheduled actions for Application Auto Scaling in the Application Auto Scaling User Guide .\n\n--timezone (string)\n\nSpecifies the time zone used when setting a scheduled action by using an at or cron expression. If a time zone is not provided, UTC is used by default.\n\nValid values are the canonical names of the IANA time zones supported by Joda-Time (such as Etc/GMT+9 or Pacific/Tahiti ). For more information, see https://www.joda.org/joda-time/timezones.html .\n\n--scheduled-action-name (string)\n\nThe name of the scheduled action. This name must be unique among all other scheduled actions on the specified scalable target.\n\n--resource-id (string)\n\nThe identifier of the resource associated with the scheduled action. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\n--scalable-dimension (string)\n\nThe scalable dimension. This string consists of the service namespace, resource type, and scaling property.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPossible values:\n\necs:service:DesiredCount\n\nec2:spot-fleet-request:TargetCapacity\n\nelasticmapreduce:instancegroup:InstanceCount\n\nappstream:fleet:DesiredCapacity\n\ndynamodb:table:ReadCapacityUnits\n\ndynamodb:table:WriteCapacityUnits\n\ndynamodb:index:ReadCapacityUnits\n\ndynamodb:index:WriteCapacityUnits\n\nrds:cluster:ReadReplicaCount\n\nsagemaker:variant:DesiredInstanceCount\n\ncustom-resource:ResourceType:Property\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits\n\nlambda:function:ProvisionedConcurrency\n\ncassandra:table:ReadCapacityUnits\n\ncassandra:table:WriteCapacityUnits\n\nkafka:broker-storage:VolumeSize\n\nelasticache:replication-group:NodeGroups\n\nelasticache:replication-group:Replicas\n\nneptune:cluster:ReadReplicaCount\n\n--start-time (timestamp)\n\nThe date and time for this scheduled action to start, in UTC.\n\n--end-time (timestamp)\n\nThe date and time for the recurring schedule to end, in UTC.\n\n--scalable-target-action (structure)\n\nThe new minimum and maximum capacity. You can set both values or just one. At the scheduled time, if the current capacity is below the minimum capacity, Application Auto Scaling scales out to the minimum capacity. If the current capacity is above the maximum capacity, Application Auto Scaling scales in to the maximum capacity.\n\nMinCapacity -> (integer)\n\nThe minimum capacity.\n\nFor certain resources, the minimum value allowed is 0. This includes Lambda provisioned concurrency, Spot Fleet, ECS services, Aurora DB clusters, EMR clusters, and custom resources. For all other resources, the minimum value allowed is 1.\n\nMaxCapacity -> (integer)\n\nThe maximum capacity.\n\nAlthough you can specify a large maximum capacity, note that service quotas may impose lower limits. Each service has its own default quotas for the maximum capacity of the resource. If you want to specify a higher limit, you can request an increase. For more information, consult the documentation for that service. For information about the default quotas for each service, see Service Endpoints and Quotas in the Amazon Web Services General Reference .\n\nShorthand Syntax:\n\nMinCapacity=integer,MaxCapacity=integer\n\n\nJSON Syntax:\n\n{\n  \"MinCapacity\": integer,\n  \"MaxCapacity\": integer\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo add a scheduled action to a DynamoDB table\n\nThis example adds a scheduled action to a DynamoDB table called TestTable to scale out on a recurring schedule. On the specified schedule (every day at 12:15pm UTC), if the current capacity is below the value specified for MinCapacity, Application Auto Scaling scales out to the value specified by MinCapacity.\n\nCommand:\n\naws application-autoscaling put-scheduled-action --service-namespace dynamodb --scheduled-action-name my-recurring-action --schedule \"cron(15 12 * * ? *)\" --resource-id table/TestTable --scalable-dimension dynamodb:table:WriteCapacityUnits --scalable-target-action MinCapacity=6\n\n\nFor more information, see Scheduled Scaling in the Application Auto Scaling User Guide."
    },
    {
      "command_name": "register-scalable-target",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/application-autoscaling/register-scalable-target.html",
      "command_description": "Description\n\nRegisters or updates a scalable target.\n\nA scalable target is a resource that Application Auto Scaling can scale out and scale in. Scalable targets are uniquely identified by the combination of resource ID, scalable dimension, and namespace.\n\nWhen you register a new scalable target, you must specify values for minimum and maximum capacity. Current capacity will be adjusted within the specified range when scaling starts. Application Auto Scaling scaling policies will not scale capacity to values that are outside of this range.\n\nAfter you register a scalable target, you do not need to register it again to use other Application Auto Scaling operations. To see which resources have been registered, use DescribeScalableTargets . You can also view the scaling policies for a service namespace by using DescribeScalableTargets . If you no longer need a scalable target, you can deregister it by using DeregisterScalableTarget .\n\nTo update a scalable target, specify the parameters that you want to change. Include the parameters that identify the scalable target: resource ID, scalable dimension, and namespace. Any parameters that you don’t specify are not changed by this update request.\n\nNote\n\nIf you call the RegisterScalableTarget API to update an existing scalable target, Application Auto Scaling retrieves the current capacity of the resource. If it is below the minimum capacity or above the maximum capacity, Application Auto Scaling adjusts the capacity of the scalable target to place it within these bounds, even if you don’t include the MinCapacity or MaxCapacity request parameters.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  register-scalable-target\n--service-namespace <value>\n--resource-id <value>\n--scalable-dimension <value>\n[--min-capacity <value>]\n[--max-capacity <value>]\n[--role-arn <value>]\n[--suspended-state <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--service-namespace <value>",
        "--resource-id <value>",
        "--scalable-dimension <value>",
        "[--min-capacity <value>]",
        "[--max-capacity <value>]",
        "[--role-arn <value>]",
        "[--suspended-state <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--service-namespace (string)\n\nThe namespace of the Amazon Web Services service that provides the resource. For a resource provided by your own application or service, use custom-resource instead.\n\nPossible values:\n\necs\n\nelasticmapreduce\n\nec2\n\nappstream\n\ndynamodb\n\nrds\n\nsagemaker\n\ncustom-resource\n\ncomprehend\n\nlambda\n\ncassandra\n\nkafka\n\nelasticache\n\nneptune\n\n--resource-id (string)\n\nThe identifier of the resource that is associated with the scalable target. This string consists of the resource type and unique identifier.\n\nECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp .\n\nSpot Fleet - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE .\n\nEMR cluster - The resource type is instancegroup and the unique identifier is the cluster ID and instance group ID. Example: instancegroup/j-2EEZNYKUA1NTV/ig-1791Y4E1L8YI0 .\n\nAppStream 2.0 fleet - The resource type is fleet and the unique identifier is the fleet name. Example: fleet/sample-fleet .\n\nDynamoDB table - The resource type is table and the unique identifier is the table name. Example: table/my-table .\n\nDynamoDB global secondary index - The resource type is index and the unique identifier is the index name. Example: table/my-table/index/my-table-index .\n\nAurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster .\n\nSageMaker endpoint variant - The resource type is variant and the unique identifier is the resource ID. Example: endpoint/my-end-point/variant/KMeansClustering .\n\nCustom resources are not supported with a resource type. This parameter must specify the OutputValue from the CloudFormation template stack used to access the resources. The unique identifier is defined by the service provider. More information is available in our GitHub repository .\n\nAmazon Comprehend document classification endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE .\n\nAmazon Comprehend entity recognizer endpoint - The resource type and unique identifier are specified using the endpoint ARN. Example: arn:aws:comprehend:us-west-2:123456789012:entity-recognizer-endpoint/EXAMPLE .\n\nLambda provisioned concurrency - The resource type is function and the unique identifier is the function name with a function version or alias name suffix that is not $LATEST . Example: function:my-function:prod or function:my-function:1 .\n\nAmazon Keyspaces table - The resource type is table and the unique identifier is the table name. Example: keyspace/mykeyspace/table/mytable .\n\nAmazon MSK cluster - The resource type and unique identifier are specified using the cluster ARN. Example: arn:aws:kafka:us-east-1:123456789012:cluster/demo-cluster-1/6357e0b2-0e6a-4b86-a0b4-70df934c2e31-5 .\n\nAmazon ElastiCache replication group - The resource type is replication-group and the unique identifier is the replication group name. Example: replication-group/mycluster .\n\nNeptune cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:mycluster .\n\n--scalable-dimension (string)\n\nThe scalable dimension associated with the scalable target. This string consists of the service namespace, resource type, and scaling property.\n\necs:service:DesiredCount - The desired task count of an ECS service.\n\nelasticmapreduce:instancegroup:InstanceCount - The instance count of an EMR Instance Group.\n\nec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet.\n\nappstream:fleet:DesiredCapacity - The desired capacity of an AppStream 2.0 fleet.\n\ndynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.\n\ndynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.\n\ndynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.\n\ndynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.\n\nrds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition and Aurora PostgreSQL-compatible edition.\n\nsagemaker:variant:DesiredInstanceCount - The number of EC2 instances for an SageMaker model endpoint variant.\n\ncustom-resource:ResourceType:Property - The scalable dimension for a custom resource provided by your own application or service.\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend document classification endpoint.\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits - The number of inference units for an Amazon Comprehend entity recognizer endpoint.\n\nlambda:function:ProvisionedConcurrency - The provisioned concurrency for a Lambda function.\n\ncassandra:table:ReadCapacityUnits - The provisioned read capacity for an Amazon Keyspaces table.\n\ncassandra:table:WriteCapacityUnits - The provisioned write capacity for an Amazon Keyspaces table.\n\nkafka:broker-storage:VolumeSize - The provisioned volume size (in GiB) for brokers in an Amazon MSK cluster.\n\nelasticache:replication-group:NodeGroups - The number of node groups for an Amazon ElastiCache replication group.\n\nelasticache:replication-group:Replicas - The number of replicas per node group for an Amazon ElastiCache replication group.\n\nneptune:cluster:ReadReplicaCount - The count of read replicas in an Amazon Neptune DB cluster.\n\nPossible values:\n\necs:service:DesiredCount\n\nec2:spot-fleet-request:TargetCapacity\n\nelasticmapreduce:instancegroup:InstanceCount\n\nappstream:fleet:DesiredCapacity\n\ndynamodb:table:ReadCapacityUnits\n\ndynamodb:table:WriteCapacityUnits\n\ndynamodb:index:ReadCapacityUnits\n\ndynamodb:index:WriteCapacityUnits\n\nrds:cluster:ReadReplicaCount\n\nsagemaker:variant:DesiredInstanceCount\n\ncustom-resource:ResourceType:Property\n\ncomprehend:document-classifier-endpoint:DesiredInferenceUnits\n\ncomprehend:entity-recognizer-endpoint:DesiredInferenceUnits\n\nlambda:function:ProvisionedConcurrency\n\ncassandra:table:ReadCapacityUnits\n\ncassandra:table:WriteCapacityUnits\n\nkafka:broker-storage:VolumeSize\n\nelasticache:replication-group:NodeGroups\n\nelasticache:replication-group:Replicas\n\nneptune:cluster:ReadReplicaCount\n\n--min-capacity (integer)\n\nThe minimum value that you plan to scale in to. When a scaling policy is in effect, Application Auto Scaling can scale in (contract) as needed to the minimum capacity limit in response to changing demand. This property is required when registering a new scalable target.\n\nFor certain resources, the minimum value allowed is 0. This includes Lambda provisioned concurrency, Spot Fleet, ECS services, Aurora DB clusters, EMR clusters, and custom resources. For all other resources, the minimum value allowed is 1.\n\n--max-capacity (integer)\n\nThe maximum value that you plan to scale out to. When a scaling policy is in effect, Application Auto Scaling can scale out (expand) as needed to the maximum capacity limit in response to changing demand. This property is required when registering a new scalable target.\n\nAlthough you can specify a large maximum capacity, note that service quotas may impose lower limits. Each service has its own default quotas for the maximum capacity of the resource. If you want to specify a higher limit, you can request an increase. For more information, consult the documentation for that service. For information about the default quotas for each service, see Service Endpoints and Quotas in the Amazon Web Services General Reference .\n\n--role-arn (string)\n\nThis parameter is required for services that do not support service-linked roles (such as Amazon EMR), and it must specify the ARN of an IAM role that allows Application Auto Scaling to modify the scalable target on your behalf.\n\nIf the service supports service-linked roles, Application Auto Scaling uses a service-linked role, which it creates if it does not yet exist. For more information, see Application Auto Scaling IAM roles .\n\n--suspended-state (structure)\n\nAn embedded object that contains attributes and attribute values that are used to suspend and resume automatic scaling. Setting the value of an attribute to true suspends the specified scaling activities. Setting it to false (default) resumes the specified scaling activities.\n\nSuspension Outcomes\n\nFor DynamicScalingInSuspended , while a suspension is in effect, all scale-in activities that are triggered by a scaling policy are suspended.\n\nFor DynamicScalingOutSuspended , while a suspension is in effect, all scale-out activities that are triggered by a scaling policy are suspended.\n\nFor ScheduledScalingSuspended , while a suspension is in effect, all scaling activities that involve scheduled actions are suspended.\n\nFor more information, see Suspending and resuming scaling in the Application Auto Scaling User Guide .\n\nDynamicScalingInSuspended -> (boolean)\n\nWhether scale in by a target tracking scaling policy or a step scaling policy is suspended. Set the value to true if you don’t want Application Auto Scaling to remove capacity when a scaling policy is triggered. The default is false .\n\nDynamicScalingOutSuspended -> (boolean)\n\nWhether scale out by a target tracking scaling policy or a step scaling policy is suspended. Set the value to true if you don’t want Application Auto Scaling to add capacity when a scaling policy is triggered. The default is false .\n\nScheduledScalingSuspended -> (boolean)\n\nWhether scheduled scaling is suspended. Set the value to true if you don’t want Application Auto Scaling to add or remove capacity by initiating scheduled actions. The default is false .\n\nShorthand Syntax:\n\nDynamicScalingInSuspended=boolean,DynamicScalingOutSuspended=boolean,ScheduledScalingSuspended=boolean\n\n\nJSON Syntax:\n\n{\n  \"DynamicScalingInSuspended\": true|false,\n  \"DynamicScalingOutSuspended\": true|false,\n  \"ScheduledScalingSuspended\": true|false\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nExample 1: To register a new scalable target for Amazon ECS\n\nThe following register-scalable-target example registers a scalable target for an Amazon ECS service called web-app, running on the default cluster, with a minimum desired count of 1 task and a maximum desired count of 10 tasks.\n\naws application-autoscaling register-scalable-target \\\n    --service-namespace ecs \\\n    --scalable-dimension ecs:service:DesiredCount \\\n    --resource-id service/default/web-app \\\n    --min-capacity 1 \\\n    --max-capacity 10\n\n\nExample 2: To register a new scalable target for a Spot Fleet\n\nThe following register-scalable-target example registers the target capacity of an Amazon EC2 Spot Fleet request using its request ID, with a minimum capacity of 2 instances and a maximum capacity of 10 instances.\n\naws application-autoscaling register-scalable-target \\\n    --service-namespace ec2 \\\n    --scalable-dimension ec2:spot-fleet-request:TargetCapacity \\\n    --resource-id spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE \\\n    --min-capacity 2 \\\n    --max-capacity 10\n\n\nExample 3: To register a new scalable target for AppStream 2.0\n\nThe following register-scalable-target example registers the desired capacity of an AppStream 2.0 fleet called sample-fleet, with a minimum capacity of 1 fleet instance and a maximum capacity of 5 fleet instances.\n\naws application-autoscaling register-scalable-target \\\n    --service-namespace appstream \\\n    --scalable-dimension appstream:fleet:DesiredCapacity \\\n    --resource-id fleet/sample-fleet \\\n    --min-capacity 1 \\\n    --max-capacity 5\n\n\nExample 4: To register a new scalable target for a DynamoDB table\n\nThe following register-scalable-target example registers the provisioned write capacity of a DynamoDB table called my-table, with a minimum capacity of 5 write capacity units and a maximum capacity of 10 write capacity units.\n\naws application-autoscaling register-scalable-target \\\n    --service-namespace dynamodb \\\n    --scalable-dimension dynamodb:table:WriteCapacityUnits \\\n    --resource-id table/my-table \\\n    --min-capacity 5 \\\n    --max-capacity 10\n\n\nExample 5: To register a new scalable target for a DynamoDB global secondary index\n\nThe following register-scalable-target example registers the provisioned write capacity of a DynamoDB global secondary index called my-table-index, with a minimum capacity of 5 write capacity units and a maximum capacity of 10 write capacity units.\n\naws application-autoscaling register-scalable-target \\\n    --service-namespace dynamodb \\\n    --scalable-dimension dynamodb:index:WriteCapacityUnits \\\n    --resource-id table/my-table/index/my-table-index \\\n    --min-capacity 5 \\\n    --max-capacity 10\n\n\nExample 6: To register a new scalable target for Aurora DB\n\nThe following register-scalable-target example registers the count of Aurora Replicas in an Aurora DB cluster called my-db-cluster, with a minimum capacity of 1 Aurora Replica and a maximum capacity of 8 Aurora Replicas.\n\naws application-autoscaling register-scalable-target \\\n    --service-namespace rds \\\n    --scalable-dimension rds:cluster:ReadReplicaCount \\\n    --resource-id cluster:my-db-cluster \\\n    --min-capacity 1 \\\n    --max-capacity 8\n\n\nExample 7: To register a new scalable target for Amazon Sagemaker\n\nThe following register-scalable-target example registers the desired EC2 instance count for an Amazon Sagemaker product variant called my-variant, running on the my-endpoint endpoint, with a minimum capacity of 1 instance and a maximum capacity of 8 instances.\n\naws application-autoscaling register-scalable-target \\\n    --service-namespace sagemaker \\\n    --scalable-dimension sagemaker:variant:DesiredInstanceCount \\\n    --resource-id endpoint/my-endpoint/variant/my-variant \\\n    --min-capacity 1 \\\n    --max-capacity 8\n\n\nExample 8: To register a new scalable target for a custom resource\n\nThe following register-scalable-target example registers a custom resource as a scalable target, with a minimum desired count of 1 capacity unit and a maximum desired count of 10 capacity units. The custom-resource-id.txt file contains a string that identifies the Resource ID, which for a custom resource is the path to the custom resource through your Amazon API Gateway endpoint.\n\naws application-autoscaling register-scalable-target \\\n    --service-namespace custom-resource \\\n    --scalable-dimension custom-resource:ResourceType:Property \\\n    --resource-id file://~/custom-resource-id.txt \\\n    --min-capacity 1 \\\n    --max-capacity 10\n\n\nContents of custom-resource-id.txt:\n\nhttps://example.execute-api.us-west-2.amazonaws.com/prod/scalableTargetDimensions/1-23456789\n\n\nExample 9: To register a new scalable target for Amazon Comprehend\n\nThe following register-scalable-target example registers the desired number of inference units to be used by the model for an Amazon Comprehend document classifier endpoint using the endpoint’s ARN, with a minimum capacity of 1 inference unit and a maximum capacity of 3 inference units. Each inference unit represents a throughput of 100 characters per second.\n\naws application-autoscaling register-scalable-target \\\n    --service-namespace comprehend \\\n    --scalable-dimension comprehend:document-classifier-endpoint:DesiredInferenceUnits \\\n    --resource-id arn:aws:comprehend:us-west-2:123456789012:document-classifier-endpoint/EXAMPLE \\\n    --min-capacity 1 \\\n    --max-capacity 3\n\n\nExample 10: To register a new scalable target for AWS Lambda\n\nThe following register-scalable-target example registers the provisioned concurrency for an alias called BLUE for the Lambda function called my-function, with a minimum capacity of 0 and a maximum capacity of 100.\n\naws application-autoscaling register-scalable-target \\\n    --service-namespace lambda \\\n    --scalable-dimension lambda:function:ProvisionedConcurrency \\\n    --resource-id function:my-function:BLUE \\\n    --min-capacity 0 \\\n    --max-capacity 100\n\n\nFor more information, see the Application Auto Scaling User Guide."
    }
  ],
  "service_description": "Description\n\nWith Application Auto Scaling, you can configure automatic scaling for the following resources:\n\nAmazon AppStream 2.0 fleets\n\nAmazon Aurora Replicas\n\nAmazon Comprehend document classification and entity recognizer endpoints\n\nAmazon DynamoDB tables and global secondary indexes throughput capacity\n\nAmazon ECS services\n\nAmazon ElastiCache for Redis clusters (replication groups)\n\nAmazon EMR clusters\n\nAmazon Keyspaces (for Apache Cassandra) tables\n\nLambda function provisioned concurrency\n\nAmazon Managed Streaming for Apache Kafka broker storage\n\nAmazon Neptune clusters\n\nAmazon SageMaker endpoint variants\n\nSpot Fleets (Amazon EC2)\n\nCustom resources provided by your own applications or services\n\nAPI Summary\n\nThe Application Auto Scaling service API includes three key sets of actions:\n\nRegister and manage scalable targets - Register Amazon Web Services or custom resources as scalable targets (a resource that Application Auto Scaling can scale), set minimum and maximum capacity limits, and retrieve information on existing scalable targets.\n\nConfigure and manage automatic scaling - Define scaling policies to dynamically scale your resources in response to CloudWatch alarms, schedule one-time or recurring scaling actions, and retrieve your recent scaling activity history.\n\nSuspend and resume scaling - Temporarily suspend and later resume automatic scaling by calling the RegisterScalableTarget API action for any Application Auto Scaling scalable target. You can suspend and resume (individually or in combination) scale-out activities that are triggered by a scaling policy, scale-in activities that are triggered by a scaling policy, and scheduled scaling.\n\nTo learn more about Application Auto Scaling, including information about granting IAM users required permissions for Application Auto Scaling actions, see the Application Auto Scaling User Guide ."
}