{
  "service_name": "meteringmarketplace",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/meteringmarketplace/index.html",
  "service_commands": [
    {
      "command_name": "batch-meter-usage",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/meteringmarketplace/batch-meter-usage.html",
      "command_description": "Description\n\nBatchMeterUsage is called from a SaaS application listed on the AWS Marketplace to post metering records for a set of customers.\n\nFor identical requests, the API is idempotent; requests can be retried with the same records or a subset of the input records.\n\nEvery request to BatchMeterUsage is for one product. If you need to meter usage for multiple products, you must make multiple calls to BatchMeterUsage.\n\nBatchMeterUsage can process up to 25 UsageRecords at a time.\n\nA UsageRecord can optionally include multiple usage allocations, to provide customers with usagedata split into buckets by tags that you define (or allow the customer to define).\n\nBatchMeterUsage requests must be less than 1MB in size.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-meter-usage\n--usage-records <value>\n--product-code <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--usage-records <value>",
        "--product-code <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--usage-records (list)\n\nThe set of UsageRecords to submit. BatchMeterUsage accepts up to 25 UsageRecords at a time.\n\n(structure)\n\nA UsageRecord indicates a quantity of usage for a given product, customer, dimension and time.\n\nMultiple requests with the same UsageRecords as input will be deduplicated to prevent double charges.\n\nTimestamp -> (timestamp)\n\nTimestamp, in UTC, for which the usage is being reported.\n\nYour application can meter usage for up to one hour in the past. Make sure the timestamp value is not before the start of the software usage.\n\nCustomerIdentifier -> (string)\n\nThe CustomerIdentifier is obtained through the ResolveCustomer operation and represents an individual buyer in your application.\n\nDimension -> (string)\n\nDuring the process of registering a product on AWS Marketplace, up to eight dimensions are specified. These represent different units of value in your application.\n\nQuantity -> (integer)\n\nThe quantity of usage consumed by the customer for the given dimension and time. Defaults to 0 if not specified.\n\nUsageAllocations -> (list)\n\nThe set of UsageAllocations to submit. The sum of all UsageAllocation quantities must equal the Quantity of the UsageRecord.\n\n(structure)\n\nUsage allocations allow you to split usage into buckets by tags.\n\nEach UsageAllocation indicates the usage quantity for a specific set of tags.\n\nAllocatedUsageQuantity -> (integer)\n\nThe total quantity allocated to this bucket of usage.\n\nTags -> (list)\n\nThe set of tags that define the bucket of usage. For the bucket of items with no tags, this parameter can be left out.\n\n(structure)\n\nMetadata assigned to an allocation. Each tag is made up of a key and a value.\n\nKey -> (string)\n\nOne part of a key-value pair that makes up a tag. A key is a label that acts like a category for the specific tag values.\n\nValue -> (string)\n\nOne part of a key-value pair that makes up a tag. A value acts as a descriptor within a tag category (key). The value can be empty or null.\n\nJSON Syntax:\n\n[\n  {\n    \"Timestamp\": timestamp,\n    \"CustomerIdentifier\": \"string\",\n    \"Dimension\": \"string\",\n    \"Quantity\": integer,\n    \"UsageAllocations\": [\n      {\n        \"AllocatedUsageQuantity\": integer,\n        \"Tags\": [\n          {\n            \"Key\": \"string\",\n            \"Value\": \"string\"\n          }\n          ...\n        ]\n      }\n      ...\n    ]\n  }\n  ...\n]\n\n\n--product-code (string)\n\nProduct code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nResults -> (list)\n\nContains all UsageRecords processed by BatchMeterUsage. These records were either honored by AWS Marketplace Metering Service or were invalid.\n\n(structure)\n\nA UsageRecordResult indicates the status of a given UsageRecord processed by BatchMeterUsage.\n\nUsageRecord -> (structure)\n\nThe UsageRecord that was part of the BatchMeterUsage request.\n\nTimestamp -> (timestamp)\n\nTimestamp, in UTC, for which the usage is being reported.\n\nYour application can meter usage for up to one hour in the past. Make sure the timestamp value is not before the start of the software usage.\n\nCustomerIdentifier -> (string)\n\nThe CustomerIdentifier is obtained through the ResolveCustomer operation and represents an individual buyer in your application.\n\nDimension -> (string)\n\nDuring the process of registering a product on AWS Marketplace, up to eight dimensions are specified. These represent different units of value in your application.\n\nQuantity -> (integer)\n\nThe quantity of usage consumed by the customer for the given dimension and time. Defaults to 0 if not specified.\n\nUsageAllocations -> (list)\n\nThe set of UsageAllocations to submit. The sum of all UsageAllocation quantities must equal the Quantity of the UsageRecord.\n\n(structure)\n\nUsage allocations allow you to split usage into buckets by tags.\n\nEach UsageAllocation indicates the usage quantity for a specific set of tags.\n\nAllocatedUsageQuantity -> (integer)\n\nThe total quantity allocated to this bucket of usage.\n\nTags -> (list)\n\nThe set of tags that define the bucket of usage. For the bucket of items with no tags, this parameter can be left out.\n\n(structure)\n\nMetadata assigned to an allocation. Each tag is made up of a key and a value.\n\nKey -> (string)\n\nOne part of a key-value pair that makes up a tag. A key is a label that acts like a category for the specific tag values.\n\nValue -> (string)\n\nOne part of a key-value pair that makes up a tag. A value acts as a descriptor within a tag category (key). The value can be empty or null.\n\nMeteringRecordId -> (string)\n\nThe MeteringRecordId is a unique identifier for this metering event.\n\nStatus -> (string)\n\nThe UsageRecordResult Status indicates the status of an individual UsageRecord processed by BatchMeterUsage.\n\nSuccess - The UsageRecord was accepted and honored by BatchMeterUsage.\n\nCustomerNotSubscribed - The CustomerIdentifier specified is not subscribed to your product. The UsageRecord was not honored. Future UsageRecords for this customer will fail until the customer subscribes to your product.\n\nDuplicateRecord - Indicates that the UsageRecord was invalid and not honored. A previously metered UsageRecord had the same customer, dimension, and time, but a different quantity.\n\nUnprocessedRecords -> (list)\n\nContains all UsageRecords that were not processed by BatchMeterUsage. This is a list of UsageRecords. You can retry the failed request by making another BatchMeterUsage call with this list as input in the BatchMeterUsageRequest.\n\n(structure)\n\nA UsageRecord indicates a quantity of usage for a given product, customer, dimension and time.\n\nMultiple requests with the same UsageRecords as input will be deduplicated to prevent double charges.\n\nTimestamp -> (timestamp)\n\nTimestamp, in UTC, for which the usage is being reported.\n\nYour application can meter usage for up to one hour in the past. Make sure the timestamp value is not before the start of the software usage.\n\nCustomerIdentifier -> (string)\n\nThe CustomerIdentifier is obtained through the ResolveCustomer operation and represents an individual buyer in your application.\n\nDimension -> (string)\n\nDuring the process of registering a product on AWS Marketplace, up to eight dimensions are specified. These represent different units of value in your application.\n\nQuantity -> (integer)\n\nThe quantity of usage consumed by the customer for the given dimension and time. Defaults to 0 if not specified.\n\nUsageAllocations -> (list)\n\nThe set of UsageAllocations to submit. The sum of all UsageAllocation quantities must equal the Quantity of the UsageRecord.\n\n(structure)\n\nUsage allocations allow you to split usage into buckets by tags.\n\nEach UsageAllocation indicates the usage quantity for a specific set of tags.\n\nAllocatedUsageQuantity -> (integer)\n\nThe total quantity allocated to this bucket of usage.\n\nTags -> (list)\n\nThe set of tags that define the bucket of usage. For the bucket of items with no tags, this parameter can be left out.\n\n(structure)\n\nMetadata assigned to an allocation. Each tag is made up of a key and a value.\n\nKey -> (string)\n\nOne part of a key-value pair that makes up a tag. A key is a label that acts like a category for the specific tag values.\n\nValue -> (string)\n\nOne part of a key-value pair that makes up a tag. A value acts as a descriptor within a tag category (key). The value can be empty or null."
    },
    {
      "command_name": "meter-usage",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/meteringmarketplace/meter-usage.html",
      "command_description": "Description\n\nAPI to emit metering records. For identical requests, the API is idempotent. It simply returns the metering record ID.\n\nMeterUsage is authenticated on the buyer’s AWS account using credentials from the EC2 instance, ECS task, or EKS pod.\n\nMeterUsage can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  meter-usage\n--product-code <value>\n--timestamp <value>\n--usage-dimension <value>\n[--usage-quantity <value>]\n[--dry-run | --no-dry-run]\n[--usage-allocations <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--product-code <value>",
        "--timestamp <value>",
        "--usage-dimension <value>",
        "[--usage-quantity <value>]",
        "[--dry-run | --no-dry-run]",
        "[--usage-allocations <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--product-code (string)\n\nProduct code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.\n\n--timestamp (timestamp)\n\nTimestamp, in UTC, for which the usage is being reported. Your application can meter usage for up to one hour in the past. Make sure the timestamp value is not before the start of the software usage.\n\n--usage-dimension (string)\n\nIt will be one of the fcp dimension name provided during the publishing of the product.\n\n--usage-quantity (integer)\n\nConsumption value for the hour. Defaults to 0 if not specified.\n\n--dry-run | --no-dry-run (boolean)\n\nChecks whether you have the permissions required for the action, but does not make the request. If you have the permissions, the request returns DryRunOperation; otherwise, it returns UnauthorizedException. Defaults to false if not specified.\n\n--usage-allocations (list)\n\nThe set of UsageAllocations to submit.\n\nThe sum of all UsageAllocation quantities must equal the UsageQuantity of the MeterUsage request, and each UsageAllocation must have a unique set of tags (include no tags).\n\n(structure)\n\nUsage allocations allow you to split usage into buckets by tags.\n\nEach UsageAllocation indicates the usage quantity for a specific set of tags.\n\nAllocatedUsageQuantity -> (integer)\n\nThe total quantity allocated to this bucket of usage.\n\nTags -> (list)\n\nThe set of tags that define the bucket of usage. For the bucket of items with no tags, this parameter can be left out.\n\n(structure)\n\nMetadata assigned to an allocation. Each tag is made up of a key and a value.\n\nKey -> (string)\n\nOne part of a key-value pair that makes up a tag. A key is a label that acts like a category for the specific tag values.\n\nValue -> (string)\n\nOne part of a key-value pair that makes up a tag. A value acts as a descriptor within a tag category (key). The value can be empty or null.\n\nShorthand Syntax:\n\nAllocatedUsageQuantity=integer,Tags=[{Key=string,Value=string},{Key=string,Value=string}] ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"AllocatedUsageQuantity\": integer,\n    \"Tags\": [\n      {\n        \"Key\": \"string\",\n        \"Value\": \"string\"\n      }\n      ...\n    ]\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nMeteringRecordId -> (string)\n\nMetering record id."
    },
    {
      "command_name": "register-usage",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/meteringmarketplace/register-usage.html",
      "command_description": "Description\n\nPaid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the RegisterUsage operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren’t required to call RegisterUsage, but you may choose to do so if you would like to receive usage data in your seller reports. The sections below explain the behavior of RegisterUsage. RegisterUsage performs two primary functions: metering and entitlement.\n\nEntitlement : RegisterUsage allows you to verify that the customer running your paid software is subscribed to your product on AWS Marketplace, enabling you to guard against unauthorized use. Your container image that integrates with RegisterUsage is only required to guard against unauthorized use at container startup, as such a CustomerNotSubscribedException/PlatformNotSupportedException will only be thrown on the initial call to RegisterUsage. Subsequent calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a CustomerNotSubscribedException, even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still running.\n\nMetering : RegisterUsage meters software use per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage applies to tasks that are short lived. For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be charged: (10 * hourly_rate). Metering for software use is automatically handled by the AWS Marketplace Metering Control Plane – your software is not required to perform any metering specific actions, other than call RegisterUsage once for metering of software use to commence. The AWS Marketplace Metering Control Plane will also continue to bill customers for running ECS tasks and Amazon EKS pods, regardless of the customers subscription state, removing the need for your software to perform entitlement checks at runtime.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  register-usage\n--product-code <value>\n--public-key-version <value>\n[--nonce <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--product-code <value>",
        "--public-key-version <value>",
        "[--nonce <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--product-code (string)\n\nProduct code is used to uniquely identify a product in AWS Marketplace. The product code should be the same as the one used during the publishing of a new product.\n\n--public-key-version (integer)\n\nPublic Key Version provided by AWS Marketplace\n\n--nonce (string)\n\n(Optional) To scope down the registration to a specific running software instance and guard against replay attacks.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nPublicKeyRotationTimestamp -> (timestamp)\n\n(Optional) Only included when public key version has expired\n\nSignature -> (string)\n\nJWT Token"
    },
    {
      "command_name": "resolve-customer",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/meteringmarketplace/resolve-customer.html",
      "command_description": "Description\n\nResolveCustomer is called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a registration token through their browser. The registration token is resolved through this API to obtain a CustomerIdentifier and product code.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  resolve-customer\n--registration-token <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--registration-token <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--registration-token (string)\n\nWhen a buyer visits your website during the registration process, the buyer submits a registration token through the browser. The registration token is resolved to obtain a CustomerIdentifier and product code.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCustomerIdentifier -> (string)\n\nThe CustomerIdentifier is used to identify an individual customer in your application. Calls to BatchMeterUsage require CustomerIdentifiers for each UsageRecord.\n\nProductCode -> (string)\n\nThe product code is returned to confirm that the buyer is registering for your product. Subsequent BatchMeterUsage calls should be made using this product code."
    }
  ],
  "service_description": "Description\n\nThis reference provides descriptions of the low-level AWS Marketplace Metering Service API.\n\nAWS Marketplace sellers can use this API to submit usage data for custom usage dimensions.\n\nFor information on the permissions you need to use this API, see AWS Marketing metering and entitlement API permissions in the AWS Marketplace Seller Guide.\n\nSubmitting Metering Records\n\nMeterUsage - Submits the metering record for a Marketplace product. MeterUsage is called from an EC2 instance or a container running on EKS or ECS.\n\nBatchMeterUsage - Submits the metering record for a set of customers. BatchMeterUsage is called from a software-as-a-service (SaaS) application.\n\nAccepting New Customers\n\nResolveCustomer - Called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a Registration Token through the browser. The Registration Token is resolved through this API to obtain a CustomerIdentifier and Product Code.\n\nEntitlement and Metering for Paid Container Products\n\nPaid container software products sold through AWS Marketplace must integrate with the AWS Marketplace Metering Service and call the RegisterUsage operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren’t required to call RegisterUsage, but you can do so if you want to receive usage data in your seller reports. For more information on using the RegisterUsage operation, see Container-Based Products .\n\nBatchMeterUsage API calls are captured by AWS CloudTrail. You can use Cloudtrail to verify that the SaaS metering records that you sent are accurate by searching for records with the eventName of BatchMeterUsage. You can also use CloudTrail to audit records over time. For more information, see the * AWS CloudTrail User Guide * ."
}