{
  "service_name": "lexv2-runtime",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lexv2-runtime/index.html",
  "service_commands": [
    {
      "command_name": "delete-session",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lexv2-runtime/delete-session.html",
      "command_description": "Description\n\nRemoves session information for a specified bot, alias, and user ID.\n\nYou can use this operation to restart a conversation with a bot. When you remove a session, the entire history of the session is removed so that you can start again.\n\nYou don’t need to delete a session. Sessions have a time limit and will expire. Set the session time limit when you create the bot. The default is 5 minutes, but you can specify anything between 1 minute and 24 hours.\n\nIf you specify a bot or alias ID that doesn’t exist, you receive a BadRequestException.\n\nIf the locale doesn’t exist in the bot, or if the locale hasn’t been enables for the alias, you receive a BadRequestException .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-session\n--bot-id <value>\n--bot-alias-id <value>\n--locale-id <value>\n--session-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--bot-id <value>",
        "--bot-alias-id <value>",
        "--locale-id <value>",
        "--session-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--bot-id (string)\n\nThe identifier of the bot that contains the session data.\n\n--bot-alias-id (string)\n\nThe alias identifier in use for the bot that contains the session data.\n\n--locale-id (string)\n\nThe locale where the session is in use.\n\n--session-id (string)\n\nThe identifier of the session to delete.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nbotId -> (string)\n\nThe identifier of the bot that contained the session data.\n\nbotAliasId -> (string)\n\nThe alias identifier in use for the bot that contained the session data.\n\nlocaleId -> (string)\n\nThe locale where the session was used.\n\nsessionId -> (string)\n\nThe identifier of the deleted session."
    },
    {
      "command_name": "get-session",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lexv2-runtime/get-session.html",
      "command_description": "Description\n\nReturns session information for a specified bot, alias, and user.\n\nFor example, you can use this operation to retrieve session information for a user that has left a long-running session in use.\n\nIf the bot, alias, or session identifier doesn’t exist, Amazon Lex V2 returns a BadRequestException . If the locale doesn’t exist or is not enabled for the alias, you receive a BadRequestException .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-session\n--bot-id <value>\n--bot-alias-id <value>\n--locale-id <value>\n--session-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--bot-id <value>",
        "--bot-alias-id <value>",
        "--locale-id <value>",
        "--session-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--bot-id (string)\n\nThe identifier of the bot that contains the session data.\n\n--bot-alias-id (string)\n\nThe alias identifier in use for the bot that contains the session data.\n\n--locale-id (string)\n\nThe locale where the session is in use.\n\n--session-id (string)\n\nThe identifier of the session to return.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nsessionId -> (string)\n\nThe identifier of the returned session.\n\nmessages -> (list)\n\nA list of messages that were last sent to the user. The messages are ordered based on the order that your returned the messages from your Lambda function or the order that messages are defined in the bot.\n\n(structure)\n\nContainer for text that is returned to the customer..\n\ncontent -> (string)\n\nThe text of the message.\n\ncontentType -> (string)\n\nIndicates the type of response.\n\nimageResponseCard -> (structure)\n\nA card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform.\n\nWhen you use a response card, the response from the user is constrained to the text associated with a button on the card.\n\ntitle -> (string)\n\nThe title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle -> (string)\n\nThe subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl -> (string)\n\nThe URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons -> (list)\n\nA list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(structure)\n\nA button that appears on a response card show to the user.\n\ntext -> (string)\n\nThe text that is displayed on the button.\n\nvalue -> (string)\n\nThe value returned to Amazon Lex V2 when a user chooses the button.\n\ninterpretations -> (list)\n\nA list of intents that Amazon Lex V2 determined might satisfy the user’s utterance.\n\nEach interpretation includes the intent, a score that indicates how confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.\n\n(structure)\n\nAn intent that Amazon Lex V2 determined might satisfy the user’s utterance. The intents are ordered by the confidence score.\n\nnluConfidence -> (structure)\n\nDetermines the threshold where Amazon Lex V2 will insert the AMAZON.FallbackIntent , AMAZON.KendraSearchIntent , or both when returning alternative intents in a response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot.\n\nscore -> (double)\n\nA score that indicates how confident Amazon Lex V2 is that an intent satisfies the user’s intent. Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.\n\nsentimentResponse -> (structure)\n\nThe sentiment expressed in an utterance.\n\nWhen the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.\n\nsentiment -> (string)\n\nThe overall sentiment expressed in the user’s response. This is the sentiment most likely expressed by the user based on the analysis by Amazon Comprehend.\n\nsentimentScore -> (structure)\n\nThe individual sentiment responses for the utterance.\n\npositive -> (double)\n\nThe level of confidence that Amazon Comprehend has in the accuracy of its detection of the POSITIVE sentiment.\n\nnegative -> (double)\n\nThe level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEGATIVE sentiment.\n\nneutral -> (double)\n\nThe level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEUTRAL sentiment.\n\nmixed -> (double)\n\nThe level of confidence that Amazon Comprehend has in the accuracy of its detection of the MIXED sentiment.\n\nintent -> (structure)\n\nA list of intents that might satisfy the user’s utterance. The intents are ordered by the confidence score.\n\nname -> (string)\n\nThe name of the intent.\n\nslots -> (map)\n\nA map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null.\n\nkey -> (string)\n\nvalue -> (structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n(structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n( … recursive … )\n\nstate -> (string)\n\nContains fulfillment information for the intent.\n\nconfirmationState -> (string)\n\nContains information about whether fulfillment of the intent has been confirmed.\n\nsessionState -> (structure)\n\nRepresents the current state of the dialog between the user and the bot.\n\nYou can use this to determine the progress of the conversation and what the next action might be.\n\ndialogAction -> (structure)\n\nThe next step that Amazon Lex V2 should take in the conversation with a user.\n\ntype -> (string)\n\nThe next action that the bot should take in its interaction with the user. The possible values are:\n\nClose - Indicates that there will not be a response from the user. For example, the statement “Your order has been placed” does not require a response.\n\nConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as “Place the order?”\n\nDelegate - The next action is determined by Amazon Lex V2.\n\nElicitSlot - The next action is to elicit a slot value from the user.\n\nslotToElicit -> (string)\n\nThe name of the slot that should be elicited from the user.\n\nintent -> (structure)\n\nThe active intent that Amazon Lex V2 is processing.\n\nname -> (string)\n\nThe name of the intent.\n\nslots -> (map)\n\nA map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null.\n\nkey -> (string)\n\nvalue -> (structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n(structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n( … recursive … )\n\nstate -> (string)\n\nContains fulfillment information for the intent.\n\nconfirmationState -> (string)\n\nContains information about whether fulfillment of the intent has been confirmed.\n\nactiveContexts -> (list)\n\nOne or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.\n\n(structure)\n\nContains information about the contexts that a user is using in a session. You can configure Amazon Lex V2 to set a context when an intent is fulfilled, or you can set a context using the , , or operations.\n\nUse a context to indicate to Amazon Lex V2 intents that should be used as follow-up intents. For example, if the active context is order-fulfilled , only intents that have order-fulfilled configured as a trigger are considered for follow up.\n\nname -> (string)\n\nThe name of the context.\n\ntimeToLive -> (structure)\n\nIndicates the number of turns or seconds that the context is active. Once the time to live expires, the context is no longer returned in a response.\n\ntimeToLiveInSeconds -> (integer)\n\nThe number of seconds that the context is active. You can specify between 5 and 86400 seconds (24 hours).\n\nturnsToLive -> (integer)\n\nThe number of turns that the context is active. You can specify up to 20 turns. Each request and response from the bot is a turn.\n\ncontextAttributes -> (map)\n\nA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request.\n\nIf you don’t specify a list of contexts, Amazon Lex V2 will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\n\nkey -> (string)\n\nvalue -> (string)\n\nsessionAttributes -> (map)\n\nMap of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.\n\nkey -> (string)\n\nvalue -> (string)\n\noriginatingRequestId -> (string)"
    },
    {
      "command_name": "put-session",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lexv2-runtime/put-session.html",
      "command_description": "Description\n\nCreates a new session or modifies an existing session with an Amazon Lex V2 bot. Use this operation to enable your application to set the state of the bot.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-session\n--bot-id <value>\n--bot-alias-id <value>\n--locale-id <value>\n--session-id <value>\n[--messages <value>]\n--session-state <value>\n[--request-attributes <value>]\n[--response-content-type <value>]\n<outfile>\n",
      "command_options": [
        "--bot-id <value>",
        "--bot-alias-id <value>",
        "--locale-id <value>",
        "--session-id <value>",
        "[--messages <value>]",
        "--session-state <value>",
        "[--request-attributes <value>]",
        "[--response-content-type <value>]",
        "<outfile>"
      ],
      "command_options_description": "Options\n\n--bot-id (string)\n\nThe identifier of the bot that receives the session data.\n\n--bot-alias-id (string)\n\nThe alias identifier of the bot that receives the session data.\n\n--locale-id (string)\n\nThe locale where the session is in use.\n\n--session-id (string)\n\nThe identifier of the session that receives the session data.\n\n--messages (list)\n\nA list of messages to send to the user. Messages are sent in the order that they are defined in the list.\n\n(structure)\n\nContainer for text that is returned to the customer..\n\ncontent -> (string)\n\nThe text of the message.\n\ncontentType -> (string)\n\nIndicates the type of response.\n\nimageResponseCard -> (structure)\n\nA card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform.\n\nWhen you use a response card, the response from the user is constrained to the text associated with a button on the card.\n\ntitle -> (string)\n\nThe title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle -> (string)\n\nThe subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl -> (string)\n\nThe URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons -> (list)\n\nA list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(structure)\n\nA button that appears on a response card show to the user.\n\ntext -> (string)\n\nThe text that is displayed on the button.\n\nvalue -> (string)\n\nThe value returned to Amazon Lex V2 when a user chooses the button.\n\nJSON Syntax:\n\n[\n  {\n    \"content\": \"string\",\n    \"contentType\": \"CustomPayload\"|\"ImageResponseCard\"|\"PlainText\"|\"SSML\",\n    \"imageResponseCard\": {\n      \"title\": \"string\",\n      \"subtitle\": \"string\",\n      \"imageUrl\": \"string\",\n      \"buttons\": [\n        {\n          \"text\": \"string\",\n          \"value\": \"string\"\n        }\n        ...\n      ]\n    }\n  }\n  ...\n]\n\n\n--session-state (structure)\n\nSets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user.\n\ndialogAction -> (structure)\n\nThe next step that Amazon Lex V2 should take in the conversation with a user.\n\ntype -> (string)\n\nThe next action that the bot should take in its interaction with the user. The possible values are:\n\nClose - Indicates that there will not be a response from the user. For example, the statement “Your order has been placed” does not require a response.\n\nConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as “Place the order?”\n\nDelegate - The next action is determined by Amazon Lex V2.\n\nElicitSlot - The next action is to elicit a slot value from the user.\n\nslotToElicit -> (string)\n\nThe name of the slot that should be elicited from the user.\n\nintent -> (structure)\n\nThe active intent that Amazon Lex V2 is processing.\n\nname -> (string)\n\nThe name of the intent.\n\nslots -> (map)\n\nA map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null.\n\nkey -> (string)\n\nvalue -> (structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n(structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n( … recursive … )\n\nstate -> (string)\n\nContains fulfillment information for the intent.\n\nconfirmationState -> (string)\n\nContains information about whether fulfillment of the intent has been confirmed.\n\nactiveContexts -> (list)\n\nOne or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.\n\n(structure)\n\nContains information about the contexts that a user is using in a session. You can configure Amazon Lex V2 to set a context when an intent is fulfilled, or you can set a context using the , , or operations.\n\nUse a context to indicate to Amazon Lex V2 intents that should be used as follow-up intents. For example, if the active context is order-fulfilled , only intents that have order-fulfilled configured as a trigger are considered for follow up.\n\nname -> (string)\n\nThe name of the context.\n\ntimeToLive -> (structure)\n\nIndicates the number of turns or seconds that the context is active. Once the time to live expires, the context is no longer returned in a response.\n\ntimeToLiveInSeconds -> (integer)\n\nThe number of seconds that the context is active. You can specify between 5 and 86400 seconds (24 hours).\n\nturnsToLive -> (integer)\n\nThe number of turns that the context is active. You can specify up to 20 turns. Each request and response from the bot is a turn.\n\ncontextAttributes -> (map)\n\nA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request.\n\nIf you don’t specify a list of contexts, Amazon Lex V2 will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\n\nkey -> (string)\n\nvalue -> (string)\n\nsessionAttributes -> (map)\n\nMap of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.\n\nkey -> (string)\n\nvalue -> (string)\n\noriginatingRequestId -> (string)\n\nJSON Syntax:\n\n{\n  \"dialogAction\": {\n    \"type\": \"Close\"|\"ConfirmIntent\"|\"Delegate\"|\"ElicitIntent\"|\"ElicitSlot\"|\"None\",\n    \"slotToElicit\": \"string\"\n  },\n  \"intent\": {\n    \"name\": \"string\",\n    \"slots\": {\"string\": {\n          \"value\": {\n            \"originalValue\": \"string\",\n            \"interpretedValue\": \"string\",\n            \"resolvedValues\": [\"string\", ...]\n          },\n          \"shape\": \"Scalar\"|\"List\",\n          \"values\": [\n            {\n              \"value\": {\n                \"originalValue\": \"string\",\n                \"interpretedValue\": \"string\",\n                \"resolvedValues\": [\"string\", ...]\n              },\n              \"shape\": \"Scalar\"|\"List\",\n              \"values\": [\n                { ... recursive ... }\n                ...\n              ]\n            }\n            ...\n          ]\n        }\n      ...},\n    \"state\": \"Failed\"|\"Fulfilled\"|\"InProgress\"|\"ReadyForFulfillment\"|\"Waiting\"|\"FulfillmentInProgress\",\n    \"confirmationState\": \"Confirmed\"|\"Denied\"|\"None\"\n  },\n  \"activeContexts\": [\n    {\n      \"name\": \"string\",\n      \"timeToLive\": {\n        \"timeToLiveInSeconds\": integer,\n        \"turnsToLive\": integer\n      },\n      \"contextAttributes\": {\"string\": \"string\"\n        ...}\n    }\n    ...\n  ],\n  \"sessionAttributes\": {\"string\": \"string\"\n    ...},\n  \"originatingRequestId\": \"string\"\n}\n\n\n--request-attributes (map)\n\nRequest-specific information passed between Amazon Lex V2 and the client application.\n\nThe namespace x-amz-lex: is reserved for special attributes. Don’t create any request attributes with the prefix x-amz-lex: .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--response-content-type (string)\n\nThe message that Amazon Lex V2 returns in the response can be either text or speech depending on the value of this parameter.\n\nIf the value is text/plain; charset=utf-8 , Amazon Lex V2 returns text in the response.\n\noutfile (string) Filename where the content will be saved\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncontentType -> (string)\n\nThe type of response. Same as the type specified in the responseContentType field in the request.\n\nmessages -> (string)\n\nA list of messages that were last sent to the user. The messages are ordered based on how you return the messages from you Lambda function or the order that the messages are defined in the bot.\n\nsessionState -> (string)\n\nRepresents the current state of the dialog between the user and the bot.\n\nUse this to determine the progress of the conversation and what the next action may be.\n\nrequestAttributes -> (string)\n\nRequest-specific information passed between the client application and Amazon Lex V2. These are the same as the requestAttribute parameter in the call to the PutSession operation.\n\nsessionId -> (string)\n\nThe identifier of the session that received the data.\n\naudioStream -> (blob)\n\nIf the requested content type was audio, the audio version of the message to convey to the user."
    },
    {
      "command_name": "recognize-text",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lexv2-runtime/recognize-text.html",
      "command_description": "Description\n\nSends user input to Amazon Lex V2. Client applications use this API to send requests to Amazon Lex V2 at runtime. Amazon Lex V2 then interprets the user input using the machine learning model that it build for the bot.\n\nIn response, Amazon Lex V2 returns the next message to convey to the user and an optional response card to display.\n\nIf the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see PostFulfillmentStatusSpecification .\n\nSuccess message - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.\n\nFailed message - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.\n\nTimeout message - If you don’t configure a timeout message and a timeout, and the Lambda function doesn’t return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out.\n\nFor more information, see Completion message .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  recognize-text\n--bot-id <value>\n--bot-alias-id <value>\n--locale-id <value>\n--session-id <value>\n--text <value>\n[--session-state <value>]\n[--request-attributes <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--bot-id <value>",
        "--bot-alias-id <value>",
        "--locale-id <value>",
        "--session-id <value>",
        "--text <value>",
        "[--session-state <value>]",
        "[--request-attributes <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--bot-id (string)\n\nThe identifier of the bot that processes the request.\n\n--bot-alias-id (string)\n\nThe alias identifier in use for the bot that processes the request.\n\n--locale-id (string)\n\nThe locale where the session is in use.\n\n--session-id (string)\n\nThe identifier of the user session that is having the conversation.\n\n--text (string)\n\nThe text that the user entered. Amazon Lex V2 interprets this text.\n\n--session-state (structure)\n\nThe current state of the dialog between the user and the bot.\n\ndialogAction -> (structure)\n\nThe next step that Amazon Lex V2 should take in the conversation with a user.\n\ntype -> (string)\n\nThe next action that the bot should take in its interaction with the user. The possible values are:\n\nClose - Indicates that there will not be a response from the user. For example, the statement “Your order has been placed” does not require a response.\n\nConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as “Place the order?”\n\nDelegate - The next action is determined by Amazon Lex V2.\n\nElicitSlot - The next action is to elicit a slot value from the user.\n\nslotToElicit -> (string)\n\nThe name of the slot that should be elicited from the user.\n\nintent -> (structure)\n\nThe active intent that Amazon Lex V2 is processing.\n\nname -> (string)\n\nThe name of the intent.\n\nslots -> (map)\n\nA map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null.\n\nkey -> (string)\n\nvalue -> (structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n(structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n( … recursive … )\n\nstate -> (string)\n\nContains fulfillment information for the intent.\n\nconfirmationState -> (string)\n\nContains information about whether fulfillment of the intent has been confirmed.\n\nactiveContexts -> (list)\n\nOne or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.\n\n(structure)\n\nContains information about the contexts that a user is using in a session. You can configure Amazon Lex V2 to set a context when an intent is fulfilled, or you can set a context using the , , or operations.\n\nUse a context to indicate to Amazon Lex V2 intents that should be used as follow-up intents. For example, if the active context is order-fulfilled , only intents that have order-fulfilled configured as a trigger are considered for follow up.\n\nname -> (string)\n\nThe name of the context.\n\ntimeToLive -> (structure)\n\nIndicates the number of turns or seconds that the context is active. Once the time to live expires, the context is no longer returned in a response.\n\ntimeToLiveInSeconds -> (integer)\n\nThe number of seconds that the context is active. You can specify between 5 and 86400 seconds (24 hours).\n\nturnsToLive -> (integer)\n\nThe number of turns that the context is active. You can specify up to 20 turns. Each request and response from the bot is a turn.\n\ncontextAttributes -> (map)\n\nA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request.\n\nIf you don’t specify a list of contexts, Amazon Lex V2 will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\n\nkey -> (string)\n\nvalue -> (string)\n\nsessionAttributes -> (map)\n\nMap of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.\n\nkey -> (string)\n\nvalue -> (string)\n\noriginatingRequestId -> (string)\n\nJSON Syntax:\n\n{\n  \"dialogAction\": {\n    \"type\": \"Close\"|\"ConfirmIntent\"|\"Delegate\"|\"ElicitIntent\"|\"ElicitSlot\"|\"None\",\n    \"slotToElicit\": \"string\"\n  },\n  \"intent\": {\n    \"name\": \"string\",\n    \"slots\": {\"string\": {\n          \"value\": {\n            \"originalValue\": \"string\",\n            \"interpretedValue\": \"string\",\n            \"resolvedValues\": [\"string\", ...]\n          },\n          \"shape\": \"Scalar\"|\"List\",\n          \"values\": [\n            {\n              \"value\": {\n                \"originalValue\": \"string\",\n                \"interpretedValue\": \"string\",\n                \"resolvedValues\": [\"string\", ...]\n              },\n              \"shape\": \"Scalar\"|\"List\",\n              \"values\": [\n                { ... recursive ... }\n                ...\n              ]\n            }\n            ...\n          ]\n        }\n      ...},\n    \"state\": \"Failed\"|\"Fulfilled\"|\"InProgress\"|\"ReadyForFulfillment\"|\"Waiting\"|\"FulfillmentInProgress\",\n    \"confirmationState\": \"Confirmed\"|\"Denied\"|\"None\"\n  },\n  \"activeContexts\": [\n    {\n      \"name\": \"string\",\n      \"timeToLive\": {\n        \"timeToLiveInSeconds\": integer,\n        \"turnsToLive\": integer\n      },\n      \"contextAttributes\": {\"string\": \"string\"\n        ...}\n    }\n    ...\n  ],\n  \"sessionAttributes\": {\"string\": \"string\"\n    ...},\n  \"originatingRequestId\": \"string\"\n}\n\n\n--request-attributes (map)\n\nRequest-specific information passed between the client application and Amazon Lex V2\n\nThe namespace x-amz-lex: is reserved for special attributes. Don’t create any request attributes with the prefix x-amz-lex: .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nmessages -> (list)\n\nA list of messages last sent to the user. The messages are ordered based on the order that you returned the messages from your Lambda function or the order that the messages are defined in the bot.\n\n(structure)\n\nContainer for text that is returned to the customer..\n\ncontent -> (string)\n\nThe text of the message.\n\ncontentType -> (string)\n\nIndicates the type of response.\n\nimageResponseCard -> (structure)\n\nA card that is shown to the user by a messaging platform. You define the contents of the card, the card is displayed by the platform.\n\nWhen you use a response card, the response from the user is constrained to the text associated with a button on the card.\n\ntitle -> (string)\n\nThe title to display on the response card. The format of the title is determined by the platform displaying the response card.\n\nsubtitle -> (string)\n\nThe subtitle to display on the response card. The format of the subtitle is determined by the platform displaying the response card.\n\nimageUrl -> (string)\n\nThe URL of an image to display on the response card. The image URL must be publicly available so that the platform displaying the response card has access to the image.\n\nbuttons -> (list)\n\nA list of buttons that should be displayed on the response card. The arrangement of the buttons is determined by the platform that displays the button.\n\n(structure)\n\nA button that appears on a response card show to the user.\n\ntext -> (string)\n\nThe text that is displayed on the button.\n\nvalue -> (string)\n\nThe value returned to Amazon Lex V2 when a user chooses the button.\n\nsessionState -> (structure)\n\nRepresents the current state of the dialog between the user and the bot.\n\nUse this to determine the progress of the conversation and what the next action may be.\n\ndialogAction -> (structure)\n\nThe next step that Amazon Lex V2 should take in the conversation with a user.\n\ntype -> (string)\n\nThe next action that the bot should take in its interaction with the user. The possible values are:\n\nClose - Indicates that there will not be a response from the user. For example, the statement “Your order has been placed” does not require a response.\n\nConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as “Place the order?”\n\nDelegate - The next action is determined by Amazon Lex V2.\n\nElicitSlot - The next action is to elicit a slot value from the user.\n\nslotToElicit -> (string)\n\nThe name of the slot that should be elicited from the user.\n\nintent -> (structure)\n\nThe active intent that Amazon Lex V2 is processing.\n\nname -> (string)\n\nThe name of the intent.\n\nslots -> (map)\n\nA map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null.\n\nkey -> (string)\n\nvalue -> (structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n(structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n( … recursive … )\n\nstate -> (string)\n\nContains fulfillment information for the intent.\n\nconfirmationState -> (string)\n\nContains information about whether fulfillment of the intent has been confirmed.\n\nactiveContexts -> (list)\n\nOne or more contexts that indicate to Amazon Lex V2 the context of a request. When a context is active, Amazon Lex V2 considers intents with the matching context as a trigger as the next intent in a session.\n\n(structure)\n\nContains information about the contexts that a user is using in a session. You can configure Amazon Lex V2 to set a context when an intent is fulfilled, or you can set a context using the , , or operations.\n\nUse a context to indicate to Amazon Lex V2 intents that should be used as follow-up intents. For example, if the active context is order-fulfilled , only intents that have order-fulfilled configured as a trigger are considered for follow up.\n\nname -> (string)\n\nThe name of the context.\n\ntimeToLive -> (structure)\n\nIndicates the number of turns or seconds that the context is active. Once the time to live expires, the context is no longer returned in a response.\n\ntimeToLiveInSeconds -> (integer)\n\nThe number of seconds that the context is active. You can specify between 5 and 86400 seconds (24 hours).\n\nturnsToLive -> (integer)\n\nThe number of turns that the context is active. You can specify up to 20 turns. Each request and response from the bot is a turn.\n\ncontextAttributes -> (map)\n\nA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request.\n\nIf you don’t specify a list of contexts, Amazon Lex V2 will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\n\nkey -> (string)\n\nvalue -> (string)\n\nsessionAttributes -> (map)\n\nMap of key/value pairs representing session-specific context information. It contains application information passed between Amazon Lex V2 and a client application.\n\nkey -> (string)\n\nvalue -> (string)\n\noriginatingRequestId -> (string)\n\ninterpretations -> (list)\n\nA list of intents that Amazon Lex V2 determined might satisfy the user’s utterance.\n\nEach interpretation includes the intent, a score that indicates now confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.\n\n(structure)\n\nAn intent that Amazon Lex V2 determined might satisfy the user’s utterance. The intents are ordered by the confidence score.\n\nnluConfidence -> (structure)\n\nDetermines the threshold where Amazon Lex V2 will insert the AMAZON.FallbackIntent , AMAZON.KendraSearchIntent , or both when returning alternative intents in a response. AMAZON.FallbackIntent and AMAZON.KendraSearchIntent are only inserted if they are configured for the bot.\n\nscore -> (double)\n\nA score that indicates how confident Amazon Lex V2 is that an intent satisfies the user’s intent. Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.\n\nsentimentResponse -> (structure)\n\nThe sentiment expressed in an utterance.\n\nWhen the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.\n\nsentiment -> (string)\n\nThe overall sentiment expressed in the user’s response. This is the sentiment most likely expressed by the user based on the analysis by Amazon Comprehend.\n\nsentimentScore -> (structure)\n\nThe individual sentiment responses for the utterance.\n\npositive -> (double)\n\nThe level of confidence that Amazon Comprehend has in the accuracy of its detection of the POSITIVE sentiment.\n\nnegative -> (double)\n\nThe level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEGATIVE sentiment.\n\nneutral -> (double)\n\nThe level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEUTRAL sentiment.\n\nmixed -> (double)\n\nThe level of confidence that Amazon Comprehend has in the accuracy of its detection of the MIXED sentiment.\n\nintent -> (structure)\n\nA list of intents that might satisfy the user’s utterance. The intents are ordered by the confidence score.\n\nname -> (string)\n\nThe name of the intent.\n\nslots -> (map)\n\nA map of all of the slots for the intent. The name of the slot maps to the value of the slot. If a slot has not been filled, the value is null.\n\nkey -> (string)\n\nvalue -> (structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n(structure)\n\nA value that Amazon Lex V2 uses to fulfill an intent.\n\nvalue -> (structure)\n\nThe current value of the slot.\n\noriginalValue -> (string)\n\nThe text of the utterance from the user that was entered for the slot.\n\ninterpretedValue -> (string)\n\nThe value that Amazon Lex V2 determines for the slot. The actual value depends on the setting of the value selection strategy for the bot. You can choose to use the value entered by the user, or you can have Amazon Lex V2 choose the first value in the resolvedValues list.\n\nresolvedValues -> (list)\n\nA list of additional values that have been recognized for the slot.\n\n(string)\n\nshape -> (string)\n\nWhen the shape value is List , it indicates that the values field contains a list of slot values. When the value is Scalar , it indicates that the value field contains a single value.\n\nvalues -> (list)\n\nA list of one or more values that the user provided for the slot. For example, if a for a slot that elicits pizza toppings, the values might be “pepperoni” and “pineapple.”\n\n( … recursive … )\n\nstate -> (string)\n\nContains fulfillment information for the intent.\n\nconfirmationState -> (string)\n\nContains information about whether fulfillment of the intent has been confirmed.\n\nrequestAttributes -> (map)\n\nThe attributes sent in the request.\n\nkey -> (string)\n\nvalue -> (string)\n\nsessionId -> (string)\n\nThe identifier of the session in use."
    },
    {
      "command_name": "recognize-utterance",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lexv2-runtime/recognize-utterance.html",
      "command_description": "Description\n\nSends user input to Amazon Lex V2. You can send text or speech. Clients use this API to send text and audio requests to Amazon Lex V2 at runtime. Amazon Lex V2 interprets the user input using the machine learning model built for the bot.\n\nThe following request fields must be compressed with gzip and then base64 encoded before you send them to Amazon Lex V2.\n\nrequestAttributes\n\nsessionState\n\nThe following response fields are compressed using gzip and then base64 encoded by Amazon Lex V2. Before you can use these fields, you must decode and decompress them.\n\ninputTranscript\n\ninterpretations\n\nmessages\n\nrequestAttributes\n\nsessionState\n\nThe example contains a Java application that compresses and encodes a Java object to send to Amazon Lex V2, and a second that decodes and decompresses a response from Amazon Lex V2.\n\nIf the optional post-fulfillment response is specified, the messages are returned as follows. For more information, see PostFulfillmentStatusSpecification .\n\nSuccess message - Returned if the Lambda function completes successfully and the intent state is fulfilled or ready fulfillment if the message is present.\n\nFailed message - The failed message is returned if the Lambda function throws an exception or if the Lambda function returns a failed intent state without a message.\n\nTimeout message - If you don’t configure a timeout message and a timeout, and the Lambda function doesn’t return within 30 seconds, the timeout message is returned. If you configure a timeout, the timeout message is returned when the period times out.\n\nFor more information, see Completion message .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  recognize-utterance\n--bot-id <value>\n--bot-alias-id <value>\n--locale-id <value>\n--session-id <value>\n[--session-state <value>]\n[--request-attributes <value>]\n--request-content-type <value>\n[--response-content-type <value>]\n[--input-stream <value>]\n<outfile>\n",
      "command_options": [
        "--bot-id <value>",
        "--bot-alias-id <value>",
        "--locale-id <value>",
        "--session-id <value>",
        "[--session-state <value>]",
        "[--request-attributes <value>]",
        "--request-content-type <value>",
        "[--response-content-type <value>]",
        "[--input-stream <value>]",
        "<outfile>"
      ],
      "command_options_description": "Options\n\n--bot-id (string)\n\nThe identifier of the bot that should receive the request.\n\n--bot-alias-id (string)\n\nThe alias identifier in use for the bot that should receive the request.\n\n--locale-id (string)\n\nThe locale where the session is in use.\n\n--session-id (string)\n\nThe identifier of the session in use.\n\n--session-state (string)\n\nSets the state of the session with the user. You can use this to set the current intent, attributes, context, and dialog action. Use the dialog action to determine the next step that Amazon Lex V2 should use in the conversation with the user.\n\nThe sessionState field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.\n\n--request-attributes (string)\n\nRequest-specific information passed between the client application and Amazon Lex V2\n\nThe namespace x-amz-lex: is reserved for special attributes. Don’t create any request attributes for prefix x-amz-lex: .\n\nThe requestAttributes field must be compressed using gzip and then base64 encoded before sending to Amazon Lex V2.\n\n--request-content-type (string)\n\nIndicates the format for audio input or that the content is text. The header must start with one of the following prefixes:\n\nPCM format, audio data must be in little-endian byte order.\n\naudio/l16; rate=16000; channels=1\n\naudio/x-l16; sample-rate=16000; channel-count=1\n\naudio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false\n\nOpus format\n\naudio/x-cbr-opus-with-preamble;preamble-size=0;bit-rate=256000;frame-size-milliseconds=4\n\nText format\n\ntext/plain; charset=utf-8\n\n--response-content-type (string)\n\nThe message that Amazon Lex V2 returns in the response can be either text or speech based on the responseContentType value.\n\nIf the value is text/plain;charset=utf-8 , Amazon Lex V2 returns text in the response.\n\nIf the value begins with audio/ , Amazon Lex V2 returns speech in the response. Amazon Lex V2 uses Amazon Polly to generate the speech using the configuration that you specified in the requestContentType parameter. For example, if you specify audio/mpeg as the value, Amazon Lex V2 returns speech in the MPEG format.\n\nIf the value is audio/pcm , the speech returned is audio/pcm at 16 KHz in 16-bit, little-endian format.\n\nThe following are the accepted values:\n\naudio/mpeg\n\naudio/ogg\n\naudio/pcm (16 KHz)\n\naudio/* (defaults to mpeg)\n\ntext/plain; charset=utf-8\n\n--input-stream (blob)\n\nUser input in PCM or Opus audio format or text format as described in the requestContentType parameter.\n\noutfile (string) Filename where the content will be saved\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ninputMode -> (string)\n\nIndicates whether the input mode to the operation was text or speech.\n\ncontentType -> (string)\n\nContent type as specified in the responseContentType in the request.\n\nmessages -> (string)\n\nA list of messages that were last sent to the user. The messages are ordered based on the order that you returned the messages from your Lambda function or the order that the messages are defined in the bot.\n\nThe messages field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.\n\ninterpretations -> (string)\n\nA list of intents that Amazon Lex V2 determined might satisfy the user’s utterance.\n\nEach interpretation includes the intent, a score that indicates how confident Amazon Lex V2 is that the interpretation is the correct one, and an optional sentiment response that indicates the sentiment expressed in the utterance.\n\nThe interpretations field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.\n\nsessionState -> (string)\n\nRepresents the current state of the dialog between the user and the bot.\n\nUse this to determine the progress of the conversation and what the next action might be.\n\nThe sessionState field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.\n\nrequestAttributes -> (string)\n\nThe attributes sent in the request.\n\nThe requestAttributes field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents.\n\nsessionId -> (string)\n\nThe identifier of the session in use.\n\ninputTranscript -> (string)\n\nThe text used to process the request.\n\nIf the input was an audio stream, the inputTranscript field contains the text extracted from the audio stream. This is the text that is actually processed to recognize intents and slot values. You can use this information to determine if Amazon Lex V2 is correctly processing the audio that you send.\n\nThe inputTranscript field is compressed with gzip and then base64 encoded. Before you can use the contents of the field, you must decode and decompress the contents. See the example for a simple function to decode and decompress the contents.\n\naudioStream -> (blob)\n\nThe prompt or statement to send to the user. This is based on the bot configuration and context. For example, if Amazon Lex V2 did not understand the user intent, it sends the clarificationPrompt configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the confirmationPrompt . Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex V2 sends that message in the response."
    }
  ],
  "service_description": "Description"
}