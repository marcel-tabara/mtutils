{
  "service_name": "acm-pca",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/index.html",
  "service_commands": [
    {
      "command_name": "create-certificate-authority",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/create-certificate-authority.html",
      "command_description": "Description\n\nCreates a root or subordinate private certificate authority (CA). You must specify the CA configuration, an optional configuration for Online Certificate Status Protocol (OCSP) and/or a certificate revocation list (CRL), the CA type, and an optional idempotency token to avoid accidental creation of multiple CAs. The CA configuration specifies the name of the algorithm and key size to be used to create the CA private key, the type of signing algorithm that the CA uses, and X.500 subject information. The OCSP configuration can optionally specify a custom URL for the OCSP responder. The CRL configuration specifies the CRL expiration period in days (the validity period of the CRL), the Amazon S3 bucket that will contain the CRL, and a CNAME alias for the S3 bucket that is included in certificates issued by the CA. If successful, this action returns the Amazon Resource Name (ARN) of the CA.\n\nACM Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see Encrypting Your CRLs .\n\nNote\n\nBoth PCA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Configure Access to ACM Private CA .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-certificate-authority\n--certificate-authority-configuration <value>\n[--revocation-configuration <value>]\n--certificate-authority-type <value>\n[--idempotency-token <value>]\n[--key-storage-security-standard <value>]\n[--tags <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-configuration <value>",
        "[--revocation-configuration <value>]",
        "--certificate-authority-type <value>",
        "[--idempotency-token <value>]",
        "[--key-storage-security-standard <value>]",
        "[--tags <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-configuration (structure)\n\nName and bit size of the private key algorithm, the name of the signing algorithm, and X.500 certificate subject information.\n\nKeyAlgorithm -> (string)\n\nType of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.\n\nSigningAlgorithm -> (string)\n\nName of the algorithm your private CA uses to sign certificate requests.\n\nThis parameter should not be confused with the SigningAlgorithm parameter used to sign certificates when they are issued.\n\nSubject -> (structure)\n\nStructure that contains X.500 distinguished name information for your private CA.\n\nCountry -> (string)\n\nTwo-digit code that specifies the country in which the certificate subject located.\n\nOrganization -> (string)\n\nLegal name of the organization with which the certificate subject is affiliated.\n\nOrganizationalUnit -> (string)\n\nA subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.\n\nDistinguishedNameQualifier -> (string)\n\nDisambiguating information for the certificate subject.\n\nState -> (string)\n\nState in which the subject of the certificate is located.\n\nCommonName -> (string)\n\nFor CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit.\n\nNote: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.\n\nSerialNumber -> (string)\n\nThe certificate serial number.\n\nLocality -> (string)\n\nThe locality (such as a city or town) in which the certificate subject is located.\n\nTitle -> (string)\n\nA title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.\n\nSurname -> (string)\n\nFamily name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.\n\nGivenName -> (string)\n\nFirst name.\n\nInitials -> (string)\n\nConcatenation that typically contains the first letter of the GivenName , the first letter of the middle name if one exists, and the first letter of the Surname .\n\nPseudonym -> (string)\n\nTypically a shortened version of a longer GivenName . For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.\n\nGenerationQualifier -> (string)\n\nTypically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.\n\nCsrExtensions -> (structure)\n\nSpecifies information to be added to the extension section of the certificate signing request (CSR).\n\nKeyUsage -> (structure)\n\nIndicates the purpose of the certificate and of the key contained in the certificate.\n\nDigitalSignature -> (boolean)\n\nKey can be used for digital signing.\n\nNonRepudiation -> (boolean)\n\nKey can be used for non-repudiation.\n\nKeyEncipherment -> (boolean)\n\nKey can be used to encipher data.\n\nDataEncipherment -> (boolean)\n\nKey can be used to decipher data.\n\nKeyAgreement -> (boolean)\n\nKey can be used in a key-agreement protocol.\n\nKeyCertSign -> (boolean)\n\nKey can be used to sign certificates.\n\nCRLSign -> (boolean)\n\nKey can be used to sign CRLs.\n\nEncipherOnly -> (boolean)\n\nKey can be used only to encipher data.\n\nDecipherOnly -> (boolean)\n\nKey can be used only to decipher data.\n\nSubjectInformationAccess -> (list)\n\nFor CA certificates, provides a path to additional information pertaining to the CA, such as revocation and policy. For more information, see Subject Information Access in RFC 5280.\n\n(structure)\n\nProvides access information used by the authorityInfoAccess and subjectInfoAccess extensions described in RFC 5280 .\n\nAccessMethod -> (structure)\n\nThe type and format of AccessDescription information.\n\nCustomObjectIdentifier -> (string)\n\nAn object identifier (OID) specifying the AccessMethod . The OID must satisfy the regular expression shown below. For more information, see NIST’s definition of Object Identifier (OID) .\n\nAccessMethodType -> (string)\n\nSpecifies the AccessMethod .\n\nAccessLocation -> (structure)\n\nThe location of AccessDescription information.\n\nOtherName -> (structure)\n\nRepresents GeneralName using an OtherName object.\n\nTypeId -> (string)\n\nSpecifies an OID.\n\nValue -> (string)\n\nSpecifies an OID value.\n\nRfc822Name -> (string)\n\nRepresents GeneralName as an RFC 822 email address.\n\nDnsName -> (string)\n\nRepresents GeneralName as a DNS name.\n\nDirectoryName -> (structure)\n\nContains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.\n\nCountry -> (string)\n\nTwo-digit code that specifies the country in which the certificate subject located.\n\nOrganization -> (string)\n\nLegal name of the organization with which the certificate subject is affiliated.\n\nOrganizationalUnit -> (string)\n\nA subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.\n\nDistinguishedNameQualifier -> (string)\n\nDisambiguating information for the certificate subject.\n\nState -> (string)\n\nState in which the subject of the certificate is located.\n\nCommonName -> (string)\n\nFor CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit.\n\nNote: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.\n\nSerialNumber -> (string)\n\nThe certificate serial number.\n\nLocality -> (string)\n\nThe locality (such as a city or town) in which the certificate subject is located.\n\nTitle -> (string)\n\nA title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.\n\nSurname -> (string)\n\nFamily name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.\n\nGivenName -> (string)\n\nFirst name.\n\nInitials -> (string)\n\nConcatenation that typically contains the first letter of the GivenName , the first letter of the middle name if one exists, and the first letter of the Surname .\n\nPseudonym -> (string)\n\nTypically a shortened version of a longer GivenName . For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.\n\nGenerationQualifier -> (string)\n\nTypically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.\n\nEdiPartyName -> (structure)\n\nRepresents GeneralName as an EdiPartyName object.\n\nPartyName -> (string)\n\nSpecifies the party name.\n\nNameAssigner -> (string)\n\nSpecifies the name assigner.\n\nUniformResourceIdentifier -> (string)\n\nRepresents GeneralName as a URI.\n\nIpAddress -> (string)\n\nRepresents GeneralName as an IPv4 or IPv6 address.\n\nRegisteredId -> (string)\n\nRepresents GeneralName as an object identifier (OID).\n\nJSON Syntax:\n\n{\n  \"KeyAlgorithm\": \"RSA_2048\"|\"RSA_4096\"|\"EC_prime256v1\"|\"EC_secp384r1\",\n  \"SigningAlgorithm\": \"SHA256WITHECDSA\"|\"SHA384WITHECDSA\"|\"SHA512WITHECDSA\"|\"SHA256WITHRSA\"|\"SHA384WITHRSA\"|\"SHA512WITHRSA\",\n  \"Subject\": {\n    \"Country\": \"string\",\n    \"Organization\": \"string\",\n    \"OrganizationalUnit\": \"string\",\n    \"DistinguishedNameQualifier\": \"string\",\n    \"State\": \"string\",\n    \"CommonName\": \"string\",\n    \"SerialNumber\": \"string\",\n    \"Locality\": \"string\",\n    \"Title\": \"string\",\n    \"Surname\": \"string\",\n    \"GivenName\": \"string\",\n    \"Initials\": \"string\",\n    \"Pseudonym\": \"string\",\n    \"GenerationQualifier\": \"string\"\n  },\n  \"CsrExtensions\": {\n    \"KeyUsage\": {\n      \"DigitalSignature\": true|false,\n      \"NonRepudiation\": true|false,\n      \"KeyEncipherment\": true|false,\n      \"DataEncipherment\": true|false,\n      \"KeyAgreement\": true|false,\n      \"KeyCertSign\": true|false,\n      \"CRLSign\": true|false,\n      \"EncipherOnly\": true|false,\n      \"DecipherOnly\": true|false\n    },\n    \"SubjectInformationAccess\": [\n      {\n        \"AccessMethod\": {\n          \"CustomObjectIdentifier\": \"string\",\n          \"AccessMethodType\": \"CA_REPOSITORY\"|\"RESOURCE_PKI_MANIFEST\"|\"RESOURCE_PKI_NOTIFY\"\n        },\n        \"AccessLocation\": {\n          \"OtherName\": {\n            \"TypeId\": \"string\",\n            \"Value\": \"string\"\n          },\n          \"Rfc822Name\": \"string\",\n          \"DnsName\": \"string\",\n          \"DirectoryName\": {\n            \"Country\": \"string\",\n            \"Organization\": \"string\",\n            \"OrganizationalUnit\": \"string\",\n            \"DistinguishedNameQualifier\": \"string\",\n            \"State\": \"string\",\n            \"CommonName\": \"string\",\n            \"SerialNumber\": \"string\",\n            \"Locality\": \"string\",\n            \"Title\": \"string\",\n            \"Surname\": \"string\",\n            \"GivenName\": \"string\",\n            \"Initials\": \"string\",\n            \"Pseudonym\": \"string\",\n            \"GenerationQualifier\": \"string\"\n          },\n          \"EdiPartyName\": {\n            \"PartyName\": \"string\",\n            \"NameAssigner\": \"string\"\n          },\n          \"UniformResourceIdentifier\": \"string\",\n          \"IpAddress\": \"string\",\n          \"RegisteredId\": \"string\"\n        }\n      }\n      ...\n    ]\n  }\n}\n\n\n--revocation-configuration (structure)\n\nContains information to enable Online Certificate Status Protocol (OCSP) support, to enable a certificate revocation list (CRL), to enable both, or to enable neither. The default is for both certificate validation mechanisms to be disabled. For more information, see the OcspConfiguration and CrlConfiguration types.\n\nCrlConfiguration -> (structure)\n\nConfiguration of the certificate revocation list (CRL), if any, maintained by your private CA. A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason a CRL update fails, ACM Private CA makes further attempts every 15 minutes.\n\nEnabled -> (boolean)\n\nBoolean value that specifies whether certificate revocation lists (CRLs) are enabled. You can use this value to enable certificate revocation for a new CA when you call the CreateCertificateAuthority action or for an existing CA when you call the UpdateCertificateAuthority action.\n\nExpirationInDays -> (integer)\n\nValidity period of the CRL in days.\n\nCustomCname -> (string)\n\nName inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don’t want the name of your S3 bucket to be public.\n\nS3BucketName -> (string)\n\nName of the S3 bucket that contains the CRL. If you do not provide a value for the CustomCname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You can change the name of your bucket by calling the UpdateCertificateAuthority operation. You must specify a bucket policy that allows ACM Private CA to write the CRL to your bucket.\n\nS3ObjectAcl -> (string)\n\nDetermines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. If you choose PUBLIC_READ, the CRL will be accessible over the public internet. If you choose BUCKET_OWNER_FULL_CONTROL, only the owner of the CRL S3 bucket can access the CRL, and your PKI clients may need an alternative method of access.\n\nIf no value is specified, the default is PUBLIC_READ .\n\nNote: This default can cause CA creation to fail in some circumstances. If you have have enabled the Block Public Access (BPA) feature in your S3 account, then you must specify the value of this parameter as BUCKET_OWNER_FULL_CONTROL , and not doing so results in an error. If you have disabled BPA in S3, then you can specify either BUCKET_OWNER_FULL_CONTROL or PUBLIC_READ as the value.\n\nFor more information, see Blocking public access to the S3 bucket .\n\nOcspConfiguration -> (structure)\n\nConfiguration of Online Certificate Status Protocol (OCSP) support, if any, maintained by your private CA. When you revoke a certificate, OCSP responses may take up to 60 minutes to reflect the new status.\n\nEnabled -> (boolean)\n\nFlag enabling use of the Online Certificate Status Protocol (OCSP) for validating certificate revocation status.\n\nOcspCustomCname -> (string)\n\nBy default, ACM Private CA injects an AWS domain into certificates being validated by the Online Certificate Status Protocol (OCSP). A customer can alternatively use this object to define a CNAME specifying a customized OCSP domain.\n\nNote: The value of the CNAME must not include a protocol prefix such as “http://” or “https://”.\n\nFor more information, see Customizing Online Certificate Status Protocol (OCSP) in the AWS Certificate Manager Private Certificate Authority (PCA) User Guide .\n\nShorthand Syntax:\n\nCrlConfiguration={Enabled=boolean,ExpirationInDays=integer,CustomCname=string,S3BucketName=string,S3ObjectAcl=string},OcspConfiguration={Enabled=boolean,OcspCustomCname=string}\n\n\nJSON Syntax:\n\n{\n  \"CrlConfiguration\": {\n    \"Enabled\": true|false,\n    \"ExpirationInDays\": integer,\n    \"CustomCname\": \"string\",\n    \"S3BucketName\": \"string\",\n    \"S3ObjectAcl\": \"PUBLIC_READ\"|\"BUCKET_OWNER_FULL_CONTROL\"\n  },\n  \"OcspConfiguration\": {\n    \"Enabled\": true|false,\n    \"OcspCustomCname\": \"string\"\n  }\n}\n\n\n--certificate-authority-type (string)\n\nThe type of the certificate authority.\n\nPossible values:\n\nROOT\n\nSUBORDINATE\n\n--idempotency-token (string)\n\nCustom string that can be used to distinguish between calls to the CreateCertificateAuthority action. Idempotency tokens for CreateCertificateAuthority time out after five minutes. Therefore, if you call CreateCertificateAuthority multiple times with the same idempotency token within five minutes, ACM Private CA recognizes that you are requesting only certificate authority and will issue only one. If you change the idempotency token for each call, PCA recognizes that you are requesting multiple certificate authorities.\n\n--key-storage-security-standard (string)\n\nSpecifies a cryptographic key management compliance standard used for handling CA keys.\n\nDefault: FIPS_140_2_LEVEL_3_OR_HIGHER\n\nNote: FIPS_140_2_LEVEL_3_OR_HIGHER is not supported in Region ap-northeast-3. When creating a CA in the ap-northeast-3, you must provide FIPS_140_2_LEVEL_2_OR_HIGHER as the argument for KeyStorageSecurityStandard . Failure to do this results in an InvalidArgsException with the message, “A certificate authority cannot be created in this region with the specified security standard.”\n\nPossible values:\n\nFIPS_140_2_LEVEL_2_OR_HIGHER\n\nFIPS_140_2_LEVEL_3_OR_HIGHER\n\n--tags (list)\n\nKey-value pairs that will be attached to the new private CA. You can associate up to 50 tags with a private CA. For information using tags with IAM to manage permissions, see Controlling Access Using IAM Tags .\n\n(structure)\n\nTags are labels that you can use to identify and organize your private CAs. Each tag consists of a key and an optional value. You can associate up to 50 tags with a private CA. To add one or more tags to a private CA, call the TagCertificateAuthority action. To remove a tag, call the UntagCertificateAuthority action.\n\nKey -> (string)\n\nKey (name) of the tag.\n\nValue -> (string)\n\nValue of the tag.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCertificateAuthorityArn -> (string)\n\nIf successful, the Amazon Resource Name (ARN) of the certificate authority (CA). This is of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 `` .",
      "command_examples": "Examples\n\nTo create a private certificate authority\n\nThe following create-certificate-authority command creates a private certificate authority in your AWS account.\n\naws acm-pca create-certificate-authority --certificate-authority-configuration file://C:\\ca_config.txt --revocation-configuration file://C:\\revoke_config.txt --certificate-authority-type \"SUBORDINATE\" --idempotency-token 98256344\n"
    },
    {
      "command_name": "create-certificate-authority-audit-report",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/create-certificate-authority-audit-report.html",
      "command_description": "Description\n\nCreates an audit report that lists every time that your CA private key is used. The report is saved in the Amazon S3 bucket that you specify on input. The IssueCertificate and RevokeCertificate actions use the private key.\n\nNote\n\nBoth PCA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Configure Access to ACM Private CA .\n\nACM Private CA assets that are stored in Amazon S3 can be protected with encryption. For more information, see Encrypting Your Audit Reports .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-certificate-authority-audit-report\n--certificate-authority-arn <value>\n--s3-bucket-name <value>\n--audit-report-response-format <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "--s3-bucket-name <value>",
        "--audit-report-response-format <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) of the CA to be audited. This is of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 `` .\n\n--s3-bucket-name (string)\n\nThe name of the S3 bucket that will contain the audit report.\n\n--audit-report-response-format (string)\n\nThe format in which to create the report. This can be either JSON or CSV .\n\nPossible values:\n\nJSON\n\nCSV\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nAuditReportId -> (string)\n\nAn alphanumeric string that contains a report identifier.\n\nS3Key -> (string)\n\nThe key that uniquely identifies the report file in your S3 bucket.",
      "command_examples": "Examples\n\nTo create a certificate authority audit report\n\nThe following create-certificate-authority-audit-report command creates an audit report for the private CA identified by the ARN.\n\naws acm-pca create-certificate-authority-audit-report --certificate-authority-arn arn:aws:acm-pca:us-east-1:accountid:certificate-authority/12345678-1234-1234-1234-123456789012 --s3-bucket-name your-bucket-name --audit-report-response-format JSON\n"
    },
    {
      "command_name": "create-permission",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/create-permission.html",
      "command_description": "Description\n\nGrants one or more permissions on a private CA to the AWS Certificate Manager (ACM) service principal (acm.amazonaws.com ). These permissions allow ACM to issue and renew ACM certificates that reside in the same AWS account as the CA.\n\nYou can list current permissions with the ListPermissions action and revoke them with the DeletePermission action.\n\nAbout Permissions\n\nIf the private CA and the certificates it issues reside in the same account, you can use CreatePermission to grant permissions for ACM to carry out automatic certificate renewals.\n\nFor automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.\n\nIf the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see Using a Resource Based Policy with ACM Private CA .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-permission\n--certificate-authority-arn <value>\n--principal <value>\n[--source-account <value>]\n--actions <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "--principal <value>",
        "[--source-account <value>]",
        "--actions <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) of the CA that grants the permissions. You can find the ARN by calling the ListCertificateAuthorities action. This must have the following form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 `` .\n\n--principal (string)\n\nThe AWS service or identity that receives the permission. At this time, the only valid principal is acm.amazonaws.com .\n\n--source-account (string)\n\nThe ID of the calling account.\n\n--actions (list)\n\nThe actions that the specified AWS service principal can use. These include IssueCertificate , GetCertificate , and ListPermissions .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\nWhere valid values are:\n  IssueCertificate\n  GetCertificate\n  ListPermissions\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "delete-certificate-authority",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/delete-certificate-authority.html",
      "command_description": "Description\n\nDeletes a private certificate authority (CA). You must provide the Amazon Resource Name (ARN) of the private CA that you want to delete. You can find the ARN by calling the ListCertificateAuthorities action.\n\nNote\n\nDeleting a CA will invalidate other CAs and certificates below it in your CA hierarchy.\n\nBefore you can delete a CA that you have created and activated, you must disable it. To do this, call the UpdateCertificateAuthority action and set the CertificateAuthorityStatus parameter to DISABLED .\n\nAdditionally, you can delete a CA if you are waiting for it to be created (that is, the status of the CA is CREATING ). You can also delete it if the CA has been created but you haven’t yet imported the signed certificate into ACM Private CA (that is, the status of the CA is PENDING_CERTIFICATE ).\n\nWhen you successfully call DeleteCertificateAuthority , the CA’s status changes to DELETED . However, the CA won’t be permanently deleted until the restoration period has passed. By default, if you do not set the PermanentDeletionTimeInDays parameter, the CA remains restorable for 30 days. You can set the parameter from 7 to 30 days. The DescribeCertificateAuthority action returns the time remaining in the restoration window of a private CA in the DELETED state. To restore an eligible CA, call the RestoreCertificateAuthority action.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-certificate-authority\n--certificate-authority-arn <value>\n[--permanent-deletion-time-in-days <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "[--permanent-deletion-time-in-days <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority . This must have the following form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 `` .\n\n--permanent-deletion-time-in-days (integer)\n\nThe number of days to make a CA restorable after it has been deleted. This can be anywhere from 7 to 30 days, with 30 being the default.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete a private certificate authority\n\nThe following delete-certificate-authority command deletes the certificate authority identified by the ARN.\n\naws acm-pca delete-certificate-authority --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\n"
    },
    {
      "command_name": "delete-permission",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/delete-permission.html",
      "command_description": "Description\n\nRevokes permissions on a private CA granted to the AWS Certificate Manager (ACM) service principal (acm.amazonaws.com).\n\nThese permissions allow ACM to issue and renew ACM certificates that reside in the same AWS account as the CA. If you revoke these permissions, ACM will no longer renew the affected certificates automatically.\n\nPermissions can be granted with the CreatePermission action and listed with the ListPermissions action.\n\nAbout Permissions\n\nIf the private CA and the certificates it issues reside in the same account, you can use CreatePermission to grant permissions for ACM to carry out automatic certificate renewals.\n\nFor automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.\n\nIf the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see Using a Resource Based Policy with ACM Private CA .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-permission\n--certificate-authority-arn <value>\n--principal <value>\n[--source-account <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "--principal <value>",
        "[--source-account <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Number (ARN) of the private CA that issued the permissions. You can find the CA’s ARN by calling the ListCertificateAuthorities action. This must have the following form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 `` .\n\n--principal (string)\n\nThe AWS service or identity that will have its CA permissions revoked. At this time, the only valid service principal is acm.amazonaws.com\n\n--source-account (string)\n\nThe AWS account that calls this action.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "delete-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/delete-policy.html",
      "command_description": "Description\n\nDeletes the resource-based policy attached to a private CA. Deletion will remove any access that the policy has granted. If there is no policy attached to the private CA, this action will return successful.\n\nIf you delete a policy that was applied through AWS Resource Access Manager (RAM), the CA will be removed from all shares in which it was included.\n\nThe AWS Certificate Manager Service Linked Role that the policy supports is not affected when you delete the policy.\n\nThe current policy can be shown with GetPolicy and updated with PutPolicy .\n\nAbout Policies\n\nA policy grants access on a private CA to an AWS customer account, to AWS Organizations, or to an AWS Organizations unit. Policies are under the control of a CA administrator. For more information, see Using a Resource Based Policy with ACM Private CA .\n\nA policy permits a user of AWS Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.\n\nFor ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the ACM Private CA policy. For more information, see Using a Service Linked Role with ACM .\n\nUpdates made in AWS Resource Manager (RAM) are reflected in policies. For more information, see Attach a Policy for Cross-Account Access .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-policy\n--resource-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe Amazon Resource Number (ARN) of the private CA that will have its policy deleted. You can find the CA’s ARN by calling the ListCertificateAuthorities action. The ARN value must have the form arn:aws:acm-pca:region:account:certificate-authority/01234567-89ab-cdef-0123-0123456789ab .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "describe-certificate-authority",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/describe-certificate-authority.html",
      "command_description": "Description\n\nLists information about your private certificate authority (CA) or one that has been shared with you. You specify the private CA on input by its ARN (Amazon Resource Name). The output contains the status of your CA. This can be any of the following:\n\nCREATING - ACM Private CA is creating your private certificate authority.\n\nPENDING_CERTIFICATE - The certificate is pending. You must use your ACM Private CA-hosted or on-premises root or subordinate CA to sign your private CA CSR and then import it into PCA.\n\nACTIVE - Your private CA is active.\n\nDISABLED - Your private CA has been disabled.\n\nEXPIRED - Your private CA certificate has expired.\n\nFAILED - Your private CA has failed. Your CA can fail because of problems such a network outage or back-end AWS failure or other errors. A failed CA can never return to the pending state. You must create a new CA.\n\nDELETED - Your private CA is within the restoration period, after which it is permanently deleted. The length of time remaining in the CA’s restoration period is also included in this action’s output.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-certificate-authority\n--certificate-authority-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority . This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 `` .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCertificateAuthority -> (structure)\n\nA CertificateAuthority structure that contains information about your private CA.\n\nArn -> (string)\n\nAmazon Resource Name (ARN) for your private certificate authority (CA). The format is `` 12345678-1234-1234-1234-123456789012 `` .\n\nOwnerAccount -> (string)\n\nThe AWS account ID that owns the certificate authority.\n\nCreatedAt -> (timestamp)\n\nDate and time at which your private CA was created.\n\nLastStateChangeAt -> (timestamp)\n\nDate and time at which your private CA was last updated.\n\nType -> (string)\n\nType of your private CA.\n\nSerial -> (string)\n\nSerial number of your private CA.\n\nStatus -> (string)\n\nStatus of your private CA.\n\nNotBefore -> (timestamp)\n\nDate and time before which your private CA certificate is not valid.\n\nNotAfter -> (timestamp)\n\nDate and time after which your private CA certificate is not valid.\n\nFailureReason -> (string)\n\nReason the request to create your private CA failed.\n\nCertificateAuthorityConfiguration -> (structure)\n\nYour private CA configuration.\n\nKeyAlgorithm -> (string)\n\nType of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.\n\nSigningAlgorithm -> (string)\n\nName of the algorithm your private CA uses to sign certificate requests.\n\nThis parameter should not be confused with the SigningAlgorithm parameter used to sign certificates when they are issued.\n\nSubject -> (structure)\n\nStructure that contains X.500 distinguished name information for your private CA.\n\nCountry -> (string)\n\nTwo-digit code that specifies the country in which the certificate subject located.\n\nOrganization -> (string)\n\nLegal name of the organization with which the certificate subject is affiliated.\n\nOrganizationalUnit -> (string)\n\nA subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.\n\nDistinguishedNameQualifier -> (string)\n\nDisambiguating information for the certificate subject.\n\nState -> (string)\n\nState in which the subject of the certificate is located.\n\nCommonName -> (string)\n\nFor CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit.\n\nNote: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.\n\nSerialNumber -> (string)\n\nThe certificate serial number.\n\nLocality -> (string)\n\nThe locality (such as a city or town) in which the certificate subject is located.\n\nTitle -> (string)\n\nA title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.\n\nSurname -> (string)\n\nFamily name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.\n\nGivenName -> (string)\n\nFirst name.\n\nInitials -> (string)\n\nConcatenation that typically contains the first letter of the GivenName , the first letter of the middle name if one exists, and the first letter of the Surname .\n\nPseudonym -> (string)\n\nTypically a shortened version of a longer GivenName . For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.\n\nGenerationQualifier -> (string)\n\nTypically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.\n\nCsrExtensions -> (structure)\n\nSpecifies information to be added to the extension section of the certificate signing request (CSR).\n\nKeyUsage -> (structure)\n\nIndicates the purpose of the certificate and of the key contained in the certificate.\n\nDigitalSignature -> (boolean)\n\nKey can be used for digital signing.\n\nNonRepudiation -> (boolean)\n\nKey can be used for non-repudiation.\n\nKeyEncipherment -> (boolean)\n\nKey can be used to encipher data.\n\nDataEncipherment -> (boolean)\n\nKey can be used to decipher data.\n\nKeyAgreement -> (boolean)\n\nKey can be used in a key-agreement protocol.\n\nKeyCertSign -> (boolean)\n\nKey can be used to sign certificates.\n\nCRLSign -> (boolean)\n\nKey can be used to sign CRLs.\n\nEncipherOnly -> (boolean)\n\nKey can be used only to encipher data.\n\nDecipherOnly -> (boolean)\n\nKey can be used only to decipher data.\n\nSubjectInformationAccess -> (list)\n\nFor CA certificates, provides a path to additional information pertaining to the CA, such as revocation and policy. For more information, see Subject Information Access in RFC 5280.\n\n(structure)\n\nProvides access information used by the authorityInfoAccess and subjectInfoAccess extensions described in RFC 5280 .\n\nAccessMethod -> (structure)\n\nThe type and format of AccessDescription information.\n\nCustomObjectIdentifier -> (string)\n\nAn object identifier (OID) specifying the AccessMethod . The OID must satisfy the regular expression shown below. For more information, see NIST’s definition of Object Identifier (OID) .\n\nAccessMethodType -> (string)\n\nSpecifies the AccessMethod .\n\nAccessLocation -> (structure)\n\nThe location of AccessDescription information.\n\nOtherName -> (structure)\n\nRepresents GeneralName using an OtherName object.\n\nTypeId -> (string)\n\nSpecifies an OID.\n\nValue -> (string)\n\nSpecifies an OID value.\n\nRfc822Name -> (string)\n\nRepresents GeneralName as an RFC 822 email address.\n\nDnsName -> (string)\n\nRepresents GeneralName as a DNS name.\n\nDirectoryName -> (structure)\n\nContains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.\n\nCountry -> (string)\n\nTwo-digit code that specifies the country in which the certificate subject located.\n\nOrganization -> (string)\n\nLegal name of the organization with which the certificate subject is affiliated.\n\nOrganizationalUnit -> (string)\n\nA subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.\n\nDistinguishedNameQualifier -> (string)\n\nDisambiguating information for the certificate subject.\n\nState -> (string)\n\nState in which the subject of the certificate is located.\n\nCommonName -> (string)\n\nFor CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit.\n\nNote: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.\n\nSerialNumber -> (string)\n\nThe certificate serial number.\n\nLocality -> (string)\n\nThe locality (such as a city or town) in which the certificate subject is located.\n\nTitle -> (string)\n\nA title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.\n\nSurname -> (string)\n\nFamily name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.\n\nGivenName -> (string)\n\nFirst name.\n\nInitials -> (string)\n\nConcatenation that typically contains the first letter of the GivenName , the first letter of the middle name if one exists, and the first letter of the Surname .\n\nPseudonym -> (string)\n\nTypically a shortened version of a longer GivenName . For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.\n\nGenerationQualifier -> (string)\n\nTypically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.\n\nEdiPartyName -> (structure)\n\nRepresents GeneralName as an EdiPartyName object.\n\nPartyName -> (string)\n\nSpecifies the party name.\n\nNameAssigner -> (string)\n\nSpecifies the name assigner.\n\nUniformResourceIdentifier -> (string)\n\nRepresents GeneralName as a URI.\n\nIpAddress -> (string)\n\nRepresents GeneralName as an IPv4 or IPv6 address.\n\nRegisteredId -> (string)\n\nRepresents GeneralName as an object identifier (OID).\n\nRevocationConfiguration -> (structure)\n\nInformation about the Online Certificate Status Protocol (OCSP) configuration or certificate revocation list (CRL) created and maintained by your private CA.\n\nCrlConfiguration -> (structure)\n\nConfiguration of the certificate revocation list (CRL), if any, maintained by your private CA. A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason a CRL update fails, ACM Private CA makes further attempts every 15 minutes.\n\nEnabled -> (boolean)\n\nBoolean value that specifies whether certificate revocation lists (CRLs) are enabled. You can use this value to enable certificate revocation for a new CA when you call the CreateCertificateAuthority action or for an existing CA when you call the UpdateCertificateAuthority action.\n\nExpirationInDays -> (integer)\n\nValidity period of the CRL in days.\n\nCustomCname -> (string)\n\nName inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don’t want the name of your S3 bucket to be public.\n\nS3BucketName -> (string)\n\nName of the S3 bucket that contains the CRL. If you do not provide a value for the CustomCname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You can change the name of your bucket by calling the UpdateCertificateAuthority operation. You must specify a bucket policy that allows ACM Private CA to write the CRL to your bucket.\n\nS3ObjectAcl -> (string)\n\nDetermines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. If you choose PUBLIC_READ, the CRL will be accessible over the public internet. If you choose BUCKET_OWNER_FULL_CONTROL, only the owner of the CRL S3 bucket can access the CRL, and your PKI clients may need an alternative method of access.\n\nIf no value is specified, the default is PUBLIC_READ .\n\nNote: This default can cause CA creation to fail in some circumstances. If you have have enabled the Block Public Access (BPA) feature in your S3 account, then you must specify the value of this parameter as BUCKET_OWNER_FULL_CONTROL , and not doing so results in an error. If you have disabled BPA in S3, then you can specify either BUCKET_OWNER_FULL_CONTROL or PUBLIC_READ as the value.\n\nFor more information, see Blocking public access to the S3 bucket .\n\nOcspConfiguration -> (structure)\n\nConfiguration of Online Certificate Status Protocol (OCSP) support, if any, maintained by your private CA. When you revoke a certificate, OCSP responses may take up to 60 minutes to reflect the new status.\n\nEnabled -> (boolean)\n\nFlag enabling use of the Online Certificate Status Protocol (OCSP) for validating certificate revocation status.\n\nOcspCustomCname -> (string)\n\nBy default, ACM Private CA injects an AWS domain into certificates being validated by the Online Certificate Status Protocol (OCSP). A customer can alternatively use this object to define a CNAME specifying a customized OCSP domain.\n\nNote: The value of the CNAME must not include a protocol prefix such as “http://” or “https://”.\n\nFor more information, see Customizing Online Certificate Status Protocol (OCSP) in the AWS Certificate Manager Private Certificate Authority (PCA) User Guide .\n\nRestorableUntil -> (timestamp)\n\nThe period during which a deleted CA can be restored. For more information, see the PermanentDeletionTimeInDays parameter of the DeleteCertificateAuthorityRequest action.\n\nKeyStorageSecurityStandard -> (string)\n\nDefines a cryptographic key management compliance standard used for handling CA keys.\n\nDefault: FIPS_140_2_LEVEL_3_OR_HIGHER\n\nNote: AWS Region ap-northeast-3 supports only FIPS_140_2_LEVEL_2_OR_HIGHER. You must explicitly specify this parameter and value when creating a CA in that Region. Specifying a different value (or no value) results in an InvalidArgsException with the message “A certificate authority cannot be created in this region with the specified security standard.”",
      "command_examples": "Examples\n\nTo describe a private certificate authority\n\nThe following describe-certificate-authority command lists information about the private CA identified by the ARN.\n\naws acm-pca describe-certificate-authority --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012\n"
    },
    {
      "command_name": "describe-certificate-authority-audit-report",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/describe-certificate-authority-audit-report.html",
      "command_description": "Description\n\nLists information about a specific audit report created by calling the CreateCertificateAuthorityAuditReport action. Audit information is created every time the certificate authority (CA) private key is used. The private key is used when you call the IssueCertificate action or the RevokeCertificate action.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-certificate-authority-audit-report\n--certificate-authority-arn <value>\n--audit-report-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "--audit-report-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) of the private CA. This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 `` .\n\n--audit-report-id (string)\n\nThe report ID returned by calling the CreateCertificateAuthorityAuditReport action.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nAuditReportStatus -> (string)\n\nSpecifies whether report creation is in progress, has succeeded, or has failed.\n\nS3BucketName -> (string)\n\nName of the S3 bucket that contains the report.\n\nS3Key -> (string)\n\nS3 key that uniquely identifies the report file in your S3 bucket.\n\nCreatedAt -> (timestamp)\n\nThe date and time at which the report was created.",
      "command_examples": "Examples\n\nTo describe an audit report for a certificate authority\n\nThe following describe-certificate-authority-audit-report command lists information about the specified audit report for the CA identified by the ARN.\n\naws acm-pca describe-certificate-authority-audit-report --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/99999999-8888-7777-6666-555555555555 --audit-report-id 11111111-2222-3333-4444-555555555555\n"
    },
    {
      "command_name": "get-certificate",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/get-certificate.html",
      "command_description": "Description\n\nRetrieves a certificate from your private CA or one that has been shared with you. The ARN of the certificate is returned when you call the IssueCertificate action. You must specify both the ARN of your private CA and the ARN of the issued certificate when calling the GetCertificate action. You can retrieve the certificate if it is in the ISSUED state. You can call the CreateCertificateAuthorityAuditReport action to create a report that contains information about all of the certificates issued and revoked by your private CA.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-certificate\n--certificate-authority-arn <value>\n--certificate-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "--certificate-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority . This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 `` .\n\n--certificate-arn (string)\n\nThe ARN of the issued certificate. The ARN contains the certificate serial number and must be in the following form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 /certificate/286535153982981100925020015808220737245 ``\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCertificate -> (string)\n\nThe base64 PEM-encoded certificate specified by the CertificateArn parameter.\n\nCertificateChain -> (string)\n\nThe base64 PEM-encoded certificate chain that chains up to the root CA certificate that you used to sign your private CA certificate.",
      "command_examples": "Examples\n\nTo retrieve an issued certificate\n\nThe following get-certificate example retrieves a certificate from the specified private CA.\n\naws acm-pca get-certificate \\\n    --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012 \\\n    --certificate-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012/certificate/6707447683a9b7f4055627ffd55cebcc \\\n    --output text\n\n\nOutput:\n\nThe first part of the output is the certificate itself. The second part is the certificate chain that chains to the root CA certificate. Note that when you use the --output text option, a TAB character is inserted between the two certificate pieces (that is the cause of the indented text). If you intend to take this output and parse the certificates with other tools, you might need to remove the TAB character so it is processed correctly.\n\n-----BEGIN CERTIFICATE-----\nMIIEDzCCAvegAwIBAgIRAJuJ8f6ZVYL7gG/rS3qvrZMwDQYJKoZIhvcNAQELBQAw\ncTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1Nl\n    ....certificate body truncated for brevity....\ntKCSglgZZrd4FdLw1EkGm+UVXnodwMtJEQyy3oTfZjURPIyyaqskTu/KSS7YDjK0\nKQNy73D6LtmdOEbAyq10XiDxqY41lvKHJ1eZrPaBmYNABxU=\n-----END CERTIFICATE-----\n        -----BEGIN CERTIFICATE-----\nMIIDrzCCApegAwIBAgIRAOskdzLvcj1eShkoyEE693AwDQYJKoZIhvcNAQELBQAw\ncTELMAkGA1UEBhMCVVMxEzARBgNVBAgMCldhc2hpbmd0b24xEDAOBgNVBAcMB1Nl\n    ...certificate body truncated for brevity....\nkdRGB6P2hpxstDOUIwAoCbhoaWwfA4ybJznf+jOQhAziNlRdKQRR8nODWpKt7H9w\ndJ5nxsTk/fniJz86Ddtp6n8s82wYdkN3cVffeK72A9aTCOU=\n-----END CERTIFICATE-----\n"
    },
    {
      "command_name": "get-certificate-authority-certificate",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/get-certificate-authority-certificate.html",
      "command_description": "Description\n\nRetrieves the certificate and certificate chain for your private certificate authority (CA) or one that has been shared with you. Both the certificate and the chain are base64 PEM-encoded. The chain does not include the CA certificate. Each certificate in the chain signs the one before it.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-certificate-authority-certificate\n--certificate-authority-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) of your private CA. This is of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 `` .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCertificate -> (string)\n\nBase64-encoded certificate authority (CA) certificate.\n\nCertificateChain -> (string)\n\nBase64-encoded certificate chain that includes any intermediate certificates and chains up to root certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. If this is a root CA, the value will be null.",
      "command_examples": "Examples\n\nTo retrieve a certificate authority (CA) certificate\n\nThe following get-certificate-authority-certificate command retrieves the certificate and certificate chain for the private CA specified by the ARN.\n\naws acm-pca get-certificate-authority-certificate --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012 --output text\n"
    },
    {
      "command_name": "get-certificate-authority-csr",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/get-certificate-authority-csr.html",
      "command_description": "Description\n\nRetrieves the certificate signing request (CSR) for your private certificate authority (CA). The CSR is created when you call the CreateCertificateAuthority action. Sign the CSR with your ACM Private CA-hosted or on-premises root or subordinate CA. Then import the signed certificate back into ACM Private CA by calling the ImportCertificateAuthorityCertificate action. The CSR is returned as a base64 PEM-encoded string.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-certificate-authority-csr\n--certificate-authority-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) that was returned when you called the CreateCertificateAuthority action. This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 ``\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCsr -> (string)\n\nThe base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.",
      "command_examples": "Examples\n\nTo retrieve the certificate signing request for a certificate authority\n\nThe following get-certificate-authority-csr command retrieves the CSR for the private CA specified by the ARN.\n\naws acm-pca get-certificate-authority-csr --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012 --output text\n"
    },
    {
      "command_name": "get-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/get-policy.html",
      "command_description": "Description\n\nRetrieves the resource-based policy attached to a private CA. If either the private CA resource or the policy cannot be found, this action returns a ResourceNotFoundException .\n\nThe policy can be attached or updated with PutPolicy and removed with DeletePolicy .\n\nAbout Policies\n\nA policy grants access on a private CA to an AWS customer account, to AWS Organizations, or to an AWS Organizations unit. Policies are under the control of a CA administrator. For more information, see Using a Resource Based Policy with ACM Private CA .\n\nA policy permits a user of AWS Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.\n\nFor ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the ACM Private CA policy. For more information, see Using a Service Linked Role with ACM .\n\nUpdates made in AWS Resource Manager (RAM) are reflected in policies. For more information, see Attach a Policy for Cross-Account Access .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-policy\n--resource-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe Amazon Resource Number (ARN) of the private CA that will have its policy retrieved. You can find the CA’s ARN by calling the ListCertificateAuthorities action.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nPolicy -> (string)\n\nThe policy attached to the private CA as a JSON document."
    },
    {
      "command_name": "import-certificate-authority-certificate",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/import-certificate-authority-certificate.html",
      "command_description": "Description\n\nImports a signed private CA certificate into ACM Private CA. This action is used when you are using a chain of trust whose root is located outside ACM Private CA. Before you can call this action, the following preparations must in place:\n\nIn ACM Private CA, call the CreateCertificateAuthority action to create the private CA that you plan to back with the imported certificate.\n\nCall the GetCertificateAuthorityCsr action to generate a certificate signing request (CSR).\n\nSign the CSR using a root or intermediate CA hosted by either an on-premises PKI hierarchy or by a commercial CA.\n\nCreate a certificate chain and copy the signed certificate and the certificate chain to your working directory.\n\nACM Private CA supports three scenarios for installing a CA certificate:\n\nInstalling a certificate for a root CA hosted by ACM Private CA.\n\nInstalling a subordinate CA certificate whose parent authority is hosted by ACM Private CA.\n\nInstalling a subordinate CA certificate whose parent authority is externally hosted.\n\nThe following additional requirements apply when you import a CA certificate.\n\nOnly a self-signed certificate can be imported as a root CA.\n\nA self-signed certificate cannot be imported as a subordinate CA.\n\nYour certificate chain must not include the private CA certificate that you are importing.\n\nYour root CA must be the last certificate in your chain. The subordinate certificate, if any, that your root CA signed must be next to last. The subordinate certificate signed by the preceding subordinate CA must come next, and so on until your chain is built.\n\nThe chain must be PEM-encoded.\n\nThe maximum allowed size of a certificate is 32 KB.\n\nThe maximum allowed size of a certificate chain is 2 MB.\n\nEnforcement of Critical Constraints\n\nACM Private CA allows the following extensions to be marked critical in the imported CA certificate or chain.\n\nBasic constraints (must be marked critical)\n\nSubject alternative names\n\nKey usage\n\nExtended key usage\n\nAuthority key identifier\n\nSubject key identifier\n\nIssuer alternative name\n\nSubject directory attributes\n\nSubject information access\n\nCertificate policies\n\nPolicy mappings\n\nInhibit anyPolicy\n\nACM Private CA rejects the following extensions when they are marked critical in an imported CA certificate or chain.\n\nName constraints\n\nPolicy constraints\n\nCRL distribution points\n\nAuthority information access\n\nFreshest CRL\n\nAny other extension\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  import-certificate-authority-certificate\n--certificate-authority-arn <value>\n--certificate <value>\n[--certificate-chain <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "--certificate <value>",
        "[--certificate-chain <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority . This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 ``\n\n--certificate (blob)\n\nThe PEM-encoded certificate for a private CA. This may be a self-signed certificate in the case of a root CA, or it may be signed by another CA that you control.\n\n--certificate-chain (blob)\n\nA PEM-encoded file that contains all of your certificates, other than the certificate you’re importing, chaining up to your root CA. Your ACM Private CA-hosted or on-premises root certificate is the last in the chain, and each certificate in the chain signs the one preceding.\n\nThis parameter must be supplied when you import a subordinate CA. When you import a root CA, there is no chain.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo import your certificate authority certificate into ACM PCA\n\nThe following import-certificate-authority-certificate command imports the signed private CA certificate for the CA specified by the ARN into ACM PCA.\n\naws acm-pca import-certificate-authority-certificate --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012 --certificate fileb://C:\\ca_cert.pem --certificate-chain fileb://C:\\ca_cert_chain.pem\n"
    },
    {
      "command_name": "issue-certificate",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/issue-certificate.html",
      "command_description": "Description\n\nUses your private certificate authority (CA), or one that has been shared with you, to issue a client certificate. This action returns the Amazon Resource Name (ARN) of the certificate. You can retrieve the certificate by calling the GetCertificate action and specifying the ARN.\n\nNote\n\nYou cannot use the ACM ListCertificateAuthorities action to retrieve the ARNs of the certificates that you issue by using ACM Private CA.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  issue-certificate\n[--api-passthrough <value>]\n--certificate-authority-arn <value>\n--csr <value>\n--signing-algorithm <value>\n[--template-arn <value>]\n--validity <value>\n[--validity-not-before <value>]\n[--idempotency-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--api-passthrough <value>]",
        "--certificate-authority-arn <value>",
        "--csr <value>",
        "--signing-algorithm <value>",
        "[--template-arn <value>]",
        "--validity <value>",
        "[--validity-not-before <value>]",
        "[--idempotency-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--api-passthrough (structure)\n\nSpecifies X.509 certificate information to be included in the issued certificate. An APIPassthrough or APICSRPassthrough template variant must be selected, or else this parameter is ignored. For more information about using these templates, see Understanding Certificate Templates .\n\nIf conflicting or duplicate certificate information is supplied during certificate issuance, ACM Private CA applies order of operation rules to determine what information is used.\n\nExtensions -> (structure)\n\nSpecifies X.509 extension information for a certificate.\n\nCertificatePolicies -> (list)\n\nContains a sequence of one or more policy information terms, each of which consists of an object identifier (OID) and optional qualifiers. For more information, see NIST’s definition of Object Identifier (OID) .\n\nIn an end-entity certificate, these terms indicate the policy under which the certificate was issued and the purposes for which it may be used. In a CA certificate, these terms limit the set of policies for certification paths that include this certificate.\n\n(structure)\n\nDefines the X.509 CertificatePolicies extension.\n\nCertPolicyId -> (string)\n\nSpecifies the object identifier (OID) of the certificate policy under which the certificate was issued. For more information, see NIST’s definition of Object Identifier (OID) .\n\nPolicyQualifiers -> (list)\n\nModifies the given CertPolicyId with a qualifier. ACM Private CA supports the certification practice statement (CPS) qualifier.\n\n(structure)\n\nModifies the CertPolicyId of a PolicyInformation object with a qualifier. ACM Private CA supports the certification practice statement (CPS) qualifier.\n\nPolicyQualifierId -> (string)\n\nIdentifies the qualifier modifying a CertPolicyId .\n\nQualifier -> (structure)\n\nDefines the qualifier type. ACM Private CA supports the use of a URI for a CPS qualifier in this field.\n\nCpsUri -> (string)\n\nContains a pointer to a certification practice statement (CPS) published by the CA.\n\nExtendedKeyUsage -> (list)\n\nSpecifies additional purposes for which the certified public key may be used other than basic purposes indicated in the KeyUsage extension.\n\n(structure)\n\nSpecifies additional purposes for which the certified public key may be used other than basic purposes indicated in the KeyUsage extension.\n\nExtendedKeyUsageType -> (string)\n\nSpecifies a standard ExtendedKeyUsage as defined as in RFC 5280 .\n\nExtendedKeyUsageObjectIdentifier -> (string)\n\nSpecifies a custom ExtendedKeyUsage with an object identifier (OID).\n\nKeyUsage -> (structure)\n\nDefines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.\n\nDigitalSignature -> (boolean)\n\nKey can be used for digital signing.\n\nNonRepudiation -> (boolean)\n\nKey can be used for non-repudiation.\n\nKeyEncipherment -> (boolean)\n\nKey can be used to encipher data.\n\nDataEncipherment -> (boolean)\n\nKey can be used to decipher data.\n\nKeyAgreement -> (boolean)\n\nKey can be used in a key-agreement protocol.\n\nKeyCertSign -> (boolean)\n\nKey can be used to sign certificates.\n\nCRLSign -> (boolean)\n\nKey can be used to sign CRLs.\n\nEncipherOnly -> (boolean)\n\nKey can be used only to encipher data.\n\nDecipherOnly -> (boolean)\n\nKey can be used only to decipher data.\n\nSubjectAlternativeNames -> (list)\n\nThe subject alternative name extension allows identities to be bound to the subject of the certificate. These identities may be included in addition to or in place of the identity in the subject field of the certificate.\n\n(structure)\n\nDescribes an ASN.1 X.400 GeneralName as defined in RFC 5280 . Only one of the following naming options should be provided. Providing more than one option results in an InvalidArgsException error.\n\nOtherName -> (structure)\n\nRepresents GeneralName using an OtherName object.\n\nTypeId -> (string)\n\nSpecifies an OID.\n\nValue -> (string)\n\nSpecifies an OID value.\n\nRfc822Name -> (string)\n\nRepresents GeneralName as an RFC 822 email address.\n\nDnsName -> (string)\n\nRepresents GeneralName as a DNS name.\n\nDirectoryName -> (structure)\n\nContains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.\n\nCountry -> (string)\n\nTwo-digit code that specifies the country in which the certificate subject located.\n\nOrganization -> (string)\n\nLegal name of the organization with which the certificate subject is affiliated.\n\nOrganizationalUnit -> (string)\n\nA subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.\n\nDistinguishedNameQualifier -> (string)\n\nDisambiguating information for the certificate subject.\n\nState -> (string)\n\nState in which the subject of the certificate is located.\n\nCommonName -> (string)\n\nFor CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit.\n\nNote: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.\n\nSerialNumber -> (string)\n\nThe certificate serial number.\n\nLocality -> (string)\n\nThe locality (such as a city or town) in which the certificate subject is located.\n\nTitle -> (string)\n\nA title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.\n\nSurname -> (string)\n\nFamily name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.\n\nGivenName -> (string)\n\nFirst name.\n\nInitials -> (string)\n\nConcatenation that typically contains the first letter of the GivenName , the first letter of the middle name if one exists, and the first letter of the Surname .\n\nPseudonym -> (string)\n\nTypically a shortened version of a longer GivenName . For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.\n\nGenerationQualifier -> (string)\n\nTypically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.\n\nEdiPartyName -> (structure)\n\nRepresents GeneralName as an EdiPartyName object.\n\nPartyName -> (string)\n\nSpecifies the party name.\n\nNameAssigner -> (string)\n\nSpecifies the name assigner.\n\nUniformResourceIdentifier -> (string)\n\nRepresents GeneralName as a URI.\n\nIpAddress -> (string)\n\nRepresents GeneralName as an IPv4 or IPv6 address.\n\nRegisteredId -> (string)\n\nRepresents GeneralName as an object identifier (OID).\n\nSubject -> (structure)\n\nContains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.\n\nCountry -> (string)\n\nTwo-digit code that specifies the country in which the certificate subject located.\n\nOrganization -> (string)\n\nLegal name of the organization with which the certificate subject is affiliated.\n\nOrganizationalUnit -> (string)\n\nA subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.\n\nDistinguishedNameQualifier -> (string)\n\nDisambiguating information for the certificate subject.\n\nState -> (string)\n\nState in which the subject of the certificate is located.\n\nCommonName -> (string)\n\nFor CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit.\n\nNote: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.\n\nSerialNumber -> (string)\n\nThe certificate serial number.\n\nLocality -> (string)\n\nThe locality (such as a city or town) in which the certificate subject is located.\n\nTitle -> (string)\n\nA title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.\n\nSurname -> (string)\n\nFamily name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.\n\nGivenName -> (string)\n\nFirst name.\n\nInitials -> (string)\n\nConcatenation that typically contains the first letter of the GivenName , the first letter of the middle name if one exists, and the first letter of the Surname .\n\nPseudonym -> (string)\n\nTypically a shortened version of a longer GivenName . For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.\n\nGenerationQualifier -> (string)\n\nTypically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.\n\nJSON Syntax:\n\n{\n  \"Extensions\": {\n    \"CertificatePolicies\": [\n      {\n        \"CertPolicyId\": \"string\",\n        \"PolicyQualifiers\": [\n          {\n            \"PolicyQualifierId\": \"CPS\",\n            \"Qualifier\": {\n              \"CpsUri\": \"string\"\n            }\n          }\n          ...\n        ]\n      }\n      ...\n    ],\n    \"ExtendedKeyUsage\": [\n      {\n        \"ExtendedKeyUsageType\": \"SERVER_AUTH\"|\"CLIENT_AUTH\"|\"CODE_SIGNING\"|\"EMAIL_PROTECTION\"|\"TIME_STAMPING\"|\"OCSP_SIGNING\"|\"SMART_CARD_LOGIN\"|\"DOCUMENT_SIGNING\"|\"CERTIFICATE_TRANSPARENCY\",\n        \"ExtendedKeyUsageObjectIdentifier\": \"string\"\n      }\n      ...\n    ],\n    \"KeyUsage\": {\n      \"DigitalSignature\": true|false,\n      \"NonRepudiation\": true|false,\n      \"KeyEncipherment\": true|false,\n      \"DataEncipherment\": true|false,\n      \"KeyAgreement\": true|false,\n      \"KeyCertSign\": true|false,\n      \"CRLSign\": true|false,\n      \"EncipherOnly\": true|false,\n      \"DecipherOnly\": true|false\n    },\n    \"SubjectAlternativeNames\": [\n      {\n        \"OtherName\": {\n          \"TypeId\": \"string\",\n          \"Value\": \"string\"\n        },\n        \"Rfc822Name\": \"string\",\n        \"DnsName\": \"string\",\n        \"DirectoryName\": {\n          \"Country\": \"string\",\n          \"Organization\": \"string\",\n          \"OrganizationalUnit\": \"string\",\n          \"DistinguishedNameQualifier\": \"string\",\n          \"State\": \"string\",\n          \"CommonName\": \"string\",\n          \"SerialNumber\": \"string\",\n          \"Locality\": \"string\",\n          \"Title\": \"string\",\n          \"Surname\": \"string\",\n          \"GivenName\": \"string\",\n          \"Initials\": \"string\",\n          \"Pseudonym\": \"string\",\n          \"GenerationQualifier\": \"string\"\n        },\n        \"EdiPartyName\": {\n          \"PartyName\": \"string\",\n          \"NameAssigner\": \"string\"\n        },\n        \"UniformResourceIdentifier\": \"string\",\n        \"IpAddress\": \"string\",\n        \"RegisteredId\": \"string\"\n      }\n      ...\n    ]\n  },\n  \"Subject\": {\n    \"Country\": \"string\",\n    \"Organization\": \"string\",\n    \"OrganizationalUnit\": \"string\",\n    \"DistinguishedNameQualifier\": \"string\",\n    \"State\": \"string\",\n    \"CommonName\": \"string\",\n    \"SerialNumber\": \"string\",\n    \"Locality\": \"string\",\n    \"Title\": \"string\",\n    \"Surname\": \"string\",\n    \"GivenName\": \"string\",\n    \"Initials\": \"string\",\n    \"Pseudonym\": \"string\",\n    \"GenerationQualifier\": \"string\"\n  }\n}\n\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority . This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 ``\n\n--csr (blob)\n\nThe certificate signing request (CSR) for the certificate you want to issue. As an example, you can use the following OpenSSL command to create the CSR and a 2048 bit RSA private key.\n\nopenssl req -new -newkey rsa:2048 -days 365 -keyout private/test_cert_priv_key.pem -out csr/test_cert_.csr\n\nIf you have a configuration file, you can then use the following OpenSSL command. The usr_cert block in the configuration file contains your X509 version 3 extensions.\n\nopenssl req -new -config openssl_rsa.cnf -extensions usr_cert -newkey rsa:2048 -days -365 -keyout private/test_cert_priv_key.pem -out csr/test_cert_.csr\n\nNote: A CSR must provide either a subject name or a subject alternative name or the request will be rejected.\n\n--signing-algorithm (string)\n\nThe name of the algorithm that will be used to sign the certificate to be issued.\n\nThis parameter should not be confused with the SigningAlgorithm parameter used to sign a CSR in the CreateCertificateAuthority action.\n\nPossible values:\n\nSHA256WITHECDSA\n\nSHA384WITHECDSA\n\nSHA512WITHECDSA\n\nSHA256WITHRSA\n\nSHA384WITHRSA\n\nSHA512WITHRSA\n\n--template-arn (string)\n\nSpecifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, ACM Private CA defaults to the EndEntityCertificate/V1 template. For CA certificates, you should choose the shortest path length that meets your needs. The path length is indicated by the PathLen*N* portion of the ARN, where N is the CA depth .\n\nNote: The CA depth configured on a subordinate CA certificate must not exceed the limit set by its parents in the CA hierarchy.\n\nFor a list of TemplateArn values supported by ACM Private CA, see Understanding Certificate Templates .\n\n--validity (structure)\n\nInformation describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate.\n\nCertificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280.\n\nThis value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.\n\nThe end of the validity period configured on a certificate must not exceed the limit set on its parents in the CA hierarchy.\n\nValue -> (long)\n\nA long integer interpreted according to the value of Type , below.\n\nType -> (string)\n\nDetermines how ACM Private CA interprets the Value parameter, an integer. Supported validity types include those listed below. Type definitions with values include a sample input value and the resulting output.\n\nEND_DATE : The specific date and time when the certificate will expire, expressed using UTCTime (YYMMDDHHMMSS) or GeneralizedTime (YYYYMMDDHHMMSS) format. When UTCTime is used, if the year field (YY) is greater than or equal to 50, the year is interpreted as 19YY. If the year field is less than 50, the year is interpreted as 20YY.\n\nSample input value: 491231235959 (UTCTime format)\n\nOutput expiration date/time: 12/31/2049 23:59:59\n\nABSOLUTE : The specific date and time when the validity of a certificate will start or expire, expressed in seconds since the Unix Epoch.\n\nSample input value: 2524608000\n\nOutput expiration date/time: 01/01/2050 00:00:00\n\nDAYS , MONTHS , YEARS : The relative time from the moment of issuance until the certificate will expire, expressed in days, months, or years.\n\nExample if DAYS , issued on 10/12/2020 at 12:34:54 UTC:\n\nSample input value: 90\n\nOutput expiration date: 01/10/2020 12:34:54 UTC\n\nThe minimum validity duration for a certificate using relative time (DAYS ) is one day. The minimum validity for a certificate using absolute time (ABSOLUTE or END_DATE ) is one second.\n\nShorthand Syntax:\n\nValue=long,Type=string\n\n\nJSON Syntax:\n\n{\n  \"Value\": long,\n  \"Type\": \"END_DATE\"|\"ABSOLUTE\"|\"DAYS\"|\"MONTHS\"|\"YEARS\"\n}\n\n\n--validity-not-before (structure)\n\nInformation describing the start of the validity period of the certificate. This parameter sets the “Not Before” date for the certificate.\n\nBy default, when issuing a certificate, ACM Private CA sets the “Not Before” date to the issuance time minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ValidityNotBefore parameter can be used to customize the “Not Before” value.\n\nUnlike the Validity parameter, the ValidityNotBefore parameter is optional.\n\nThe ValidityNotBefore value is expressed as an explicit date and time, using the Validity type value ABSOLUTE . For more information, see Validity in this API reference and Validity in RFC 5280.\n\nValue -> (long)\n\nA long integer interpreted according to the value of Type , below.\n\nType -> (string)\n\nDetermines how ACM Private CA interprets the Value parameter, an integer. Supported validity types include those listed below. Type definitions with values include a sample input value and the resulting output.\n\nEND_DATE : The specific date and time when the certificate will expire, expressed using UTCTime (YYMMDDHHMMSS) or GeneralizedTime (YYYYMMDDHHMMSS) format. When UTCTime is used, if the year field (YY) is greater than or equal to 50, the year is interpreted as 19YY. If the year field is less than 50, the year is interpreted as 20YY.\n\nSample input value: 491231235959 (UTCTime format)\n\nOutput expiration date/time: 12/31/2049 23:59:59\n\nABSOLUTE : The specific date and time when the validity of a certificate will start or expire, expressed in seconds since the Unix Epoch.\n\nSample input value: 2524608000\n\nOutput expiration date/time: 01/01/2050 00:00:00\n\nDAYS , MONTHS , YEARS : The relative time from the moment of issuance until the certificate will expire, expressed in days, months, or years.\n\nExample if DAYS , issued on 10/12/2020 at 12:34:54 UTC:\n\nSample input value: 90\n\nOutput expiration date: 01/10/2020 12:34:54 UTC\n\nThe minimum validity duration for a certificate using relative time (DAYS ) is one day. The minimum validity for a certificate using absolute time (ABSOLUTE or END_DATE ) is one second.\n\nShorthand Syntax:\n\nValue=long,Type=string\n\n\nJSON Syntax:\n\n{\n  \"Value\": long,\n  \"Type\": \"END_DATE\"|\"ABSOLUTE\"|\"DAYS\"|\"MONTHS\"|\"YEARS\"\n}\n\n\n--idempotency-token (string)\n\nAlphanumeric string that can be used to distinguish between calls to the IssueCertificate action. Idempotency tokens for IssueCertificate time out after one minute. Therefore, if you call IssueCertificate multiple times with the same idempotency token within one minute, ACM Private CA recognizes that you are requesting only one certificate and will issue only one. If you change the idempotency token for each call, PCA recognizes that you are requesting multiple certificates.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCertificateArn -> (string)\n\nThe Amazon Resource Name (ARN) of the issued certificate and the certificate serial number. This is of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 /certificate/286535153982981100925020015808220737245 ``",
      "command_examples": "Examples\n\nTo issue a private certificate\n\nThe following issue-certificate command uses the private CA specified by the ARN to issue a private certificate.\n\naws acm-pca issue-certificate --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012 --csr fileb://C:\\cert_1.csr --signing-algorithm \"SHA256WITHRSA\" --validity Value=365,Type=\"DAYS\" --idempotency-token 1234\n"
    },
    {
      "command_name": "list-certificate-authorities",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/list-certificate-authorities.html",
      "command_description": "Description\n\nLists the private certificate authorities that you created by using the CreateCertificateAuthority action.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-certificate-authorities is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: CertificateAuthorities",
      "command_synopsis": "Synopsis\n  list-certificate-authorities\n[--resource-owner <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--resource-owner <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-owner (string)\n\nUse this parameter to filter the returned set of certificate authorities based on their owner. The default is SELF.\n\nPossible values:\n\nSELF\n\nOTHER_ACCOUNTS\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCertificateAuthorities -> (list)\n\nSummary information about each certificate authority you have created.\n\n(structure)\n\nContains information about your private certificate authority (CA). Your private CA can issue and revoke X.509 digital certificates. Digital certificates verify that the entity named in the certificate Subject field owns or controls the public key contained in the Subject Public Key Info field. Call the CreateCertificateAuthority action to create your private CA. You must then call the GetCertificateAuthorityCertificate action to retrieve a private CA certificate signing request (CSR). Sign the CSR with your ACM Private CA-hosted or on-premises root or subordinate CA certificate. Call the ImportCertificateAuthorityCertificate action to import the signed certificate into AWS Certificate Manager (ACM).\n\nArn -> (string)\n\nAmazon Resource Name (ARN) for your private certificate authority (CA). The format is `` 12345678-1234-1234-1234-123456789012 `` .\n\nOwnerAccount -> (string)\n\nThe AWS account ID that owns the certificate authority.\n\nCreatedAt -> (timestamp)\n\nDate and time at which your private CA was created.\n\nLastStateChangeAt -> (timestamp)\n\nDate and time at which your private CA was last updated.\n\nType -> (string)\n\nType of your private CA.\n\nSerial -> (string)\n\nSerial number of your private CA.\n\nStatus -> (string)\n\nStatus of your private CA.\n\nNotBefore -> (timestamp)\n\nDate and time before which your private CA certificate is not valid.\n\nNotAfter -> (timestamp)\n\nDate and time after which your private CA certificate is not valid.\n\nFailureReason -> (string)\n\nReason the request to create your private CA failed.\n\nCertificateAuthorityConfiguration -> (structure)\n\nYour private CA configuration.\n\nKeyAlgorithm -> (string)\n\nType of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.\n\nSigningAlgorithm -> (string)\n\nName of the algorithm your private CA uses to sign certificate requests.\n\nThis parameter should not be confused with the SigningAlgorithm parameter used to sign certificates when they are issued.\n\nSubject -> (structure)\n\nStructure that contains X.500 distinguished name information for your private CA.\n\nCountry -> (string)\n\nTwo-digit code that specifies the country in which the certificate subject located.\n\nOrganization -> (string)\n\nLegal name of the organization with which the certificate subject is affiliated.\n\nOrganizationalUnit -> (string)\n\nA subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.\n\nDistinguishedNameQualifier -> (string)\n\nDisambiguating information for the certificate subject.\n\nState -> (string)\n\nState in which the subject of the certificate is located.\n\nCommonName -> (string)\n\nFor CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit.\n\nNote: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.\n\nSerialNumber -> (string)\n\nThe certificate serial number.\n\nLocality -> (string)\n\nThe locality (such as a city or town) in which the certificate subject is located.\n\nTitle -> (string)\n\nA title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.\n\nSurname -> (string)\n\nFamily name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.\n\nGivenName -> (string)\n\nFirst name.\n\nInitials -> (string)\n\nConcatenation that typically contains the first letter of the GivenName , the first letter of the middle name if one exists, and the first letter of the Surname .\n\nPseudonym -> (string)\n\nTypically a shortened version of a longer GivenName . For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.\n\nGenerationQualifier -> (string)\n\nTypically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.\n\nCsrExtensions -> (structure)\n\nSpecifies information to be added to the extension section of the certificate signing request (CSR).\n\nKeyUsage -> (structure)\n\nIndicates the purpose of the certificate and of the key contained in the certificate.\n\nDigitalSignature -> (boolean)\n\nKey can be used for digital signing.\n\nNonRepudiation -> (boolean)\n\nKey can be used for non-repudiation.\n\nKeyEncipherment -> (boolean)\n\nKey can be used to encipher data.\n\nDataEncipherment -> (boolean)\n\nKey can be used to decipher data.\n\nKeyAgreement -> (boolean)\n\nKey can be used in a key-agreement protocol.\n\nKeyCertSign -> (boolean)\n\nKey can be used to sign certificates.\n\nCRLSign -> (boolean)\n\nKey can be used to sign CRLs.\n\nEncipherOnly -> (boolean)\n\nKey can be used only to encipher data.\n\nDecipherOnly -> (boolean)\n\nKey can be used only to decipher data.\n\nSubjectInformationAccess -> (list)\n\nFor CA certificates, provides a path to additional information pertaining to the CA, such as revocation and policy. For more information, see Subject Information Access in RFC 5280.\n\n(structure)\n\nProvides access information used by the authorityInfoAccess and subjectInfoAccess extensions described in RFC 5280 .\n\nAccessMethod -> (structure)\n\nThe type and format of AccessDescription information.\n\nCustomObjectIdentifier -> (string)\n\nAn object identifier (OID) specifying the AccessMethod . The OID must satisfy the regular expression shown below. For more information, see NIST’s definition of Object Identifier (OID) .\n\nAccessMethodType -> (string)\n\nSpecifies the AccessMethod .\n\nAccessLocation -> (structure)\n\nThe location of AccessDescription information.\n\nOtherName -> (structure)\n\nRepresents GeneralName using an OtherName object.\n\nTypeId -> (string)\n\nSpecifies an OID.\n\nValue -> (string)\n\nSpecifies an OID value.\n\nRfc822Name -> (string)\n\nRepresents GeneralName as an RFC 822 email address.\n\nDnsName -> (string)\n\nRepresents GeneralName as a DNS name.\n\nDirectoryName -> (structure)\n\nContains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.\n\nCountry -> (string)\n\nTwo-digit code that specifies the country in which the certificate subject located.\n\nOrganization -> (string)\n\nLegal name of the organization with which the certificate subject is affiliated.\n\nOrganizationalUnit -> (string)\n\nA subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.\n\nDistinguishedNameQualifier -> (string)\n\nDisambiguating information for the certificate subject.\n\nState -> (string)\n\nState in which the subject of the certificate is located.\n\nCommonName -> (string)\n\nFor CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit.\n\nNote: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.\n\nSerialNumber -> (string)\n\nThe certificate serial number.\n\nLocality -> (string)\n\nThe locality (such as a city or town) in which the certificate subject is located.\n\nTitle -> (string)\n\nA title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.\n\nSurname -> (string)\n\nFamily name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.\n\nGivenName -> (string)\n\nFirst name.\n\nInitials -> (string)\n\nConcatenation that typically contains the first letter of the GivenName , the first letter of the middle name if one exists, and the first letter of the Surname .\n\nPseudonym -> (string)\n\nTypically a shortened version of a longer GivenName . For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.\n\nGenerationQualifier -> (string)\n\nTypically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.\n\nEdiPartyName -> (structure)\n\nRepresents GeneralName as an EdiPartyName object.\n\nPartyName -> (string)\n\nSpecifies the party name.\n\nNameAssigner -> (string)\n\nSpecifies the name assigner.\n\nUniformResourceIdentifier -> (string)\n\nRepresents GeneralName as a URI.\n\nIpAddress -> (string)\n\nRepresents GeneralName as an IPv4 or IPv6 address.\n\nRegisteredId -> (string)\n\nRepresents GeneralName as an object identifier (OID).\n\nRevocationConfiguration -> (structure)\n\nInformation about the Online Certificate Status Protocol (OCSP) configuration or certificate revocation list (CRL) created and maintained by your private CA.\n\nCrlConfiguration -> (structure)\n\nConfiguration of the certificate revocation list (CRL), if any, maintained by your private CA. A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason a CRL update fails, ACM Private CA makes further attempts every 15 minutes.\n\nEnabled -> (boolean)\n\nBoolean value that specifies whether certificate revocation lists (CRLs) are enabled. You can use this value to enable certificate revocation for a new CA when you call the CreateCertificateAuthority action or for an existing CA when you call the UpdateCertificateAuthority action.\n\nExpirationInDays -> (integer)\n\nValidity period of the CRL in days.\n\nCustomCname -> (string)\n\nName inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don’t want the name of your S3 bucket to be public.\n\nS3BucketName -> (string)\n\nName of the S3 bucket that contains the CRL. If you do not provide a value for the CustomCname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You can change the name of your bucket by calling the UpdateCertificateAuthority operation. You must specify a bucket policy that allows ACM Private CA to write the CRL to your bucket.\n\nS3ObjectAcl -> (string)\n\nDetermines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. If you choose PUBLIC_READ, the CRL will be accessible over the public internet. If you choose BUCKET_OWNER_FULL_CONTROL, only the owner of the CRL S3 bucket can access the CRL, and your PKI clients may need an alternative method of access.\n\nIf no value is specified, the default is PUBLIC_READ .\n\nNote: This default can cause CA creation to fail in some circumstances. If you have have enabled the Block Public Access (BPA) feature in your S3 account, then you must specify the value of this parameter as BUCKET_OWNER_FULL_CONTROL , and not doing so results in an error. If you have disabled BPA in S3, then you can specify either BUCKET_OWNER_FULL_CONTROL or PUBLIC_READ as the value.\n\nFor more information, see Blocking public access to the S3 bucket .\n\nOcspConfiguration -> (structure)\n\nConfiguration of Online Certificate Status Protocol (OCSP) support, if any, maintained by your private CA. When you revoke a certificate, OCSP responses may take up to 60 minutes to reflect the new status.\n\nEnabled -> (boolean)\n\nFlag enabling use of the Online Certificate Status Protocol (OCSP) for validating certificate revocation status.\n\nOcspCustomCname -> (string)\n\nBy default, ACM Private CA injects an AWS domain into certificates being validated by the Online Certificate Status Protocol (OCSP). A customer can alternatively use this object to define a CNAME specifying a customized OCSP domain.\n\nNote: The value of the CNAME must not include a protocol prefix such as “http://” or “https://”.\n\nFor more information, see Customizing Online Certificate Status Protocol (OCSP) in the AWS Certificate Manager Private Certificate Authority (PCA) User Guide .\n\nRestorableUntil -> (timestamp)\n\nThe period during which a deleted CA can be restored. For more information, see the PermanentDeletionTimeInDays parameter of the DeleteCertificateAuthorityRequest action.\n\nKeyStorageSecurityStandard -> (string)\n\nDefines a cryptographic key management compliance standard used for handling CA keys.\n\nDefault: FIPS_140_2_LEVEL_3_OR_HIGHER\n\nNote: AWS Region ap-northeast-3 supports only FIPS_140_2_LEVEL_2_OR_HIGHER. You must explicitly specify this parameter and value when creating a CA in that Region. Specifying a different value (or no value) results in an InvalidArgsException with the message “A certificate authority cannot be created in this region with the specified security standard.”\n\nNextToken -> (string)\n\nWhen the list is truncated, this value is present and should be used for the NextToken parameter in a subsequent pagination request.",
      "command_examples": "Examples\n\nTo list your private certificate authorities\n\nThe following list-certificate-authorities command lists information about all of the private CAs in your account.\n\naws acm-pca list-certificate-authorities --max-results 10\n"
    },
    {
      "command_name": "list-permissions",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/list-permissions.html",
      "command_description": "Description\n\nList all permissions on a private CA, if any, granted to the AWS Certificate Manager (ACM) service principal (acm.amazonaws.com).\n\nThese permissions allow ACM to issue and renew ACM certificates that reside in the same AWS account as the CA.\n\nPermissions can be granted with the CreatePermission action and revoked with the DeletePermission action.\n\nAbout Permissions\n\nIf the private CA and the certificates it issues reside in the same account, you can use CreatePermission to grant permissions for ACM to carry out automatic certificate renewals.\n\nFor automatic certificate renewal to succeed, the ACM service principal needs permissions to create, retrieve, and list certificates.\n\nIf the private CA and the ACM certificates reside in different accounts, then permissions cannot be used to enable automatic renewals. Instead, the ACM certificate owner must set up a resource-based policy to enable cross-account issuance and renewals. For more information, see Using a Resource Based Policy with ACM Private CA .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-permissions is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: Permissions",
      "command_synopsis": "Synopsis\n  list-permissions\n--certificate-authority-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Number (ARN) of the private CA to inspect. You can find the ARN by calling the ListCertificateAuthorities action. This must be of the form: arn:aws:acm-pca:region:account:certificate-authority/12345678-1234-1234-1234-123456789012 You can get a private CA’s ARN by running the ListCertificateAuthorities action.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nPermissions -> (list)\n\nSummary information about each permission assigned by the specified private CA, including the action enabled, the policy provided, and the time of creation.\n\n(structure)\n\nPermissions designate which private CA actions can be performed by an AWS service or entity. In order for ACM to automatically renew private certificates, you must give the ACM service principal all available permissions (IssueCertificate , GetCertificate , and ListPermissions ). Permissions can be assigned with the CreatePermission action, removed with the DeletePermission action, and listed with the ListPermissions action.\n\nCertificateAuthorityArn -> (string)\n\nThe Amazon Resource Number (ARN) of the private CA from which the permission was issued.\n\nCreatedAt -> (timestamp)\n\nThe time at which the permission was created.\n\nPrincipal -> (string)\n\nThe AWS service or entity that holds the permission. At this time, the only valid principal is acm.amazonaws.com .\n\nSourceAccount -> (string)\n\nThe ID of the account that assigned the permission.\n\nActions -> (list)\n\nThe private CA actions that can be performed by the designated AWS service.\n\n(string)\n\nPolicy -> (string)\n\nThe name of the policy that is associated with the permission.\n\nNextToken -> (string)\n\nWhen the list is truncated, this value is present and should be used for the NextToken parameter in a subsequent pagination request."
    },
    {
      "command_name": "list-tags",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/list-tags.html",
      "command_description": "Description\n\nLists the tags, if any, that are associated with your private CA or one that has been shared with you. Tags are labels that you can use to identify and organize your CAs. Each tag consists of a key and an optional value. Call the TagCertificateAuthority action to add one or more tags to your CA. Call the UntagCertificateAuthority action to remove tags.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-tags is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: Tags",
      "command_synopsis": "Synopsis\n  list-tags\n--certificate-authority-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) that was returned when you called the CreateCertificateAuthority action. This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 ``\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTags -> (list)\n\nThe tags associated with your private CA.\n\n(structure)\n\nTags are labels that you can use to identify and organize your private CAs. Each tag consists of a key and an optional value. You can associate up to 50 tags with a private CA. To add one or more tags to a private CA, call the TagCertificateAuthority action. To remove a tag, call the UntagCertificateAuthority action.\n\nKey -> (string)\n\nKey (name) of the tag.\n\nValue -> (string)\n\nValue of the tag.\n\nNextToken -> (string)\n\nWhen the list is truncated, this value is present and should be used for the NextToken parameter in a subsequent pagination request.",
      "command_examples": "Examples\n\nTo list the tags for your certificate authority\n\nThe following list-tags command lists the tags associated with the private CA specified by the ARN.\n\naws acm-pca list-tags --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/123455678-1234-1234-1234-123456789012 --max-results 10\n"
    },
    {
      "command_name": "put-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/put-policy.html",
      "command_description": "Description\n\nAttaches a resource-based policy to a private CA.\n\nA policy can also be applied by sharing a private CA through AWS Resource Access Manager (RAM). For more information, see Attach a Policy for Cross-Account Access .\n\nThe policy can be displayed with GetPolicy and removed with DeletePolicy .\n\nAbout Policies\n\nA policy grants access on a private CA to an AWS customer account, to AWS Organizations, or to an AWS Organizations unit. Policies are under the control of a CA administrator. For more information, see Using a Resource Based Policy with ACM Private CA .\n\nA policy permits a user of AWS Certificate Manager (ACM) to issue ACM certificates signed by a CA in another account.\n\nFor ACM to manage automatic renewal of these certificates, the ACM user must configure a Service Linked Role (SLR). The SLR allows the ACM service to assume the identity of the user, subject to confirmation against the ACM Private CA policy. For more information, see Using a Service Linked Role with ACM .\n\nUpdates made in AWS Resource Manager (RAM) are reflected in policies. For more information, see Attach a Policy for Cross-Account Access .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-policy\n--resource-arn <value>\n--policy <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--policy <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe Amazon Resource Number (ARN) of the private CA to associate with the policy. The ARN of the CA can be found by calling the ListCertificateAuthorities action.\n\n--policy (string)\n\nThe path and file name of a JSON-formatted IAM policy to attach to the specified private CA resource. If this policy does not contain all required statements or if it includes any statement that is not allowed, the PutPolicy action returns an InvalidPolicyException . For information about IAM policy and statement structure, see Overview of JSON Policies .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "restore-certificate-authority",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/restore-certificate-authority.html",
      "command_description": "Description\n\nRestores a certificate authority (CA) that is in the DELETED state. You can restore a CA during the period that you defined in the PermanentDeletionTimeInDays parameter of the DeleteCertificateAuthority action. Currently, you can specify 7 to 30 days. If you did not specify a PermanentDeletionTimeInDays value, by default you can restore the CA at any time in a 30 day period. You can check the time remaining in the restoration period of a private CA in the DELETED state by calling the DescribeCertificateAuthority or ListCertificateAuthorities actions. The status of a restored CA is set to its pre-deletion status when the RestoreCertificateAuthority action returns. To change its status to ACTIVE , call the UpdateCertificateAuthority action. If the private CA was in the PENDING_CERTIFICATE state at deletion, you must use the ImportCertificateAuthorityCertificate action to import a certificate authority into the private CA before it can be activated. You cannot restore a CA after the restoration period has ended.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  restore-certificate-authority\n--certificate-authority-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) that was returned when you called the CreateCertificateAuthority action. This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 ``\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "revoke-certificate",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/revoke-certificate.html",
      "command_description": "Description\n\nRevokes a certificate that was issued inside ACM Private CA. If you enable a certificate revocation list (CRL) when you create or update your private CA, information about the revoked certificates will be included in the CRL. ACM Private CA writes the CRL to an S3 bucket that you specify. A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason the CRL update fails, ACM Private CA attempts makes further attempts every 15 minutes. With Amazon CloudWatch, you can create alarms for the metrics CRLGenerated and MisconfiguredCRLBucket . For more information, see Supported CloudWatch Metrics .\n\nNote\n\nBoth PCA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Configure Access to ACM Private CA .\n\nACM Private CA also writes revocation information to the audit report. For more information, see CreateCertificateAuthorityAuditReport .\n\nNote\n\nYou cannot revoke a root CA self-signed certificate.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  revoke-certificate\n--certificate-authority-arn <value>\n--certificate-serial <value>\n--revocation-reason <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "--certificate-serial <value>",
        "--revocation-reason <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nAmazon Resource Name (ARN) of the private CA that issued the certificate to be revoked. This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 ``\n\n--certificate-serial (string)\n\nSerial number of the certificate to be revoked. This must be in hexadecimal format. You can retrieve the serial number by calling GetCertificate with the Amazon Resource Name (ARN) of the certificate you want and the ARN of your private CA. The GetCertificate action retrieves the certificate in the PEM format. You can use the following OpenSSL command to list the certificate in text format and copy the hexadecimal serial number.\n\nopenssl x509 -in *file_path* -text -noout\n\nYou can also copy the serial number from the console or use the DescribeCertificate action in the AWS Certificate Manager API Reference .\n\n--revocation-reason (string)\n\nSpecifies why you revoked the certificate.\n\nPossible values:\n\nUNSPECIFIED\n\nKEY_COMPROMISE\n\nCERTIFICATE_AUTHORITY_COMPROMISE\n\nAFFILIATION_CHANGED\n\nSUPERSEDED\n\nCESSATION_OF_OPERATION\n\nPRIVILEGE_WITHDRAWN\n\nA_A_COMPROMISE\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo revoke a private certificate\n\nThe following revoke-certificate command revokes a private certificate from the CA identified by the ARN.\n\naws acm-pca revoke-certificate --certificate-authority-arn arn:aws:acm-pca:us-west-2:1234567890:certificate-authority/12345678-1234-1234-1234-123456789012 --certificate-serial 67:07:44:76:83:a9:b7:f4:05:56:27:ff:d5:5c:eb:cc --revocation-reason \"KEY_COMPROMISE\"\n"
    },
    {
      "command_name": "tag-certificate-authority",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/tag-certificate-authority.html",
      "command_description": "Description\n\nAdds one or more tags to your private CA. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. You specify the private CA on input by its Amazon Resource Name (ARN). You specify the tag by using a key-value pair. You can apply a tag to just one private CA if you want to identify a specific characteristic of that CA, or you can apply the same tag to multiple private CAs if you want to filter for a common relationship among those CAs. To remove one or more tags, use the UntagCertificateAuthority action. Call the ListTags action to see what tags are associated with your CA.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  tag-certificate-authority\n--certificate-authority-arn <value>\n--tags <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "--tags <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority . This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 ``\n\n--tags (list)\n\nList of tags to be associated with the CA.\n\n(structure)\n\nTags are labels that you can use to identify and organize your private CAs. Each tag consists of a key and an optional value. You can associate up to 50 tags with a private CA. To add one or more tags to a private CA, call the TagCertificateAuthority action. To remove a tag, call the UntagCertificateAuthority action.\n\nKey -> (string)\n\nKey (name) of the tag.\n\nValue -> (string)\n\nValue of the tag.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo attach tags to a private certificate authority\n\nThe following tag-certificate-authority command attaches one or more tags to your private CA.\n\naws acm-pca tag-certificate-authority --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012 --tags Key=Admin,Value=Alice\n"
    },
    {
      "command_name": "untag-certificate-authority",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/untag-certificate-authority.html",
      "command_description": "Description\n\nRemove one or more tags from your private CA. A tag consists of a key-value pair. If you do not specify the value portion of the tag when calling this action, the tag will be removed regardless of value. If you specify a value, the tag is removed only if it is associated with the specified value. To add tags to a private CA, use the TagCertificateAuthority . Call the ListTags action to see what tags are associated with your CA.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  untag-certificate-authority\n--certificate-authority-arn <value>\n--tags <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "--tags <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nThe Amazon Resource Name (ARN) that was returned when you called CreateCertificateAuthority . This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 ``\n\n--tags (list)\n\nList of tags to be removed from the CA.\n\n(structure)\n\nTags are labels that you can use to identify and organize your private CAs. Each tag consists of a key and an optional value. You can associate up to 50 tags with a private CA. To add one or more tags to a private CA, call the TagCertificateAuthority action. To remove a tag, call the UntagCertificateAuthority action.\n\nKey -> (string)\n\nKey (name) of the tag.\n\nValue -> (string)\n\nValue of the tag.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo remove one or more tags from your private certificate authority\n\nThe following untag-certificate-authority command removes tags from the private CA identified by the ARN.\n\naws acm-pca untag-certificate-authority --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012 --tags Key=Purpose,Value=Website\n"
    },
    {
      "command_name": "update-certificate-authority",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/update-certificate-authority.html",
      "command_description": "Description\n\nUpdates the status or configuration of a private certificate authority (CA). Your private CA must be in the ACTIVE or DISABLED state before you can update it. You can disable a private CA that is in the ACTIVE state or make a CA that is in the DISABLED state active again.\n\nNote\n\nBoth PCA and the IAM principal must have permission to write to the S3 bucket that you specify. If the IAM principal making the call does not have permission to write to the bucket, then an exception is thrown. For more information, see Configure Access to ACM Private CA .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-certificate-authority\n--certificate-authority-arn <value>\n[--revocation-configuration <value>]\n[--status <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--certificate-authority-arn <value>",
        "[--revocation-configuration <value>]",
        "[--status <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--certificate-authority-arn (string)\n\nAmazon Resource Name (ARN) of the private CA that issued the certificate to be revoked. This must be of the form:\n\n``arn:aws:acm-pca:region :account :certificate-authority/12345678-1234-1234-1234-123456789012 ``\n\n--revocation-configuration (structure)\n\nContains information to enable Online Certificate Status Protocol (OCSP) support, to enable a certificate revocation list (CRL), to enable both, or to enable neither. If this parameter is not supplied, existing capibilites remain unchanged. For more information, see the OcspConfiguration and CrlConfiguration types.\n\nCrlConfiguration -> (structure)\n\nConfiguration of the certificate revocation list (CRL), if any, maintained by your private CA. A CRL is typically updated approximately 30 minutes after a certificate is revoked. If for any reason a CRL update fails, ACM Private CA makes further attempts every 15 minutes.\n\nEnabled -> (boolean)\n\nBoolean value that specifies whether certificate revocation lists (CRLs) are enabled. You can use this value to enable certificate revocation for a new CA when you call the CreateCertificateAuthority action or for an existing CA when you call the UpdateCertificateAuthority action.\n\nExpirationInDays -> (integer)\n\nValidity period of the CRL in days.\n\nCustomCname -> (string)\n\nName inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don’t want the name of your S3 bucket to be public.\n\nS3BucketName -> (string)\n\nName of the S3 bucket that contains the CRL. If you do not provide a value for the CustomCname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You can change the name of your bucket by calling the UpdateCertificateAuthority operation. You must specify a bucket policy that allows ACM Private CA to write the CRL to your bucket.\n\nS3ObjectAcl -> (string)\n\nDetermines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. If you choose PUBLIC_READ, the CRL will be accessible over the public internet. If you choose BUCKET_OWNER_FULL_CONTROL, only the owner of the CRL S3 bucket can access the CRL, and your PKI clients may need an alternative method of access.\n\nIf no value is specified, the default is PUBLIC_READ .\n\nNote: This default can cause CA creation to fail in some circumstances. If you have have enabled the Block Public Access (BPA) feature in your S3 account, then you must specify the value of this parameter as BUCKET_OWNER_FULL_CONTROL , and not doing so results in an error. If you have disabled BPA in S3, then you can specify either BUCKET_OWNER_FULL_CONTROL or PUBLIC_READ as the value.\n\nFor more information, see Blocking public access to the S3 bucket .\n\nOcspConfiguration -> (structure)\n\nConfiguration of Online Certificate Status Protocol (OCSP) support, if any, maintained by your private CA. When you revoke a certificate, OCSP responses may take up to 60 minutes to reflect the new status.\n\nEnabled -> (boolean)\n\nFlag enabling use of the Online Certificate Status Protocol (OCSP) for validating certificate revocation status.\n\nOcspCustomCname -> (string)\n\nBy default, ACM Private CA injects an AWS domain into certificates being validated by the Online Certificate Status Protocol (OCSP). A customer can alternatively use this object to define a CNAME specifying a customized OCSP domain.\n\nNote: The value of the CNAME must not include a protocol prefix such as “http://” or “https://”.\n\nFor more information, see Customizing Online Certificate Status Protocol (OCSP) in the AWS Certificate Manager Private Certificate Authority (PCA) User Guide .\n\nShorthand Syntax:\n\nCrlConfiguration={Enabled=boolean,ExpirationInDays=integer,CustomCname=string,S3BucketName=string,S3ObjectAcl=string},OcspConfiguration={Enabled=boolean,OcspCustomCname=string}\n\n\nJSON Syntax:\n\n{\n  \"CrlConfiguration\": {\n    \"Enabled\": true|false,\n    \"ExpirationInDays\": integer,\n    \"CustomCname\": \"string\",\n    \"S3BucketName\": \"string\",\n    \"S3ObjectAcl\": \"PUBLIC_READ\"|\"BUCKET_OWNER_FULL_CONTROL\"\n  },\n  \"OcspConfiguration\": {\n    \"Enabled\": true|false,\n    \"OcspCustomCname\": \"string\"\n  }\n}\n\n\n--status (string)\n\nStatus of your private CA.\n\nPossible values:\n\nCREATING\n\nPENDING_CERTIFICATE\n\nACTIVE\n\nDELETED\n\nDISABLED\n\nEXPIRED\n\nFAILED\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo update the configuration of your private certificate authority\n\nThe following update-certificate-authority command updates the status and configuration of the private CA identified by the ARN.\n\naws acm-pca update-certificate-authority --certificate-authority-arn arn:aws:acm-pca:us-west-2:123456789012:certificate-authority/12345678-1234-1234-1234-1232456789012 --revocation-configuration file://C:\\revoke_config.txt --status \"DISABLED\"\n"
    },
    {
      "command_name": "wait",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/acm-pca/wait/index.html",
      "command_description": "Description\n\nWait until a particular condition is satisfied. Each subcommand polls an API until the listed requirement is met.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_options": []
    }
  ],
  "service_description": "Description\n\nThis is the ACM Private CA API Reference . It provides descriptions, syntax, and usage examples for each of the actions and data types involved in creating and managing private certificate authorities (CA) for your organization.\n\nThe documentation for each action shows the Query API request parameters and the XML response. Alternatively, you can use one of the AWS SDKs to access an API that’s tailored to the programming language or platform that you’re using. For more information, see AWS SDKs .\n\nEach ACM Private CA API operation has a quota that determines the number of times the operation can be called per second. ACM Private CA throttles API requests at different rates depending on the operation. Throttling means that ACM Private CA rejects an otherwise valid request because the request exceeds the operation’s quota for the number of requests per second. When a request is throttled, ACM Private CA returns a ThrottlingException error. ACM Private CA does not guarantee a minimum request rate for APIs.\n\nTo see an up-to-date list of your ACM Private CA quotas, or to request a quota increase, log into your AWS account and visit the Service Quotas console."
}
