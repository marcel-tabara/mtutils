{
  "service_name": "dynamodbstreams",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodbstreams/index.html",
  "service_commands": [
    {
      "command_name": "describe-stream",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodbstreams/describe-stream.html",
      "command_description": "Description\n\nReturns information about a stream, including the current status of the stream, its Amazon Resource Name (ARN), the composition of its shards, and its corresponding DynamoDB table.\n\nNote\n\nYou can call DescribeStream at a maximum rate of 10 times per second.\n\nEach shard in the stream has a SequenceNumberRange associated with it. If the SequenceNumberRange has a StartingSequenceNumber but no EndingSequenceNumber , then the shard is still open (able to receive more stream records). If both StartingSequenceNumber and EndingSequenceNumber are present, then that shard is closed and can no longer receive more data.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-stream\n--stream-arn <value>\n[--limit <value>]\n[--exclusive-start-shard-id <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--stream-arn <value>",
        "[--limit <value>]",
        "[--exclusive-start-shard-id <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--stream-arn (string)\n\nThe Amazon Resource Name (ARN) for the stream.\n\n--limit (integer)\n\nThe maximum number of shard objects to return. The upper limit is 100.\n\n--exclusive-start-shard-id (string)\n\nThe shard ID of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedShardId in the previous operation.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nStreamDescription -> (structure)\n\nA complete description of the stream, including its creation date and time, the DynamoDB table associated with the stream, the shard IDs within the stream, and the beginning and ending sequence numbers of stream records within the shards.\n\nStreamArn -> (string)\n\nThe Amazon Resource Name (ARN) for the stream.\n\nStreamLabel -> (string)\n\nA timestamp, in ISO 8601 format, for this stream.\n\nNote that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:\n\nthe AWS customer ID.\n\nthe table name\n\nthe StreamLabel\n\nStreamStatus -> (string)\n\nIndicates the current status of the stream:\n\nENABLING - Streams is currently being enabled on the DynamoDB table.\n\nENABLED - the stream is enabled.\n\nDISABLING - Streams is currently being disabled on the DynamoDB table.\n\nDISABLED - the stream is disabled.\n\nStreamViewType -> (string)\n\nIndicates the format of the records within this stream:\n\nKEYS_ONLY - only the key attributes of items that were modified in the DynamoDB table.\n\nNEW_IMAGE - entire items from the table, as they appeared after they were modified.\n\nOLD_IMAGE - entire items from the table, as they appeared before they were modified.\n\nNEW_AND_OLD_IMAGES - both the new and the old images of the items from the table.\n\nCreationRequestDateTime -> (timestamp)\n\nThe date and time when the request to create this stream was issued.\n\nTableName -> (string)\n\nThe DynamoDB table with which the stream is associated.\n\nKeySchema -> (list)\n\nThe key attribute(s) of the stream’s DynamoDB table.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nShards -> (list)\n\nThe shards that comprise the stream.\n\n(structure)\n\nA uniquely identified group of stream records within a stream.\n\nShardId -> (string)\n\nThe system-generated identifier for this shard.\n\nSequenceNumberRange -> (structure)\n\nThe range of possible sequence numbers for the shard.\n\nStartingSequenceNumber -> (string)\n\nThe first sequence number for the stream records contained within a shard. String contains numeric characters only.\n\nEndingSequenceNumber -> (string)\n\nThe last sequence number for the stream records contained within a shard. String contains numeric characters only.\n\nParentShardId -> (string)\n\nThe shard ID of the current shard’s parent.\n\nLastEvaluatedShardId -> (string)\n\nThe shard ID of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\n\nIf LastEvaluatedShardId is empty, then the “last page” of results has been processed and there is currently no more data to be retrieved.\n\nIf LastEvaluatedShardId is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedShardId is empty.",
      "command_examples": "Examples\n\nTo get information about a DynamoDB stream\n\nThe following describe-stream command displays information about the specific DynamoDB stream.\n\naws dynamodbstreams describe-stream \\\n    --stream-arn arn:aws:dynamodb:us-west-1:123456789012:table/Music/stream/2019-10-22T18:02:01.576\n\n\nOutput:\n\n{\n    \"StreamDescription\": {\n        \"StreamArn\": \"arn:aws:dynamodb:us-west-1:123456789012:table/Music/stream/2019-10-22T18:02:01.576\",\n        \"StreamLabel\": \"2019-10-22T18:02:01.576\",\n        \"StreamStatus\": \"ENABLED\",\n        \"StreamViewType\": \"NEW_AND_OLD_IMAGES\",\n        \"CreationRequestDateTime\": 1571767321.571,\n        \"TableName\": \"Music\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"Shards\": [\n            {\n                \"ShardId\": \"shardId-00000001571767321804-697ce3d2\",\n                \"SequenceNumberRange\": {\n                    \"StartingSequenceNumber\": \"4000000000000642977831\",\n                    \"EndingSequenceNumber\": \"4000000000000642977831\"\n                }\n            },\n            {\n                \"ShardId\": \"shardId-00000001571780995058-40810d86\",\n                \"SequenceNumberRange\": {\n                    \"StartingSequenceNumber\": \"757400000000005655171150\"\n                },\n                \"ParentShardId\": \"shardId-00000001571767321804-697ce3d2\"\n            }\n        ]\n    }\n}\n\n\nFor more information, see Capturing Table Activity with DynamoDB Streams in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "get-records",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodbstreams/get-records.html",
      "command_description": "Description\n\nRetrieves the stream records from a given shard.\n\nSpecify a shard iterator using the ShardIterator parameter. The shard iterator specifies the position in the shard from which you want to start reading stream records sequentially. If there are no stream records available in the portion of the shard that the iterator points to, GetRecords returns an empty list. Note that it might take multiple calls to get to a portion of the shard that contains stream records.\n\nNote\n\nGetRecords can retrieve a maximum of 1 MB of data or 1000 stream records, whichever comes first.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-records\n--shard-iterator <value>\n[--limit <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--shard-iterator <value>",
        "[--limit <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--shard-iterator (string)\n\nA shard iterator that was retrieved from a previous GetShardIterator operation. This iterator can be used to access the stream records in this shard.\n\n--limit (integer)\n\nThe maximum number of records to return from the shard. The upper limit is 1000.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nRecords -> (list)\n\nThe stream records from the shard, which were retrieved using the shard iterator.\n\n(structure)\n\nA description of a unique event within a stream.\n\neventID -> (string)\n\nA globally unique identifier for the event that was recorded in this stream record.\n\neventName -> (string)\n\nThe type of data modification that was performed on the DynamoDB table:\n\nINSERT - a new item was added to the table.\n\nMODIFY - one or more of an existing item’s attributes were modified.\n\nREMOVE - the item was deleted from the table\n\neventVersion -> (string)\n\nThe version number of the stream record format. This number is updated whenever the structure of Record is modified.\n\nClient applications must not assume that eventVersion will remain at a particular value, as this number is subject to change at any time. In general, eventVersion will only increase as the low-level DynamoDB Streams API evolves.\n\neventSource -> (string)\n\nThe AWS service from which the stream record originated. For DynamoDB Streams, this is aws:dynamodb .\n\nawsRegion -> (string)\n\nThe region in which the GetRecords request was received.\n\ndynamodb -> (structure)\n\nThe main body of the stream record, containing all of the DynamoDB-specific fields.\n\nApproximateCreationDateTime -> (timestamp)\n\nThe approximate date and time when the stream record was created, in UNIX epoch time format.\n\nKeys -> (map)\n\nThe primary key attribute(s) for the DynamoDB item that was modified.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNewImage -> (map)\n\nThe item in the DynamoDB table as it appeared after it was modified.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nOldImage -> (map)\n\nThe item in the DynamoDB table as it appeared before it was modified.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nSequenceNumber -> (string)\n\nThe sequence number of the stream record.\n\nSizeBytes -> (long)\n\nThe size of the stream record, in bytes.\n\nStreamViewType -> (string)\n\nThe type of data from the modified DynamoDB item that was captured in this stream record:\n\nKEYS_ONLY - only the key attributes of the modified item.\n\nNEW_IMAGE - the entire item, as it appeared after it was modified.\n\nOLD_IMAGE - the entire item, as it appeared before it was modified.\n\nNEW_AND_OLD_IMAGES - both the new and the old item images of the item.\n\nuserIdentity -> (structure)\n\nItems that are deleted by the Time to Live process after expiration have the following fields:\n\nRecords[].userIdentity.type “Service”\n\nRecords[].userIdentity.principalId “dynamodb.amazonaws.com”\n\nPrincipalId -> (string)\n\nA unique identifier for the entity that made the call. For Time To Live, the principalId is “dynamodb.amazonaws.com”.\n\nType -> (string)\n\nThe type of the identity. For Time To Live, the type is “Service”.\n\nNextShardIterator -> (string)\n\nThe next position in the shard from which to start sequentially reading stream records. If set to null , the shard has been closed and the requested iterator will not return any more data.",
      "command_examples": "Examples\n\nTo get records from a Dynamodb stream\n\nThe following get-records command retrieves records using the specified Amazon DynamoDB shard iterator.\n\naws dynamodbstreams get-records \\\n    --shard-iterator \"arn:aws:dynamodb:us-west-1:123456789012:table/Music/stream/2019-10-22T18:02:01.576|1|AAAAAAAAAAGgM3YZ89vLZZxjmoQeo33r9M4x3+zmmTLsiL86MfrF4+B4EbsByi52InVmiONmy6xVW4IRcIIbs1zO7MNIlqZfx8WQzMwVDyINtGG2hCLg78JKbYxFasXeePGlApTyf3rJxR765uyOVaBvBHAJuwF2TXIuxhaAlOupNGHr52qAC3a49ZOmf+CjNPlqQjnyRSAnfOwWmKhL1/KNParWSfz2odf780oOObIDIWRRMkt7+Hyzh9SD+hFxFAWR5C7QIlOXPc8mRBfNIazfrVCjJK8/jsjCzsqNyXKzJbhh+GXCoxYN+Kpmg4nyj1EAsYhbGL35muvHFoHjcyuynbsczbWaXNfThDwRAyvoTmc8XhHKtAWUbJiaVd8ZPtQwDsThCrmDRPIdmTRGWllGfUr5ezN5LscvkQezzgpaU5p8BgCqRzjv5Vl8LB6wHgQWNG+w/lEGS05ha1qNP+Vl4+tuhz2TRnhnJo/pny9GI/yGpce97mWvSPr5KPwy+Dtcm5BHayBs+PVYHITaTliInFlT+LCwvaz1QH3MY3b8A05Z800wjpktm60iQqtMeDwN4NX6FrcxR34JoFKGsgR8XkHVJzz2xr1xqSJ12ycpNTyHnndusw==\"\n\n\nOutput:\n\n{\n    \"Records\": [\n        {\n            \"eventID\": \"c3b5d798eef6215d42f8137b19a88e50\",\n            \"eventName\": \"INSERT\",\n            \"eventVersion\": \"1.1\",\n            \"eventSource\": \"aws:dynamodb\",\n            \"awsRegion\": \"us-west-1\",\n            \"dynamodb\": {\n                \"ApproximateCreationDateTime\": 1571849028.0,\n                \"Keys\": {\n                    \"Artist\": {\n                        \"S\": \"No One You Know\"\n                    },\n                    \"SongTitle\": {\n                        \"S\": \"Call Me Today\"\n                    }\n                },\n                \"NewImage\": {\n                    \"AlbumTitle\": {\n                        \"S\": \"Somewhat Famous\"\n                    },\n                    \"Artist\": {\n                        \"S\": \"No One You Know\"\n                    },\n                    \"Awards\": {\n                        \"N\": \"1\"\n                    },\n                    \"SongTitle\": {\n                        \"S\": \"Call Me Today\"\n                    }\n                },\n                \"SequenceNumber\": \"700000000013256296913\",\n                \"SizeBytes\": 119,\n                \"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n            }\n        },\n        {\n            \"eventID\": \"878960a6967867e2da16b27380a27328\",\n            \"eventName\": \"INSERT\",\n            \"eventVersion\": \"1.1\",\n            \"eventSource\": \"aws:dynamodb\",\n            \"awsRegion\": \"us-west-1\",\n            \"dynamodb\": {\n                \"ApproximateCreationDateTime\": 1571849029.0,\n                \"Keys\": {\n                    \"Artist\": {\n                        \"S\": \"Acme Band\"\n                    },\n                    \"SongTitle\": {\n                        \"S\": \"Happy Day\"\n                    }\n                },\n                \"NewImage\": {\n                    \"AlbumTitle\": {\n                        \"S\": \"Songs About Life\"\n                    },\n                    \"Artist\": {\n                        \"S\": \"Acme Band\"\n                    },\n                    \"Awards\": {\n                        \"N\": \"10\"\n                    },\n                    \"SongTitle\": {\n                        \"S\": \"Happy Day\"\n                    }\n                },\n                \"SequenceNumber\": \"800000000013256297217\",\n                \"SizeBytes\": 100,\n                \"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n            }\n        },\n        {\n            \"eventID\": \"520fabde080e159fc3710b15ee1d4daa\",\n            \"eventName\": \"MODIFY\",\n            \"eventVersion\": \"1.1\",\n            \"eventSource\": \"aws:dynamodb\",\n            \"awsRegion\": \"us-west-1\",\n            \"dynamodb\": {\n                \"ApproximateCreationDateTime\": 1571849734.0,\n                \"Keys\": {\n                    \"Artist\": {\n                        \"S\": \"Acme Band\"\n                    },\n                    \"SongTitle\": {\n                        \"S\": \"Happy Day\"\n                    }\n                },\n                \"NewImage\": {\n                    \"AlbumTitle\": {\n                        \"S\": \"Updated Album Title\"\n                    },\n                    \"Artist\": {\n                        \"S\": \"Acme Band\"\n                    },\n                    \"Awards\": {\n                        \"N\": \"10\"\n                    },\n                    \"SongTitle\": {\n                        \"S\": \"Happy Day\"\n                    }\n                },\n                \"OldImage\": {\n                    \"AlbumTitle\": {\n                        \"S\": \"Songs About Life\"\n                    },\n                    \"Artist\": {\n                        \"S\": \"Acme Band\"\n                    },\n                    \"Awards\": {\n                        \"N\": \"10\"\n                    },\n                    \"SongTitle\": {\n                        \"S\": \"Happy Day\"\n                    }\n                },\n                \"SequenceNumber\": \"900000000013256687845\",\n                \"SizeBytes\": 170,\n                \"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n            }\n        }\n    ],\n    \"NextShardIterator\": \"arn:aws:dynamodb:us-west-1:123456789012:table/Music/stream/2019-10-23T16:41:08.740|1|AAAAAAAAAAEhEI04jkFLW+LKOwivjT8d/IHEh3iExV2xK00aTxEzVy1C1C7Kbb5+ZOW6bT9VQ2n1/mrs7+PRiaOZCHJu7JHJVW7zlsqOi/ges3fw8GYEymyL+piEk35cx67rQqwKKyq+Q6w9JyjreIOj4F2lWLV26lBwRTrIYC4IB7C3BZZK4715QwYdDxNdVHiSBRZX8UqoS6WOt0F87xZLNB9F/NhYBLXi/wcGvAcBcC0TNIOH+N0NqwtoB/FGCkNrf8YZ0xRoNN6RgGuVWHF3pxOhxEJeFZoSoJTIKeG9YcYxzi5Ci/mhdtm7tBXnbw5c6xmsGsBqTirNjlDyJLcWl8Cl0UOLX63Ufo/5QliztcjEbKsQe28x8LM8o7VH1Is0fF/ITt8awSA4igyJS0P87GN8Qri8kj8iaE35805jBHWF2wvwT6Iy2xGrR2r2HzYps9dwGOarVdEITaJfWzNoL4HajMhmREZLYfM7Pb0PvRMO7JkENyPIU6e2w16W1CvJO2EGFIxtNk+V04i1YIeHMXJfcwetNRuIbdQXfJht2NQZa4PVV6iknY6d19MrdbSTMKoqAuvp6g3Q2jH4t7GKCLWgodcPAn8g5+43DaNkh4Z5zKOfNw==\"\n}\n\n\nFor more information, see Capturing Table Activity with DynamoDB Streams in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "get-shard-iterator",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodbstreams/get-shard-iterator.html",
      "command_description": "Description\n\nReturns a shard iterator. A shard iterator provides information about how to retrieve the stream records from within a shard. Use the shard iterator in a subsequent GetRecords request to read the stream records from the shard.\n\nNote\n\nA shard iterator expires 15 minutes after it is returned to the requester.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-shard-iterator\n--stream-arn <value>\n--shard-id <value>\n--shard-iterator-type <value>\n[--sequence-number <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--stream-arn <value>",
        "--shard-id <value>",
        "--shard-iterator-type <value>",
        "[--sequence-number <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--stream-arn (string)\n\nThe Amazon Resource Name (ARN) for the stream.\n\n--shard-id (string)\n\nThe identifier of the shard. The iterator will be returned for this shard ID.\n\n--shard-iterator-type (string)\n\nDetermines how the shard iterator is used to start reading stream records from the shard:\n\nAT_SEQUENCE_NUMBER - Start reading exactly from the position denoted by a specific sequence number.\n\nAFTER_SEQUENCE_NUMBER - Start reading right after the position denoted by a specific sequence number.\n\nTRIM_HORIZON - Start reading at the last (untrimmed) stream record, which is the oldest record in the shard. In DynamoDB Streams, there is a 24 hour limit on data retention. Stream records whose age exceeds this limit are subject to removal (trimming) from the stream.\n\nLATEST - Start reading just after the most recent stream record in the shard, so that you always read the most recent data in the shard.\n\nPossible values:\n\nTRIM_HORIZON\n\nLATEST\n\nAT_SEQUENCE_NUMBER\n\nAFTER_SEQUENCE_NUMBER\n\n--sequence-number (string)\n\nThe sequence number of a stream record in the shard from which to start reading.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nShardIterator -> (string)\n\nThe position in the shard from which to start reading stream records sequentially. A shard iterator specifies this position using the sequence number of a stream record in a shard.",
      "command_examples": "Examples\n\nTo get a shard iterator\n\nThe following get-shard-iterator command retrieves a shard iterator for the specified shard.\n\naws dynamodbstreams get-shard-iterator \\\n    --stream-arn arn:aws:dynamodb:us-west-1:12356789012:table/Music/stream/2019-10-22T18:02:01.576 \\\n    --shard-id shardId-00000001571780995058-40810d86 \\\n    --shard-iterator-type LATEST\n\n\nOutput:\n\n{\n    \"ShardIterator\": \"arn:aws:dynamodb:us-west-1:123456789012:table/Music/stream/2019-10-22T18:02:01.576|1|AAAAAAAAAAGgM3YZ89vLZZxjmoQeo33r9M4x3+zmmTLsiL86MfrF4+B4EbsByi52InVmiONmy6xVW4IRcIIbs1zO7MNIlqZfx8WQzMwVDyINtGG2hCLg78JKbYxFasXeePGlApTyf3rJxR765uyOVaBvBHAJuwF2TXIuxhaAlOupNGHr52qAC3a49ZOmf+CjNPlqQjnyRSAnfOwWmKhL1/KNParWSfz2odf780oOObIDIWRRMkt7+Hyzh9SD+hFxFAWR5C7QIlOXPc8mRBfNIazfrVCjJK8/jsjCzsqNyXKzJbhh+GXCoxYN+Kpmg4nyj1EAsYhbGL35muvHFoHjcyuynbsczbWaXNfThDwRAyvoTmc8XhHKtAWUbJiaVd8ZPtQwDsThCrmDRPIdmTRGWllGfUr5ezN5LscvkQezzgpaU5p8BgCqRzjv5Vl8LB6wHgQWNG+w/lEGS05ha1qNP+Vl4+tuhz2TRnhnJo/pny9GI/yGpce97mWvSPr5KPwy+Dtcm5BHayBs+PVYHITaTliInFlT+LCwvaz1QH3MY3b8A05Z800wjpktm60iQqtMeDwN4NX6FrcxR34JoFKGsgR8XkHVJzz2xr1xqSJ12ycpNTyHnndusw==\"\n}\n\n\nFor more information, see Capturing Table Activity with DynamoDB Streams in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "list-streams",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodbstreams/list-streams.html",
      "command_description": "Description\n\nReturns an array of stream ARNs associated with the current account and endpoint. If the TableName parameter is present, then ListStreams will return only the streams ARNs for that table.\n\nNote\n\nYou can call ListStreams at a maximum rate of 5 times per second.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-streams\n[--table-name <value>]\n[--limit <value>]\n[--exclusive-start-stream-arn <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--table-name <value>]",
        "[--limit <value>]",
        "[--exclusive-start-stream-arn <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nIf this parameter is provided, then only the streams associated with this table name are returned.\n\n--limit (integer)\n\nThe maximum number of streams to return. The upper limit is 100.\n\n--exclusive-start-stream-arn (string)\n\nThe ARN (Amazon Resource Name) of the first item that this operation will evaluate. Use the value that was returned for LastEvaluatedStreamArn in the previous operation.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nStreams -> (list)\n\nA list of stream descriptors associated with the current account and endpoint.\n\n(structure)\n\nRepresents all of the data describing a particular stream.\n\nStreamArn -> (string)\n\nThe Amazon Resource Name (ARN) for the stream.\n\nTableName -> (string)\n\nThe DynamoDB table with which the stream is associated.\n\nStreamLabel -> (string)\n\nA timestamp, in ISO 8601 format, for this stream.\n\nNote that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:\n\nthe AWS customer ID.\n\nthe table name\n\nthe StreamLabel\n\nLastEvaluatedStreamArn -> (string)\n\nThe stream ARN of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\n\nIf LastEvaluatedStreamArn is empty, then the “last page” of results has been processed and there is no more data to be retrieved.\n\nIf LastEvaluatedStreamArn is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedStreamArn is empty.",
      "command_examples": "Examples\n\nTo list DynamoDB streams\n\nThe following list-streams command lists all existing Amazon DynamoDB streams within the default AWS Region.\n\naws dynamodbstreams list-streams\n\n\nOutput:\n\n{\n    \"Streams\": [\n        {\n            \"StreamArn\": \"arn:aws:dynamodb:us-west-1:123456789012:table/Music/stream/2019-10-22T18:02:01.576\",\n            \"TableName\": \"Music\",\n            \"StreamLabel\": \"2019-10-22T18:02:01.576\"\n        }\n    ]\n}\n\n\nFor more information, see Capturing Table Activity with DynamoDB Streams in the Amazon DynamoDB Developer Guide."
    }
  ],
  "service_description": "Description\n\nAmazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see Capturing Table Activity with DynamoDB Streams in the Amazon DynamoDB Developer Guide."
}