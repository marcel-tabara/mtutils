{
  "service_name": "cloudwatch",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/index.html",
  "service_commands": [
    {
      "command_name": "delete-alarms",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/delete-alarms.html",
      "command_description": "Description\n\nDeletes the specified alarms. You can delete up to 100 alarms in one operation. However, this total can include no more than one composite alarm. For example, you could delete 99 metric alarms and one composite alarms with one operation, but you can’t delete two composite alarms with one operation.\n\nIn the event of an error, no alarms are deleted.\n\nNote\n\nIt is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can’t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.\n\nTo get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the AlarmRule of one of the alarms to False .\n\nAdditionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-alarms\n--alarm-names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--alarm-names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--alarm-names (list)\n\nThe alarms to be deleted.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete an alarm\n\nThe following example uses the delete-alarms command to delete the Amazon CloudWatch alarm named “myalarm”:\n\naws cloudwatch delete-alarms --alarm-names myalarm\n\n\nOutput:\n\nThis command returns to the prompt if successful.\n"
    },
    {
      "command_name": "delete-anomaly-detector",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/delete-anomaly-detector.html",
      "command_description": "Description\n\nDeletes the specified anomaly detection model from your account.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-anomaly-detector\n--namespace <value>\n--metric-name <value>\n[--dimensions <value>]\n--stat <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--namespace <value>",
        "--metric-name <value>",
        "[--dimensions <value>]",
        "--stat <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--namespace (string)\n\nThe namespace associated with the anomaly detection model to delete.\n\n--metric-name (string)\n\nThe metric name associated with the anomaly detection model to delete.\n\n--dimensions (list)\n\nThe metric dimensions associated with the anomaly detection model to delete.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nShorthand Syntax:\n\nName=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Name\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--stat (string)\n\nThe statistic associated with the anomaly detection model to delete.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "delete-dashboards",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/delete-dashboards.html",
      "command_description": "Description\n\nDeletes all dashboards that you specify. You can specify up to 100 dashboards to delete. If there is an error during this call, no dashboards are deleted.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-dashboards\n--dashboard-names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--dashboard-names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--dashboard-names (list)\n\nThe dashboards to be deleted. This parameter is required.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "delete-insight-rules",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/delete-insight-rules.html",
      "command_description": "Description\n\nPermanently deletes the specified Contributor Insights rules.\n\nIf you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-insight-rules\n--rule-names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--rule-names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--rule-names (list)\n\nAn array of the rule names to delete. If you need to find out the names of your rules, use DescribeInsightRules .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nFailures -> (list)\n\nAn array listing the rules that could not be deleted. You cannot delete built-in rules.\n\n(structure)\n\nThis array is empty if the API operation was successful for all the rules specified in the request. If the operation could not process one of the rules, the following data is returned for each of those rules.\n\nFailureResource -> (string)\n\nThe specified rule that could not be deleted.\n\nExceptionType -> (string)\n\nThe type of error.\n\nFailureCode -> (string)\n\nThe code of the error.\n\nFailureDescription -> (string)\n\nA description of the error."
    },
    {
      "command_name": "delete-metric-stream",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/delete-metric-stream.html",
      "command_description": "Description\n\nPermanently deletes the metric stream that you specify.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-metric-stream\n--name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--name (string)\n\nThe name of the metric stream to delete.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "describe-alarm-history",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/describe-alarm-history.html",
      "command_description": "Description\n\nRetrieves the history for the specified alarm. You can filter the results by date range or item type. If an alarm name is not specified, the histories for either all metric alarms or all composite alarms are returned.\n\nCloudWatch retains the history of an alarm even if you delete the alarm.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\ndescribe-alarm-history is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: AlarmHistoryItems",
      "command_synopsis": "Synopsis\n  describe-alarm-history\n[--alarm-name <value>]\n[--alarm-types <value>]\n[--history-item-type <value>]\n[--start-date <value>]\n[--end-date <value>]\n[--scan-by <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--alarm-name <value>]",
        "[--alarm-types <value>]",
        "[--history-item-type <value>]",
        "[--start-date <value>]",
        "[--end-date <value>]",
        "[--scan-by <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--alarm-name (string)\n\nThe name of the alarm.\n\n--alarm-types (list)\n\nUse this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\nWhere valid values are:\n  CompositeAlarm\n  MetricAlarm\n\n\n--history-item-type (string)\n\nThe type of alarm histories to retrieve.\n\nPossible values:\n\nConfigurationUpdate\n\nStateUpdate\n\nAction\n\n--start-date (timestamp)\n\nThe starting date to retrieve alarm history.\n\n--end-date (timestamp)\n\nThe ending date to retrieve alarm history.\n\n--scan-by (string)\n\nSpecified whether to return the newest or oldest alarm history first. Specify TimestampDescending to have the newest event history returned first, and specify TimestampAscending to have the oldest history returned first.\n\nPossible values:\n\nTimestampDescending\n\nTimestampAscending\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nAlarmHistoryItems -> (list)\n\nThe alarm histories, in JSON format.\n\n(structure)\n\nRepresents the history of a specific alarm.\n\nAlarmName -> (string)\n\nThe descriptive name for the alarm.\n\nAlarmType -> (string)\n\nThe type of alarm, either metric alarm or composite alarm.\n\nTimestamp -> (timestamp)\n\nThe time stamp for the alarm history item.\n\nHistoryItemType -> (string)\n\nThe type of alarm history item.\n\nHistorySummary -> (string)\n\nA summary of the alarm history, in text format.\n\nHistoryData -> (string)\n\nData about the alarm, in JSON format.\n\nNextToken -> (string)\n\nThe token that marks the start of the next batch of returned results.",
      "command_examples": "Examples\n\nTo retrieve history for an alarm\n\nThe following example uses the describe-alarm-history command to retrieve history for the Amazon CloudWatch alarm named “myalarm”:\n\naws cloudwatch describe-alarm-history --alarm-name \"myalarm\" --history-item-type StateUpdate\n\n\nOutput:\n\n{\n    \"AlarmHistoryItems\": [\n        {\n            \"Timestamp\": \"2014-04-09T18:59:06.442Z\",\n            \"HistoryItemType\": \"StateUpdate\",\n            \"AlarmName\": \"myalarm\",\n            \"HistoryData\": \"{\\\"version\\\":\\\"1.0\\\",\\\"oldState\\\":{\\\"stateValue\\\":\\\"ALARM\\\",\\\"stateReason\\\":\\\"testing purposes\\\"},\\\"newState\\\":{\\\"stateValue\\\":\\\"OK\\\",\\\"stateReason\\\":\\\"Threshold Crossed: 2 datapoints were not greater than the threshold (70.0). The most recent datapoints: [38.958, 40.292].\\\",\\\"stateReasonData\\\":{\\\"version\\\":\\\"1.0\\\",\\\"queryDate\\\":\\\"2014-04-09T18:59:06.419+0000\\\",\\\"startDate\\\":\\\"2014-04-09T18:44:00.000+0000\\\",\\\"statistic\\\":\\\"Average\\\",\\\"period\\\":300,\\\"recentDatapoints\\\":[38.958,40.292],\\\"threshold\\\":70.0}}}\",\n            \"HistorySummary\": \"Alarm updated from ALARM to OK\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T18:59:05.805Z\",\n            \"HistoryItemType\": \"StateUpdate\",\n            \"AlarmName\": \"myalarm\",\n            \"HistoryData\": \"{\\\"version\\\":\\\"1.0\\\",\\\"oldState\\\":{\\\"stateValue\\\":\\\"OK\\\",\\\"stateReason\\\":\\\"Threshold Crossed: 2 datapoints were not greater than the threshold (70.0). The most recent datapoints: [38.839999999999996, 39.714].\\\",\\\"stateReasonData\\\":{\\\"version\\\":\\\"1.0\\\",\\\"queryDate\\\":\\\"2014-03-11T22:45:41.569+0000\\\",\\\"startDate\\\":\\\"2014-03-11T22:30:00.000+0000\\\",\\\"statistic\\\":\\\"Average\\\",\\\"period\\\":300,\\\"recentDatapoints\\\":[38.839999999999996,39.714],\\\"threshold\\\":70.0}},\\\"newState\\\":{\\\"stateValue\\\":\\\"ALARM\\\",\\\"stateReason\\\":\\\"testing purposes\\\"}}\",\n            \"HistorySummary\": \"Alarm updated from OK to ALARM\"\n        }\n    ]\n}\n"
    },
    {
      "command_name": "describe-alarms",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/describe-alarms.html",
      "command_description": "Description\n\nRetrieves the specified alarms. You can filter the results by specifying a prefix for the alarm name, the alarm state, or a prefix for any action.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\ndescribe-alarms is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: MetricAlarms, CompositeAlarms",
      "command_synopsis": "Synopsis\n  describe-alarms\n[--alarm-names <value>]\n[--alarm-name-prefix <value>]\n[--alarm-types <value>]\n[--children-of-alarm-name <value>]\n[--parents-of-alarm-name <value>]\n[--state-value <value>]\n[--action-prefix <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--alarm-names <value>]",
        "[--alarm-name-prefix <value>]",
        "[--alarm-types <value>]",
        "[--children-of-alarm-name <value>]",
        "[--parents-of-alarm-name <value>]",
        "[--state-value <value>]",
        "[--action-prefix <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--alarm-names (list)\n\nThe names of the alarms to retrieve information about.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--alarm-name-prefix (string)\n\nAn alarm name prefix. If you specify this parameter, you receive information about all alarms that have names that start with this prefix.\n\nIf this parameter is specified, you cannot specify AlarmNames .\n\n--alarm-types (list)\n\nUse this parameter to specify whether you want the operation to return metric alarms or composite alarms. If you omit this parameter, only metric alarms are returned.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\nWhere valid values are:\n  CompositeAlarm\n  MetricAlarm\n\n\n--children-of-alarm-name (string)\n\nIf you use this parameter and specify the name of a composite alarm, the operation returns information about the “children” alarms of the alarm you specify. These are the metric alarms and composite alarms referenced in the AlarmRule field of the composite alarm that you specify in ChildrenOfAlarmName . Information about the composite alarm that you name in ChildrenOfAlarmName is not returned.\n\nIf you specify ChildrenOfAlarmName , you cannot specify any other parameters in the request except for MaxRecords and NextToken . If you do so, you receive a validation error.\n\nNote\n\nOnly the Alarm Name , ARN , StateValue (OK/ALARM/INSUFFICIENT_DATA), and StateUpdatedTimestamp information are returned by this operation when you use this parameter. To get complete information about these alarms, perform another DescribeAlarms operation and specify the parent alarm names in the AlarmNames parameter.\n\n--parents-of-alarm-name (string)\n\nIf you use this parameter and specify the name of a metric or composite alarm, the operation returns information about the “parent” alarms of the alarm you specify. These are the composite alarms that have AlarmRule parameters that reference the alarm named in ParentsOfAlarmName . Information about the alarm that you specify in ParentsOfAlarmName is not returned.\n\nIf you specify ParentsOfAlarmName , you cannot specify any other parameters in the request except for MaxRecords and NextToken . If you do so, you receive a validation error.\n\nNote\n\nOnly the Alarm Name and ARN are returned by this operation when you use this parameter. To get complete information about these alarms, perform another DescribeAlarms operation and specify the parent alarm names in the AlarmNames parameter.\n\n--state-value (string)\n\nSpecify this parameter to receive information only about alarms that are currently in the state that you specify.\n\nPossible values:\n\nOK\n\nALARM\n\nINSUFFICIENT_DATA\n\n--action-prefix (string)\n\nUse this parameter to filter the results of the operation to only those alarms that use a certain alarm action. For example, you could specify the ARN of an SNS topic to find all alarms that send notifications to that topic.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCompositeAlarms -> (list)\n\nThe information about any composite alarms returned by the operation.\n\n(structure)\n\nThe details about a composite alarm.\n\nActionsEnabled -> (boolean)\n\nIndicates whether actions should be executed during any changes to the alarm state.\n\nAlarmActions -> (list)\n\nThe actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\n(string)\n\nAlarmArn -> (string)\n\nThe Amazon Resource Name (ARN) of the alarm.\n\nAlarmConfigurationUpdatedTimestamp -> (timestamp)\n\nThe time stamp of the last update to the alarm configuration.\n\nAlarmDescription -> (string)\n\nThe description of the alarm.\n\nAlarmName -> (string)\n\nThe name of the alarm.\n\nAlarmRule -> (string)\n\nThe rule that this alarm uses to evaluate its alarm state.\n\nInsufficientDataActions -> (list)\n\nThe actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\n(string)\n\nOKActions -> (list)\n\nThe actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\n(string)\n\nStateReason -> (string)\n\nAn explanation for the alarm state, in text format.\n\nStateReasonData -> (string)\n\nAn explanation for the alarm state, in JSON format.\n\nStateUpdatedTimestamp -> (timestamp)\n\nThe time stamp of the last update to the alarm state.\n\nStateValue -> (string)\n\nThe state value for the alarm.\n\nMetricAlarms -> (list)\n\nThe information about any metric alarms returned by the operation.\n\n(structure)\n\nThe details about a metric alarm.\n\nAlarmName -> (string)\n\nThe name of the alarm.\n\nAlarmArn -> (string)\n\nThe Amazon Resource Name (ARN) of the alarm.\n\nAlarmDescription -> (string)\n\nThe description of the alarm.\n\nAlarmConfigurationUpdatedTimestamp -> (timestamp)\n\nThe time stamp of the last update to the alarm configuration.\n\nActionsEnabled -> (boolean)\n\nIndicates whether actions should be executed during any changes to the alarm state.\n\nOKActions -> (list)\n\nThe actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\n(string)\n\nAlarmActions -> (list)\n\nThe actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\n(string)\n\nInsufficientDataActions -> (list)\n\nThe actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\n(string)\n\nStateValue -> (string)\n\nThe state value for the alarm.\n\nStateReason -> (string)\n\nAn explanation for the alarm state, in text format.\n\nStateReasonData -> (string)\n\nAn explanation for the alarm state, in JSON format.\n\nStateUpdatedTimestamp -> (timestamp)\n\nThe time stamp of the last update to the alarm state.\n\nMetricName -> (string)\n\nThe name of the metric associated with the alarm, if this is an alarm based on a single metric.\n\nNamespace -> (string)\n\nThe namespace of the metric associated with the alarm.\n\nStatistic -> (string)\n\nThe statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use ExtendedStatistic .\n\nExtendedStatistic -> (string)\n\nThe percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.\n\nDimensions -> (list)\n\nThe dimensions for the metric associated with the alarm.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nPeriod -> (integer)\n\nThe period, in seconds, over which the statistic is applied.\n\nUnit -> (string)\n\nThe unit of the metric associated with the alarm.\n\nEvaluationPeriods -> (integer)\n\nThe number of periods over which data is compared to the specified threshold.\n\nDatapointsToAlarm -> (integer)\n\nThe number of data points that must be breaching to trigger the alarm.\n\nThreshold -> (double)\n\nThe value to compare with the specified statistic.\n\nComparisonOperator -> (string)\n\nThe arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.\n\nTreatMissingData -> (string)\n\nSets how this alarm is to handle missing data points. If this parameter is omitted, the default behavior of missing is used.\n\nEvaluateLowSampleCountPercentile -> (string)\n\nUsed only for alarms based on percentiles. If ignore , the alarm state does not change during periods with too few data points to be statistically significant. If evaluate or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.\n\nMetrics -> (list)\n\nAn array of MetricDataQuery structures, used in an alarm based on a metric math expression. Each structure either retrieves a metric or performs a math expression. One item in the Metrics array is the math expression that the alarm watches. This expression by designated by having ReturnData set to true.\n\n(structure)\n\nThis structure is used in both GetMetricData and PutMetricAlarm . The supported use of this structure is different for those two operations.\n\nWhen used in GetMetricData , it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data. A single GetMetricData call can include up to 500 MetricDataQuery structures.\n\nWhen used in PutMetricAlarm , it enables you to create an alarm based on a metric math expression. Each MetricDataQuery in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single PutMetricAlarm call can include up to 20 MetricDataQuery structures in the array. The 20 structures can include as many as 10 structures that contain a MetricStat parameter to retrieve a metric, and as many as 10 structures that contain the Expression parameter to perform a math expression. Of those Expression structures, one must have True as the value for ReturnData . The result of this expression is the value the alarm watches.\n\nAny expression used in a PutMetricAlarm operation must return a single time series. For more information, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide .\n\nSome of the parameters of this structure also have different uses whether you are using this structure in a GetMetricData operation or a PutMetricAlarm operation. These differences are explained in the following parameter list.\n\nId -> (string)\n\nA short name used to tie this object to the results in the response. This name must be unique within a single call to GetMetricData . If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.\n\nMetricStat -> (structure)\n\nThe metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.\n\nWithin one MetricDataQuery object, you must specify either Expression or MetricStat but not both.\n\nMetric -> (structure)\n\nThe metric to return, including the metric name, namespace, and dimensions.\n\nNamespace -> (string)\n\nThe namespace of the metric.\n\nMetricName -> (string)\n\nThe name of the metric. This is a required field.\n\nDimensions -> (list)\n\nThe dimensions for the metric.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nPeriod -> (integer)\n\nThe granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second.\n\nIf the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:\n\nStart time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).\n\nStart time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).\n\nStart time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).\n\nStat -> (string)\n\nThe statistic to return. It can include any CloudWatch statistic or extended statistic.\n\nUnit -> (string)\n\nWhen you are using a Put operation, this defines what unit you want to use when storing the metric.\n\nIn a Get operation, if you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.\n\nExpression -> (string)\n\nThe math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the Id of the other metrics to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide .\n\nWithin each MetricDataQuery object, you must specify either Expression or MetricStat but not both.\n\nLabel -> (string)\n\nA human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch generates a default.\n\nYou can put dynamic expressions into a label, so that it is more descriptive. For more information, see Using Dynamic Labels .\n\nReturnData -> (boolean)\n\nWhen used in GetMetricData , this option indicates whether to return the timestamps and raw data values of this metric. If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify False . If you omit this, the default of True is used.\n\nWhen used in PutMetricAlarm , specify True for the one expression result to use as the alarm. For all other metrics and expressions in the same PutMetricAlarm operation, specify ReturnData as False.\n\nPeriod -> (integer)\n\nThe granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData operation that includes a StorageResolution of 1 second .\n\nAccountId -> (string)\n\nThe ID of the account where the metrics are located, if this is a cross-account alarm.\n\nUse this field only for PutMetricAlarm operations. It is not used in GetMetricData operations.\n\nThresholdMetricId -> (string)\n\nIn an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.\n\nNextToken -> (string)\n\nThe token that marks the start of the next batch of returned results.",
      "command_examples": "Examples\n\nTo list information about an alarm\n\nThe following example uses the describe-alarms command to provide information about the alarm named “myalarm”:\n\naws cloudwatch describe-alarms --alarm-names \"myalarm\"\n\n\nOutput:\n\n{\n    \"MetricAlarms\": [\n        {\n            \"EvaluationPeriods\": 2,\n            \"AlarmArn\": \"arn:aws:cloudwatch:us-east-1:123456789012:alarm:myalarm\",\n            \"StateUpdatedTimestamp\": \"2014-04-09T18:59:06.442Z\",\n            \"AlarmConfigurationUpdatedTimestamp\": \"2012-12-27T00:49:54.032Z\",\n            \"ComparisonOperator\": \"GreaterThanThreshold\",\n            \"AlarmActions\": [\n                \"arn:aws:sns:us-east-1:123456789012:myHighCpuAlarm\"\n            ],\n            \"Namespace\": \"AWS/EC2\",\n            \"AlarmDescription\": \"CPU usage exceeds 70 percent\",\n            \"StateReasonData\": \"{\\\"version\\\":\\\"1.0\\\",\\\"queryDate\\\":\\\"2014-04-09T18:59:06.419+0000\\\",\\\"startDate\\\":\\\"2014-04-09T18:44:00.000+0000\\\",\\\"statistic\\\":\\\"Average\\\",\\\"period\\\":300,\\\"recentDatapoints\\\":[38.958,40.292],\\\"threshold\\\":70.0}\",\n            \"Period\": 300,\n            \"StateValue\": \"OK\",\n            \"Threshold\": 70.0,\n            \"AlarmName\": \"myalarm\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"InstanceId\",\n                    \"Value\": \"i-0c986c72\"\n                }\n            ],\n            \"Statistic\": \"Average\",\n            \"StateReason\": \"Threshold Crossed: 2 datapoints were not greater than the threshold (70.0). The most recent datapoints: [38.958, 40.292].\",\n            \"InsufficientDataActions\": [],\n            \"OKActions\": [],\n            \"ActionsEnabled\": true,\n            \"MetricName\": \"CPUUtilization\"\n        }\n    ]\n}\n"
    },
    {
      "command_name": "describe-alarms-for-metric",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/describe-alarms-for-metric.html",
      "command_description": "Description\n\nRetrieves the alarms for the specified metric. To filter the results, specify a statistic, period, or unit.\n\nThis operation retrieves only standard alarms that are based on the specified metric. It does not return alarms based on math expressions that use the specified metric, or composite alarms that use the specified metric.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-alarms-for-metric\n--metric-name <value>\n--namespace <value>\n[--statistic <value>]\n[--extended-statistic <value>]\n[--dimensions <value>]\n[--period <value>]\n[--unit <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--metric-name <value>",
        "--namespace <value>",
        "[--statistic <value>]",
        "[--extended-statistic <value>]",
        "[--dimensions <value>]",
        "[--period <value>]",
        "[--unit <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--metric-name (string)\n\nThe name of the metric.\n\n--namespace (string)\n\nThe namespace of the metric.\n\n--statistic (string)\n\nThe statistic for the metric, other than percentiles. For percentile statistics, use ExtendedStatistics .\n\nPossible values:\n\nSampleCount\n\nAverage\n\nSum\n\nMinimum\n\nMaximum\n\n--extended-statistic (string)\n\nThe percentile statistic for the metric. Specify a value between p0.0 and p100.\n\n--dimensions (list)\n\nThe dimensions associated with the metric. If the metric has any associated dimensions, you must specify them in order for the call to succeed.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nShorthand Syntax:\n\nName=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Name\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--period (integer)\n\nThe period, in seconds, over which the statistic is applied.\n\n--unit (string)\n\nThe unit for the metric.\n\nPossible values:\n\nSeconds\n\nMicroseconds\n\nMilliseconds\n\nBytes\n\nKilobytes\n\nMegabytes\n\nGigabytes\n\nTerabytes\n\nBits\n\nKilobits\n\nMegabits\n\nGigabits\n\nTerabits\n\nPercent\n\nCount\n\nBytes/Second\n\nKilobytes/Second\n\nMegabytes/Second\n\nGigabytes/Second\n\nTerabytes/Second\n\nBits/Second\n\nKilobits/Second\n\nMegabits/Second\n\nGigabits/Second\n\nTerabits/Second\n\nCount/Second\n\nNone\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nMetricAlarms -> (list)\n\nThe information for each alarm with the specified metric.\n\n(structure)\n\nThe details about a metric alarm.\n\nAlarmName -> (string)\n\nThe name of the alarm.\n\nAlarmArn -> (string)\n\nThe Amazon Resource Name (ARN) of the alarm.\n\nAlarmDescription -> (string)\n\nThe description of the alarm.\n\nAlarmConfigurationUpdatedTimestamp -> (timestamp)\n\nThe time stamp of the last update to the alarm configuration.\n\nActionsEnabled -> (boolean)\n\nIndicates whether actions should be executed during any changes to the alarm state.\n\nOKActions -> (list)\n\nThe actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\n(string)\n\nAlarmActions -> (list)\n\nThe actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\n(string)\n\nInsufficientDataActions -> (list)\n\nThe actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\n(string)\n\nStateValue -> (string)\n\nThe state value for the alarm.\n\nStateReason -> (string)\n\nAn explanation for the alarm state, in text format.\n\nStateReasonData -> (string)\n\nAn explanation for the alarm state, in JSON format.\n\nStateUpdatedTimestamp -> (timestamp)\n\nThe time stamp of the last update to the alarm state.\n\nMetricName -> (string)\n\nThe name of the metric associated with the alarm, if this is an alarm based on a single metric.\n\nNamespace -> (string)\n\nThe namespace of the metric associated with the alarm.\n\nStatistic -> (string)\n\nThe statistic for the metric associated with the alarm, other than percentile. For percentile statistics, use ExtendedStatistic .\n\nExtendedStatistic -> (string)\n\nThe percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.\n\nDimensions -> (list)\n\nThe dimensions for the metric associated with the alarm.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nPeriod -> (integer)\n\nThe period, in seconds, over which the statistic is applied.\n\nUnit -> (string)\n\nThe unit of the metric associated with the alarm.\n\nEvaluationPeriods -> (integer)\n\nThe number of periods over which data is compared to the specified threshold.\n\nDatapointsToAlarm -> (integer)\n\nThe number of data points that must be breaching to trigger the alarm.\n\nThreshold -> (double)\n\nThe value to compare with the specified statistic.\n\nComparisonOperator -> (string)\n\nThe arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.\n\nTreatMissingData -> (string)\n\nSets how this alarm is to handle missing data points. If this parameter is omitted, the default behavior of missing is used.\n\nEvaluateLowSampleCountPercentile -> (string)\n\nUsed only for alarms based on percentiles. If ignore , the alarm state does not change during periods with too few data points to be statistically significant. If evaluate or this parameter is not used, the alarm is always evaluated and possibly changes state no matter how many data points are available.\n\nMetrics -> (list)\n\nAn array of MetricDataQuery structures, used in an alarm based on a metric math expression. Each structure either retrieves a metric or performs a math expression. One item in the Metrics array is the math expression that the alarm watches. This expression by designated by having ReturnData set to true.\n\n(structure)\n\nThis structure is used in both GetMetricData and PutMetricAlarm . The supported use of this structure is different for those two operations.\n\nWhen used in GetMetricData , it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data. A single GetMetricData call can include up to 500 MetricDataQuery structures.\n\nWhen used in PutMetricAlarm , it enables you to create an alarm based on a metric math expression. Each MetricDataQuery in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single PutMetricAlarm call can include up to 20 MetricDataQuery structures in the array. The 20 structures can include as many as 10 structures that contain a MetricStat parameter to retrieve a metric, and as many as 10 structures that contain the Expression parameter to perform a math expression. Of those Expression structures, one must have True as the value for ReturnData . The result of this expression is the value the alarm watches.\n\nAny expression used in a PutMetricAlarm operation must return a single time series. For more information, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide .\n\nSome of the parameters of this structure also have different uses whether you are using this structure in a GetMetricData operation or a PutMetricAlarm operation. These differences are explained in the following parameter list.\n\nId -> (string)\n\nA short name used to tie this object to the results in the response. This name must be unique within a single call to GetMetricData . If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.\n\nMetricStat -> (structure)\n\nThe metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.\n\nWithin one MetricDataQuery object, you must specify either Expression or MetricStat but not both.\n\nMetric -> (structure)\n\nThe metric to return, including the metric name, namespace, and dimensions.\n\nNamespace -> (string)\n\nThe namespace of the metric.\n\nMetricName -> (string)\n\nThe name of the metric. This is a required field.\n\nDimensions -> (list)\n\nThe dimensions for the metric.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nPeriod -> (integer)\n\nThe granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second.\n\nIf the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:\n\nStart time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).\n\nStart time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).\n\nStart time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).\n\nStat -> (string)\n\nThe statistic to return. It can include any CloudWatch statistic or extended statistic.\n\nUnit -> (string)\n\nWhen you are using a Put operation, this defines what unit you want to use when storing the metric.\n\nIn a Get operation, if you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.\n\nExpression -> (string)\n\nThe math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the Id of the other metrics to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide .\n\nWithin each MetricDataQuery object, you must specify either Expression or MetricStat but not both.\n\nLabel -> (string)\n\nA human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch generates a default.\n\nYou can put dynamic expressions into a label, so that it is more descriptive. For more information, see Using Dynamic Labels .\n\nReturnData -> (boolean)\n\nWhen used in GetMetricData , this option indicates whether to return the timestamps and raw data values of this metric. If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify False . If you omit this, the default of True is used.\n\nWhen used in PutMetricAlarm , specify True for the one expression result to use as the alarm. For all other metrics and expressions in the same PutMetricAlarm operation, specify ReturnData as False.\n\nPeriod -> (integer)\n\nThe granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData operation that includes a StorageResolution of 1 second .\n\nAccountId -> (string)\n\nThe ID of the account where the metrics are located, if this is a cross-account alarm.\n\nUse this field only for PutMetricAlarm operations. It is not used in GetMetricData operations.\n\nThresholdMetricId -> (string)\n\nIn an alarm based on an anomaly detection model, this is the ID of the ANOMALY_DETECTION_BAND function used as the threshold for the alarm.",
      "command_examples": "Examples\n\nTo display information about alarms associated with a metric\n\nThe following example uses the describe-alarms-for-metric command to display information about any alarms associated with the Amazon EC2 CPUUtilization metric and the instance with the ID i-0c986c72.:\n\naws cloudwatch describe-alarms-for-metric --metric-name CPUUtilization --namespace AWS/EC2 --dimensions Name=InstanceId,Value=i-0c986c72\n\n\nOutput:\n\n{\n    \"MetricAlarms\": [\n        {\n            \"EvaluationPeriods\": 10,\n            \"AlarmArn\": \"arn:aws:cloudwatch:us-east-1:111122223333:alarm:myHighCpuAlarm2\",\n            \"StateUpdatedTimestamp\": \"2013-10-30T03:03:51.479Z\",\n            \"AlarmConfigurationUpdatedTimestamp\": \"2013-10-30T03:03:50.865Z\",\n            \"ComparisonOperator\": \"GreaterThanOrEqualToThreshold\",\n            \"AlarmActions\": [\n                \"arn:aws:sns:us-east-1:111122223333:NotifyMe\"\n            ],\n            \"Namespace\": \"AWS/EC2\",\n            \"AlarmDescription\": \"CPU usage exceeds 70 percent\",\n            \"StateReasonData\": \"{\\\"version\\\":\\\"1.0\\\",\\\"queryDate\\\":\\\"2013-10-30T03:03:51.479+0000\\\",\\\"startDate\\\":\\\"2013-10-30T02:08:00.000+0000\\\",\\\"statistic\\\":\\\"Average\\\",\\\"period\\\":300,\\\"recentDatapoints\\\":[40.698,39.612,42.432,39.796,38.816,42.28,42.854,40.088,40.760000000000005,41.316],\\\"threshold\\\":70.0}\",\n            \"Period\": 300,\n            \"StateValue\": \"OK\",\n            \"Threshold\": 70.0,\n            \"AlarmName\": \"myHighCpuAlarm2\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"InstanceId\",\n                    \"Value\": \"i-0c986c72\"\n                }\n            ],\n            \"Statistic\": \"Average\",\n            \"StateReason\": \"Threshold Crossed: 10 datapoints were not greater than or equal to the threshold (70.0). The most recent datapoints: [40.760000000000005, 41.316].\",\n            \"InsufficientDataActions\": [],\n            \"OKActions\": [],\n            \"ActionsEnabled\": true,\n            \"MetricName\": \"CPUUtilization\"\n        },\n        {\n            \"EvaluationPeriods\": 2,\n            \"AlarmArn\": \"arn:aws:cloudwatch:us-east-1:111122223333:alarm:myHighCpuAlarm\",\n            \"StateUpdatedTimestamp\": \"2014-04-09T18:59:06.442Z\",\n            \"AlarmConfigurationUpdatedTimestamp\": \"2014-04-09T22:26:05.958Z\",\n            \"ComparisonOperator\": \"GreaterThanThreshold\",\n            \"AlarmActions\": [\n                \"arn:aws:sns:us-east-1:111122223333:HighCPUAlarm\"\n            ],\n            \"Namespace\": \"AWS/EC2\",\n            \"AlarmDescription\": \"CPU usage exceeds 70 percent\",\n            \"StateReasonData\": \"{\\\"version\\\":\\\"1.0\\\",\\\"queryDate\\\":\\\"2014-04-09T18:59:06.419+0000\\\",\\\"startDate\\\":\\\"2014-04-09T18:44:00.000+0000\\\",\\\"statistic\\\":\\\"Average\\\",\\\"period\\\":300,\\\"recentDatapoints\\\":[38.958,40.292],\\\"threshold\\\":70.0}\",\n            \"Period\": 300,\n            \"StateValue\": \"OK\",\n            \"Threshold\": 70.0,\n            \"AlarmName\": \"myHighCpuAlarm\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"InstanceId\",\n                    \"Value\": \"i-0c986c72\"\n                }\n            ],\n            \"Statistic\": \"Average\",\n            \"StateReason\": \"Threshold Crossed: 2 datapoints were not greater than the threshold (70.0). The most recent datapoints: [38.958, 40.292].\",\n            \"InsufficientDataActions\": [],\n            \"OKActions\": [],\n            \"ActionsEnabled\": false,\n            \"MetricName\": \"CPUUtilization\"\n        }\n    ]\n}\n"
    },
    {
      "command_name": "describe-anomaly-detectors",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/describe-anomaly-detectors.html",
      "command_description": "Description\n\nLists the anomaly detection models that you have created in your account. You can list all models in your account or filter the results to only the models that are related to a certain namespace, metric name, or metric dimension.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-anomaly-detectors\n[--next-token <value>]\n[--max-results <value>]\n[--namespace <value>]\n[--metric-name <value>]\n[--dimensions <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--next-token <value>]",
        "[--max-results <value>]",
        "[--namespace <value>]",
        "[--metric-name <value>]",
        "[--dimensions <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--next-token (string)\n\nUse the token returned by the previous operation to request the next page of results.\n\n--max-results (integer)\n\nThe maximum number of results to return in one operation. The maximum value that you can specify is 100.\n\nTo retrieve the remaining results, make another call with the returned NextToken value.\n\n--namespace (string)\n\nLimits the results to only the anomaly detection models that are associated with the specified namespace.\n\n--metric-name (string)\n\nLimits the results to only the anomaly detection models that are associated with the specified metric name. If there are multiple metrics with this name in different namespaces that have anomaly detection models, they’re all returned.\n\n--dimensions (list)\n\nLimits the results to only the anomaly detection models that are associated with the specified metric dimensions. If there are multiple metrics that have these dimensions and have anomaly detection models associated, they’re all returned.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nShorthand Syntax:\n\nName=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Name\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nAnomalyDetectors -> (list)\n\nThe list of anomaly detection models returned by the operation.\n\n(structure)\n\nAn anomaly detection model associated with a particular CloudWatch metric and statistic. You can use the model to display a band of expected normal values when the metric is graphed.\n\nNamespace -> (string)\n\nThe namespace of the metric associated with the anomaly detection model.\n\nMetricName -> (string)\n\nThe name of the metric associated with the anomaly detection model.\n\nDimensions -> (list)\n\nThe metric dimensions associated with the anomaly detection model.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nStat -> (string)\n\nThe statistic associated with the anomaly detection model.\n\nConfiguration -> (structure)\n\nThe configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude from use for training the model, and the time zone to use for the metric.\n\nExcludedTimeRanges -> (list)\n\nAn array of time ranges to exclude from use when the anomaly detection model is trained. Use this to make sure that events that could cause unusual values for the metric, such as deployments, aren’t used when CloudWatch creates the model.\n\n(structure)\n\nSpecifies one range of days or times to exclude from use for training an anomaly detection model.\n\nStartTime -> (timestamp)\n\nThe start time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss . For example, 2019-07-01T23:59:59 .\n\nEndTime -> (timestamp)\n\nThe end time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss . For example, 2019-07-01T23:59:59 .\n\nMetricTimezone -> (string)\n\nThe time zone to use for the metric. This is useful to enable the model to automatically account for daylight savings time changes if the metric is sensitive to such time changes.\n\nTo specify a time zone, use the name of the time zone as specified in the standard tz database. For more information, see tz database .\n\nStateValue -> (string)\n\nThe current status of the anomaly detector’s training. The possible values are TRAINED | PENDING_TRAINING | TRAINED_INSUFFICIENT_DATA\n\nNextToken -> (string)\n\nA token that you can use in a subsequent operation to retrieve the next set of results."
    },
    {
      "command_name": "describe-insight-rules",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/describe-insight-rules.html",
      "command_description": "Description\n\nReturns a list of all the Contributor Insights rules in your account.\n\nFor more information about Contributor Insights, see Using Contributor Insights to Analyze High-Cardinality Data .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-insight-rules\n[--next-token <value>]\n[--max-results <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--next-token <value>]",
        "[--max-results <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--next-token (string)\n\nInclude this value, if it was returned by the previous operation, to get the next set of rules.\n\n--max-results (integer)\n\nThe maximum number of results to return in one operation. If you omit this parameter, the default of 500 is used.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNextToken -> (string)\n\nIf this parameter is present, it is a token that marks the start of the next batch of returned results.\n\nInsightRules -> (list)\n\nThe rules returned by the operation.\n\n(structure)\n\nThis structure contains the definition for a Contributor Insights rule.\n\nName -> (string)\n\nThe name of the rule.\n\nState -> (string)\n\nIndicates whether the rule is enabled or disabled.\n\nSchema -> (string)\n\nFor rules that you create, this is always {\"Name\": \"CloudWatchLogRule\", \"Version\": 1} . For built-in rules, this is {\"Name\": \"ServiceLogRule\", \"Version\": 1}\n\nDefinition -> (string)\n\nThe definition of the rule, as a JSON object. The definition contains the keywords used to define contributors, the value to aggregate on if this rule returns a sum instead of a count, and the filters. For details on the valid syntax, see Contributor Insights Rule Syntax ."
    },
    {
      "command_name": "disable-alarm-actions",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/disable-alarm-actions.html",
      "command_description": "Description\n\nDisables the actions for the specified alarms. When an alarm’s actions are disabled, the alarm actions do not execute when the alarm state changes.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  disable-alarm-actions\n--alarm-names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--alarm-names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--alarm-names (list)\n\nThe names of the alarms.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo disable actions for an alarm\n\nThe following example uses the disable-alarm-actions command to disable all actions for the alarm named myalarm.:\n\naws cloudwatch disable-alarm-actions --alarm-names myalarm\n\n\nThis command returns to the prompt if successful."
    },
    {
      "command_name": "disable-insight-rules",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/disable-insight-rules.html",
      "command_description": "Description\n\nDisables the specified Contributor Insights rules. When rules are disabled, they do not analyze log groups and do not incur costs.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  disable-insight-rules\n--rule-names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--rule-names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--rule-names (list)\n\nAn array of the rule names to disable. If you need to find out the names of your rules, use DescribeInsightRules .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nFailures -> (list)\n\nAn array listing the rules that could not be disabled. You cannot disable built-in rules.\n\n(structure)\n\nThis array is empty if the API operation was successful for all the rules specified in the request. If the operation could not process one of the rules, the following data is returned for each of those rules.\n\nFailureResource -> (string)\n\nThe specified rule that could not be deleted.\n\nExceptionType -> (string)\n\nThe type of error.\n\nFailureCode -> (string)\n\nThe code of the error.\n\nFailureDescription -> (string)\n\nA description of the error."
    },
    {
      "command_name": "enable-alarm-actions",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/enable-alarm-actions.html",
      "command_description": "Description\n\nEnables the actions for the specified alarms.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  enable-alarm-actions\n--alarm-names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--alarm-names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--alarm-names (list)\n\nThe names of the alarms.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo enable all actions for an alarm\n\nThe following example uses the enable-alarm-actions command to enable all actions for the alarm named myalarm.:\n\naws cloudwatch enable-alarm-actions --alarm-names myalarm\n\n\nThis command returns to the prompt if successful."
    },
    {
      "command_name": "enable-insight-rules",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/enable-insight-rules.html",
      "command_description": "Description\n\nEnables the specified Contributor Insights rules. When rules are enabled, they immediately begin analyzing log data.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  enable-insight-rules\n--rule-names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--rule-names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--rule-names (list)\n\nAn array of the rule names to enable. If you need to find out the names of your rules, use DescribeInsightRules .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nFailures -> (list)\n\nAn array listing the rules that could not be enabled. You cannot disable or enable built-in rules.\n\n(structure)\n\nThis array is empty if the API operation was successful for all the rules specified in the request. If the operation could not process one of the rules, the following data is returned for each of those rules.\n\nFailureResource -> (string)\n\nThe specified rule that could not be deleted.\n\nExceptionType -> (string)\n\nThe type of error.\n\nFailureCode -> (string)\n\nThe code of the error.\n\nFailureDescription -> (string)\n\nA description of the error."
    },
    {
      "command_name": "get-dashboard",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/get-dashboard.html",
      "command_description": "Description\n\nDisplays the details of the dashboard that you specify.\n\nTo copy an existing dashboard, use GetDashboard , and then use the data returned within DashboardBody as the template for the new dashboard when you call PutDashboard to create the copy.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-dashboard\n--dashboard-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--dashboard-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--dashboard-name (string)\n\nThe name of the dashboard to be described.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nDashboardArn -> (string)\n\nThe Amazon Resource Name (ARN) of the dashboard.\n\nDashboardBody -> (string)\n\nThe detailed information about the dashboard, including what widgets are included and their location on the dashboard. For more information about the DashboardBody syntax, see Dashboard Body Structure and Syntax .\n\nDashboardName -> (string)\n\nThe name of the dashboard."
    },
    {
      "command_name": "get-insight-rule-report",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/get-insight-rule-report.html",
      "command_description": "Description\n\nThis operation returns the time series data collected by a Contributor Insights rule. The data includes the identity and number of contributors to the log group.\n\nYou can also optionally return one or more statistics about each data point in the time series. These statistics can include the following:\n\nUniqueContributors – the number of unique contributors for each data point.\n\nMaxContributorValue – the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph. If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule’s Value , during that period.\n\nSampleCount – the number of data points matched by the rule.\n\nSum – the sum of the values from all contributors during the time period represented by that data point.\n\nMinimum – the minimum value from a single observation during the time period represented by that data point.\n\nMaximum – the maximum value from a single observation during the time period represented by that data point.\n\nAverage – the average value from all contributors during the time period represented by that data point.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-insight-rule-report\n--rule-name <value>\n--start-time <value>\n--end-time <value>\n--period <value>\n[--max-contributor-count <value>]\n[--metrics <value>]\n[--order-by <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--rule-name <value>",
        "--start-time <value>",
        "--end-time <value>",
        "--period <value>",
        "[--max-contributor-count <value>]",
        "[--metrics <value>]",
        "[--order-by <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--rule-name (string)\n\nThe name of the rule that you want to see data from.\n\n--start-time (timestamp)\n\nThe start time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as yyyy-MM-dd'T'HH:mm:ss . For example, 2019-07-01T23:59:59 .\n\n--end-time (timestamp)\n\nThe end time of the data to use in the report. When used in a raw HTTP Query API, it is formatted as yyyy-MM-dd'T'HH:mm:ss . For example, 2019-07-01T23:59:59 .\n\n--period (integer)\n\nThe period, in seconds, to use for the statistics in the InsightRuleMetricDatapoint results.\n\n--max-contributor-count (integer)\n\nThe maximum number of contributors to include in the report. The range is 1 to 100. If you omit this, the default of 10 is used.\n\n--metrics (list)\n\nSpecifies which metrics to use for aggregation of contributor values for the report. You can specify one or more of the following metrics:\n\nUniqueContributors – the number of unique contributors for each data point.\n\nMaxContributorValue – the value of the top contributor for each data point. The identity of the contributor might change for each data point in the graph. If this rule aggregates by COUNT, the top contributor for each data point is the contributor with the most occurrences in that period. If the rule aggregates by SUM, the top contributor is the contributor with the highest sum in the log field specified by the rule’s Value , during that period.\n\nSampleCount – the number of data points matched by the rule.\n\nSum – the sum of the values from all contributors during the time period represented by that data point.\n\nMinimum – the minimum value from a single observation during the time period represented by that data point.\n\nMaximum – the maximum value from a single observation during the time period represented by that data point.\n\nAverage – the average value from all contributors during the time period represented by that data point.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--order-by (string)\n\nDetermines what statistic to use to rank the contributors. Valid values are SUM and MAXIMUM.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyLabels -> (list)\n\nAn array of the strings used as the keys for this rule. The keys are the dimensions used to classify contributors. If the rule contains more than one key, then each unique combination of values for the keys is counted as a unique contributor.\n\n(string)\n\nAggregationStatistic -> (string)\n\nSpecifies whether this rule aggregates contributor data by COUNT or SUM.\n\nAggregateValue -> (double)\n\nThe sum of the values from all individual contributors that match the rule.\n\nApproximateUniqueCount -> (long)\n\nAn approximate count of the unique contributors found by this rule in this time period.\n\nContributors -> (list)\n\nAn array of the unique contributors found by this rule in this time period. If the rule contains multiple keys, each combination of values for the keys counts as a unique contributor.\n\n(structure)\n\nOne of the unique contributors found by a Contributor Insights rule. If the rule contains multiple keys, then a unique contributor is a unique combination of values from all the keys in the rule.\n\nIf the rule contains a single key, then each unique contributor is each unique value for this key.\n\nFor more information, see GetInsightRuleReport .\n\nKeys -> (list)\n\nOne of the log entry field keywords that is used to define contributors for this rule.\n\n(string)\n\nApproximateAggregateValue -> (double)\n\nAn approximation of the aggregate value that comes from this contributor.\n\nDatapoints -> (list)\n\nAn array of the data points where this contributor is present. Only the data points when this contributor appeared are included in the array.\n\n(structure)\n\nOne data point related to one contributor.\n\nFor more information, see GetInsightRuleReport and InsightRuleContributor .\n\nTimestamp -> (timestamp)\n\nThe timestamp of the data point.\n\nApproximateValue -> (double)\n\nThe approximate value that this contributor added during this timestamp.\n\nMetricDatapoints -> (list)\n\nA time series of metric data points that matches the time period in the rule request.\n\n(structure)\n\nOne data point from the metric time series returned in a Contributor Insights rule report.\n\nFor more information, see GetInsightRuleReport .\n\nTimestamp -> (timestamp)\n\nThe timestamp of the data point.\n\nUniqueContributors -> (double)\n\nThe number of unique contributors who published data during this timestamp.\n\nThis statistic is returned only if you included it in the Metrics array in your request.\n\nMaxContributorValue -> (double)\n\nThe maximum value provided by one contributor during this timestamp. Each timestamp is evaluated separately, so the identity of the max contributor could be different for each timestamp.\n\nThis statistic is returned only if you included it in the Metrics array in your request.\n\nSampleCount -> (double)\n\nThe number of occurrences that matched the rule during this data point.\n\nThis statistic is returned only if you included it in the Metrics array in your request.\n\nAverage -> (double)\n\nThe average value from all contributors during the time period represented by that data point.\n\nThis statistic is returned only if you included it in the Metrics array in your request.\n\nSum -> (double)\n\nThe sum of the values from all contributors during the time period represented by that data point.\n\nThis statistic is returned only if you included it in the Metrics array in your request.\n\nMinimum -> (double)\n\nThe minimum value from a single contributor during the time period represented by that data point.\n\nThis statistic is returned only if you included it in the Metrics array in your request.\n\nMaximum -> (double)\n\nThe maximum value from a single occurence from a single contributor during the time period represented by that data point.\n\nThis statistic is returned only if you included it in the Metrics array in your request."
    },
    {
      "command_name": "get-metric-data",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/get-metric-data.html",
      "command_description": "Description\n\nYou can use the GetMetricData API to retrieve as many as 500 different metrics in a single request, with a total of as many as 100,800 data points. You can also optionally perform math expressions on the values of the returned statistics, to create new time series that represent new insights into your data. For example, using Lambda metrics, you could divide the Errors metric by the Invocations metric to get an error rate time series. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide .\n\nCalls to the GetMetricData API have a different pricing structure than calls to GetMetricStatistics . For more information about pricing, see Amazon CloudWatch Pricing .\n\nAmazon CloudWatch retains metric data as follows:\n\nData points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a StorageResolution of 1.\n\nData points with a period of 60 seconds (1-minute) are available for 15 days.\n\nData points with a period of 300 seconds (5-minute) are available for 63 days.\n\nData points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).\n\nData points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.\n\nIf you omit Unit in your request, all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nget-metric-data is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: MetricDataResults, Messages",
      "command_synopsis": "Synopsis\n  get-metric-data\n--metric-data-queries <value>\n--start-time <value>\n--end-time <value>\n[--scan-by <value>]\n[--label-options <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--metric-data-queries <value>",
        "--start-time <value>",
        "--end-time <value>",
        "[--scan-by <value>]",
        "[--label-options <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--metric-data-queries (list)\n\nThe metric queries to be returned. A single GetMetricData call can include as many as 500 MetricDataQuery structures. Each of these structures can specify either a metric to retrieve, or a math expression to perform on retrieved data.\n\n(structure)\n\nThis structure is used in both GetMetricData and PutMetricAlarm . The supported use of this structure is different for those two operations.\n\nWhen used in GetMetricData , it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data. A single GetMetricData call can include up to 500 MetricDataQuery structures.\n\nWhen used in PutMetricAlarm , it enables you to create an alarm based on a metric math expression. Each MetricDataQuery in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single PutMetricAlarm call can include up to 20 MetricDataQuery structures in the array. The 20 structures can include as many as 10 structures that contain a MetricStat parameter to retrieve a metric, and as many as 10 structures that contain the Expression parameter to perform a math expression. Of those Expression structures, one must have True as the value for ReturnData . The result of this expression is the value the alarm watches.\n\nAny expression used in a PutMetricAlarm operation must return a single time series. For more information, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide .\n\nSome of the parameters of this structure also have different uses whether you are using this structure in a GetMetricData operation or a PutMetricAlarm operation. These differences are explained in the following parameter list.\n\nId -> (string)\n\nA short name used to tie this object to the results in the response. This name must be unique within a single call to GetMetricData . If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.\n\nMetricStat -> (structure)\n\nThe metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.\n\nWithin one MetricDataQuery object, you must specify either Expression or MetricStat but not both.\n\nMetric -> (structure)\n\nThe metric to return, including the metric name, namespace, and dimensions.\n\nNamespace -> (string)\n\nThe namespace of the metric.\n\nMetricName -> (string)\n\nThe name of the metric. This is a required field.\n\nDimensions -> (list)\n\nThe dimensions for the metric.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nPeriod -> (integer)\n\nThe granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second.\n\nIf the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:\n\nStart time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).\n\nStart time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).\n\nStart time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).\n\nStat -> (string)\n\nThe statistic to return. It can include any CloudWatch statistic or extended statistic.\n\nUnit -> (string)\n\nWhen you are using a Put operation, this defines what unit you want to use when storing the metric.\n\nIn a Get operation, if you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.\n\nExpression -> (string)\n\nThe math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the Id of the other metrics to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide .\n\nWithin each MetricDataQuery object, you must specify either Expression or MetricStat but not both.\n\nLabel -> (string)\n\nA human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch generates a default.\n\nYou can put dynamic expressions into a label, so that it is more descriptive. For more information, see Using Dynamic Labels .\n\nReturnData -> (boolean)\n\nWhen used in GetMetricData , this option indicates whether to return the timestamps and raw data values of this metric. If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify False . If you omit this, the default of True is used.\n\nWhen used in PutMetricAlarm , specify True for the one expression result to use as the alarm. For all other metrics and expressions in the same PutMetricAlarm operation, specify ReturnData as False.\n\nPeriod -> (integer)\n\nThe granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData operation that includes a StorageResolution of 1 second .\n\nAccountId -> (string)\n\nThe ID of the account where the metrics are located, if this is a cross-account alarm.\n\nUse this field only for PutMetricAlarm operations. It is not used in GetMetricData operations.\n\nJSON Syntax:\n\n[\n  {\n    \"Id\": \"string\",\n    \"MetricStat\": {\n      \"Metric\": {\n        \"Namespace\": \"string\",\n        \"MetricName\": \"string\",\n        \"Dimensions\": [\n          {\n            \"Name\": \"string\",\n            \"Value\": \"string\"\n          }\n          ...\n        ]\n      },\n      \"Period\": integer,\n      \"Stat\": \"string\",\n      \"Unit\": \"Seconds\"|\"Microseconds\"|\"Milliseconds\"|\"Bytes\"|\"Kilobytes\"|\"Megabytes\"|\"Gigabytes\"|\"Terabytes\"|\"Bits\"|\"Kilobits\"|\"Megabits\"|\"Gigabits\"|\"Terabits\"|\"Percent\"|\"Count\"|\"Bytes/Second\"|\"Kilobytes/Second\"|\"Megabytes/Second\"|\"Gigabytes/Second\"|\"Terabytes/Second\"|\"Bits/Second\"|\"Kilobits/Second\"|\"Megabits/Second\"|\"Gigabits/Second\"|\"Terabits/Second\"|\"Count/Second\"|\"None\"\n    },\n    \"Expression\": \"string\",\n    \"Label\": \"string\",\n    \"ReturnData\": true|false,\n    \"Period\": integer,\n    \"AccountId\": \"string\"\n  }\n  ...\n]\n\n\n--start-time (timestamp)\n\nThe time stamp indicating the earliest data to be returned.\n\nThe value specified is inclusive; results include data points with the specified time stamp.\n\nCloudWatch rounds the specified time stamp as follows:\n\nStart time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.\n\nStart time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.\n\nStart time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.\n\nIf you set Period to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15.\n\nFor better performance, specify StartTime and EndTime values that align with the value of the metric’s Period and sync up with the beginning and end of an hour. For example, if the Period of a metric is 5 minutes, specifying 12:05 or 12:30 as StartTime can get a faster response from CloudWatch than setting 12:07 or 12:29 as the StartTime .\n\n--end-time (timestamp)\n\nThe time stamp indicating the latest data to be returned.\n\nThe value specified is exclusive; results include data points up to the specified time stamp.\n\nFor better performance, specify StartTime and EndTime values that align with the value of the metric’s Period and sync up with the beginning and end of an hour. For example, if the Period of a metric is 5 minutes, specifying 12:05 or 12:30 as EndTime can get a faster response from CloudWatch than setting 12:07 or 12:29 as the EndTime .\n\n--scan-by (string)\n\nThe order in which data points should be returned. TimestampDescending returns the newest data first and paginates when the MaxDatapoints limit is reached. TimestampAscending returns the oldest data first and paginates when the MaxDatapoints limit is reached.\n\nPossible values:\n\nTimestampDescending\n\nTimestampAscending\n\n--label-options (structure)\n\nThis structure includes the Timezone parameter, which you can use to specify your time zone so that the labels of returned data display the correct time for your time zone.\n\nTimezone -> (string)\n\nThe time zone to use for metric data return in this operation. The format is + or - followed by four digits. The first two digits indicate the number of hours ahead or behind of UTC, and the final two digits are the number of minutes. For example, +0130 indicates a time zone that is 1 hour and 30 minutes ahead of UTC. The default is +0000.\n\nShorthand Syntax:\n\nTimezone=string\n\n\nJSON Syntax:\n\n{\n  \"Timezone\": \"string\"\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nMetricDataResults -> (list)\n\nThe metrics that are returned, including the metric name, namespace, and dimensions.\n\n(structure)\n\nA GetMetricData call returns an array of MetricDataResult structures. Each of these structures includes the data points for that metric, along with the timestamps of those data points and other identifying information.\n\nId -> (string)\n\nThe short name you specified to represent this metric.\n\nLabel -> (string)\n\nThe human-readable label associated with the data.\n\nTimestamps -> (list)\n\nThe timestamps for the data points, formatted in Unix timestamp format. The number of timestamps always matches the number of values and the value for Timestamps[x] is Values[x].\n\n(timestamp)\n\nValues -> (list)\n\nThe data points for the metric corresponding to Timestamps . The number of values always matches the number of timestamps and the timestamp for Values[x] is Timestamps[x].\n\n(double)\n\nStatusCode -> (string)\n\nThe status of the returned data. Complete indicates that all data points in the requested time range were returned. PartialData means that an incomplete set of data points were returned. You can use the NextToken value that was returned and repeat your request to get more data points. NextToken is not returned if you are performing a math expression. InternalError indicates that an error occurred. Retry your request using NextToken , if present.\n\nMessages -> (list)\n\nA list of messages with additional information about the data returned.\n\n(structure)\n\nA message returned by the GetMetricData API, including a code and a description.\n\nIf a cross-Region GetMetricData operation fails with a code of Forbidden and a value of Authentication too complex to retrieve cross region data , you can correct the problem by running the GetMetricData operation in the same Region where the metric data is.\n\nCode -> (string)\n\nThe error code or status code associated with the message.\n\nValue -> (string)\n\nThe message text.\n\nNextToken -> (string)\n\nA token that marks the next batch of returned results.\n\nMessages -> (list)\n\nContains a message about this GetMetricData operation, if the operation results in such a message. An example of a message that might be returned is Maximum number of allowed metrics exceeded . If there is a message, as much of the operation as possible is still executed.\n\nA message appears here only if it is related to the global GetMetricData operation. Any message about a specific metric returned by the operation appears in the MetricDataResult object returned for that metric.\n\n(structure)\n\nA message returned by the GetMetricData API, including a code and a description.\n\nIf a cross-Region GetMetricData operation fails with a code of Forbidden and a value of Authentication too complex to retrieve cross region data , you can correct the problem by running the GetMetricData operation in the same Region where the metric data is.\n\nCode -> (string)\n\nThe error code or status code associated with the message.\n\nValue -> (string)\n\nThe message text."
    },
    {
      "command_name": "get-metric-statistics",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/get-metric-statistics.html",
      "command_description": "Description\n\nGets statistics for the specified metric.\n\nThe maximum number of data points returned from a single call is 1,440. If you request more than 1,440 data points, CloudWatch returns an error. To reduce the number of data points, you can narrow the specified time range and make multiple requests across adjacent time ranges, or you can increase the specified period. Data points are not returned in chronological order.\n\nCloudWatch aggregates data points based on the length of the period that you specify. For example, if you request statistics with a one-hour period, CloudWatch aggregates all data points with time stamps that fall within each one-hour period. Therefore, the number of values aggregated by CloudWatch is larger than the number of data points returned.\n\nCloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:\n\nThe SampleCount value of the statistic set is 1.\n\nThe Min and the Max values of the statistic set are equal.\n\nPercentile statistics are not available for metrics when any of the metric values are negative numbers.\n\nAmazon CloudWatch retains metric data as follows:\n\nData points with a period of less than 60 seconds are available for 3 hours. These data points are high-resolution metrics and are available only for custom metrics that have been defined with a StorageResolution of 1.\n\nData points with a period of 60 seconds (1-minute) are available for 15 days.\n\nData points with a period of 300 seconds (5-minute) are available for 63 days.\n\nData points with a period of 3600 seconds (1 hour) are available for 455 days (15 months).\n\nData points that are initially published with a shorter period are aggregated together for long-term storage. For example, if you collect data using a period of 1 minute, the data remains available for 15 days with 1-minute resolution. After 15 days, this data is still available, but is aggregated and retrievable only with a resolution of 5 minutes. After 63 days, the data is further aggregated and is available with a resolution of 1 hour.\n\nCloudWatch started retaining 5-minute and 1-hour metric data as of July 9, 2016.\n\nFor information about metrics and dimensions supported by Amazon Web Services services, see the Amazon CloudWatch Metrics and Dimensions Reference in the Amazon CloudWatch User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-metric-statistics\n--namespace <value>\n--metric-name <value>\n[--dimensions <value>]\n--start-time <value>\n--end-time <value>\n--period <value>\n[--statistics <value>]\n[--extended-statistics <value>]\n[--unit <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--namespace <value>",
        "--metric-name <value>",
        "[--dimensions <value>]",
        "--start-time <value>",
        "--end-time <value>",
        "--period <value>",
        "[--statistics <value>]",
        "[--extended-statistics <value>]",
        "[--unit <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--namespace (string)\n\nThe namespace of the metric, with or without spaces.\n\n--metric-name (string)\n\nThe name of the metric, with or without spaces.\n\n--dimensions (list)\n\nThe dimensions. If the metric contains multiple dimensions, you must include a value for each dimension. CloudWatch treats each unique combination of dimensions as a separate metric. If a specific combination of dimensions was not published, you can’t retrieve statistics for it. You must specify the same dimensions that were used when the metrics were created. For an example, see Dimension Combinations in the Amazon CloudWatch User Guide . For more information about specifying dimensions, see Publishing Metrics in the Amazon CloudWatch User Guide .\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nShorthand Syntax:\n\nName=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Name\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--start-time (timestamp)\n\nThe time stamp that determines the first data point to return. Start times are evaluated relative to the time that CloudWatch receives the request.\n\nThe value specified is inclusive; results include data points with the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-03T23:00:00Z).\n\nCloudWatch rounds the specified time stamp as follows:\n\nStart time less than 15 days ago - Round down to the nearest whole minute. For example, 12:32:34 is rounded down to 12:32:00.\n\nStart time between 15 and 63 days ago - Round down to the nearest 5-minute clock interval. For example, 12:32:34 is rounded down to 12:30:00.\n\nStart time greater than 63 days ago - Round down to the nearest 1-hour clock interval. For example, 12:32:34 is rounded down to 12:00:00.\n\nIf you set Period to 5, 10, or 30, the start time of your request is rounded down to the nearest time that corresponds to even 5-, 10-, or 30-second divisions of a minute. For example, if you make a query at (HH:mm:ss) 01:05:23 for the previous 10-second period, the start time of your request is rounded down and you receive data from 01:05:10 to 01:05:20. If you make a query at 15:07:17 for the previous 5 minutes of data, using a period of 5 seconds, you receive data timestamped between 15:02:15 and 15:07:15.\n\n--end-time (timestamp)\n\nThe time stamp that determines the last data point to return.\n\nThe value specified is exclusive; results include data points up to the specified time stamp. In a raw HTTP query, the time stamp must be in ISO 8601 UTC format (for example, 2016-10-10T23:00:00Z).\n\n--period (integer)\n\nThe granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second.\n\nIf the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:\n\nStart time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).\n\nStart time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).\n\nStart time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).\n\n--statistics (list)\n\nThe metric statistics, other than percentile. For percentile statistics, use ExtendedStatistics . When calling GetMetricStatistics , you must specify either Statistics or ExtendedStatistics , but not both.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\nWhere valid values are:\n  SampleCount\n  Average\n  Sum\n  Minimum\n  Maximum\n\n\n--extended-statistics (list)\n\nThe percentile statistics. Specify values between p0.0 and p100. When calling GetMetricStatistics , you must specify either Statistics or ExtendedStatistics , but not both. Percentile statistics are not available for metrics when any of the metric values are negative numbers.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--unit (string)\n\nThe unit for a given metric. If you omit Unit , all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.\n\nPossible values:\n\nSeconds\n\nMicroseconds\n\nMilliseconds\n\nBytes\n\nKilobytes\n\nMegabytes\n\nGigabytes\n\nTerabytes\n\nBits\n\nKilobits\n\nMegabits\n\nGigabits\n\nTerabits\n\nPercent\n\nCount\n\nBytes/Second\n\nKilobytes/Second\n\nMegabytes/Second\n\nGigabytes/Second\n\nTerabytes/Second\n\nBits/Second\n\nKilobits/Second\n\nMegabits/Second\n\nGigabits/Second\n\nTerabits/Second\n\nCount/Second\n\nNone\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nLabel -> (string)\n\nA label for the specified metric.\n\nDatapoints -> (list)\n\nThe data points for the specified metric.\n\n(structure)\n\nEncapsulates the statistical data that CloudWatch computes from metric data.\n\nTimestamp -> (timestamp)\n\nThe time stamp used for the data point.\n\nSampleCount -> (double)\n\nThe number of metric values that contributed to the aggregate value of this data point.\n\nAverage -> (double)\n\nThe average of the metric values that correspond to the data point.\n\nSum -> (double)\n\nThe sum of the metric values for the data point.\n\nMinimum -> (double)\n\nThe minimum metric value for the data point.\n\nMaximum -> (double)\n\nThe maximum metric value for the data point.\n\nUnit -> (string)\n\nThe standard unit for the data point.\n\nExtendedStatistics -> (map)\n\nThe percentile statistic for the data point.\n\nkey -> (string)\n\nvalue -> (double)",
      "command_examples": "Examples\n\nTo get the CPU utilization per EC2 instance\n\nThe following example uses the get-metric-statistics command to get the CPU utilization for an EC2 instance with the ID i-abcdef.\n\naws cloudwatch get-metric-statistics --metric-name CPUUtilization --start-time 2014-04-08T23:18:00Z --end-time 2014-04-09T23:18:00Z --period 3600 --namespace AWS/EC2 --statistics Maximum --dimensions Name=InstanceId,Value=i-abcdef\n\n\nOutput:\n\n{\n    \"Datapoints\": [\n        {\n            \"Timestamp\": \"2014-04-09T11:18:00Z\",\n            \"Maximum\": 44.79,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T20:18:00Z\",\n            \"Maximum\": 47.92,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T19:18:00Z\",\n            \"Maximum\": 50.85,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T09:18:00Z\",\n            \"Maximum\": 47.92,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T03:18:00Z\",\n            \"Maximum\": 76.84,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T21:18:00Z\",\n            \"Maximum\": 48.96,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T14:18:00Z\",\n            \"Maximum\": 47.92,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T08:18:00Z\",\n            \"Maximum\": 47.92,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T16:18:00Z\",\n            \"Maximum\": 45.55,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T06:18:00Z\",\n            \"Maximum\": 47.92,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T13:18:00Z\",\n            \"Maximum\": 45.08,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T05:18:00Z\",\n            \"Maximum\": 47.92,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T18:18:00Z\",\n            \"Maximum\": 46.88,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T17:18:00Z\",\n            \"Maximum\": 52.08,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T07:18:00Z\",\n            \"Maximum\": 47.92,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T02:18:00Z\",\n            \"Maximum\": 51.23,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T12:18:00Z\",\n            \"Maximum\": 47.67,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-08T23:18:00Z\",\n            \"Maximum\": 46.88,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T10:18:00Z\",\n            \"Maximum\": 51.91,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T04:18:00Z\",\n            \"Maximum\": 47.13,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T15:18:00Z\",\n            \"Maximum\": 48.96,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T00:18:00Z\",\n            \"Maximum\": 48.16,\n            \"Unit\": \"Percent\"\n        },\n        {\n            \"Timestamp\": \"2014-04-09T01:18:00Z\",\n            \"Maximum\": 49.18,\n            \"Unit\": \"Percent\"\n        }\n    ],\n    \"Label\": \"CPUUtilization\"\n}\n\n\nSpecifying multiple dimensions\n\nThe following example illustrates how to specify multiple dimensions. Each dimension is specified as a Name/Value pair, with a comma between the name and the value. Multiple dimensions are separated by a space. If a single metric includes multiple dimensions, you must specify a value for every defined dimension.\n\nFor more examples using the get-metric-statistics command, see `Get Statistics for a Metric`__ in the Amazon CloudWatch Developer Guide.\n\naws cloudwatch get-metric-statistics --metric-name Buffers --namespace MyNameSpace --dimensions Name=InstanceID,Value=i-abcdef Name=InstanceType,Value=m1.small --start-time 2016-10-15T04:00:00Z --end-time 2016-10-19T07:00:00Z --statistics Average --period 60\n"
    },
    {
      "command_name": "get-metric-stream",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/get-metric-stream.html",
      "command_description": "Description\n\nReturns information about the metric stream that you specify.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-metric-stream\n--name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--name (string)\n\nThe name of the metric stream to retrieve information about.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nArn -> (string)\n\nThe ARN of the metric stream.\n\nName -> (string)\n\nThe name of the metric stream.\n\nIncludeFilters -> (list)\n\nIf this array of metric namespaces is present, then these namespaces are the only metric namespaces that are streamed by this metric stream.\n\n(structure)\n\nThis structure contains the name of one of the metric namespaces that is listed in a filter of a metric stream.\n\nNamespace -> (string)\n\nThe name of the metric namespace in the filter.\n\nExcludeFilters -> (list)\n\nIf this array of metric namespaces is present, then these namespaces are the only metric namespaces that are not streamed by this metric stream. In this case, all other metric namespaces in the account are streamed by this metric stream.\n\n(structure)\n\nThis structure contains the name of one of the metric namespaces that is listed in a filter of a metric stream.\n\nNamespace -> (string)\n\nThe name of the metric namespace in the filter.\n\nFirehoseArn -> (string)\n\nThe ARN of the Amazon Kinesis Firehose delivery stream that is used by this metric stream.\n\nRoleArn -> (string)\n\nThe ARN of the IAM role that is used by this metric stream.\n\nState -> (string)\n\nThe state of the metric stream. The possible values are running and stopped .\n\nCreationDate -> (timestamp)\n\nThe date that the metric stream was created.\n\nLastUpdateDate -> (timestamp)\n\nThe date of the most recent update to the metric stream’s configuration.\n\nOutputFormat -> (string)"
    },
    {
      "command_name": "get-metric-widget-image",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/get-metric-widget-image.html",
      "command_description": "Description\n\nYou can use the GetMetricWidgetImage API to retrieve a snapshot graph of one or more Amazon CloudWatch metrics as a bitmap image. You can then embed this image into your services and products, such as wiki pages, reports, and documents. You could also retrieve images regularly, such as every minute, and create your own custom live dashboard.\n\nThe graph you retrieve can include all CloudWatch metric graph features, including metric math and horizontal and vertical annotations.\n\nThere is a limit of 20 transactions per second for this API. Each GetMetricWidgetImage action has the following limits:\n\nAs many as 100 metrics in the graph.\n\nUp to 100 KB uncompressed payload.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-metric-widget-image\n--metric-widget <value>\n[--output-format <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--metric-widget <value>",
        "[--output-format <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--metric-widget (string)\n\nA JSON string that defines the bitmap graph to be retrieved. The string includes the metrics to include in the graph, statistics, annotations, title, axis limits, and so on. You can include only one MetricWidget parameter in each GetMetricWidgetImage call.\n\nFor more information about the syntax of MetricWidget see GetMetricWidgetImage: Metric Widget Structure and Syntax .\n\nIf any metric on the graph could not load all the requested data points, an orange triangle with an exclamation point appears next to the graph legend.\n\n--output-format (string)\n\nThe format of the resulting image. Only PNG images are supported.\n\nThe default is png . If you specify png , the API returns an HTTP response with the content-type set to text/xml . The image data is in a MetricWidgetImage field. For example:\n\n<GetMetricWidgetImageResponse xmlns=<URLstring>>\n\n<GetMetricWidgetImageResult>\n\n<MetricWidgetImage>\n\niVBORw0KGgoAAAANSUhEUgAAAlgAAAGQEAYAAAAip...\n\n</MetricWidgetImage>\n\n</GetMetricWidgetImageResult>\n\n<ResponseMetadata>\n\n<RequestId>6f0d4192-4d42-11e8-82c1-f539a07e0e3b</RequestId>\n\n</ResponseMetadata>\n\n</GetMetricWidgetImageResponse>\n\nThe image/png setting is intended only for custom HTTP requests. For most use cases, and all actions using an Amazon Web Services SDK, you should use png . If you specify image/png , the HTTP response has a content-type set to image/png , and the body of the response is a PNG image.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nMetricWidgetImage -> (blob)\n\nThe image of the graph, in the output format specified. The output is base64-encoded."
    },
    {
      "command_name": "list-dashboards",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/list-dashboards.html",
      "command_description": "Description\n\nReturns a list of the dashboards for your account. If you include DashboardNamePrefix , only those dashboards with names starting with the prefix are listed. Otherwise, all dashboards in your account are listed.\n\nListDashboards returns up to 1000 results on one page. If there are more than 1000 dashboards, you can call ListDashboards again and include the value you received for NextToken in the first call, to receive the next 1000 results.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-dashboards is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: DashboardEntries",
      "command_synopsis": "Synopsis\n  list-dashboards\n[--dashboard-name-prefix <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--dashboard-name-prefix <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--dashboard-name-prefix (string)\n\nIf you specify this parameter, only the dashboards with names starting with the specified string are listed. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, “.”, “-“, and “_”.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nDashboardEntries -> (list)\n\nThe list of matching dashboards.\n\n(structure)\n\nRepresents a specific dashboard.\n\nDashboardName -> (string)\n\nThe name of the dashboard.\n\nDashboardArn -> (string)\n\nThe Amazon Resource Name (ARN) of the dashboard.\n\nLastModified -> (timestamp)\n\nThe time stamp of when the dashboard was last modified, either by an API call or through the console. This number is expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.\n\nSize -> (long)\n\nThe size of the dashboard, in bytes.\n\nNextToken -> (string)\n\nThe token that marks the start of the next batch of returned results."
    },
    {
      "command_name": "list-metric-streams",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/list-metric-streams.html",
      "command_description": "Description\n\nReturns a list of metric streams in this account.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-metric-streams\n[--next-token <value>]\n[--max-results <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--next-token <value>]",
        "[--max-results <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--next-token (string)\n\nInclude this value, if it was returned by the previous call, to get the next set of metric streams.\n\n--max-results (integer)\n\nThe maximum number of results to return in one operation.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNextToken -> (string)\n\nThe token that marks the start of the next batch of returned results. You can use this token in a subsequent operation to get the next batch of results.\n\nEntries -> (list)\n\nThe array of metric stream information.\n\n(structure)\n\nThis structure contains the configuration information about one metric stream.\n\nArn -> (string)\n\nThe ARN of the metric stream.\n\nCreationDate -> (timestamp)\n\nThe date that the metric stream was originally created.\n\nLastUpdateDate -> (timestamp)\n\nThe date that the configuration of this metric stream was most recently updated.\n\nName -> (string)\n\nThe name of the metric stream.\n\nFirehoseArn -> (string)\n\nThe ARN of the Kinesis Firehose devlivery stream that is used for this metric stream.\n\nState -> (string)\n\nThe current state of this stream. Valid values are running and stopped .\n\nOutputFormat -> (string)\n\nThe output format of this metric stream. Valid values are json and opentelemetry0.7 ."
    },
    {
      "command_name": "list-metrics",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/list-metrics.html",
      "command_description": "Description\n\nList the specified metrics. You can use the returned metrics with GetMetricData or GetMetricStatistics to obtain statistical data.\n\nUp to 500 results are returned for any one call. To retrieve additional results, use the returned token with subsequent calls.\n\nAfter you create a metric, allow up to 15 minutes before the metric appears. You can see statistics about the metric sooner by using GetMetricData or GetMetricStatistics .\n\nListMetrics doesn’t return information about metrics if those metrics haven’t reported data in the past two weeks. To retrieve those metrics, use GetMetricData or GetMetricStatistics .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-metrics is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: Metrics",
      "command_synopsis": "Synopsis\n  list-metrics\n[--namespace <value>]\n[--metric-name <value>]\n[--dimensions <value>]\n[--recently-active <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--namespace <value>]",
        "[--metric-name <value>]",
        "[--dimensions <value>]",
        "[--recently-active <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--namespace (string)\n\nThe metric namespace to filter against. Only the namespace that matches exactly will be returned.\n\n--metric-name (string)\n\nThe name of the metric to filter against. Only the metrics with names that match exactly will be returned.\n\n--dimensions (list)\n\nThe dimensions to filter against. Only the dimensions that match exactly will be returned.\n\n(structure)\n\nRepresents filters for a dimension.\n\nName -> (string)\n\nThe dimension name to be matched.\n\nValue -> (string)\n\nThe value of the dimension to be matched.\n\nShorthand Syntax:\n\nName=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Name\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--recently-active (string)\n\nTo filter the results to show only metrics that have had data points published in the past three hours, specify this parameter with a value of PT3H . This is the only valid value for this parameter.\n\nThe results that are returned are an approximation of the value you specify. There is a low probability that the returned results include metrics with last published data as much as 40 minutes more than the specified time interval.\n\nPossible values:\n\nPT3H\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nMetrics -> (list)\n\nThe metrics that match your request.\n\n(structure)\n\nRepresents a specific metric.\n\nNamespace -> (string)\n\nThe namespace of the metric.\n\nMetricName -> (string)\n\nThe name of the metric. This is a required field.\n\nDimensions -> (list)\n\nThe dimensions for the metric.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nNextToken -> (string)\n\nThe token that marks the start of the next batch of returned results.",
      "command_examples": "Examples\n\nTo list the metrics for Amazon SNS\n\nThe following list-metrics example displays the metrics for Amazon SNS.\n\naws cloudwatch list-metrics \\\n    --namespace \"AWS/SNS\"\n\n\nOutput:\n\n{\n    \"Metrics\": [\n        {\n            \"Namespace\": \"AWS/SNS\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"TopicName\",\n                    \"Value\": \"NotifyMe\"\n                }\n            ],\n            \"MetricName\": \"PublishSize\"\n        },\n        {\n            \"Namespace\": \"AWS/SNS\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"TopicName\",\n                    \"Value\": \"CFO\"\n                }\n            ],\n            \"MetricName\": \"PublishSize\"\n        },\n        {\n            \"Namespace\": \"AWS/SNS\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"TopicName\",\n                    \"Value\": \"NotifyMe\"\n                }\n            ],\n            \"MetricName\": \"NumberOfNotificationsFailed\"\n        },\n        {\n            \"Namespace\": \"AWS/SNS\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"TopicName\",\n                    \"Value\": \"NotifyMe\"\n                }\n            ],\n            \"MetricName\": \"NumberOfNotificationsDelivered\"\n        },\n        {\n            \"Namespace\": \"AWS/SNS\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"TopicName\",\n                    \"Value\": \"NotifyMe\"\n                }\n            ],\n            \"MetricName\": \"NumberOfMessagesPublished\"\n        },\n        {\n            \"Namespace\": \"AWS/SNS\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"TopicName\",\n                    \"Value\": \"CFO\"\n                }\n            ],\n            \"MetricName\": \"NumberOfMessagesPublished\"\n        },\n        {\n            \"Namespace\": \"AWS/SNS\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"TopicName\",\n                    \"Value\": \"CFO\"\n                }\n            ],\n            \"MetricName\": \"NumberOfNotificationsDelivered\"\n        },\n        {\n            \"Namespace\": \"AWS/SNS\",\n            \"Dimensions\": [\n                {\n                    \"Name\": \"TopicName\",\n                    \"Value\": \"CFO\"\n                }\n            ],\n            \"MetricName\": \"NumberOfNotificationsFailed\"\n        }\n    ]\n}\n"
    },
    {
      "command_name": "list-tags-for-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/list-tags-for-resource.html",
      "command_description": "Description\n\nDisplays the tags associated with a CloudWatch resource. Currently, alarms and Contributor Insights rules support tagging.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-tags-for-resource\n--resource-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe ARN of the CloudWatch resource that you want to view tags for.\n\nThe ARN format of an alarm is ``arn:aws:cloudwatch:Region :account-id :alarm:alarm-name ``\n\nThe ARN format of a Contributor Insights rule is ``arn:aws:cloudwatch:Region :account-id :insight-rule:insight-rule-name ``\n\nFor more information about ARN format, see Resource Types Defined by Amazon CloudWatch in the Amazon Web Services General Reference .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTags -> (list)\n\nThe list of tag keys and values associated with the resource you specified.\n\n(structure)\n\nA key-value pair associated with a CloudWatch resource.\n\nKey -> (string)\n\nA string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.\n\nValue -> (string)\n\nThe value for the specified tag key."
    },
    {
      "command_name": "put-anomaly-detector",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/put-anomaly-detector.html",
      "command_description": "Description\n\nCreates an anomaly detection model for a CloudWatch metric. You can use the model to display a band of expected normal values when the metric is graphed.\n\nFor more information, see CloudWatch Anomaly Detection .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-anomaly-detector\n--namespace <value>\n--metric-name <value>\n[--dimensions <value>]\n--stat <value>\n[--configuration <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--namespace <value>",
        "--metric-name <value>",
        "[--dimensions <value>]",
        "--stat <value>",
        "[--configuration <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--namespace (string)\n\nThe namespace of the metric to create the anomaly detection model for.\n\n--metric-name (string)\n\nThe name of the metric to create the anomaly detection model for.\n\n--dimensions (list)\n\nThe metric dimensions to create the anomaly detection model for.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nShorthand Syntax:\n\nName=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Name\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--stat (string)\n\nThe statistic to use for the metric and the anomaly detection model.\n\n--configuration (structure)\n\nThe configuration specifies details about how the anomaly detection model is to be trained, including time ranges to exclude when training and updating the model. You can specify as many as 10 time ranges.\n\nThe configuration can also include the time zone to use for the metric.\n\nExcludedTimeRanges -> (list)\n\nAn array of time ranges to exclude from use when the anomaly detection model is trained. Use this to make sure that events that could cause unusual values for the metric, such as deployments, aren’t used when CloudWatch creates the model.\n\n(structure)\n\nSpecifies one range of days or times to exclude from use for training an anomaly detection model.\n\nStartTime -> (timestamp)\n\nThe start time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss . For example, 2019-07-01T23:59:59 .\n\nEndTime -> (timestamp)\n\nThe end time of the range to exclude. The format is yyyy-MM-dd'T'HH:mm:ss . For example, 2019-07-01T23:59:59 .\n\nMetricTimezone -> (string)\n\nThe time zone to use for the metric. This is useful to enable the model to automatically account for daylight savings time changes if the metric is sensitive to such time changes.\n\nTo specify a time zone, use the name of the time zone as specified in the standard tz database. For more information, see tz database .\n\nShorthand Syntax:\n\nExcludedTimeRanges=[{StartTime=timestamp,EndTime=timestamp},{StartTime=timestamp,EndTime=timestamp}],MetricTimezone=string\n\n\nJSON Syntax:\n\n{\n  \"ExcludedTimeRanges\": [\n    {\n      \"StartTime\": timestamp,\n      \"EndTime\": timestamp\n    }\n    ...\n  ],\n  \"MetricTimezone\": \"string\"\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "put-composite-alarm",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/put-composite-alarm.html",
      "command_description": "Description\n\nCreates or updates a composite alarm . When you create a composite alarm, you specify a rule expression for the alarm that takes into account the alarm states of other alarms that you have created. The composite alarm goes into ALARM state only if all conditions of the rule are met.\n\nThe alarms specified in a composite alarm’s rule expression can include metric alarms and other composite alarms.\n\nUsing composite alarms can reduce alarm noise. You can create multiple metric alarms, and also create a composite alarm and set up alerts only for the composite alarm. For example, you could create a composite alarm that goes into ALARM state only when more than one of the underlying metric alarms are in ALARM state.\n\nCurrently, the only alarm actions that can be taken by composite alarms are notifying SNS topics.\n\nNote\n\nIt is possible to create a loop or cycle of composite alarms, where composite alarm A depends on composite alarm B, and composite alarm B also depends on composite alarm A. In this scenario, you can’t delete any composite alarm that is part of the cycle because there is always still a composite alarm that depends on that alarm that you want to delete.\n\nTo get out of such a situation, you must break the cycle by changing the rule of one of the composite alarms in the cycle to remove a dependency that creates the cycle. The simplest change to make to break a cycle is to change the AlarmRule of one of the alarms to False .\n\nAdditionally, the evaluation of composite alarms stops if CloudWatch detects a cycle in the evaluation path.\n\nWhen this operation creates an alarm, the alarm state is immediately set to INSUFFICIENT_DATA . The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed. For a composite alarm, this initial time after creation is the only time that the alarm can be in INSUFFICIENT_DATA state.\n\nWhen you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.\n\nIf you are an IAM user, you must have iam:CreateServiceLinkedRole to create a composite alarm that has Systems Manager OpsItem actions.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-composite-alarm\n[--actions-enabled | --no-actions-enabled]\n[--alarm-actions <value>]\n[--alarm-description <value>]\n--alarm-name <value>\n--alarm-rule <value>\n[--insufficient-data-actions <value>]\n[--ok-actions <value>]\n[--tags <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--actions-enabled | --no-actions-enabled]",
        "[--alarm-actions <value>]",
        "[--alarm-description <value>]",
        "--alarm-name <value>",
        "--alarm-rule <value>",
        "[--insufficient-data-actions <value>]",
        "[--ok-actions <value>]",
        "[--tags <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--actions-enabled | --no-actions-enabled (boolean)\n\nIndicates whether actions should be executed during any changes to the alarm state of the composite alarm. The default is TRUE .\n\n--alarm-actions (list)\n\nThe actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\nValid Values: ``arn:aws:sns:region :account-id :sns-topic-name `` | ``arn:aws:ssm:region :account-id :opsitem:severity ``\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--alarm-description (string)\n\nThe description for the composite alarm.\n\n--alarm-name (string)\n\nThe name for the composite alarm. This name must be unique within the Region.\n\n--alarm-rule (string)\n\nAn expression that specifies which other alarms are to be evaluated to determine this composite alarm’s state. For each alarm that you reference, you designate a function that specifies whether that alarm needs to be in ALARM state, OK state, or INSUFFICIENT_DATA state. You can use operators (AND, OR and NOT) to combine multiple functions in a single expression. You can use parenthesis to logically group the functions in your expression.\n\nYou can use either alarm names or ARNs to reference the other alarms that are to be evaluated.\n\nFunctions can include the following:\n\nALARM(\"*alarm-name* or *alarm-ARN* \") is TRUE if the named alarm is in ALARM state.\n\nOK(\"*alarm-name* or *alarm-ARN* \") is TRUE if the named alarm is in OK state.\n\nINSUFFICIENT_DATA(\"*alarm-name* or *alarm-ARN* \") is TRUE if the named alarm is in INSUFFICIENT_DATA state.\n\nTRUE always evaluates to TRUE.\n\nFALSE always evaluates to FALSE.\n\nTRUE and FALSE are useful for testing a complex AlarmRule structure, and for testing your alarm actions.\n\nAlarm names specified in AlarmRule can be surrounded with double-quotes (“), but do not have to be.\n\nThe following are some examples of AlarmRule :\n\nALARM(CPUUtilizationTooHigh) AND ALARM(DiskReadOpsTooHigh) specifies that the composite alarm goes into ALARM state only if both CPUUtilizationTooHigh and DiskReadOpsTooHigh alarms are in ALARM state.\n\nALARM(CPUUtilizationTooHigh) AND NOT ALARM(DeploymentInProgress) specifies that the alarm goes to ALARM state if CPUUtilizationTooHigh is in ALARM state and DeploymentInProgress is not in ALARM state. This example reduces alarm noise during a known deployment window.\n\n(ALARM(CPUUtilizationTooHigh) OR ALARM(DiskReadOpsTooHigh)) AND OK(NetworkOutTooHigh) goes into ALARM state if CPUUtilizationTooHigh OR DiskReadOpsTooHigh is in ALARM state, and if NetworkOutTooHigh is in OK state. This provides another example of using a composite alarm to prevent noise. This rule ensures that you are not notified with an alarm action on high CPU or disk usage if a known network problem is also occurring.\n\nThe AlarmRule can specify as many as 100 “children” alarms. The AlarmRule expression can have as many as 500 elements. Elements are child alarms, TRUE or FALSE statements, and parentheses.\n\n--insufficient-data-actions (list)\n\nThe actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\nValid Values: ``arn:aws:sns:region :account-id :sns-topic-name ``\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--ok-actions (list)\n\nThe actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\nValid Values: ``arn:aws:sns:region :account-id :sns-topic-name ``\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--tags (list)\n\nA list of key-value pairs to associate with the composite alarm. You can associate as many as 50 tags with an alarm.\n\nTags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only resources with certain tag values.\n\n(structure)\n\nA key-value pair associated with a CloudWatch resource.\n\nKey -> (string)\n\nA string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.\n\nValue -> (string)\n\nThe value for the specified tag key.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "put-dashboard",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/put-dashboard.html",
      "command_description": "Description\n\nCreates a dashboard if it does not already exist, or updates an existing dashboard. If you update a dashboard, the entire contents are replaced with what you specify here.\n\nAll dashboards in your account are global, not region-specific.\n\nA simple way to create a dashboard using PutDashboard is to copy an existing dashboard. To copy an existing dashboard using the console, you can load the dashboard and then use the View/edit source command in the Actions menu to display the JSON block for that dashboard. Another way to copy a dashboard is to use GetDashboard , and then use the data returned within DashboardBody as the template for the new dashboard when you call PutDashboard .\n\nWhen you create a dashboard with PutDashboard , a good practice is to add a text widget at the top of the dashboard with a message that the dashboard was created by script and should not be changed in the console. This message could also point console users to the location of the DashboardBody script or the CloudFormation template used to create the dashboard.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-dashboard\n--dashboard-name <value>\n--dashboard-body <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--dashboard-name <value>",
        "--dashboard-body <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--dashboard-name (string)\n\nThe name of the dashboard. If a dashboard with this name already exists, this call modifies that dashboard, replacing its current contents. Otherwise, a new dashboard is created. The maximum length is 255, and valid characters are A-Z, a-z, 0-9, “-“, and “_”. This parameter is required.\n\n--dashboard-body (string)\n\nThe detailed information about the dashboard in JSON format, including the widgets to include and their location on the dashboard. This parameter is required.\n\nFor more information about the syntax, see Dashboard Body Structure and Syntax .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nDashboardValidationMessages -> (list)\n\nIf the input for PutDashboard was correct and the dashboard was successfully created or modified, this result is empty.\n\nIf this result includes only warning messages, then the input was valid enough for the dashboard to be created or modified, but some elements of the dashboard might not render.\n\nIf this result includes error messages, the input was not valid and the operation failed.\n\n(structure)\n\nAn error or warning for the operation.\n\nDataPath -> (string)\n\nThe data path related to the message.\n\nMessage -> (string)\n\nA message describing the error or warning."
    },
    {
      "command_name": "put-insight-rule",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/put-insight-rule.html",
      "command_description": "Description\n\nCreates a Contributor Insights rule. Rules evaluate log events in a CloudWatch Logs log group, enabling you to find contributor data for the log events in that log group. For more information, see Using Contributor Insights to Analyze High-Cardinality Data .\n\nIf you create a rule, delete it, and then re-create it with the same name, historical data from the first time the rule was created might not be available.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-insight-rule\n--rule-name <value>\n[--rule-state <value>]\n--rule-definition <value>\n[--tags <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--rule-name <value>",
        "[--rule-state <value>]",
        "--rule-definition <value>",
        "[--tags <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--rule-name (string)\n\nA unique name for the rule.\n\n--rule-state (string)\n\nThe state of the rule. Valid values are ENABLED and DISABLED.\n\n--rule-definition (string)\n\nThe definition of the rule, as a JSON object. For details on the valid syntax, see Contributor Insights Rule Syntax .\n\n--tags (list)\n\nA list of key-value pairs to associate with the Contributor Insights rule. You can associate as many as 50 tags with a rule.\n\nTags can help you organize and categorize your resources. You can also use them to scope user permissions, by granting a user permission to access or change only the resources that have certain tag values.\n\nTo be able to associate tags with a rule, you must have the cloudwatch:TagResource permission in addition to the cloudwatch:PutInsightRule permission.\n\nIf you are using this operation to update an existing Contributor Insights rule, any tags you specify in this parameter are ignored. To change the tags of an existing rule, use TagResource .\n\n(structure)\n\nA key-value pair associated with a CloudWatch resource.\n\nKey -> (string)\n\nA string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.\n\nValue -> (string)\n\nThe value for the specified tag key.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "put-metric-alarm",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/put-metric-alarm.html",
      "command_description": "Description\n\nCreates or updates an alarm and associates it with the specified metric, metric math expression, or anomaly detection model.\n\nAlarms based on anomaly detection models cannot have Auto Scaling actions.\n\nWhen this operation creates an alarm, the alarm state is immediately set to INSUFFICIENT_DATA . The alarm is then evaluated and its state is set appropriately. Any actions associated with the new state are then executed.\n\nWhen you update an existing alarm, its state is left unchanged, but the update completely overwrites the previous configuration of the alarm.\n\nIf you are an IAM user, you must have Amazon EC2 permissions for some alarm operations:\n\nThe iam:CreateServiceLinkedRole for all alarms with EC2 actions\n\nThe iam:CreateServiceLinkedRole to create an alarm with Systems Manager OpsItem actions.\n\nThe first time you create an alarm in the Management Console, the CLI, or by using the PutMetricAlarm API, CloudWatch creates the necessary service-linked role for you. The service-linked roles are called AWSServiceRoleForCloudWatchEvents and AWSServiceRoleForCloudWatchAlarms_ActionSSM . For more information, see Amazon Web Services service-linked role .\n\nCross-account alarms\n\nYou can set an alarm on metrics in the current account, or in another account. To create a cross-account alarm that watches a metric in a different account, you must have completed the following pre-requisites:\n\nThe account where the metrics are located (the sharing account ) must already have a sharing role named CloudWatch-CrossAccountSharingRole . If it does not already have this role, you must create it using the instructions in Set up a sharing account in Cross-account cross-Region CloudWatch console . The policy for that role must grant access to the ID of the account where you are creating the alarm.\n\nThe account where you are creating the alarm (the monitoring account ) must already have a service-linked role named AWSServiceRoleForCloudWatchCrossAccount to allow CloudWatch to assume the sharing role in the sharing account. If it does not, you must create it following the directions in Set up a monitoring account in Cross-account cross-Region CloudWatch console .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-metric-alarm\n--alarm-name <value>\n[--alarm-description <value>]\n[--actions-enabled | --no-actions-enabled]\n[--ok-actions <value>]\n[--alarm-actions <value>]\n[--insufficient-data-actions <value>]\n[--metric-name <value>]\n[--namespace <value>]\n[--statistic <value>]\n[--extended-statistic <value>]\n[--dimensions <value>]\n[--period <value>]\n[--unit <value>]\n--evaluation-periods <value>\n[--datapoints-to-alarm <value>]\n[--threshold <value>]\n--comparison-operator <value>\n[--treat-missing-data <value>]\n[--evaluate-low-sample-count-percentile <value>]\n[--metrics <value>]\n[--tags <value>]\n[--threshold-metric-id <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--alarm-name <value>",
        "[--alarm-description <value>]",
        "[--actions-enabled | --no-actions-enabled]",
        "[--ok-actions <value>]",
        "[--alarm-actions <value>]",
        "[--insufficient-data-actions <value>]",
        "[--metric-name <value>]",
        "[--namespace <value>]",
        "[--statistic <value>]",
        "[--extended-statistic <value>]",
        "[--dimensions <value>]",
        "[--period <value>]",
        "[--unit <value>]",
        "--evaluation-periods <value>",
        "[--datapoints-to-alarm <value>]",
        "[--threshold <value>]",
        "--comparison-operator <value>",
        "[--treat-missing-data <value>]",
        "[--evaluate-low-sample-count-percentile <value>]",
        "[--metrics <value>]",
        "[--tags <value>]",
        "[--threshold-metric-id <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--alarm-name (string)\n\nThe name for the alarm. This name must be unique within the Region.\n\n--alarm-description (string)\n\nThe description for the alarm.\n\n--actions-enabled | --no-actions-enabled (boolean)\n\nIndicates whether actions should be executed during any changes to the alarm state. The default is TRUE .\n\n--ok-actions (list)\n\nThe actions to execute when this alarm transitions to an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\nValid Values: arn:aws:automate:*region* :ec2:stop | arn:aws:automate:*region* :ec2:terminate | arn:aws:automate:*region* :ec2:recover | arn:aws:automate:*region* :ec2:reboot | ``arn:aws:sns:region :account-id :sns-topic-name `` | ``arn:aws:autoscaling:region :account-id :scalingPolicy:policy-id :autoScalingGroupName/group-friendly-name :policyName/policy-friendly-name ``\n\nValid Values (for use with IAM roles): arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Reboot/1.0 | arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Recover/1.0\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--alarm-actions (list)\n\nThe actions to execute when this alarm transitions to the ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\nValid Values: arn:aws:automate:*region* :ec2:stop | arn:aws:automate:*region* :ec2:terminate | arn:aws:automate:*region* :ec2:recover | arn:aws:automate:*region* :ec2:reboot | ``arn:aws:sns:region :account-id :sns-topic-name `` | ``arn:aws:autoscaling:region :account-id :scalingPolicy:policy-id :autoScalingGroupName/group-friendly-name :policyName/policy-friendly-name `` | ``arn:aws:ssm:region :account-id :opsitem:severity `` | ``arn:aws:ssm-incidents::account-id :response-plan:response-plan-name ``\n\nValid Values (for use with IAM roles): arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Reboot/1.0 | arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Recover/1.0\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--insufficient-data-actions (list)\n\nThe actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).\n\nValid Values: arn:aws:automate:*region* :ec2:stop | arn:aws:automate:*region* :ec2:terminate | arn:aws:automate:*region* :ec2:recover | arn:aws:automate:*region* :ec2:reboot | ``arn:aws:sns:region :account-id :sns-topic-name `` | ``arn:aws:autoscaling:region :account-id :scalingPolicy:policy-id :autoScalingGroupName/group-friendly-name :policyName/policy-friendly-name ``\n\nValid Values (for use with IAM roles): >arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Stop/1.0 | arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Terminate/1.0 | arn:aws:swf:*region* :*account-id* :action/actions/AWS_EC2.InstanceId.Reboot/1.0\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--metric-name (string)\n\nThe name for the metric associated with the alarm. For each PutMetricAlarm operation, you must specify either MetricName or a Metrics array.\n\nIf you are creating an alarm based on a math expression, you cannot specify this parameter, or any of the Dimensions , Period , Namespace , Statistic , or ExtendedStatistic parameters. Instead, you specify all this information in the Metrics array.\n\n--namespace (string)\n\nThe namespace for the metric associated specified in MetricName .\n\n--statistic (string)\n\nThe statistic for the metric specified in MetricName , other than percentile. For percentile statistics, use ExtendedStatistic . When you call PutMetricAlarm and specify a MetricName , you must specify either Statistic or ExtendedStatistic, but not both.\n\nPossible values:\n\nSampleCount\n\nAverage\n\nSum\n\nMinimum\n\nMaximum\n\n--extended-statistic (string)\n\nThe percentile statistic for the metric specified in MetricName . Specify a value between p0.0 and p100. When you call PutMetricAlarm and specify a MetricName , you must specify either Statistic or ExtendedStatistic, but not both.\n\n--dimensions (list)\n\nThe dimensions for the metric specified in MetricName .\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nShorthand Syntax:\n\nName=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Name\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--period (integer)\n\nThe length, in seconds, used each time the metric specified in MetricName is evaluated. Valid values are 10, 30, and any multiple of 60.\n\nPeriod is required for alarms based on static thresholds. If you are creating an alarm based on a metric math expression, you specify the period for each metric within the objects in the Metrics array.\n\nBe sure to specify 10 or 30 only for metrics that are stored by a PutMetricData call with a StorageResolution of 1. If you specify a period of 10 or 30 for a metric that does not have sub-minute resolution, the alarm still attempts to gather data at the period rate that you specify. In this case, it does not receive data for the attempts that do not correspond to a one-minute data resolution, and the alarm might often lapse into INSUFFICENT_DATA status. Specifying 10 or 30 also sets this alarm as a high-resolution alarm, which has a higher charge than other alarms. For more information about pricing, see Amazon CloudWatch Pricing .\n\nAn alarm’s total current evaluation period can be no longer than one day, so Period multiplied by EvaluationPeriods cannot be more than 86,400 seconds.\n\n--unit (string)\n\nThe unit of measure for the statistic. For example, the units for the Amazon EC2 NetworkIn metric are Bytes because NetworkIn tracks the number of bytes that an instance receives on all network interfaces. You can also specify a unit when you create a custom metric. Units help provide conceptual meaning to your data. Metric data points that specify a unit of measure, such as Percent, are aggregated separately.\n\nIf you don’t specify Unit , CloudWatch retrieves all unit types that have been published for the metric and attempts to evaluate the alarm. Usually, metrics are published with only one unit, so the alarm works as intended.\n\nHowever, if the metric is published with multiple types of units and you don’t specify a unit, the alarm’s behavior is not defined and it behaves predictably.\n\nWe recommend omitting Unit so that you don’t inadvertently specify an incorrect unit that is not published for this metric. Doing so causes the alarm to be stuck in the INSUFFICIENT DATA state.\n\nPossible values:\n\nSeconds\n\nMicroseconds\n\nMilliseconds\n\nBytes\n\nKilobytes\n\nMegabytes\n\nGigabytes\n\nTerabytes\n\nBits\n\nKilobits\n\nMegabits\n\nGigabits\n\nTerabits\n\nPercent\n\nCount\n\nBytes/Second\n\nKilobytes/Second\n\nMegabytes/Second\n\nGigabytes/Second\n\nTerabytes/Second\n\nBits/Second\n\nKilobits/Second\n\nMegabits/Second\n\nGigabits/Second\n\nTerabits/Second\n\nCount/Second\n\nNone\n\n--evaluation-periods (integer)\n\nThe number of periods over which data is compared to the specified threshold. If you are setting an alarm that requires that a number of consecutive data points be breaching to trigger the alarm, this value specifies that number. If you are setting an “M out of N” alarm, this value is the N.\n\nAn alarm’s total current evaluation period can be no longer than one day, so this number multiplied by Period cannot be more than 86,400 seconds.\n\n--datapoints-to-alarm (integer)\n\nThe number of data points that must be breaching to trigger the alarm. This is used only if you are setting an “M out of N” alarm. In that case, this value is the M. For more information, see Evaluating an Alarm in the Amazon CloudWatch User Guide .\n\n--threshold (double)\n\nThe value against which the specified statistic is compared.\n\nThis parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.\n\n--comparison-operator (string)\n\nThe arithmetic operation to use when comparing the specified statistic and threshold. The specified statistic value is used as the first operand.\n\nThe values LessThanLowerOrGreaterThanUpperThreshold , LessThanLowerThreshold , and GreaterThanUpperThreshold are used only for alarms based on anomaly detection models.\n\nPossible values:\n\nGreaterThanOrEqualToThreshold\n\nGreaterThanThreshold\n\nLessThanThreshold\n\nLessThanOrEqualToThreshold\n\nLessThanLowerOrGreaterThanUpperThreshold\n\nLessThanLowerThreshold\n\nGreaterThanUpperThreshold\n\n--treat-missing-data (string)\n\nSets how this alarm is to handle missing data points. If TreatMissingData is omitted, the default behavior of missing is used. For more information, see Configuring How CloudWatch Alarms Treats Missing Data .\n\nValid Values: breaching | notBreaching | ignore | missing\n\n--evaluate-low-sample-count-percentile (string)\n\nUsed only for alarms based on percentiles. If you specify ignore , the alarm state does not change during periods with too few data points to be statistically significant. If you specify evaluate or omit this parameter, the alarm is always evaluated and possibly changes state no matter how many data points are available. For more information, see Percentile-Based CloudWatch Alarms and Low Data Samples .\n\nValid Values: evaluate | ignore\n\n--metrics (list)\n\nAn array of MetricDataQuery structures that enable you to create an alarm based on the result of a metric math expression. For each PutMetricAlarm operation, you must specify either MetricName or a Metrics array.\n\nEach item in the Metrics array either retrieves a metric or performs a math expression.\n\nOne item in the Metrics array is the expression that the alarm watches. You designate this expression by setting ReturnData to true for this object in the array. For more information, see MetricDataQuery .\n\nIf you use the Metrics parameter, you cannot include the MetricName , Dimensions , Period , Namespace , Statistic , or ExtendedStatistic parameters of PutMetricAlarm in the same operation. Instead, you retrieve the metrics you are using in your math expression as part of the Metrics array.\n\n(structure)\n\nThis structure is used in both GetMetricData and PutMetricAlarm . The supported use of this structure is different for those two operations.\n\nWhen used in GetMetricData , it indicates the metric data to return, and whether this call is just retrieving a batch set of data for one metric, or is performing a math expression on metric data. A single GetMetricData call can include up to 500 MetricDataQuery structures.\n\nWhen used in PutMetricAlarm , it enables you to create an alarm based on a metric math expression. Each MetricDataQuery in the array specifies either a metric to retrieve, or a math expression to be performed on retrieved metrics. A single PutMetricAlarm call can include up to 20 MetricDataQuery structures in the array. The 20 structures can include as many as 10 structures that contain a MetricStat parameter to retrieve a metric, and as many as 10 structures that contain the Expression parameter to perform a math expression. Of those Expression structures, one must have True as the value for ReturnData . The result of this expression is the value the alarm watches.\n\nAny expression used in a PutMetricAlarm operation must return a single time series. For more information, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide .\n\nSome of the parameters of this structure also have different uses whether you are using this structure in a GetMetricData operation or a PutMetricAlarm operation. These differences are explained in the following parameter list.\n\nId -> (string)\n\nA short name used to tie this object to the results in the response. This name must be unique within a single call to GetMetricData . If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.\n\nMetricStat -> (structure)\n\nThe metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.\n\nWithin one MetricDataQuery object, you must specify either Expression or MetricStat but not both.\n\nMetric -> (structure)\n\nThe metric to return, including the metric name, namespace, and dimensions.\n\nNamespace -> (string)\n\nThe namespace of the metric.\n\nMetricName -> (string)\n\nThe name of the metric. This is a required field.\n\nDimensions -> (list)\n\nThe dimensions for the metric.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nPeriod -> (integer)\n\nThe granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData call that includes a StorageResolution of 1 second.\n\nIf the StartTime parameter specifies a time stamp that is greater than 3 hours ago, you must specify the period as follows or no data points in that time range is returned:\n\nStart time between 3 hours and 15 days ago - Use a multiple of 60 seconds (1 minute).\n\nStart time between 15 and 63 days ago - Use a multiple of 300 seconds (5 minutes).\n\nStart time greater than 63 days ago - Use a multiple of 3600 seconds (1 hour).\n\nStat -> (string)\n\nThe statistic to return. It can include any CloudWatch statistic or extended statistic.\n\nUnit -> (string)\n\nWhen you are using a Put operation, this defines what unit you want to use when storing the metric.\n\nIn a Get operation, if you omit Unit then all data that was collected with any unit is returned, along with the corresponding units that were specified when the data was reported to CloudWatch. If you specify a unit, the operation returns only data that was collected with that unit specified. If you specify a unit that does not match the data collected, the results of the operation are null. CloudWatch does not perform unit conversions.\n\nExpression -> (string)\n\nThe math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the Id of the other metrics to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide .\n\nWithin each MetricDataQuery object, you must specify either Expression or MetricStat but not both.\n\nLabel -> (string)\n\nA human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents. If the metric or expression is shown in a CloudWatch dashboard widget, the label is shown. If Label is omitted, CloudWatch generates a default.\n\nYou can put dynamic expressions into a label, so that it is more descriptive. For more information, see Using Dynamic Labels .\n\nReturnData -> (boolean)\n\nWhen used in GetMetricData , this option indicates whether to return the timestamps and raw data values of this metric. If you are performing this call just to do math expressions and do not also need the raw data returned, you can specify False . If you omit this, the default of True is used.\n\nWhen used in PutMetricAlarm , specify True for the one expression result to use as the alarm. For all other metrics and expressions in the same PutMetricAlarm operation, specify ReturnData as False.\n\nPeriod -> (integer)\n\nThe granularity, in seconds, of the returned data points. For metrics with regular resolution, a period can be as short as one minute (60 seconds) and must be a multiple of 60. For high-resolution metrics that are collected at intervals of less than one minute, the period can be 1, 5, 10, 30, 60, or any multiple of 60. High-resolution metrics are those metrics stored by a PutMetricData operation that includes a StorageResolution of 1 second .\n\nAccountId -> (string)\n\nThe ID of the account where the metrics are located, if this is a cross-account alarm.\n\nUse this field only for PutMetricAlarm operations. It is not used in GetMetricData operations.\n\nJSON Syntax:\n\n[\n  {\n    \"Id\": \"string\",\n    \"MetricStat\": {\n      \"Metric\": {\n        \"Namespace\": \"string\",\n        \"MetricName\": \"string\",\n        \"Dimensions\": [\n          {\n            \"Name\": \"string\",\n            \"Value\": \"string\"\n          }\n          ...\n        ]\n      },\n      \"Period\": integer,\n      \"Stat\": \"string\",\n      \"Unit\": \"Seconds\"|\"Microseconds\"|\"Milliseconds\"|\"Bytes\"|\"Kilobytes\"|\"Megabytes\"|\"Gigabytes\"|\"Terabytes\"|\"Bits\"|\"Kilobits\"|\"Megabits\"|\"Gigabits\"|\"Terabits\"|\"Percent\"|\"Count\"|\"Bytes/Second\"|\"Kilobytes/Second\"|\"Megabytes/Second\"|\"Gigabytes/Second\"|\"Terabytes/Second\"|\"Bits/Second\"|\"Kilobits/Second\"|\"Megabits/Second\"|\"Gigabits/Second\"|\"Terabits/Second\"|\"Count/Second\"|\"None\"\n    },\n    \"Expression\": \"string\",\n    \"Label\": \"string\",\n    \"ReturnData\": true|false,\n    \"Period\": integer,\n    \"AccountId\": \"string\"\n  }\n  ...\n]\n\n\n--tags (list)\n\nA list of key-value pairs to associate with the alarm. You can associate as many as 50 tags with an alarm.\n\nTags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.\n\nIf you are using this operation to update an existing alarm, any tags you specify in this parameter are ignored. To change the tags of an existing alarm, use TagResource or UntagResource .\n\n(structure)\n\nA key-value pair associated with a CloudWatch resource.\n\nKey -> (string)\n\nA string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.\n\nValue -> (string)\n\nThe value for the specified tag key.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--threshold-metric-id (string)\n\nIf this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.\n\nFor an example of how to use this parameter, see the Anomaly Detection Model Alarm example on this page.\n\nIf your alarm uses this parameter, it cannot have Auto Scaling actions.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo send an Amazon Simple Notification Service email message when CPU utilization exceeds 70 percent\n\nThe following example uses the put-metric-alarm command to send an Amazon Simple Notification Service email message when CPU utilization exceeds 70 percent:\n\naws cloudwatch put-metric-alarm --alarm-name cpu-mon --alarm-description \"Alarm when CPU exceeds 70 percent\" --metric-name CPUUtilization --namespace AWS/EC2 --statistic Average --period 300 --threshold 70 --comparison-operator GreaterThanThreshold  --dimensions \"Name=InstanceId,Value=i-12345678\" --evaluation-periods 2 --alarm-actions arn:aws:sns:us-east-1:111122223333:MyTopic --unit Percent\n\n\nThis command returns to the prompt if successful. If an alarm with the same name already exists, it will be overwritten by the new alarm.\n\nTo specify multiple dimensions\n\nThe following example illustrates how to specify multiple dimensions. Each dimension is specified as a Name/Value pair, with a comma between the name and the value. Multiple dimensions are separated by a space:\n\naws cloudwatch put-metric-alarm --alarm-name \"Default_Test_Alarm3\" --alarm-description \"The default example alarm\" --namespace \"CW EXAMPLE METRICS\" --metric-name Default_Test --statistic Average --period 60 --evaluation-periods 3 --threshold 50 --comparison-operator GreaterThanOrEqualToThreshold --dimensions Name=key1,Value=value1 Name=key2,Value=value2\n"
    },
    {
      "command_name": "put-metric-data",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/put-metric-data.html",
      "command_description": "Description\n\nPublishes metric data points to Amazon CloudWatch. CloudWatch associates the data points with the specified metric. If the specified metric does not exist, CloudWatch creates the metric. When CloudWatch creates a metric, it can take up to fifteen minutes for the metric to appear in calls to ListMetrics .\n\nYou can publish either individual data points in the Value field, or arrays of values and the number of times each value occurred during the period by using the Values and Counts fields in the MetricDatum structure. Using the Values and Counts method enables you to publish up to 150 values per metric with one PutMetricData request, and supports retrieving percentile statistics on this data.\n\nEach PutMetricData request is limited to 40 KB in size for HTTP POST requests. You can send a payload compressed by gzip. Each request is also limited to no more than 20 different metrics.\n\nAlthough the Value parameter accepts numbers of type Double , CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.\n\nYou can use up to 10 dimensions per metric to further clarify what data the metric collects. Each dimension consists of a Name and Value pair. For more information about specifying dimensions, see Publishing Metrics in the Amazon CloudWatch User Guide .\n\nYou specify the time stamp to be associated with each data point. You can specify time stamps that are as much as two weeks before the current date, and as much as 2 hours after the current day and time.\n\nData points with time stamps from 24 hours ago or longer can take at least 48 hours to become available for GetMetricData or GetMetricStatistics from the time they are submitted. Data points with time stamps between 3 and 24 hours ago can take as much as 2 hours to become available for for GetMetricData or GetMetricStatistics .\n\nCloudWatch needs raw data points to calculate percentile statistics. If you publish data using a statistic set instead, you can only retrieve percentile statistics for this data if one of the following conditions is true:\n\nThe SampleCount value of the statistic set is 1 and Min , Max , and Sum are all equal.\n\nThe Min and Max are equal, and Sum is equal to Min multiplied by SampleCount .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-metric-data\n--namespace <value>\n[--metric-data <value>]\n[--metric-name <value>]\n[--timestamp <value>]\n[--unit <value>]\n[--value <value>]\n[--dimensions <value>]\n[--statistic-values <value>]\n[--storage-resolution <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--namespace <value>",
        "[--metric-data <value>]",
        "[--metric-name <value>]",
        "[--timestamp <value>]",
        "[--unit <value>]",
        "[--value <value>]",
        "[--dimensions <value>]",
        "[--statistic-values <value>]",
        "[--storage-resolution <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--namespace (string)\n\nThe namespace for the metric data.\n\nTo avoid conflicts with Amazon Web Services service namespaces, you should not specify a namespace that begins with AWS/\n\n--metric-data (list)\n\nThe data for the metric. The array can include no more than 20 metrics per call.\n\n(structure)\n\nEncapsulates the information sent to either create a metric or add new values to be aggregated into an existing metric.\n\nMetricName -> (string)\n\nThe name of the metric.\n\nDimensions -> (list)\n\nThe dimensions associated with the metric.\n\n(structure)\n\nA dimension is a name/value pair that is part of the identity of a metric. You can assign up to 10 dimensions to a metric. Because dimensions are part of the unique identifier for a metric, whenever you add a unique name/value pair to one of your metrics, you are creating a new variation of that metric.\n\nName -> (string)\n\nThe name of the dimension. Dimension names must contain only ASCII characters and must include at least one non-whitespace character.\n\nValue -> (string)\n\nThe value of the dimension. Dimension values must contain only ASCII characters and must include at least one non-whitespace character.\n\nTimestamp -> (timestamp)\n\nThe time the metric data was received, expressed as the number of milliseconds since Jan 1, 1970 00:00:00 UTC.\n\nValue -> (double)\n\nThe value for the metric.\n\nAlthough the parameter accepts numbers of type Double, CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.\n\nStatisticValues -> (structure)\n\nThe statistical values for the metric.\n\nSampleCount -> (double)\n\nThe number of samples used for the statistic set.\n\nSum -> (double)\n\nThe sum of values for the sample set.\n\nMinimum -> (double)\n\nThe minimum value of the sample set.\n\nMaximum -> (double)\n\nThe maximum value of the sample set.\n\nValues -> (list)\n\nArray of numbers representing the values for the metric during the period. Each unique value is listed just once in this array, and the corresponding number in the Counts array specifies the number of times that value occurred during the period. You can include up to 150 unique values in each PutMetricData action that specifies a Values array.\n\nAlthough the Values array accepts numbers of type Double , CloudWatch rejects values that are either too small or too large. Values must be in the range of -2^360 to 2^360. In addition, special values (for example, NaN, +Infinity, -Infinity) are not supported.\n\n(double)\n\nCounts -> (list)\n\nArray of numbers that is used along with the Values array. Each number in the Count array is the number of times the corresponding value in the Values array occurred during the period.\n\nIf you omit the Counts array, the default of 1 is used as the value for each count. If you include a Counts array, it must include the same amount of values as the Values array.\n\n(double)\n\nUnit -> (string)\n\nWhen you are using a Put operation, this defines what unit you want to use when storing the metric.\n\nIn a Get operation, this displays the unit that is used for the metric.\n\nStorageResolution -> (integer)\n\nValid values are 1 and 60. Setting this to 1 specifies this metric as a high-resolution metric, so that CloudWatch stores the metric with sub-minute resolution down to one second. Setting this to 60 specifies this metric as a regular-resolution metric, which CloudWatch stores at 1-minute resolution. Currently, high resolution is available only for custom metrics. For more information about high-resolution metrics, see High-Resolution Metrics in the Amazon CloudWatch User Guide .\n\nThis field is optional, if you do not specify it the default of 60 is used.\n\nShorthand Syntax:\n\nMetricName=string,Dimensions=[{Name=string,Value=string},{Name=string,Value=string}],Timestamp=timestamp,Value=double,StatisticValues={SampleCount=double,Sum=double,Minimum=double,Maximum=double},Values=double,double,Counts=double,double,Unit=string,StorageResolution=integer ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"MetricName\": \"string\",\n    \"Dimensions\": [\n      {\n        \"Name\": \"string\",\n        \"Value\": \"string\"\n      }\n      ...\n    ],\n    \"Timestamp\": timestamp,\n    \"Value\": double,\n    \"StatisticValues\": {\n      \"SampleCount\": double,\n      \"Sum\": double,\n      \"Minimum\": double,\n      \"Maximum\": double\n    },\n    \"Values\": [double, ...],\n    \"Counts\": [double, ...],\n    \"Unit\": \"Seconds\"|\"Microseconds\"|\"Milliseconds\"|\"Bytes\"|\"Kilobytes\"|\"Megabytes\"|\"Gigabytes\"|\"Terabytes\"|\"Bits\"|\"Kilobits\"|\"Megabits\"|\"Gigabits\"|\"Terabits\"|\"Percent\"|\"Count\"|\"Bytes/Second\"|\"Kilobytes/Second\"|\"Megabytes/Second\"|\"Gigabytes/Second\"|\"Terabytes/Second\"|\"Bits/Second\"|\"Kilobits/Second\"|\"Megabits/Second\"|\"Gigabits/Second\"|\"Terabits/Second\"|\"Count/Second\"|\"None\",\n    \"StorageResolution\": integer\n  }\n  ...\n]\n\n\n--metric-name (string) The name of the metric.\n\n--timestamp (string) The time stamp used for the metric. If not specified, the default value is set to the time the metric data was received.\n\n--unit (string) The unit of metric.\n\n--value (string) The value for the metric. Although the –value parameter accepts numbers of type Double, Amazon CloudWatch truncates values with very large exponents. Values with base-10 exponents greater than 126 (1 x 10^126) are truncated. Likewise, values with base-10 exponents less than -130 (1 x 10^-130) are also truncated.\n\n--dimensions (string) The –dimensions argument further expands on the identity of a metric using a Name=Value pair, separated by commas, for example: --dimensions InstanceID=1-23456789,InstanceType=m1.small . Note that the --dimensions argument has a different format when used in get-metric-data , where for the same example you would use the format --dimensions Name=InstanceID,Value=i-aaba32d4 Name=InstanceType,value=m1.small .\n\n--statistic-values (string) A set of statistical values describing the metric.\n\n--storage-resolution (string)\n\nValid values are 1 and 60. Setting this to 1 specifies this metric as a high-resolution metric, so that CloudWatch stores the metric with sub-minute resolution down to one second. Setting this to 60 specifies this metric as a regular-resolution metric, which CloudWatch stores at 1-minute resolution. Currently, high resolution is available only for custom metrics. For more information about high-resolution metrics, see High-Resolution Metrics in the Amazon CloudWatch User Guide .\n\nThis field is optional, if you do not specify it the default of 60 is used.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo publish a custom metric to Amazon CloudWatch\n\nThe following example uses the put-metric-data command to publish a custom metric to Amazon CloudWatch:\n\naws cloudwatch put-metric-data --namespace \"Usage Metrics\" --metric-data file://metric.json\n\n\nThe values for the metric itself are stored in the JSON file, metric.json.\n\nHere are the contents of that file:\n\n[\n  {\n    \"MetricName\": \"New Posts\",\n    \"Timestamp\": \"Wednesday, June 12, 2013 8:28:20 PM\",\n    \"Value\": 0.50,\n    \"Unit\": \"Count\"\n  }\n]\n\n\nFor more information, see Publishing Custom Metrics in the Amazon CloudWatch Developer Guide.\n\nTo specify multiple dimensions\n\nThe following example illustrates how to specify multiple dimensions. Each dimension is specified as a Name=Value pair. Multiple dimensions are separated by a comma.:\n\naws cloudwatch put-metric-data --metric-name Buffers --namespace MyNameSpace --unit Bytes --value 231434333 --dimensions InstanceID=1-23456789,InstanceType=m1.small\n"
    },
    {
      "command_name": "put-metric-stream",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/put-metric-stream.html",
      "command_description": "Description\n\nCreates or updates a metric stream. Metric streams can automatically stream CloudWatch metrics to Amazon Web Services destinations including Amazon S3 and to many third-party solutions.\n\nFor more information, see Using Metric Streams .\n\nTo create a metric stream, you must be logged on to an account that has the iam:PassRole permission and either the CloudWatchFullAccess policy or the cloudwatch:PutMetricStream permission.\n\nWhen you create or update a metric stream, you choose one of the following:\n\nStream metrics from all metric namespaces in the account.\n\nStream metrics from all metric namespaces in the account, except for the namespaces that you list in ExcludeFilters .\n\nStream metrics from only the metric namespaces that you list in IncludeFilters .\n\nWhen you use PutMetricStream to create a new metric stream, the stream is created in the running state. If you use it to update an existing stream, the state of the stream is not changed.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-metric-stream\n--name <value>\n[--include-filters <value>]\n[--exclude-filters <value>]\n--firehose-arn <value>\n--role-arn <value>\n--output-format <value>\n[--tags <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--name <value>",
        "[--include-filters <value>]",
        "[--exclude-filters <value>]",
        "--firehose-arn <value>",
        "--role-arn <value>",
        "--output-format <value>",
        "[--tags <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--name (string)\n\nIf you are creating a new metric stream, this is the name for the new stream. The name must be different than the names of other metric streams in this account and Region.\n\nIf you are updating a metric stream, specify the name of that stream here.\n\nValid characters are A-Z, a-z, 0-9, “-” and “_”.\n\n--include-filters (list)\n\nIf you specify this parameter, the stream sends only the metrics from the metric namespaces that you specify here.\n\nYou cannot include IncludeFilters and ExcludeFilters in the same operation.\n\n(structure)\n\nThis structure contains the name of one of the metric namespaces that is listed in a filter of a metric stream.\n\nNamespace -> (string)\n\nThe name of the metric namespace in the filter.\n\nShorthand Syntax:\n\nNamespace=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Namespace\": \"string\"\n  }\n  ...\n]\n\n\n--exclude-filters (list)\n\nIf you specify this parameter, the stream sends metrics from all metric namespaces except for the namespaces that you specify here.\n\nYou cannot include ExcludeFilters and IncludeFilters in the same operation.\n\n(structure)\n\nThis structure contains the name of one of the metric namespaces that is listed in a filter of a metric stream.\n\nNamespace -> (string)\n\nThe name of the metric namespace in the filter.\n\nShorthand Syntax:\n\nNamespace=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Namespace\": \"string\"\n  }\n  ...\n]\n\n\n--firehose-arn (string)\n\nThe ARN of the Amazon Kinesis Firehose delivery stream to use for this metric stream. This Amazon Kinesis Firehose delivery stream must already exist and must be in the same account as the metric stream.\n\n--role-arn (string)\n\nThe ARN of an IAM role that this metric stream will use to access Amazon Kinesis Firehose resources. This IAM role must already exist and must be in the same account as the metric stream. This IAM role must include the following permissions:\n\nfirehose:PutRecord\n\nfirehose:PutRecordBatch\n\n--output-format (string)\n\nThe output format for the stream. Valid values are json and opentelemetry0.7 . For more information about metric stream output formats, see Metric streams output formats .\n\nPossible values:\n\njson\n\nopentelemetry0.7\n\n--tags (list)\n\nA list of key-value pairs to associate with the metric stream. You can associate as many as 50 tags with a metric stream.\n\nTags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.\n\nYou can use this parameter only when you are creating a new metric stream. If you are using this operation to update an existing metric stream, any tags you specify in this parameter are ignored. To change the tags of an existing metric stream, use TagResource or UntagResource .\n\n(structure)\n\nA key-value pair associated with a CloudWatch resource.\n\nKey -> (string)\n\nA string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.\n\nValue -> (string)\n\nThe value for the specified tag key.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nArn -> (string)\n\nThe ARN of the metric stream."
    },
    {
      "command_name": "set-alarm-state",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/set-alarm-state.html",
      "command_description": "Description\n\nTemporarily sets the state of an alarm for testing purposes. When the updated state differs from the previous value, the action configured for the appropriate state is invoked. For example, if your alarm is configured to send an Amazon SNS message when an alarm is triggered, temporarily changing the alarm state to ALARM sends an SNS message.\n\nMetric alarms returns to their actual state quickly, often within seconds. Because the metric alarm state change happens quickly, it is typically only visible in the alarm’s History tab in the Amazon CloudWatch console or through DescribeAlarmHistory .\n\nIf you use SetAlarmState on a composite alarm, the composite alarm is not guaranteed to return to its actual state. It returns to its actual state only once any of its children alarms change state. It is also reevaluated if you update its configuration.\n\nIf an alarm triggers EC2 Auto Scaling policies or application Auto Scaling policies, you must include information in the StateReasonData parameter to enable the policy to take the correct action.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  set-alarm-state\n--alarm-name <value>\n--state-value <value>\n--state-reason <value>\n[--state-reason-data <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--alarm-name <value>",
        "--state-value <value>",
        "--state-reason <value>",
        "[--state-reason-data <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--alarm-name (string)\n\nThe name of the alarm.\n\n--state-value (string)\n\nThe value of the state.\n\nPossible values:\n\nOK\n\nALARM\n\nINSUFFICIENT_DATA\n\n--state-reason (string)\n\nThe reason that this alarm is set to this specific state, in text format.\n\n--state-reason-data (string)\n\nThe reason that this alarm is set to this specific state, in JSON format.\n\nFor SNS or EC2 alarm actions, this is just informational. But for EC2 Auto Scaling or application Auto Scaling alarm actions, the Auto Scaling policy uses the information in this field to take the correct action.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo temporarily change the state of an alarm\n\nThe following example uses the set-alarm-state command to temporarily change the state of an Amazon CloudWatch alarm named “myalarm” and set it to the ALARM state for testing purposes:\n\naws cloudwatch set-alarm-state --alarm-name \"myalarm\" --state-value ALARM --state-reason \"testing purposes\"\n\n\nThis command returns to the prompt if successful."
    },
    {
      "command_name": "start-metric-streams",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/start-metric-streams.html",
      "command_description": "Description\n\nStarts the streaming of metrics for one or more of your metric streams.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  start-metric-streams\n--names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--names (list)\n\nThe array of the names of metric streams to start streaming.\n\nThis is an “all or nothing” operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will start streaming.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "stop-metric-streams",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/stop-metric-streams.html",
      "command_description": "Description\n\nStops the streaming of metrics for one or more of your metric streams.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  stop-metric-streams\n--names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--names (list)\n\nThe array of the names of metric streams to stop streaming.\n\nThis is an “all or nothing” operation. If you do not have permission to access all of the metric streams that you list here, then none of the streams that you list in the operation will stop streaming.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "tag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/tag-resource.html",
      "command_description": "Description\n\nAssigns one or more tags (key-value pairs) to the specified CloudWatch resource. Currently, the only CloudWatch resources that can be tagged are alarms and Contributor Insights rules.\n\nTags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values.\n\nTags don’t have any semantic meaning to Amazon Web Services and are interpreted strictly as strings of characters.\n\nYou can use the TagResource action with an alarm that already has tags. If you specify a new tag key for the alarm, this tag is appended to the list of tags associated with the alarm. If you specify a tag key that is already associated with the alarm, the new tag value that you specify replaces the previous value for that tag.\n\nYou can associate as many as 50 tags with a CloudWatch resource.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  tag-resource\n--resource-arn <value>\n--tags <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--tags <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe ARN of the CloudWatch resource that you’re adding tags to.\n\nThe ARN format of an alarm is ``arn:aws:cloudwatch:Region :account-id :alarm:alarm-name ``\n\nThe ARN format of a Contributor Insights rule is ``arn:aws:cloudwatch:Region :account-id :insight-rule:insight-rule-name ``\n\nFor more information about ARN format, see Resource Types Defined by Amazon CloudWatch in the Amazon Web Services General Reference .\n\n--tags (list)\n\nThe list of key-value pairs to associate with the alarm.\n\n(structure)\n\nA key-value pair associated with a CloudWatch resource.\n\nKey -> (string)\n\nA string that you can use to assign a value. The combination of tag keys and values can help you organize and categorize your resources.\n\nValue -> (string)\n\nThe value for the specified tag key.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "untag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/untag-resource.html",
      "command_description": "Description\n\nRemoves one or more tags from the specified resource.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  untag-resource\n--resource-arn <value>\n--tag-keys <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--tag-keys <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe ARN of the CloudWatch resource that you’re removing tags from.\n\nThe ARN format of an alarm is ``arn:aws:cloudwatch:Region :account-id :alarm:alarm-name ``\n\nThe ARN format of a Contributor Insights rule is ``arn:aws:cloudwatch:Region :account-id :insight-rule:insight-rule-name ``\n\nFor more information about ARN format, see Resource Types Defined by Amazon CloudWatch in the Amazon Web Services General Reference .\n\n--tag-keys (list)\n\nThe list of tag keys to remove from the resource.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "wait",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudwatch/wait/index.html",
      "command_description": "Description\n\nWait until a particular condition is satisfied. Each subcommand polls an API until the listed requirement is met.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_options": []
    }
  ],
  "service_description": "Description\n\nAmazon CloudWatch monitors your Amazon Web Services (Amazon Web Services) resources and the applications you run on Amazon Web Services in real time. You can use CloudWatch to collect and track metrics, which are the variables you want to measure for your resources and applications.\n\nCloudWatch alarms send notifications or automatically change the resources you are monitoring based on rules that you define. For example, you can monitor the CPU usage and disk reads and writes of your Amazon EC2 instances. Then, use this data to determine whether you should launch additional instances to handle increased load. You can also use this data to stop under-used instances to save money.\n\nIn addition to monitoring the built-in metrics that come with Amazon Web Services, you can monitor your own custom metrics. With CloudWatch, you gain system-wide visibility into resource utilization, application performance, and operational health."
}