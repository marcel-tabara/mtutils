{
  "service_name": "lex-runtime",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lex-runtime/index.html",
  "service_commands": [
    {
      "command_name": "delete-session",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lex-runtime/delete-session.html",
      "command_description": "Description\n\nRemoves session information for a specified bot, alias, and user ID.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-session\n--bot-name <value>\n--bot-alias <value>\n--user-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--bot-name <value>",
        "--bot-alias <value>",
        "--user-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--bot-name (string)\n\nThe name of the bot that contains the session data.\n\n--bot-alias (string)\n\nThe alias in use for the bot that contains the session data.\n\n--user-id (string)\n\nThe identifier of the user associated with the session data.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nbotName -> (string)\n\nThe name of the bot associated with the session data.\n\nbotAlias -> (string)\n\nThe alias in use for the bot associated with the session data.\n\nuserId -> (string)\n\nThe ID of the client application user.\n\nsessionId -> (string)\n\nThe unique identifier for the session."
    },
    {
      "command_name": "get-session",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lex-runtime/get-session.html",
      "command_description": "Description\n\nReturns session information for a specified bot, alias, and user ID.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-session\n--bot-name <value>\n--bot-alias <value>\n--user-id <value>\n[--checkpoint-label-filter <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--bot-name <value>",
        "--bot-alias <value>",
        "--user-id <value>",
        "[--checkpoint-label-filter <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--bot-name (string)\n\nThe name of the bot that contains the session data.\n\n--bot-alias (string)\n\nThe alias in use for the bot that contains the session data.\n\n--user-id (string)\n\nThe ID of the client application user. Amazon Lex uses this to identify a user’s conversation with your bot.\n\n--checkpoint-label-filter (string)\n\nA string used to filter the intents returned in the recentIntentSummaryView structure.\n\nWhen you specify a filter, only intents with their checkpointLabel field set to that string are returned.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nrecentIntentSummaryView -> (list)\n\nAn array of information about the intents used in the session. The array can contain a maximum of three summaries. If more than three intents are used in the session, the recentIntentSummaryView operation contains information about the last three intents used.\n\nIf you set the checkpointLabelFilter parameter in the request, the array contains only the intents with the specified label.\n\n(structure)\n\nProvides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state.\n\nintentName -> (string)\n\nThe name of the intent.\n\ncheckpointLabel -> (string)\n\nA user-defined label that identifies a particular intent. You can use this label to return to a previous intent.\n\nUse the checkpointLabelFilter parameter of the GetSessionRequest operation to filter the intents returned by the operation to those with only the specified label.\n\nslots -> (map)\n\nMap of the slots that have been gathered and their values.\n\nkey -> (string)\n\nvalue -> (string)\n\nconfirmationStatus -> (string)\n\nThe status of the intent after the user responds to the confirmation prompt. If the user confirms the intent, Amazon Lex sets this field to Confirmed . If the user denies the intent, Amazon Lex sets this value to Denied . The possible values are:\n\nConfirmed - The user has responded “Yes” to the confirmation prompt, confirming that the intent is complete and that it is ready to be fulfilled.\n\nDenied - The user has responded “No” to the confirmation prompt.\n\nNone - The user has never been prompted for confirmation; or, the user was prompted but did not confirm or deny the prompt.\n\ndialogActionType -> (string)\n\nThe next action that the bot should take in its interaction with the user. The possible values are:\n\nConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as “Place the order?”\n\nClose - Indicates that the there will not be a response from the user. For example, the statement “Your order has been placed” does not require a response.\n\nElicitIntent - The next action is to determine the intent that the user wants to fulfill.\n\nElicitSlot - The next action is to elicit a slot value from the user.\n\nfulfillmentState -> (string)\n\nThe fulfillment state of the intent. The possible values are:\n\nFailed - The Lambda function associated with the intent failed to fulfill the intent.\n\nFulfilled - The intent has fulfilled by the Lambda function associated with the intent.\n\nReadyForFulfillment - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.\n\nslotToElicit -> (string)\n\nThe next slot to elicit from the user. If there is not slot to elicit, the field is blank.\n\nsessionAttributes -> (map)\n\nMap of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\nkey -> (string)\n\nvalue -> (string)\n\nsessionId -> (string)\n\nA unique identifier for the session.\n\ndialogAction -> (structure)\n\nDescribes the current state of the bot.\n\ntype -> (string)\n\nThe next action that the bot should take in its interaction with the user. The possible values are:\n\nConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as “Place the order?”\n\nClose - Indicates that the there will not be a response from the user. For example, the statement “Your order has been placed” does not require a response.\n\nDelegate - The next action is determined by Amazon Lex.\n\nElicitIntent - The next action is to determine the intent that the user wants to fulfill.\n\nElicitSlot - The next action is to elicit a slot value from the user.\n\nintentName -> (string)\n\nThe name of the intent.\n\nslots -> (map)\n\nMap of the slots that have been gathered and their values.\n\nkey -> (string)\n\nvalue -> (string)\n\nslotToElicit -> (string)\n\nThe name of the slot that should be elicited from the user.\n\nfulfillmentState -> (string)\n\nThe fulfillment state of the intent. The possible values are:\n\nFailed - The Lambda function associated with the intent failed to fulfill the intent.\n\nFulfilled - The intent has fulfilled by the Lambda function associated with the intent.\n\nReadyForFulfillment - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.\n\nmessage -> (string)\n\nThe message that should be shown to the user. If you don’t specify a message, Amazon Lex will use the message configured for the intent.\n\nmessageFormat -> (string)\n\nPlainText - The message contains plain UTF-8 text.\n\nCustomPayload - The message is a custom format for the client.\n\nSSML - The message contains text formatted for voice output.\n\nComposite - The message contains an escaped JSON object containing one or more messages. For more information, see Message Groups .\n\nactiveContexts -> (list)\n\nA list of active contexts for the session. A context can be set when an intent is fulfilled or by calling the PostContent , PostText , or PutSession operation.\n\nYou can use a context to control the intents that can follow up an intent, or to modify the operation of your application.\n\n(structure)\n\nA context is a variable that contains information about the current state of the conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an intent is fulfilled, or it can be set at runtime using the PutContent , PutText , or PutSession operation.\n\nname -> (string)\n\nThe name of the context.\n\ntimeToLive -> (structure)\n\nThe length of time or number of turns that a context remains active.\n\ntimeToLiveInSeconds -> (integer)\n\nThe number of seconds that the context should be active after it is first sent in a PostContent or PostText response. You can set the value between 5 and 86,400 seconds (24 hours).\n\nturnsToLive -> (integer)\n\nThe number of conversation turns that the context should be active. A conversation turn is one PostContent or PostText request and the corresponding response from Amazon Lex.\n\nparameters -> (map)\n\nState variables for the current context. You can use these values as default values for slots in subsequent events.\n\nkey -> (string)\n\nvalue -> (string)"
    },
    {
      "command_name": "post-content",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lex-runtime/post-content.html",
      "command_description": "Description\n\nSends user input (text or speech) to Amazon Lex. Clients use this API to send text and audio requests to Amazon Lex at runtime. Amazon Lex interprets the user input using the machine learning model that it built for the bot.\n\nThe PostContent operation supports audio input at 8kHz and 16kHz. You can use 8kHz audio to achieve higher speech recognition accuracy in telephone audio applications.\n\nIn response, Amazon Lex returns the next message to convey to the user. Consider the following example messages:\n\nFor a user input “I would like a pizza,” Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize ): “What size pizza would you like?”.\n\nAfter the user provides all of the pizza order information, Amazon Lex might return a response with a message to get user confirmation: “Order the pizza?”.\n\nAfter the user replies “Yes” to the confirmation prompt, Amazon Lex might return a conclusion statement: “Thank you, your cheese pizza has been ordered.”.\n\nNot all Amazon Lex messages require a response from the user. For example, conclusion statements do not require a response. Some messages require only a yes or no response. In addition to the message , Amazon Lex provides additional context about the message in the response that you can use to enhance client behavior, such as displaying the appropriate client user interface. Consider the following examples:\n\nIf the message is to elicit slot data, Amazon Lex returns the following context information:\n\nx-amz-lex-dialog-state header set to ElicitSlot\n\nx-amz-lex-intent-name header set to the intent name in the current context\n\nx-amz-lex-slot-to-elicit header set to the slot name for which the message is eliciting information\n\nx-amz-lex-slots header set to a map of slots configured for the intent with their current values\n\nIf the message is a confirmation prompt, the x-amz-lex-dialog-state header is set to Confirmation and the x-amz-lex-slot-to-elicit header is omitted.\n\nIf the message is a clarification prompt configured for the intent, indicating that the user intent is not understood, the x-amz-dialog-state header is set to ElicitIntent and the x-amz-slot-to-elicit header is omitted.\n\nIn addition, Amazon Lex also returns your application-specific sessionAttributes . For more information, see Managing Conversation Context .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  post-content\n--bot-name <value>\n--bot-alias <value>\n--user-id <value>\n[--session-attributes <value>]\n[--request-attributes <value>]\n--content-type <value>\n[--accept <value>]\n--input-stream <value>\n[--active-contexts <value>]\n<outfile>\n",
      "command_options": [
        "--bot-name <value>",
        "--bot-alias <value>",
        "--user-id <value>",
        "[--session-attributes <value>]",
        "[--request-attributes <value>]",
        "--content-type <value>",
        "[--accept <value>]",
        "--input-stream <value>",
        "[--active-contexts <value>]",
        "<outfile>"
      ],
      "command_options_description": "Options\n\n--bot-name (string)\n\nName of the Amazon Lex bot.\n\n--bot-alias (string)\n\nAlias of the Amazon Lex bot.\n\n--user-id (string)\n\nThe ID of the client application user. Amazon Lex uses this to identify a user’s conversation with your bot. At runtime, each request must contain the userID field.\n\nTo decide the user ID to use for your application, consider the following factors.\n\nThe userID field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.\n\nIf you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.\n\nIf you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.\n\nA user can’t have two independent conversations with two different versions of the same bot. For example, a user can’t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.\n\n--session-attributes (JSON)\n\nYou pass this value as the x-amz-lex-session-attributes HTTP header.\n\nApplication-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the sessionAttributes and requestAttributes headers is limited to 12 KB.\n\nFor more information, see Setting Session Attributes .\n\n--request-attributes (JSON)\n\nYou pass this value as the x-amz-lex-request-attributes HTTP header.\n\nRequest-specific information passed between Amazon Lex and a client application. The value must be a JSON serialized and base64 encoded map with string keys and values. The total size of the requestAttributes and sessionAttributes headers is limited to 12 KB.\n\nThe namespace x-amz-lex: is reserved for special attributes. Don’t create any request attributes with the prefix x-amz-lex: .\n\nFor more information, see Setting Request Attributes .\n\n--content-type (string)\n\nYou pass this value as the Content-Type HTTP header.\n\nIndicates the audio format or text. The header value must start with one of the following prefixes:\n\nPCM format, audio data must be in little-endian byte order.\n\naudio/l16; rate=16000; channels=1\n\naudio/x-l16; sample-rate=16000; channel-count=1\n\naudio/lpcm; sample-rate=8000; sample-size-bits=16; channel-count=1; is-big-endian=false\n\nOpus format\n\naudio/x-cbr-opus-with-preamble; preamble-size=0; bit-rate=256000; frame-size-milliseconds=4\n\nText format\n\ntext/plain; charset=utf-8\n\n--accept (string)\n\nYou pass this value as the Accept HTTP header.\n\nThe message Amazon Lex returns in the response can be either text or speech based on the Accept HTTP header value in the request.\n\nIf the value is text/plain; charset=utf-8 , Amazon Lex returns text in the response.\n\nIf the value begins with audio/ , Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech (using the configuration you specified in the Accept header). For example, if you specify audio/mpeg as the value, Amazon Lex returns speech in the MPEG format.\n\nIf the value is audio/pcm , the speech returned is audio/pcm in 16-bit, little endian format.\n\nThe following are the accepted values:\n\naudio/mpeg\n\naudio/ogg\n\naudio/pcm\n\ntext/plain; charset=utf-8\n\naudio/* (defaults to mpeg)\n\n--input-stream (blob)\n\nUser input in PCM or Opus audio format or text format as described in the Content-Type HTTP header.\n\nYou can stream audio data to Amazon Lex or you can create a local buffer that captures all of the audio data before sending. In general, you get better performance if you stream audio data rather than buffering the data locally.\n\n--active-contexts (JSON)\n\nA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,\n\nIf you don’t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\n\noutfile (string) Filename where the content will be saved\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncontentType -> (string)\n\nContent type as specified in the Accept HTTP header in the request.\n\nintentName -> (string)\n\nCurrent user intent that Amazon Lex is aware of.\n\nnluIntentConfidence -> (JSON)\n\nProvides a score that indicates how confident Amazon Lex is that the returned intent is the one that matches the user’s intent. The score is between 0.0 and 1.0.\n\nThe score is a relative score, not an absolute score. The score may change based on improvements to Amazon Lex.\n\nalternativeIntents -> (JSON)\n\nOne to four alternative intents that may be applicable to the user’s intent.\n\nEach alternative includes a score that indicates how confident Amazon Lex is that the intent matches the user’s intent. The intents are sorted by the confidence score.\n\nslots -> (JSON)\n\nMap of zero or more intent slots (name/value pairs) Amazon Lex detected from the user input during the conversation. The field is base-64 encoded.\n\nAmazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the valueSelectionStrategy selected when the slot type was created or updated. If valueSelectionStrategy is set to ORIGINAL_VALUE , the value provided by the user is returned, if the user value is similar to the slot values. If valueSelectionStrategy is set to TOP_RESOLUTION Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don’t specify a valueSelectionStrategy , the default is ORIGINAL_VALUE .\n\nsessionAttributes -> (JSON)\n\nMap of key/value pairs representing the session-specific context information.\n\nsentimentResponse -> (string)\n\nThe sentiment expressed in an utterance.\n\nWhen the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.\n\nmessage -> (string)\n\nYou can only use this field in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales, the message field is null. You should use the encodedMessage field instead.\n\nThe message to convey to the user. The message can come from the bot’s configuration or from a Lambda function.\n\nIf the intent is not configured with a Lambda function, or if the Lambda function returned Delegate as the dialogAction.type in its response, Amazon Lex decides on the next course of action and selects an appropriate message from the bot’s configuration based on the current interaction context. For example, if Amazon Lex isn’t able to understand user input, it uses a clarification prompt message.\n\nWhen you create an intent you can assign messages to groups. When messages are assigned to groups Amazon Lex returns one message from each group in the response. The message field is an escaped JSON string containing the messages. For more information about the structure of the JSON string returned, see msg-prompts-formats .\n\nIf the Lambda function returns a message, Amazon Lex passes it to the client in its response.\n\nencodedMessage -> (string)\n\nThe message to convey to the user. The message can come from the bot’s configuration or from a Lambda function.\n\nIf the intent is not configured with a Lambda function, or if the Lambda function returned Delegate as the dialogAction.type in its response, Amazon Lex decides on the next course of action and selects an appropriate message from the bot’s configuration based on the current interaction context. For example, if Amazon Lex isn’t able to understand user input, it uses a clarification prompt message.\n\nWhen you create an intent you can assign messages to groups. When messages are assigned to groups Amazon Lex returns one message from each group in the response. The message field is an escaped JSON string containing the messages. For more information about the structure of the JSON string returned, see msg-prompts-formats .\n\nIf the Lambda function returns a message, Amazon Lex passes it to the client in its response.\n\nThe encodedMessage field is base-64 encoded. You must decode the field before you can use the value.\n\nmessageFormat -> (string)\n\nThe format of the response message. One of the following values:\n\nPlainText - The message contains plain UTF-8 text.\n\nCustomPayload - The message is a custom format for the client.\n\nSSML - The message contains text formatted for voice output.\n\nComposite - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.\n\ndialogState -> (string)\n\nIdentifies the current state of the user interaction. Amazon Lex returns one of the following values as dialogState . The client can optionally use this information to customize the user interface.\n\nElicitIntent - Amazon Lex wants to elicit the user’s intent. Consider the following examples: For example, a user might utter an intent (“I want to order a pizza”). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialog state.\n\nConfirmIntent - Amazon Lex is expecting a “yes” or “no” response. For example, Amazon Lex wants user confirmation before fulfilling an intent. Instead of a simple “yes” or “no” response, a user might respond with additional information. For example, “yes, but make it a thick crust pizza” or “no, I want to order a drink.” Amazon Lex can process such additional information (in these examples, update the crust type slot or change the intent from OrderPizza to OrderDrink).\n\nElicitSlot - Amazon Lex is expecting the value of a slot for the current intent. For example, suppose that in the response Amazon Lex sends this message: “What size pizza would you like?”. A user might reply with the slot value (e.g., “medium”). The user might also provide additional information in the response (e.g., “medium thick crust pizza”). Amazon Lex can process such additional information appropriately.\n\nFulfilled - Conveys that the Lambda function has successfully fulfilled the intent.\n\nReadyForFulfillment - Conveys that the client has to fulfill the request.\n\nFailed - Conveys that the conversation with the user failed. This can happen for various reasons, including that the user does not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or if the Lambda function fails to fulfill the intent.\n\nslotToElicit -> (string)\n\nIf the dialogState value is ElicitSlot , returns the name of the slot for which Amazon Lex is eliciting a value.\n\ninputTranscript -> (string)\n\nThe text used to process the request.\n\nYou can use this field only in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales, the inputTranscript field is null. You should use the encodedInputTranscript field instead.\n\nIf the input was an audio stream, the inputTranscript field contains the text extracted from the audio stream. This is the text that is actually processed to recognize intents and slot values. You can use this information to determine if Amazon Lex is correctly processing the audio that you send.\n\nencodedInputTranscript -> (string)\n\nThe text used to process the request.\n\nIf the input was an audio stream, the encodedInputTranscript field contains the text extracted from the audio stream. This is the text that is actually processed to recognize intents and slot values. You can use this information to determine if Amazon Lex is correctly processing the audio that you send.\n\nThe encodedInputTranscript field is base-64 encoded. You must decode the field before you can use the value.\n\naudioStream -> (blob)\n\nThe prompt (or statement) to convey to the user. This is based on the bot configuration and context. For example, if Amazon Lex did not understand the user intent, it sends the clarificationPrompt configured for the bot. If the intent requires confirmation before taking the fulfillment action, it sends the confirmationPrompt . Another example: Suppose that the Lambda function successfully fulfilled the intent, and sent a message to convey to the user. Then Amazon Lex sends that message in the response.\n\nbotVersion -> (string)\n\nThe version of the bot that responded to the conversation. You can use this information to help determine if one version of a bot is performing better than another version.\n\nsessionId -> (string)\n\nThe unique identifier for the session.\n\nactiveContexts -> (JSON)\n\nA list of active contexts for the session. A context can be set when an intent is fulfilled or by calling the PostContent , PostText , or PutSession operation.\n\nYou can use a context to control the intents that can follow up an intent, or to modify the operation of your application."
    },
    {
      "command_name": "post-text",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lex-runtime/post-text.html",
      "command_description": "Description\n\nSends user input to Amazon Lex. Client applications can use this API to send requests to Amazon Lex at runtime. Amazon Lex then interprets the user input using the machine learning model it built for the bot.\n\nIn response, Amazon Lex returns the next message to convey to the user an optional responseCard to display. Consider the following example messages:\n\nFor a user input “I would like a pizza”, Amazon Lex might return a response with a message eliciting slot data (for example, PizzaSize): “What size pizza would you like?”\n\nAfter the user provides all of the pizza order information, Amazon Lex might return a response with a message to obtain user confirmation “Proceed with the pizza order?”.\n\nAfter the user replies to a confirmation prompt with a “yes”, Amazon Lex might return a conclusion statement: “Thank you, your cheese pizza has been ordered.”.\n\nNot all Amazon Lex messages require a user response. For example, a conclusion statement does not require a response. Some messages require only a “yes” or “no” user response. In addition to the message , Amazon Lex provides additional context about the message in the response that you might use to enhance client behavior, for example, to display the appropriate client user interface. These are the slotToElicit , dialogState , intentName , and slots fields in the response. Consider the following examples:\n\nIf the message is to elicit slot data, Amazon Lex returns the following context information:\n\ndialogState set to ElicitSlot\n\nintentName set to the intent name in the current context\n\nslotToElicit set to the slot name for which the message is eliciting information\n\nslots set to a map of slots, configured for the intent, with currently known values\n\nIf the message is a confirmation prompt, the dialogState is set to ConfirmIntent and SlotToElicit is set to null.\n\nIf the message is a clarification prompt (configured for the intent) that indicates that user intent is not understood, the dialogState is set to ElicitIntent and slotToElicit is set to null.\n\nIn addition, Amazon Lex also returns your application-specific sessionAttributes . For more information, see Managing Conversation Context .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  post-text\n--bot-name <value>\n--bot-alias <value>\n--user-id <value>\n[--session-attributes <value>]\n[--request-attributes <value>]\n--input-text <value>\n[--active-contexts <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--bot-name <value>",
        "--bot-alias <value>",
        "--user-id <value>",
        "[--session-attributes <value>]",
        "[--request-attributes <value>]",
        "--input-text <value>",
        "[--active-contexts <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--bot-name (string)\n\nThe name of the Amazon Lex bot.\n\n--bot-alias (string)\n\nThe alias of the Amazon Lex bot.\n\n--user-id (string)\n\nThe ID of the client application user. Amazon Lex uses this to identify a user’s conversation with your bot. At runtime, each request must contain the userID field.\n\nTo decide the user ID to use for your application, consider the following factors.\n\nThe userID field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.\n\nIf you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.\n\nIf you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.\n\nA user can’t have two independent conversations with two different versions of the same bot. For example, a user can’t have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.\n\n--session-attributes (map)\n\nApplication-specific information passed between Amazon Lex and a client application.\n\nFor more information, see Setting Session Attributes .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--request-attributes (map)\n\nRequest-specific information passed between Amazon Lex and a client application.\n\nThe namespace x-amz-lex: is reserved for special attributes. Don’t create any request attributes with the prefix x-amz-lex: .\n\nFor more information, see Setting Request Attributes .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--input-text (string)\n\nThe text that the user entered (Amazon Lex interprets this text).\n\n--active-contexts (list)\n\nA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,\n\nIf you don’t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\n\n(structure)\n\nA context is a variable that contains information about the current state of the conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an intent is fulfilled, or it can be set at runtime using the PutContent , PutText , or PutSession operation.\n\nname -> (string)\n\nThe name of the context.\n\ntimeToLive -> (structure)\n\nThe length of time or number of turns that a context remains active.\n\ntimeToLiveInSeconds -> (integer)\n\nThe number of seconds that the context should be active after it is first sent in a PostContent or PostText response. You can set the value between 5 and 86,400 seconds (24 hours).\n\nturnsToLive -> (integer)\n\nThe number of conversation turns that the context should be active. A conversation turn is one PostContent or PostText request and the corresponding response from Amazon Lex.\n\nparameters -> (map)\n\nState variables for the current context. You can use these values as default values for slots in subsequent events.\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nname=string,timeToLive={timeToLiveInSeconds=integer,turnsToLive=integer},parameters={KeyName1=string,KeyName2=string} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"name\": \"string\",\n    \"timeToLive\": {\n      \"timeToLiveInSeconds\": integer,\n      \"turnsToLive\": integer\n    },\n    \"parameters\": {\"string\": \"string\"\n      ...}\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nintentName -> (string)\n\nThe current user intent that Amazon Lex is aware of.\n\nnluIntentConfidence -> (structure)\n\nProvides a score that indicates how confident Amazon Lex is that the returned intent is the one that matches the user’s intent. The score is between 0.0 and 1.0. For more information, see Confidence Scores .\n\nThe score is a relative score, not an absolute score. The score may change based on improvements to Amazon Lex.\n\nscore -> (double)\n\nA score that indicates how confident Amazon Lex is that an intent satisfies the user’s intent. Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.\n\nalternativeIntents -> (list)\n\nOne to four alternative intents that may be applicable to the user’s intent.\n\nEach alternative includes a score that indicates how confident Amazon Lex is that the intent matches the user’s intent. The intents are sorted by the confidence score.\n\n(structure)\n\nAn intent that Amazon Lex suggests satisfies the user’s intent. Includes the name of the intent, the confidence that Amazon Lex has that the user’s intent is satisfied, and the slots defined for the intent.\n\nintentName -> (string)\n\nThe name of the intent that Amazon Lex suggests satisfies the user’s intent.\n\nnluIntentConfidence -> (structure)\n\nIndicates how confident Amazon Lex is that an intent satisfies the user’s intent.\n\nscore -> (double)\n\nA score that indicates how confident Amazon Lex is that an intent satisfies the user’s intent. Ranges between 0.00 and 1.00. Higher scores indicate higher confidence.\n\nslots -> (map)\n\nThe slot and slot values associated with the predicted intent.\n\nkey -> (string)\n\nvalue -> (string)\n\nslots -> (map)\n\nThe intent slots that Amazon Lex detected from the user input in the conversation.\n\nAmazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the valueSelectionStrategy selected when the slot type was created or updated. If valueSelectionStrategy is set to ORIGINAL_VALUE , the value provided by the user is returned, if the user value is similar to the slot values. If valueSelectionStrategy is set to TOP_RESOLUTION Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don’t specify a valueSelectionStrategy , the default is ORIGINAL_VALUE .\n\nkey -> (string)\n\nvalue -> (string)\n\nsessionAttributes -> (map)\n\nA map of key-value pairs representing the session-specific context information.\n\nkey -> (string)\n\nvalue -> (string)\n\nmessage -> (string)\n\nThe message to convey to the user. The message can come from the bot’s configuration or from a Lambda function.\n\nIf the intent is not configured with a Lambda function, or if the Lambda function returned Delegate as the dialogAction.type its response, Amazon Lex decides on the next course of action and selects an appropriate message from the bot’s configuration based on the current interaction context. For example, if Amazon Lex isn’t able to understand user input, it uses a clarification prompt message.\n\nWhen you create an intent you can assign messages to groups. When messages are assigned to groups Amazon Lex returns one message from each group in the response. The message field is an escaped JSON string containing the messages. For more information about the structure of the JSON string returned, see msg-prompts-formats .\n\nIf the Lambda function returns a message, Amazon Lex passes it to the client in its response.\n\nsentimentResponse -> (structure)\n\nThe sentiment expressed in and utterance.\n\nWhen the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.\n\nsentimentLabel -> (string)\n\nThe inferred sentiment that Amazon Comprehend has the highest confidence in.\n\nsentimentScore -> (string)\n\nThe likelihood that the sentiment was correctly inferred.\n\nmessageFormat -> (string)\n\nThe format of the response message. One of the following values:\n\nPlainText - The message contains plain UTF-8 text.\n\nCustomPayload - The message is a custom format defined by the Lambda function.\n\nSSML - The message contains text formatted for voice output.\n\nComposite - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.\n\ndialogState -> (string)\n\nIdentifies the current state of the user interaction. Amazon Lex returns one of the following values as dialogState . The client can optionally use this information to customize the user interface.\n\nElicitIntent - Amazon Lex wants to elicit user intent. For example, a user might utter an intent (“I want to order a pizza”). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.\n\nConfirmIntent - Amazon Lex is expecting a “yes” or “no” response. For example, Amazon Lex wants user confirmation before fulfilling an intent. Instead of a simple “yes” or “no,” a user might respond with additional information. For example, “yes, but make it thick crust pizza” or “no, I want to order a drink”. Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).\n\nElicitSlot - Amazon Lex is expecting a slot value for the current intent. For example, suppose that in the response Amazon Lex sends this message: “What size pizza would you like?”. A user might reply with the slot value (e.g., “medium”). The user might also provide additional information in the response (e.g., “medium thick crust pizza”). Amazon Lex can process such additional information appropriately.\n\nFulfilled - Conveys that the Lambda function configured for the intent has successfully fulfilled the intent.\n\nReadyForFulfillment - Conveys that the client has to fulfill the intent.\n\nFailed - Conveys that the conversation with the user failed. This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent.\n\nslotToElicit -> (string)\n\nIf the dialogState value is ElicitSlot , returns the name of the slot for which Amazon Lex is eliciting a value.\n\nresponseCard -> (structure)\n\nRepresents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function).\n\nversion -> (string)\n\nThe version of the response card format.\n\ncontentType -> (string)\n\nThe content type of the response.\n\ngenericAttachments -> (list)\n\nAn array of attachment objects representing options.\n\n(structure)\n\nRepresents an option rendered to the user when a prompt is shown. It could be an image, a button, a link, or text.\n\ntitle -> (string)\n\nThe title of the option.\n\nsubTitle -> (string)\n\nThe subtitle shown below the title.\n\nattachmentLinkUrl -> (string)\n\nThe URL of an attachment to the response card.\n\nimageUrl -> (string)\n\nThe URL of an image that is displayed to the user.\n\nbuttons -> (list)\n\nThe list of options to show to the user.\n\n(structure)\n\nRepresents an option to be shown on the client platform (Facebook, Slack, etc.)\n\ntext -> (string)\n\nText that is visible to the user on the button.\n\nvalue -> (string)\n\nThe value sent to Amazon Lex when a user chooses the button. For example, consider button text “NYC.” When the user chooses the button, the value sent can be “New York City.”\n\nsessionId -> (string)\n\nA unique identifier for the session.\n\nbotVersion -> (string)\n\nThe version of the bot that responded to the conversation. You can use this information to help determine if one version of a bot is performing better than another version.\n\nactiveContexts -> (list)\n\nA list of active contexts for the session. A context can be set when an intent is fulfilled or by calling the PostContent , PostText , or PutSession operation.\n\nYou can use a context to control the intents that can follow up an intent, or to modify the operation of your application.\n\n(structure)\n\nA context is a variable that contains information about the current state of the conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an intent is fulfilled, or it can be set at runtime using the PutContent , PutText , or PutSession operation.\n\nname -> (string)\n\nThe name of the context.\n\ntimeToLive -> (structure)\n\nThe length of time or number of turns that a context remains active.\n\ntimeToLiveInSeconds -> (integer)\n\nThe number of seconds that the context should be active after it is first sent in a PostContent or PostText response. You can set the value between 5 and 86,400 seconds (24 hours).\n\nturnsToLive -> (integer)\n\nThe number of conversation turns that the context should be active. A conversation turn is one PostContent or PostText request and the corresponding response from Amazon Lex.\n\nparameters -> (map)\n\nState variables for the current context. You can use these values as default values for slots in subsequent events.\n\nkey -> (string)\n\nvalue -> (string)"
    },
    {
      "command_name": "put-session",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/lex-runtime/put-session.html",
      "command_description": "Description\n\nCreates a new session or modifies an existing session with an Amazon Lex bot. Use this operation to enable your application to set the state of the bot.\n\nFor more information, see Managing Sessions .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-session\n--bot-name <value>\n--bot-alias <value>\n--user-id <value>\n[--session-attributes <value>]\n[--dialog-action <value>]\n[--recent-intent-summary-view <value>]\n[--accept <value>]\n[--active-contexts <value>]\n<outfile>\n",
      "command_options": [
        "--bot-name <value>",
        "--bot-alias <value>",
        "--user-id <value>",
        "[--session-attributes <value>]",
        "[--dialog-action <value>]",
        "[--recent-intent-summary-view <value>]",
        "[--accept <value>]",
        "[--active-contexts <value>]",
        "<outfile>"
      ],
      "command_options_description": "Options\n\n--bot-name (string)\n\nThe name of the bot that contains the session data.\n\n--bot-alias (string)\n\nThe alias in use for the bot that contains the session data.\n\n--user-id (string)\n\nThe ID of the client application user. Amazon Lex uses this to identify a user’s conversation with your bot.\n\n--session-attributes (map)\n\nMap of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--dialog-action (structure)\n\nSets the next action that the bot should take to fulfill the conversation.\n\ntype -> (string)\n\nThe next action that the bot should take in its interaction with the user. The possible values are:\n\nConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as “Place the order?”\n\nClose - Indicates that the there will not be a response from the user. For example, the statement “Your order has been placed” does not require a response.\n\nDelegate - The next action is determined by Amazon Lex.\n\nElicitIntent - The next action is to determine the intent that the user wants to fulfill.\n\nElicitSlot - The next action is to elicit a slot value from the user.\n\nintentName -> (string)\n\nThe name of the intent.\n\nslots -> (map)\n\nMap of the slots that have been gathered and their values.\n\nkey -> (string)\n\nvalue -> (string)\n\nslotToElicit -> (string)\n\nThe name of the slot that should be elicited from the user.\n\nfulfillmentState -> (string)\n\nThe fulfillment state of the intent. The possible values are:\n\nFailed - The Lambda function associated with the intent failed to fulfill the intent.\n\nFulfilled - The intent has fulfilled by the Lambda function associated with the intent.\n\nReadyForFulfillment - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.\n\nmessage -> (string)\n\nThe message that should be shown to the user. If you don’t specify a message, Amazon Lex will use the message configured for the intent.\n\nmessageFormat -> (string)\n\nPlainText - The message contains plain UTF-8 text.\n\nCustomPayload - The message is a custom format for the client.\n\nSSML - The message contains text formatted for voice output.\n\nComposite - The message contains an escaped JSON object containing one or more messages. For more information, see Message Groups .\n\nShorthand Syntax:\n\ntype=string,intentName=string,slots={KeyName1=string,KeyName2=string},slotToElicit=string,fulfillmentState=string,message=string,messageFormat=string\n\n\nJSON Syntax:\n\n{\n  \"type\": \"ElicitIntent\"|\"ConfirmIntent\"|\"ElicitSlot\"|\"Close\"|\"Delegate\",\n  \"intentName\": \"string\",\n  \"slots\": {\"string\": \"string\"\n    ...},\n  \"slotToElicit\": \"string\",\n  \"fulfillmentState\": \"Fulfilled\"|\"Failed\"|\"ReadyForFulfillment\",\n  \"message\": \"string\",\n  \"messageFormat\": \"PlainText\"|\"CustomPayload\"|\"SSML\"|\"Composite\"\n}\n\n\n--recent-intent-summary-view (list)\n\nA summary of the recent intents for the bot. You can use the intent summary view to set a checkpoint label on an intent and modify attributes of intents. You can also use it to remove or add intent summary objects to the list.\n\nAn intent that you modify or add to the list must make sense for the bot. For example, the intent name must be valid for the bot. You must provide valid values for:\n\nintentName\n\nslot names\n\nslotToElict\n\nIf you send the recentIntentSummaryView parameter in a PutSession request, the contents of the new summary view replaces the old summary view. For example, if a GetSession request returns three intents in the summary view and you call PutSession with one intent in the summary view, the next call to GetSession will only return one intent.\n\n(structure)\n\nProvides information about the state of an intent. You can use this information to get the current state of an intent so that you can process the intent, or so that you can return the intent to its previous state.\n\nintentName -> (string)\n\nThe name of the intent.\n\ncheckpointLabel -> (string)\n\nA user-defined label that identifies a particular intent. You can use this label to return to a previous intent.\n\nUse the checkpointLabelFilter parameter of the GetSessionRequest operation to filter the intents returned by the operation to those with only the specified label.\n\nslots -> (map)\n\nMap of the slots that have been gathered and their values.\n\nkey -> (string)\n\nvalue -> (string)\n\nconfirmationStatus -> (string)\n\nThe status of the intent after the user responds to the confirmation prompt. If the user confirms the intent, Amazon Lex sets this field to Confirmed . If the user denies the intent, Amazon Lex sets this value to Denied . The possible values are:\n\nConfirmed - The user has responded “Yes” to the confirmation prompt, confirming that the intent is complete and that it is ready to be fulfilled.\n\nDenied - The user has responded “No” to the confirmation prompt.\n\nNone - The user has never been prompted for confirmation; or, the user was prompted but did not confirm or deny the prompt.\n\ndialogActionType -> (string)\n\nThe next action that the bot should take in its interaction with the user. The possible values are:\n\nConfirmIntent - The next action is asking the user if the intent is complete and ready to be fulfilled. This is a yes/no question such as “Place the order?”\n\nClose - Indicates that the there will not be a response from the user. For example, the statement “Your order has been placed” does not require a response.\n\nElicitIntent - The next action is to determine the intent that the user wants to fulfill.\n\nElicitSlot - The next action is to elicit a slot value from the user.\n\nfulfillmentState -> (string)\n\nThe fulfillment state of the intent. The possible values are:\n\nFailed - The Lambda function associated with the intent failed to fulfill the intent.\n\nFulfilled - The intent has fulfilled by the Lambda function associated with the intent.\n\nReadyForFulfillment - All of the information necessary for the intent is present and the intent ready to be fulfilled by the client application.\n\nslotToElicit -> (string)\n\nThe next slot to elicit from the user. If there is not slot to elicit, the field is blank.\n\nShorthand Syntax:\n\nintentName=string,checkpointLabel=string,slots={KeyName1=string,KeyName2=string},confirmationStatus=string,dialogActionType=string,fulfillmentState=string,slotToElicit=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"intentName\": \"string\",\n    \"checkpointLabel\": \"string\",\n    \"slots\": {\"string\": \"string\"\n      ...},\n    \"confirmationStatus\": \"None\"|\"Confirmed\"|\"Denied\",\n    \"dialogActionType\": \"ElicitIntent\"|\"ConfirmIntent\"|\"ElicitSlot\"|\"Close\"|\"Delegate\",\n    \"fulfillmentState\": \"Fulfilled\"|\"Failed\"|\"ReadyForFulfillment\",\n    \"slotToElicit\": \"string\"\n  }\n  ...\n]\n\n\n--accept (string)\n\nThe message that Amazon Lex returns in the response can be either text or speech based depending on the value of this field.\n\nIf the value is text/plain; charset=utf-8 , Amazon Lex returns text in the response.\n\nIf the value begins with audio/ , Amazon Lex returns speech in the response. Amazon Lex uses Amazon Polly to generate the speech in the configuration that you specify. For example, if you specify audio/mpeg as the value, Amazon Lex returns speech in the MPEG format.\n\nIf the value is audio/pcm , the speech is returned as audio/pcm in 16-bit, little endian format.\n\nThe following are the accepted values:\n\naudio/mpeg\n\naudio/ogg\n\naudio/pcm\n\naudio/* (defaults to mpeg)\n\ntext/plain; charset=utf-8\n\n--active-contexts (list)\n\nA list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,\n\nIf you don’t specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.\n\n(structure)\n\nA context is a variable that contains information about the current state of the conversation between a user and Amazon Lex. Context can be set automatically by Amazon Lex when an intent is fulfilled, or it can be set at runtime using the PutContent , PutText , or PutSession operation.\n\nname -> (string)\n\nThe name of the context.\n\ntimeToLive -> (structure)\n\nThe length of time or number of turns that a context remains active.\n\ntimeToLiveInSeconds -> (integer)\n\nThe number of seconds that the context should be active after it is first sent in a PostContent or PostText response. You can set the value between 5 and 86,400 seconds (24 hours).\n\nturnsToLive -> (integer)\n\nThe number of conversation turns that the context should be active. A conversation turn is one PostContent or PostText request and the corresponding response from Amazon Lex.\n\nparameters -> (map)\n\nState variables for the current context. You can use these values as default values for slots in subsequent events.\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nname=string,timeToLive={timeToLiveInSeconds=integer,turnsToLive=integer},parameters={KeyName1=string,KeyName2=string} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"name\": \"string\",\n    \"timeToLive\": {\n      \"timeToLiveInSeconds\": integer,\n      \"turnsToLive\": integer\n    },\n    \"parameters\": {\"string\": \"string\"\n      ...}\n  }\n  ...\n]\n\n\noutfile (string) Filename where the content will be saved\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncontentType -> (string)\n\nContent type as specified in the Accept HTTP header in the request.\n\nintentName -> (string)\n\nThe name of the current intent.\n\nslots -> (JSON)\n\nMap of zero or more intent slots Amazon Lex detected from the user input during the conversation.\n\nAmazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the valueSelectionStrategy selected when the slot type was created or updated. If valueSelectionStrategy is set to ORIGINAL_VALUE , the value provided by the user is returned, if the user value is similar to the slot values. If valueSelectionStrategy is set to TOP_RESOLUTION Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don’t specify a valueSelectionStrategy the default is ORIGINAL_VALUE .\n\nsessionAttributes -> (JSON)\n\nMap of key/value pairs representing session-specific context information.\n\nmessage -> (string)\n\nThe next message that should be presented to the user.\n\nYou can only use this field in the de-DE, en-AU, en-GB, en-US, es-419, es-ES, es-US, fr-CA, fr-FR, and it-IT locales. In all other locales, the message field is null. You should use the encodedMessage field instead.\n\nencodedMessage -> (string)\n\nThe next message that should be presented to the user.\n\nThe encodedMessage field is base-64 encoded. You must decode the field before you can use the value.\n\nmessageFormat -> (string)\n\nThe format of the response message. One of the following values:\n\nPlainText - The message contains plain UTF-8 text.\n\nCustomPayload - The message is a custom format for the client.\n\nSSML - The message contains text formatted for voice output.\n\nComposite - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.\n\ndialogState -> (string)\n\nConfirmIntent - Amazon Lex is expecting a “yes” or “no” response to confirm the intent before fulfilling an intent.\n\nElicitIntent - Amazon Lex wants to elicit the user’s intent.\n\nElicitSlot - Amazon Lex is expecting the value of a slot for the current intent.\n\nFailed - Conveys that the conversation with the user has failed. This can happen for various reasons, including the user does not provide an appropriate response to prompts from the service, or if the Lambda function fails to fulfill the intent.\n\nFulfilled - Conveys that the Lambda function has sucessfully fulfilled the intent.\n\nReadyForFulfillment - Conveys that the client has to fulfill the intent.\n\nslotToElicit -> (string)\n\nIf the dialogState is ElicitSlot , returns the name of the slot for which Amazon Lex is eliciting a value.\n\naudioStream -> (blob)\n\nThe audio version of the message to convey to the user.\n\nsessionId -> (string)\n\nA unique identifier for the session.\n\nactiveContexts -> (JSON)\n\nA list of active contexts for the session."
    }
  ],
  "service_description": "Description\n\nAmazon Lex provides both build and runtime endpoints. Each endpoint provides a set of operations (API). Your conversational bot uses the runtime API to understand user utterances (user input text or voice). For example, suppose a user says “I want pizza”, your bot sends this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in user conversation on behalf of the bot to elicit required information (slot values, such as pizza size and crust type), and then performs fulfillment activity (that you configured when you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For a list of build-time operations, see the build-time API, ."
}