{
  "service_name": "ddb",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ddb/index.html",
  "service_commands": [
    {
      "command_name": "put",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ddb/put.html",
      "command_description": "Description\n\nput puts one or more items into a table.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put\n<table-name>\n<items>\n[--condition <value> [<value>...]]\n",
      "command_options": [
        "<table-name>",
        "<items>",
        "[--condition <value> [<value>...]]"
      ],
      "command_options_description": "Options\n\ntable_name (string)\n\nThe name of your DynamoDB table.\n\nitems (string)\n\nOne or more items to put into the table, in YAML format.\n\n--condition (string)\n\nA condition that must be satisfied in order for a conditional put operation to succeed.\n\nFor more information, see Comparison Operator and Function Reference in the Amazon DynamoDB Developer Guide\n\nFor CLI specific syntax see aws help ddb-expressions\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_examples": "Examples\n\nTo add an item to a table\n\nThis example adds a new item to the MusicCollection table.\n\nCommand:\n\naws ddb put MusicCollection '{Artist: \"No One You Know\", SongTitle: \"Call Me Today\", AlbumTitle: \"Somewhat Famous\"}'\n\n\nTo add items to a table from a file\n\nThis example adds two new items from a file to the MusicCollection table.\n\nCommand:\n\naws ddb put MusicCollection file://items.json\n\n\nThe items to add to the table are in a JSON file, items.json. Here are the contents of that file:\n\n[\n    {\n        \"Artist\": \"No One You Know\",\n        \"SongTitle\": \"Call Me Today\",\n        \"AlbumTitle\": \"Somewhat Famous\"\n    },\n    {\n        \"Artist\": \"No One You Know\",\n        \"SongTitle\": \"Scared of My Shadow\",\n        \"AlbumTitle\": \"Blue Sky Blues\"\n    }\n]\n\n\nTo add items to a table from stdin\n\nThis example adds a new item to the MusicCollection table by reading it from stdin.\n\nCommand:\n\necho '{Artist: \"No One You Know\", SongTitle: \"Call Me Today\"}' \\\n    | aws ddb put MusicCollection -\n\n\nConditional Expressions\n\nThis example shows how to perform a one-line conditional operation. This put call to the table MusicCollection table will only succeed if the artist “Obscure Indie Band” does not exist in the table.\n\nCommand:\n\naws ddb put MusicCollection '{Artist: \"Obscure Indie Band\", SongTitle: \"Atlas\"}' \\\n    --condition 'attribute_not_exists(Artist)'\n\n\nIf the key already exists, you should see:\n\nOutput:\n\nA client error (ConditionalCheckFailedException) occurred when calling the PutItem operation: The conditional request failed\n"
    },
    {
      "command_name": "select",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ddb/select.html",
      "command_description": "Description\n\nselect searches a table or index.\n\nUnder the hood, this operation will use query if --key-condition is specified, or scan otherwise.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  select\n<table-name>\n[--index-name <value>]\n[--projection <value> [<value>...]]\n[--filter <value> [<value>...]]\n[--key-condition <value> [<value>...]]\n[--attributes <value>]\n[--consistent-read | --no-consistent-read]\n[--return-consumed-capacity | --no-return-consumed-capacity]\n[--starting-token <value>]\n[--max-items <value>]\n[--page-size <value>]\n",
      "command_options": [
        "<table-name>",
        "[--index-name <value>]",
        "[--projection <value> [<value>...]]",
        "[--filter <value> [<value>...]]",
        "[--key-condition <value> [<value>...]]",
        "[--attributes <value>]",
        "[--consistent-read | --no-consistent-read]",
        "[--return-consumed-capacity | --no-return-consumed-capacity]",
        "[--starting-token <value>]",
        "[--max-items <value>]",
        "[--page-size <value>]"
      ],
      "command_options_description": "Options\n\ntable_name (string)\n\nThe name of your DynamoDB table.\n\n--index-name (string)\n\nThe name of a secondary index to scan. This index can be any local secondary index or global secondary index.\n\n--projection (string)\n\nA string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If any of the requested attributes are not found, they will not appear in the result.\n\nFor more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide .\n\nFor CLI specific syntax see aws help ddb-expressions\n\n--filter (string)\n\nA string that contains conditions that DynamoDB applies after the operation, but before the data is returned to you. Items that do not satisfy the --filter criteria are not returned.\n\nNote\n\nA --filter is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.\n\nFor more information, see Filter Expressions in the Amazon DynamoDB Developer Guide .\n\nFor CLI specific syntax see aws help ddb-expressions\n\n--key-condition (string)\n\nThe condition that specifies the key value(s) for items to be retrieved. Must perform an equality test on a single partition key value.\n\nThe condition can optionally perform one of several comparison tests on a single sort key value. This allows select to retrieve one item with a given partition key value and sort key value, or several items that have the same partition key value but different sort key values.\n\nThe partition key equality test must be specified in the following format:\n\npartitionKeyName = :partitionkeyval\n\nIf you also want to provide a condition for the sort key, it must be combined using AND with the condition for the sort key.\n\nValid comparisons for the sort key condition are as follows:\n\nsortKeyName = :sortkeyval - true if the sort key value is equal to :sortkeyval .\n\nsortKeyName < :sortkeyval - true if the sort key value is less than :sortkeyval .\n\nsortKeyName <= :sortkeyval - true if the sort key value is less than or equal to :sortkeyval .\n\nsortKeyName > :sortkeyval - true if the sort key value is greater than :sortkeyval .\n\nsortKeyName >= :sortkeyval - true if the sort key value is greater than or equal to :sortkeyval .\n\nsortKeyName BETWEEN :sortkeyval1 AND :sortkeyval2 - true if the sort key value is greater than or equal to :sortkeyval1 , and less than or equal to :sortkeyval2 .\n\nbegins_with(sortKeyName, :sortkeyval) - true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.) Note that the function name begins_with is case-sensitive.\n\nFor CLI specific syntax see aws help ddb-expressions\n\n--attributes (string)\n\nThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\n\nALL - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index DynamoDB will fetch the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.\n\nALL_PROJECTED - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL.\n\nCOUNT - Returns the number of matching items, rather than the matching items themselves.\n\n--consistent-read | --no-consistent-read (boolean)\n\nDetermines the read consistency model: If set to --consistent-read , then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads. Strongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with --consistent-read , you will receive a ValidationException .\n\n--return-consumed-capacity | --no-return-consumed-capacity (boolean)\n\nWill include the aggregate ConsumedCapacity for the operation. If --index-name is also specified, then the ConsumedCapacity for each table and secondary index that was accessed will be returned.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_examples": "Examples\n\nTo scan an entire table\n\nThis example scans the entire MusicCollection table, and then narrows the results to songs by the artist “No One You Know”. For each item, only the album title and song title are returned.\n\nCommand:\n\naws ddb select MusicCollection --projection 'SongTitle, AlbumTitle' \\\n    --filter 'Artist = \"No One You Know\"'\n\n\nOutput:\n\nCount: 2\nItems:\n- SongTitle: \"Call Me Today\"\n  AlbumTitle: \"Somewhat Famous\"\n- SongTitle: \"Scared of My Shadow\"\n  AlbumTitle: \"Blue Sky Blues\"\nScannedCount: 3\n\n\nTo query for specific primary keys\n\nThis example queries items in the MusicCollection table. The table has a hash-and-range primary key (Artist and SongTitle), but this query only specifies the hash key value. It returns song titles by the artist named “No One You Know”.\n\nCommand:\n\naws ddb select MusicCollection --projection SongTitle \\\n    --key-condition 'Artist = \"No One You Know\"'\n\n\nOutput:\n\nCount: 2\nItems:\n- SongTitle: \"Call Me Today\"\n- SongTitle: \"Scared of My Shadow\"\nScannedCount: 2\n"
    }
  ],
  "service_description": "Description\n\nHigh level DynamoDB commands.\n\nSee ‘aws help’ for descriptions of global parameters."
}