{
  "service_name": "dynamodb",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/index.html",
  "service_commands": [
    {
      "command_name": "batch-execute-statement",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/batch-execute-statement.html",
      "command_description": "Description\n\nThis operation allows you to perform batch reads and writes on data stored in DynamoDB, using PartiQL.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-execute-statement\n--statements <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--statements <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--statements (list)\n\nThe list of PartiQL statements representing the batch to run.\n\n(structure)\n\nA PartiQL batch statement request.\n\nStatement -> (string)\n\nA valid PartiQL statement.\n\nParameters -> (list)\n\nThe parameters associated with a PartiQL statement in the batch request.\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nConsistentRead -> (boolean)\n\nThe read consistency of the PartiQL batch request.\n\nJSON Syntax:\n\n[\n  {\n    \"Statement\": \"string\",\n    \"Parameters\": [\n      {\n        \"S\": \"string\",\n        \"N\": \"string\",\n        \"B\": blob,\n        \"SS\": [\"string\", ...],\n        \"NS\": [\"string\", ...],\n        \"BS\": [blob, ...],\n        \"M\": {\"string\": {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n          ...},\n        \"L\": [\n          {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n          ...\n        ],\n        \"NULL\": true|false,\n        \"BOOL\": true|false\n      }\n      ...\n    ],\n    \"ConsistentRead\": true|false\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nResponses -> (list)\n\nThe response to each PartiQL statement in the batch.\n\n(structure)\n\nA PartiQL batch statement response..\n\nError -> (structure)\n\nThe error associated with a failed PartiQL batch statement.\n\nCode -> (string)\n\nThe error code associated with the failed PartiQL batch statement.\n\nMessage -> (string)\n\nThe error message associated with the PartiQL batch resposne.\n\nTableName -> (string)\n\nThe table name associated with a failed PartiQL batch statement.\n\nItem -> (map)\n\nA DynamoDB item associated with a BatchStatementResponse\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true"
    },
    {
      "command_name": "batch-get-item",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/batch-get-item.html",
      "command_description": "Description\n\nThe BatchGetItem operation returns the attributes of one or more items from one or more tables. You identify requested items by primary key.\n\nA single operation can retrieve up to 16 MB of data, which can contain as many as 100 items. BatchGetItem returns a partial result if the response size limit is exceeded, the table’s provisioned throughput is exceeded, or an internal processing failure occurs. If a partial result is returned, the operation returns a value for UnprocessedKeys . You can use this value to retry the operation starting with the next item to get.\n\nWarning\n\nIf you request more than 100 items, BatchGetItem returns a ValidationException with the message “Too many items requested for the BatchGetItem call.”\n\nFor example, if you ask to retrieve 100 items, but each individual item is 300 KB in size, the system returns 52 items (so as not to exceed the 16 MB limit). It also returns an appropriate UnprocessedKeys value so you can get the next page of results. If desired, your application can include its own logic to assemble the pages of results into one dataset.\n\nIf none of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then BatchGetItem returns a ProvisionedThroughputExceededException . If at least one of the items is successfully processed, then BatchGetItem completes successfully, while returning the keys of the unread items in UnprocessedKeys .\n\nWarning\n\nIf DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, we strongly recommend that you use an exponential backoff algorithm . If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.\n\nFor more information, see Batch Operations and Error Handling in the Amazon DynamoDB Developer Guide .\n\nBy default, BatchGetItem performs eventually consistent reads on every table in the request. If you want strongly consistent reads instead, you can set ConsistentRead to true for any or all tables.\n\nIn order to minimize response latency, BatchGetItem retrieves items in parallel.\n\nWhen designing your application, keep in mind that DynamoDB does not return items in any particular order. To help parse the response by item, include the primary key values for the items in your request in the ProjectionExpression parameter.\n\nIf a requested item does not exist, it is not returned in the result. Requests for nonexistent items consume the minimum read capacity units according to the type of read. For more information, see Working with Tables in the Amazon DynamoDB Developer Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-get-item\n--request-items <value>\n[--return-consumed-capacity <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--request-items <value>",
        "[--return-consumed-capacity <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--request-items (map)\n\nA map of one or more table names and, for each table, a map that describes one or more items to retrieve from that table. Each table name can be used only once per BatchGetItem request.\n\nEach element in the map of items to retrieve consists of the following:\n\nConsistentRead - If true , a strongly consistent read is used; if false (the default), an eventually consistent read is used.\n\nExpressionAttributeNames - One or more substitution tokens for attribute names in the ProjectionExpression parameter. The following are some use cases for using ExpressionAttributeNames :\n\nTo access an attribute whose name conflicts with a DynamoDB reserved word.\n\nTo create a placeholder for repeating occurrences of an attribute name in an expression.\n\nTo prevent special characters in an attribute name from being misinterpreted in an expression.\n\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\n\nPercentile\n\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\n\n{\"#P\":\"Percentile\"}\n\nYou could then use this substitution in an expression, as in this example:\n\n#P = :val\n\nNote\n\nTokens that begin with the : character are expression attribute values , which are placeholders for the actual value at runtime.\n\nFor more information about expression attribute names, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide .\n\nKeys - An array of primary key attribute values that define specific items in the table. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide the partition key value. For a composite key, you must provide both the partition key value and the sort key value.\n\nProjectionExpression - A string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result. For more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide .\n\nAttributesToGet - This is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents a set of primary keys and, for each key, the attributes to retrieve from the table.\n\nFor each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide the partition key. For a composite primary key, you must provide both the partition key and the sort key.\n\nKeys -> (list)\n\nThe primary key attribute values that define the items and the attributes associated with the items.\n\n(map)\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nAttributesToGet -> (list)\n\nThis is a legacy parameter. Use ProjectionExpression instead. For more information, see Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide .\n\n(string)\n\nConsistentRead -> (boolean)\n\nThe consistency of a read operation. If set to true , then a strongly consistent read is used; otherwise, an eventually consistent read is used.\n\nProjectionExpression -> (string)\n\nA string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the ProjectionExpression must be separated by commas.\n\nIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\n\nFor more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide .\n\nExpressionAttributeNames -> (map)\n\nOne or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\n\nTo access an attribute whose name conflicts with a DynamoDB reserved word.\n\nTo create a placeholder for repeating occurrences of an attribute name in an expression.\n\nTo prevent special characters in an attribute name from being misinterpreted in an expression.\n\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\n\nPercentile\n\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\n\n{\"#P\":\"Percentile\"}\n\nYou could then use this substitution in an expression, as in this example:\n\n#P = :val\n\nNote\n\nTokens that begin with the : character are expression attribute values , which are placeholders for the actual value at runtime.\n\nFor more information on expression attribute names, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nJSON Syntax:\n\n{\"string\": {\n      \"Keys\": [\n        {\"string\": {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": {\n                    \"S\": \"string\",\n                    \"N\": \"string\",\n                    \"B\": blob,\n                    \"SS\": [\"string\", ...],\n                    \"NS\": [\"string\", ...],\n                    \"BS\": [blob, ...],\n                    \"M\": {\"string\": { ... recursive ... }\n                      ...},\n                    \"L\": [\n                      { ... recursive ... }\n                      ...\n                    ],\n                    \"NULL\": true|false,\n                    \"BOOL\": true|false\n                  }\n                ...},\n              \"L\": [\n                {\n                  \"S\": \"string\",\n                  \"N\": \"string\",\n                  \"B\": blob,\n                  \"SS\": [\"string\", ...],\n                  \"NS\": [\"string\", ...],\n                  \"BS\": [blob, ...],\n                  \"M\": {\"string\": { ... recursive ... }\n                    ...},\n                  \"L\": [\n                    { ... recursive ... }\n                    ...\n                  ],\n                  \"NULL\": true|false,\n                  \"BOOL\": true|false\n                }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n          ...}\n        ...\n      ],\n      \"AttributesToGet\": [\"string\", ...],\n      \"ConsistentRead\": true|false,\n      \"ProjectionExpression\": \"string\",\n      \"ExpressionAttributeNames\": {\"string\": \"string\"\n        ...}\n    }\n  ...}\n\n\n--return-consumed-capacity (string)\n\nDetermines the level of detail about provisioned throughput consumption that is returned in the response:\n\nINDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem , do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).\n\nTOTAL - The response includes only the aggregate ConsumedCapacity for the operation.\n\nNONE - No ConsumedCapacity details are included in the response.\n\nPossible values:\n\nINDEXES\n\nTOTAL\n\nNONE\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nResponses -> (map)\n\nA map of table name to a list of items. Each object in Responses consists of a table name, along with a map of attribute data consisting of the data type and attribute value.\n\nkey -> (string)\n\nvalue -> (list)\n\n(map)\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nUnprocessedKeys -> (map)\n\nA map of tables and their respective keys that were not processed with the current response. The UnprocessedKeys value is in the same form as RequestItems , so the value can be provided directly to a subsequent BatchGetItem operation. For more information, see RequestItems in the Request Parameters section.\n\nEach element consists of:\n\nKeys - An array of primary key attribute values that define specific items in the table.\n\nProjectionExpression - One or more attributes to be retrieved from the table or index. By default, all attributes are returned. If a requested attribute is not found, it does not appear in the result.\n\nConsistentRead - The consistency of a read operation. If set to true , then a strongly consistent read is used; otherwise, an eventually consistent read is used.\n\nIf there are no unprocessed keys remaining, the response contains an empty UnprocessedKeys map.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents a set of primary keys and, for each key, the attributes to retrieve from the table.\n\nFor each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide the partition key. For a composite primary key, you must provide both the partition key and the sort key.\n\nKeys -> (list)\n\nThe primary key attribute values that define the items and the attributes associated with the items.\n\n(map)\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nAttributesToGet -> (list)\n\nThis is a legacy parameter. Use ProjectionExpression instead. For more information, see Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide .\n\n(string)\n\nConsistentRead -> (boolean)\n\nThe consistency of a read operation. If set to true , then a strongly consistent read is used; otherwise, an eventually consistent read is used.\n\nProjectionExpression -> (string)\n\nA string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the ProjectionExpression must be separated by commas.\n\nIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\n\nFor more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide .\n\nExpressionAttributeNames -> (map)\n\nOne or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\n\nTo access an attribute whose name conflicts with a DynamoDB reserved word.\n\nTo create a placeholder for repeating occurrences of an attribute name in an expression.\n\nTo prevent special characters in an attribute name from being misinterpreted in an expression.\n\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\n\nPercentile\n\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\n\n{\"#P\":\"Percentile\"}\n\nYou could then use this substitution in an expression, as in this example:\n\n#P = :val\n\nNote\n\nTokens that begin with the : character are expression attribute values , which are placeholders for the actual value at runtime.\n\nFor more information on expression attribute names, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nConsumedCapacity -> (list)\n\nThe read capacity units consumed by the entire BatchGetItem operation.\n\nEach element consists of:\n\nTableName - The table that consumed the provisioned throughput.\n\nCapacityUnits - The total number of capacity units consumed.\n\n(structure)\n\nThe capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the request asked for it. For more information, see Provisioned Throughput in the Amazon DynamoDB Developer Guide .\n\nTableName -> (string)\n\nThe name of the table that was affected by the operation.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed by the operation.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed by the operation.\n\nTable -> (structure)\n\nThe amount of throughput consumed on the table affected by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nLocalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each local index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nGlobalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each global index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.",
      "command_examples": "Examples\n\nTo retrieve multiple items from a table\n\nThe following batch-get-items example reads multiple items from the MusicCollection table using a batch of three GetItem requests, and requests the number of read capacity units consumed by the operation. The command returns only the AlbumTitle attribute.\n\naws dynamodb batch-get-item \\\n    --request-items file://request-items.json \\\n    --return-consumed-capacity TOTAL\n\n\nContents of request-items.json:\n\n{\n    \"MusicCollection\": {\n        \"Keys\": [\n            {\n                \"Artist\": {\"S\": \"No One You Know\"},\n                \"SongTitle\": {\"S\": \"Call Me Today\"}\n            },\n            {\n                \"Artist\": {\"S\": \"Acme Band\"},\n                \"SongTitle\": {\"S\": \"Happy Day\"}\n            },\n            {\n                \"Artist\": {\"S\": \"No One You Know\"},\n                \"SongTitle\": {\"S\": \"Scared of My Shadow\"}\n            }\n        ],\n        \"ProjectionExpression\":\"AlbumTitle\"\n    }\n}\n\n\nOutput:\n\n{\n    \"Responses\": {\n        \"MusicCollection\": [\n            {\n                \"AlbumTitle\": {\n                    \"S\": \"Somewhat Famous\"\n                }\n            },\n            {\n                \"AlbumTitle\": {\n                    \"S\": \"Blue Sky Blues\"\n                }\n            },\n            {\n                \"AlbumTitle\": {\n                    \"S\": \"Louder Than Ever\"\n                }\n            }\n        ]\n    },\n    \"UnprocessedKeys\": {},\n    \"ConsumedCapacity\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"CapacityUnits\": 1.5\n        }\n    ]\n}\n\n\nFor more information, see Batch Operations in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "batch-write-item",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/batch-write-item.html",
      "command_description": "Description\n\nThe BatchWriteItem operation puts or deletes multiple items in one or more tables. A single call to BatchWriteItem can write up to 16 MB of data, which can comprise as many as 25 put or delete requests. Individual items to be written can be as large as 400 KB.\n\nNote\n\nBatchWriteItem cannot update items. To update items, use the UpdateItem action.\n\nThe individual PutItem and DeleteItem operations specified in BatchWriteItem are atomic; however BatchWriteItem as a whole is not. If any requested operations fail because the table’s provisioned throughput is exceeded or an internal processing failure occurs, the failed operations are returned in the UnprocessedItems response parameter. You can investigate and optionally resend the requests. Typically, you would call BatchWriteItem in a loop. Each iteration would check for unprocessed items and submit a new BatchWriteItem request with those unprocessed items until all items have been processed.\n\nIf none of the items can be processed due to insufficient provisioned throughput on all of the tables in the request, then BatchWriteItem returns a ProvisionedThroughputExceededException .\n\nWarning\n\nIf DynamoDB returns any unprocessed items, you should retry the batch operation on those items. However, we strongly recommend that you use an exponential backoff algorithm . If you retry the batch operation immediately, the underlying read or write requests can still fail due to throttling on the individual tables. If you delay the batch operation using exponential backoff, the individual requests in the batch are much more likely to succeed.\n\nFor more information, see Batch Operations and Error Handling in the Amazon DynamoDB Developer Guide .\n\nWith BatchWriteItem , you can efficiently write or delete large amounts of data, such as from Amazon EMR, or copy data from another database into DynamoDB. In order to improve performance with these large-scale operations, BatchWriteItem does not behave in the same way as individual PutItem and DeleteItem calls would. For example, you cannot specify conditions on individual put and delete requests, and BatchWriteItem does not return deleted items in the response.\n\nIf you use a programming language that supports concurrency, you can use threads to write items in parallel. Your application must include the necessary logic to manage the threads. With languages that don’t support threading, you must update or delete the specified items one at a time. In both situations, BatchWriteItem performs the specified put and delete operations in parallel, giving you the power of the thread pool approach without having to introduce complexity into your application.\n\nParallel processing reduces latency, but each specified put and delete request consumes the same number of write capacity units whether it is processed in parallel or not. Delete operations on nonexistent items consume one write capacity unit.\n\nIf one or more of the following is true, DynamoDB rejects the entire batch write operation:\n\nOne or more tables specified in the BatchWriteItem request does not exist.\n\nPrimary key attributes specified on an item in the request do not match those in the corresponding table’s primary key schema.\n\nYou try to perform multiple operations on the same item in the same BatchWriteItem request. For example, you cannot put and delete the same item in the same BatchWriteItem request.\n\nYour request contains at least two items with identical hash and range keys (which essentially is two put operations).\n\nThere are more than 25 requests in the batch.\n\nAny individual item in a batch exceeds 400 KB.\n\nThe total request size exceeds 16 MB.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-write-item\n--request-items <value>\n[--return-consumed-capacity <value>]\n[--return-item-collection-metrics <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--request-items <value>",
        "[--return-consumed-capacity <value>]",
        "[--return-item-collection-metrics <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--request-items (map)\n\nA map of one or more table names and, for each table, a list of operations to be performed (DeleteRequest or PutRequest ). Each element in the map consists of the following:\n\nDeleteRequest - Perform a DeleteItem operation on the specified item. The item to be deleted is identified by a Key subelement:\n\nKey - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value. For each primary key, you must provide all of the key attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.\n\nPutRequest - Perform a PutItem operation on the specified item. The item to be put is identified by an Item subelement:\n\nItem - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values are rejected with a ValidationException exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table’s attribute definition.\n\nkey -> (string)\n\nvalue -> (list)\n\n(structure)\n\nRepresents an operation to perform - either DeleteItem or PutItem . You can only request one of these operations, not both, in a single WriteRequest . If you do need to perform both of these operations, you need to provide two separate WriteRequest objects.\n\nPutRequest -> (structure)\n\nA request to perform a PutItem operation.\n\nItem -> (map)\n\nA map of attribute name to attribute values, representing the primary key of an item to be processed by PutItem . All of the table’s primary key attributes must be specified, and their data types must match those of the table’s key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nDeleteRequest -> (structure)\n\nA request to perform a DeleteItem operation.\n\nKey -> (map)\n\nA map of attribute name to attribute values, representing the primary key of the item to delete. All of the table’s primary key attributes must be specified, and their data types must match those of the table’s key schema.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": [\n      {\n        \"PutRequest\": {\n          \"Item\": {\"string\": {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": {\n                      \"S\": \"string\",\n                      \"N\": \"string\",\n                      \"B\": blob,\n                      \"SS\": [\"string\", ...],\n                      \"NS\": [\"string\", ...],\n                      \"BS\": [blob, ...],\n                      \"M\": {\"string\": { ... recursive ... }\n                        ...},\n                      \"L\": [\n                        { ... recursive ... }\n                        ...\n                      ],\n                      \"NULL\": true|false,\n                      \"BOOL\": true|false\n                    }\n                  ...},\n                \"L\": [\n                  {\n                    \"S\": \"string\",\n                    \"N\": \"string\",\n                    \"B\": blob,\n                    \"SS\": [\"string\", ...],\n                    \"NS\": [\"string\", ...],\n                    \"BS\": [blob, ...],\n                    \"M\": {\"string\": { ... recursive ... }\n                      ...},\n                    \"L\": [\n                      { ... recursive ... }\n                      ...\n                    ],\n                    \"NULL\": true|false,\n                    \"BOOL\": true|false\n                  }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n            ...}\n        },\n        \"DeleteRequest\": {\n          \"Key\": {\"string\": {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": {\n                      \"S\": \"string\",\n                      \"N\": \"string\",\n                      \"B\": blob,\n                      \"SS\": [\"string\", ...],\n                      \"NS\": [\"string\", ...],\n                      \"BS\": [blob, ...],\n                      \"M\": {\"string\": { ... recursive ... }\n                        ...},\n                      \"L\": [\n                        { ... recursive ... }\n                        ...\n                      ],\n                      \"NULL\": true|false,\n                      \"BOOL\": true|false\n                    }\n                  ...},\n                \"L\": [\n                  {\n                    \"S\": \"string\",\n                    \"N\": \"string\",\n                    \"B\": blob,\n                    \"SS\": [\"string\", ...],\n                    \"NS\": [\"string\", ...],\n                    \"BS\": [blob, ...],\n                    \"M\": {\"string\": { ... recursive ... }\n                      ...},\n                    \"L\": [\n                      { ... recursive ... }\n                      ...\n                    ],\n                    \"NULL\": true|false,\n                    \"BOOL\": true|false\n                  }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n            ...}\n        }\n      }\n      ...\n    ]\n  ...}\n\n\n--return-consumed-capacity (string)\n\nDetermines the level of detail about provisioned throughput consumption that is returned in the response:\n\nINDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem , do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).\n\nTOTAL - The response includes only the aggregate ConsumedCapacity for the operation.\n\nNONE - No ConsumedCapacity details are included in the response.\n\nPossible values:\n\nINDEXES\n\nTOTAL\n\nNONE\n\n--return-item-collection-metrics (string)\n\nDetermines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.\n\nPossible values:\n\nSIZE\n\nNONE\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nUnprocessedItems -> (map)\n\nA map of tables and requests against those tables that were not processed. The UnprocessedItems value is in the same form as RequestItems , so you can provide this value directly to a subsequent BatchGetItem operation. For more information, see RequestItems in the Request Parameters section.\n\nEach UnprocessedItems entry consists of a table name and, for that table, a list of operations to perform (DeleteRequest or PutRequest ).\n\nDeleteRequest - Perform a DeleteItem operation on the specified item. The item to be deleted is identified by a Key subelement:\n\nKey - A map of primary key attribute values that uniquely identify the item. Each entry in this map consists of an attribute name and an attribute value.\n\nPutRequest - Perform a PutItem operation on the specified item. The item to be put is identified by an Item subelement:\n\nItem - A map of attributes and their values. Each entry in this map consists of an attribute name and an attribute value. Attribute values must not be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests that contain empty values will be rejected with a ValidationException exception. If you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table’s attribute definition.\n\nIf there are no unprocessed items remaining, the response contains an empty UnprocessedItems map.\n\nkey -> (string)\n\nvalue -> (list)\n\n(structure)\n\nRepresents an operation to perform - either DeleteItem or PutItem . You can only request one of these operations, not both, in a single WriteRequest . If you do need to perform both of these operations, you need to provide two separate WriteRequest objects.\n\nPutRequest -> (structure)\n\nA request to perform a PutItem operation.\n\nItem -> (map)\n\nA map of attribute name to attribute values, representing the primary key of an item to be processed by PutItem . All of the table’s primary key attributes must be specified, and their data types must match those of the table’s key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nDeleteRequest -> (structure)\n\nA request to perform a DeleteItem operation.\n\nKey -> (map)\n\nA map of attribute name to attribute values, representing the primary key of the item to delete. All of the table’s primary key attributes must be specified, and their data types must match those of the table’s key schema.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nItemCollectionMetrics -> (map)\n\nA list of tables that were processed by BatchWriteItem and, for each table, information about any item collections that were affected by individual DeleteItem or PutItem operations.\n\nEach entry consists of the following subelements:\n\nItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item.\n\nSizeEstimateRangeGB - An estimate of item collection size, expressed in GB. This is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on the table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\n\nkey -> (string)\n\nvalue -> (list)\n\n(structure)\n\nInformation about item collections, if any, that were affected by the operation. ItemCollectionMetrics is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.\n\nItemCollectionKey -> (map)\n\nThe partition key value of the item collection. This value is the same as the partition key value of the item.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nSizeEstimateRangeGB -> (list)\n\nAn estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\n\nThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\n\n(double)\n\nConsumedCapacity -> (list)\n\nThe capacity units consumed by the entire BatchWriteItem operation.\n\nEach element consists of:\n\nTableName - The table that consumed the provisioned throughput.\n\nCapacityUnits - The total number of capacity units consumed.\n\n(structure)\n\nThe capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the request asked for it. For more information, see Provisioned Throughput in the Amazon DynamoDB Developer Guide .\n\nTableName -> (string)\n\nThe name of the table that was affected by the operation.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed by the operation.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed by the operation.\n\nTable -> (structure)\n\nThe amount of throughput consumed on the table affected by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nLocalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each local index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nGlobalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each global index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.",
      "command_examples": "Examples\n\nTo add multiple items to a table\n\nThe following batch-write-item example adds three new items to the MusicCollection table using a batch of three PutItem requests. It also requests information about the number of write capacity units consumed by the operation and any item collections modified by the operation.\n\naws dynamodb batch-write-item \\\n    --request-items file://request-items.json \\\n    --return-consumed-capacity INDEXES \\\n    --return-item-collection-metrics SIZE\n\n\nContents of request-items.json:\n\n{\n    \"MusicCollection\": [\n        {\n            \"PutRequest\": {\n                \"Item\": {\n                    \"Artist\": {\"S\": \"No One You Know\"},\n                    \"SongTitle\": {\"S\": \"Call Me Today\"},\n                    \"AlbumTitle\": {\"S\": \"Somewhat Famous\"}\n                }\n            }\n        },\n        {\n            \"PutRequest\": {\n                \"Item\": {\n                    \"Artist\": {\"S\": \"Acme Band\"},\n                    \"SongTitle\": {\"S\": \"Happy Day\"},\n                    \"AlbumTitle\": {\"S\": \"Songs About Life\"}\n                }\n            }\n        },\n        {\n            \"PutRequest\": {\n                \"Item\": {\n                    \"Artist\": {\"S\": \"No One You Know\"},\n                    \"SongTitle\": {\"S\": \"Scared of My Shadow\"},\n                    \"AlbumTitle\": {\"S\": \"Blue Sky Blues\"}\n                }\n            }\n        }\n    ]\n}\n\n\nOutput:\n\n{\n    \"UnprocessedItems\": {},\n    \"ItemCollectionMetrics\": {\n        \"MusicCollection\": [\n            {\n                \"ItemCollectionKey\": {\n                    \"Artist\": {\n                        \"S\": \"No One You Know\"\n                    }\n                },\n                \"SizeEstimateRangeGB\": [\n                    0.0,\n                    1.0\n                ]\n            },\n            {\n                \"ItemCollectionKey\": {\n                    \"Artist\": {\n                        \"S\": \"Acme Band\"\n                    }\n                },\n                \"SizeEstimateRangeGB\": [\n                    0.0,\n                    1.0\n                ]\n            }\n        ]\n    },\n    \"ConsumedCapacity\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"CapacityUnits\": 6.0,\n            \"Table\": {\n                \"CapacityUnits\": 3.0\n            },\n            \"LocalSecondaryIndexes\": {\n                \"AlbumTitleIndex\": {\n                    \"CapacityUnits\": 3.0\n                }\n            }\n        }\n    ]\n}\n\n\nFor more information, see Batch Operations in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "create-backup",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/create-backup.html",
      "command_description": "Description\n\nCreates a backup for an existing table.\n\nEach time you create an on-demand backup, the entire table data is backed up. There is no limit to the number of on-demand backups that can be taken.\n\nWhen you create an on-demand backup, a time marker of the request is cataloged, and the backup is created asynchronously, by applying all changes until the time of the request to the last full table snapshot. Backup requests are processed instantaneously and become available for restore within minutes.\n\nYou can call CreateBackup at a maximum rate of 50 times per second.\n\nAll backups in DynamoDB work without consuming any provisioned throughput on the table.\n\nIf you submit a backup request on 2018-12-14 at 14:25:00, the backup is guaranteed to contain all data committed to the table up to 14:24:00, and data committed after 14:26:00 will not be. The backup might contain data modifications made between 14:24:00 and 14:26:00. On-demand backup does not support causal consistency.\n\nAlong with data, the following are also included on the backups:\n\nGlobal secondary indexes (GSIs)\n\nLocal secondary indexes (LSIs)\n\nStreams\n\nProvisioned read and write capacity\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-backup\n--table-name <value>\n--backup-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "--backup-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table.\n\n--backup-name (string)\n\nSpecified name for the backup.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nBackupDetails -> (structure)\n\nContains the details of the backup created for the table.\n\nBackupArn -> (string)\n\nARN associated with the backup.\n\nBackupName -> (string)\n\nName of the requested backup.\n\nBackupSizeBytes -> (long)\n\nSize of the backup in bytes.\n\nBackupStatus -> (string)\n\nBackup can be in one of the following states: CREATING, ACTIVE, DELETED.\n\nBackupType -> (string)\n\nBackupType:\n\nUSER - You create and manage these using the on-demand backup feature.\n\nSYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted table to the state it was in just before the point of deletion.\n\nAWS_BACKUP - On-demand backup created by you from AWS Backup service.\n\nBackupCreationDateTime -> (timestamp)\n\nTime at which the backup was created. This is the request time of the backup.\n\nBackupExpiryDateTime -> (timestamp)\n\nTime at which the automatic on-demand backup created by DynamoDB will expire. This SYSTEM on-demand backup expires automatically 35 days after its creation.",
      "command_examples": "Examples\n\nTo create a backup for an existing DynamoDB table\n\nThe following create-backup example creates a backup of the MusicCollection table.\n\naws dynamodb create-backup \\\n    --table-name MusicCollection \\\n    --backup-name MusicCollectionBackup\n\n\nOutput:\n\n{\n    \"BackupDetails\": {\n        \"BackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01576616366715-b4e58d3a\",\n        \"BackupName\": \"MusicCollectionBackup\",\n        \"BackupSizeBytes\": 0,\n        \"BackupStatus\": \"CREATING\",\n        \"BackupType\": \"USER\",\n        \"BackupCreationDateTime\": 1576616366.715\n    }\n}\n\n\nFor more information, see On-Demand Backup and Restore for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "create-global-table",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/create-global-table.html",
      "command_description": "Description\n\nCreates a global table from an existing table. A global table creates a replication relationship between two or more DynamoDB tables with the same table name in the provided Regions.\n\nNote\n\nThis operation only applies to Version 2017.11.29 of global tables.\n\nIf you want to add a new replica table to a global table, each of the following conditions must be true:\n\nThe table must have the same primary key as all of the other replicas.\n\nThe table must have the same name as all of the other replicas.\n\nThe table must have DynamoDB Streams enabled, with the stream containing both the new and the old images of the item.\n\nNone of the replica tables in the global table can contain any data.\n\nIf global secondary indexes are specified, then the following conditions must also be met:\n\nThe global secondary indexes must have the same name.\n\nThe global secondary indexes must have the same hash key and sort key (if present).\n\nIf local secondary indexes are specified, then the following conditions must also be met:\n\nThe local secondary indexes must have the same name.\n\nThe local secondary indexes must have the same hash key and sort key (if present).\n\nWarning\n\nWrite capacity settings should be set consistently across your replica tables and secondary indexes. DynamoDB strongly recommends enabling auto scaling to manage the write capacity settings for all of your global tables replicas and indexes.\n\nIf you prefer to manage write capacity settings manually, you should provision equal replicated write capacity units to your replica tables. You should also provision equal replicated write capacity units to matching secondary indexes across your global table.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-global-table\n--global-table-name <value>\n--replication-group <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--global-table-name <value>",
        "--replication-group <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--global-table-name (string)\n\nThe global table name.\n\n--replication-group (list)\n\nThe Regions where the global table needs to be created.\n\n(structure)\n\nRepresents the properties of a replica.\n\nRegionName -> (string)\n\nThe Region where the replica needs to be created.\n\nShorthand Syntax:\n\nRegionName=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"RegionName\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nGlobalTableDescription -> (structure)\n\nContains the details of the global table.\n\nReplicationGroup -> (list)\n\nThe Regions where the global table has replicas.\n\n(structure)\n\nContains the details of the replica.\n\nRegionName -> (string)\n\nThe name of the Region.\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.\n\nREGION_DISABLED - The replica is inaccessible because the AWS Region has been disabled.\n\nNote\n\nIf the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table is inaccessible.\n\nNote\n\nIf the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nReplicaStatusDescription -> (string)\n\nDetailed information about the replica status.\n\nReplicaStatusPercentProgress -> (string)\n\nSpecifies the progress of a Create, Update, or Delete action on the replica as a percentage.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not described, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nIf not described, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nReplicaInaccessibleDateTime -> (timestamp)\n\nThe time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.\n\nGlobalTableArn -> (string)\n\nThe unique identifier of the global table.\n\nCreationDateTime -> (timestamp)\n\nThe creation time of the global table.\n\nGlobalTableStatus -> (string)\n\nThe current state of the global table:\n\nCREATING - The global table is being created.\n\nUPDATING - The global table is being updated.\n\nDELETING - The global table is being deleted.\n\nACTIVE - The global table is ready for use.\n\nGlobalTableName -> (string)\n\nThe global table name.",
      "command_examples": "Examples\n\nTo create a global table\n\nThe following create-global-table example creates a global table from two identical tables in the specified, separate AWS Regions.\n\naws dynamodb create-global-table \\\n    --global-table-name MusicCollection \\\n    --replication-group RegionName=us-east-2 RegionName=us-east-1 \\\n    --region us-east-2\n\n\nOutput:\n\n{\n    \"GlobalTableDescription\": {\n        \"ReplicationGroup\": [\n            {\n                \"RegionName\": \"us-east-2\"\n            },\n            {\n                \"RegionName\": \"us-east-1\"\n            }\n        ],\n        \"GlobalTableArn\": \"arn:aws:dynamodb::123456789012:global-table/MusicCollection\",\n        \"CreationDateTime\": 1576625818.532,\n        \"GlobalTableStatus\": \"CREATING\",\n        \"GlobalTableName\": \"MusicCollection\"\n    }\n}\n\n\nFor more information, see DynamoDB Global Tables in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "create-table",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/create-table.html",
      "command_description": "Description\n\nThe CreateTable operation adds a new table to your account. In an AWS account, table names must be unique within each Region. That is, you can have two tables with same name if you create the tables in different Regions.\n\nCreateTable is an asynchronous operation. Upon receiving a CreateTable request, DynamoDB immediately returns a response with a TableStatus of CREATING . After the table is created, DynamoDB sets the TableStatus to ACTIVE . You can perform read and write operations only on an ACTIVE table.\n\nYou can optionally define secondary indexes on the new table, as part of the CreateTable operation. If you want to create multiple tables with secondary indexes on them, you must create the tables sequentially. Only one table with secondary indexes can be in the CREATING state at any given time.\n\nYou can use the DescribeTable action to check the table status.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-table\n--attribute-definitions <value>\n--table-name <value>\n--key-schema <value>\n[--local-secondary-indexes <value>]\n[--global-secondary-indexes <value>]\n[--billing-mode <value>]\n[--provisioned-throughput <value>]\n[--stream-specification <value>]\n[--sse-specification <value>]\n[--tags <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--attribute-definitions <value>",
        "--table-name <value>",
        "--key-schema <value>",
        "[--local-secondary-indexes <value>]",
        "[--global-secondary-indexes <value>]",
        "[--billing-mode <value>]",
        "[--provisioned-throughput <value>]",
        "[--stream-specification <value>]",
        "[--sse-specification <value>]",
        "[--tags <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--attribute-definitions (list)\n\nAn array of attributes that describe the key schema for the table and indexes.\n\n(structure)\n\nRepresents an attribute for describing the key schema for the table and indexes.\n\nAttributeName -> (string)\n\nA name for the attribute.\n\nAttributeType -> (string)\n\nThe data type for the attribute, where:\n\nS - the attribute is of type String\n\nN - the attribute is of type Number\n\nB - the attribute is of type Binary\n\nShorthand Syntax:\n\nAttributeName=string,AttributeType=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"AttributeName\": \"string\",\n    \"AttributeType\": \"S\"|\"N\"|\"B\"\n  }\n  ...\n]\n\n\n--table-name (string)\n\nThe name of the table to create.\n\n--key-schema (list)\n\nSpecifies the attributes that make up the primary key for a table or an index. The attributes in KeySchema must also be defined in the AttributeDefinitions array. For more information, see Data Model in the Amazon DynamoDB Developer Guide .\n\nEach KeySchemaElement in the array is composed of:\n\nAttributeName - The name of this key attribute.\n\nKeyType - The role that the key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from the DynamoDB usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nFor a simple primary key (partition key), you must provide exactly one element with a KeyType of HASH .\n\nFor a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a KeyType of HASH , and the second element must have a KeyType of RANGE .\n\nFor more information, see Working with Tables in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nShorthand Syntax:\n\nAttributeName=string,KeyType=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"AttributeName\": \"string\",\n    \"KeyType\": \"HASH\"|\"RANGE\"\n  }\n  ...\n]\n\n\n--local-secondary-indexes (list)\n\nOne or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained.\n\nEach local secondary index in the array includes the following:\n\nIndexName - The name of the local secondary index. Must be unique only for this table.\n\nKeySchema - Specifies the key schema for the local secondary index. The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes .\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(structure)\n\nRepresents the properties of a local secondary index.\n\nIndexName -> (string)\n\nThe name of the local secondary index. The name must be unique among all other indexes on this table.\n\nKeySchema -> (list)\n\nThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nShorthand Syntax:\n\nIndexName=string,KeySchema=[{AttributeName=string,KeyType=string},{AttributeName=string,KeyType=string}],Projection={ProjectionType=string,NonKeyAttributes=[string,string]} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"IndexName\": \"string\",\n    \"KeySchema\": [\n      {\n        \"AttributeName\": \"string\",\n        \"KeyType\": \"HASH\"|\"RANGE\"\n      }\n      ...\n    ],\n    \"Projection\": {\n      \"ProjectionType\": \"ALL\"|\"KEYS_ONLY\"|\"INCLUDE\",\n      \"NonKeyAttributes\": [\"string\", ...]\n    }\n  }\n  ...\n]\n\n\n--global-secondary-indexes (list)\n\nOne or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following:\n\nIndexName - The name of the global secondary index. Must be unique only for this table.\n\nKeySchema - Specifies the key schema for the global secondary index.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes .\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 100. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index. The name must be unique among all other indexes on this table.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nShorthand Syntax:\n\nIndexName=string,KeySchema=[{AttributeName=string,KeyType=string},{AttributeName=string,KeyType=string}],Projection={ProjectionType=string,NonKeyAttributes=[string,string]},ProvisionedThroughput={ReadCapacityUnits=long,WriteCapacityUnits=long} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"IndexName\": \"string\",\n    \"KeySchema\": [\n      {\n        \"AttributeName\": \"string\",\n        \"KeyType\": \"HASH\"|\"RANGE\"\n      }\n      ...\n    ],\n    \"Projection\": {\n      \"ProjectionType\": \"ALL\"|\"KEYS_ONLY\"|\"INCLUDE\",\n      \"NonKeyAttributes\": [\"string\", ...]\n    },\n    \"ProvisionedThroughput\": {\n      \"ReadCapacityUnits\": long,\n      \"WriteCapacityUnits\": long\n    }\n  }\n  ...\n]\n\n\n--billing-mode (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to Provisioned Mode .\n\nPAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to On-Demand Mode .\n\nPossible values:\n\nPROVISIONED\n\nPAY_PER_REQUEST\n\n--provisioned-throughput (structure)\n\nRepresents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation.\n\nIf you set BillingMode as PROVISIONED , you must specify this property. If you set BillingMode as PAY_PER_REQUEST , you cannot specify this property.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nShorthand Syntax:\n\nReadCapacityUnits=long,WriteCapacityUnits=long\n\n\nJSON Syntax:\n\n{\n  \"ReadCapacityUnits\": long,\n  \"WriteCapacityUnits\": long\n}\n\n\n--stream-specification (structure)\n\nThe settings for DynamoDB Streams on the table. These settings consist of:\n\nStreamEnabled - Indicates whether DynamoDB Streams is to be enabled (true) or disabled (false).\n\nStreamViewType - When an item in the table is modified, StreamViewType determines what information is written to the table’s stream. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nStreamEnabled -> (boolean)\n\nIndicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.\n\nStreamViewType -> (string)\n\nWhen an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nShorthand Syntax:\n\nStreamEnabled=boolean,StreamViewType=string\n\n\nJSON Syntax:\n\n{\n  \"StreamEnabled\": true|false,\n  \"StreamViewType\": \"NEW_IMAGE\"|\"OLD_IMAGE\"|\"NEW_AND_OLD_IMAGES\"|\"KEYS_ONLY\"\n}\n\n\n--sse-specification (structure)\n\nRepresents the settings used to enable server-side encryption.\n\nEnabled -> (boolean)\n\nIndicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK. If enabled (true), server-side encryption type is set to KMS and an AWS managed CMK is used (AWS KMS charges apply). If disabled (false) or not specified, server-side encryption is set to AWS owned CMK.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB customer master key alias/aws/dynamodb.\n\nShorthand Syntax:\n\nEnabled=boolean,SSEType=string,KMSMasterKeyId=string\n\n\nJSON Syntax:\n\n{\n  \"Enabled\": true|false,\n  \"SSEType\": \"AES256\"|\"KMS\",\n  \"KMSMasterKeyId\": \"string\"\n}\n\n\n--tags (list)\n\nA list of key-value pairs to label the table. For more information, see Tagging for DynamoDB .\n\n(structure)\n\nDescribes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table.\n\nAWS-assigned tag names and values are automatically assigned the aws: prefix, which the user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix user: in the Cost Allocation Report. You cannot backdate the application of a tag.\n\nFor an overview on tagging DynamoDB resources, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide .\n\nKey -> (string)\n\nThe key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.\n\nValue -> (string)\n\nThe value of the tag. Tag values are case-sensitive and can be null.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableDescription -> (structure)\n\nRepresents the properties of the table.\n\nAttributeDefinitions -> (list)\n\nAn array of AttributeDefinition objects. Each of these objects describes one attribute in the table and index key schema.\n\nEach AttributeDefinition object in this array is composed of:\n\nAttributeName - The name of the attribute.\n\nAttributeType - The data type for the attribute.\n\n(structure)\n\nRepresents an attribute for describing the key schema for the table and indexes.\n\nAttributeName -> (string)\n\nA name for the attribute.\n\nAttributeType -> (string)\n\nThe data type for the attribute, where:\n\nS - the attribute is of type String\n\nN - the attribute is of type Number\n\nB - the attribute is of type Binary\n\nTableName -> (string)\n\nThe name of the table.\n\nKeySchema -> (list)\n\nThe primary key structure for the table. Each KeySchemaElement consists of:\n\nAttributeName - The name of the attribute.\n\nKeyType - The role of the attribute:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nFor more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nTableStatus -> (string)\n\nThe current state of the table:\n\nCREATING - The table is being created.\n\nUPDATING - The table is being updated.\n\nDELETING - The table is being deleted.\n\nACTIVE - The table is ready for use.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table in inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will initiate the table archival process when a table’s AWS KMS key remains inaccessible for more than seven days.\n\nARCHIVING - The table is being archived. Operations are not allowed until archival is complete.\n\nARCHIVED - The table has been archived. See the ArchivalReason for more information.\n\nCreationDateTime -> (timestamp)\n\nThe date and time when the table was created, in UNIX epoch time format.\n\nProvisionedThroughput -> (structure)\n\nThe provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nTableSizeBytes -> (long)\n\nThe total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nTableArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the table.\n\nTableId -> (string)\n\nUnique identifier for the table for which the backup was created.\n\nBillingModeSummary -> (structure)\n\nContains the details for the read/write capacity mode.\n\nBillingMode -> (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - Sets the read/write capacity mode to PROVISIONED . We recommend using PROVISIONED for predictable workloads.\n\nPAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST . We recommend using PAY_PER_REQUEST for unpredictable workloads.\n\nLastUpdateToPayPerRequestDateTime -> (timestamp)\n\nRepresents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.\n\nLocalSecondaryIndexes -> (list)\n\nRepresents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:\n\nIndexName - The name of the local secondary index.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes .\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nIndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a local secondary index.\n\nIndexName -> (string)\n\nRepresents the name of the local secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nGlobalSecondaryIndexes -> (list)\n\nThe global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:\n\nBackfilling - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table. It is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a CreateTable operation.) You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. (This attribute does not appear for indexes that were created during a CreateTable operation.)\n\nIndexName - The name of the global secondary index.\n\nIndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexStatus - The current status of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexStatus -> (string)\n\nThe current state of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nBackfilling -> (boolean)\n\nIndicates whether the index is currently backfilling. Backfilling is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and Backfilling is false.\n\nYou can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false.\n\nNote\n\nFor indexes that were created during a CreateTable operation, the Backfilling attribute does not appear in the DescribeTable output.\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nStreamSpecification -> (structure)\n\nThe current DynamoDB Streams configuration for the table.\n\nStreamEnabled -> (boolean)\n\nIndicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.\n\nStreamViewType -> (string)\n\nWhen an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nLatestStreamLabel -> (string)\n\nA timestamp, in ISO 8601 format, for this stream.\n\nNote that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:\n\nAWS customer ID\n\nTable name\n\nStreamLabel\n\nLatestStreamArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.\n\nGlobalTableVersion -> (string)\n\nRepresents the version of global tables in use, if the table is replicated across AWS Regions.\n\nReplicas -> (list)\n\nRepresents replicas of the table.\n\n(structure)\n\nContains the details of the replica.\n\nRegionName -> (string)\n\nThe name of the Region.\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.\n\nREGION_DISABLED - The replica is inaccessible because the AWS Region has been disabled.\n\nNote\n\nIf the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table is inaccessible.\n\nNote\n\nIf the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nReplicaStatusDescription -> (string)\n\nDetailed information about the replica status.\n\nReplicaStatusPercentProgress -> (string)\n\nSpecifies the progress of a Create, Update, or Delete action on the replica as a percentage.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not described, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nIf not described, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nReplicaInaccessibleDateTime -> (timestamp)\n\nThe time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.\n\nRestoreSummary -> (structure)\n\nContains details for the restore.\n\nSourceBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup from which the table was restored.\n\nSourceTableArn -> (string)\n\nThe ARN of the source table of the backup that is being restored.\n\nRestoreDateTime -> (timestamp)\n\nPoint in time or source backup time.\n\nRestoreInProgress -> (boolean)\n\nIndicates if a restore is in progress or not.\n\nSSEDescription -> (structure)\n\nThe description of the server-side encryption status on the specified table.\n\nStatus -> (string)\n\nRepresents the current state of server-side encryption. The only supported values are:\n\nENABLED - Server-side encryption is enabled.\n\nUPDATING - Server-side encryption is being updated.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyArn -> (string)\n\nThe AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.\n\nInaccessibleEncryptionDateTime -> (timestamp)\n\nIndicates the time, in UNIX epoch date format, when DynamoDB detected that the table’s AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table’s AWS KMS key is accessible again. DynamoDB will initiate the table archival process when table’s AWS KMS key remains inaccessible for more than seven days from this date.\n\nArchivalSummary -> (structure)\n\nContains information about the table archive.\n\nArchivalDateTime -> (timestamp)\n\nThe date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.\n\nArchivalReason -> (string)\n\nThe reason DynamoDB archived the table. Currently, the only possible value is:\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The table was archived due to the table’s AWS KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.\n\nArchivalBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.",
      "command_examples": "Examples\n\nExample 1: To create a table with tags\n\nThe following create-table example uses the specified attributes and key schema to create a table named MusicCollection. This table uses provisioned throughput and is encrypted at rest using the default AWS owned CMK. The command also applies a tag to the table, with a key of Owner and a value of blueTeam.\n\naws dynamodb create-table \\\n    --table-name MusicCollection \\\n    --attribute-definitions AttributeName=Artist,AttributeType=S AttributeName=SongTitle,AttributeType=S \\\n    --key-schema AttributeName=Artist,KeyType=HASH AttributeName=SongTitle,KeyType=RANGE \\\n    --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \\\n    --tags Key=Owner,Value=blueTeam\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"WriteCapacityUnits\": 5,\n            \"ReadCapacityUnits\": 5\n        },\n        \"TableSizeBytes\": 0,\n        \"TableName\": \"MusicCollection\",\n        \"TableStatus\": \"CREATING\",\n        \"KeySchema\": [\n            {\n                \"KeyType\": \"HASH\",\n                \"AttributeName\": \"Artist\"\n            },\n            {\n                \"KeyType\": \"RANGE\",\n                \"AttributeName\": \"SongTitle\"\n            }\n        ],\n        \"ItemCount\": 0,\n        \"CreationDateTime\": \"2020-05-26T16:04:41.627000-07:00\",\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n        \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\"\n    }\n}\n\n\nFor more information, see Basic Operations for Tables in the Amazon DynamoDB Developer Guide.\n\nExample 2: To create a table in On-Demand Mode\n\nThe following example creates a table called MusicCollection using on-demand mode, rather than provisioned throughput mode. This is useful for tables with unpredictable workloads.\n\naws dynamodb create-table \\\n    --table-name MusicCollection \\\n    --attribute-definitions AttributeName=Artist,AttributeType=S AttributeName=SongTitle,AttributeType=S \\\n    --key-schema AttributeName=Artist,KeyType=HASH AttributeName=SongTitle,KeyType=RANGE \\\n    --billing-mode PAY_PER_REQUEST\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"MusicCollection\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"CREATING\",\n        \"CreationDateTime\": \"2020-05-27T11:44:10.807000-07:00\",\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 0,\n            \"WriteCapacityUnits\": 0\n        },\n        \"TableSizeBytes\": 0,\n        \"ItemCount\": 0,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n        \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n        \"BillingModeSummary\": {\n            \"BillingMode\": \"PAY_PER_REQUEST\"\n        }\n    }\n}\n\n\nFor more information, see Basic Operations for Tables in the Amazon DynamoDB Developer Guide.\n\nExample 3: To create a table and encrypt it with a Customer Managed CMK\n\nThe following example creates a table named MusicCollection and encrypts it using a customer managed CMK.\n\naws dynamodb create-table \\\n    --table-name MusicCollection \\\n    --attribute-definitions AttributeName=Artist,AttributeType=S AttributeName=SongTitle,AttributeType=S \\\n    --key-schema AttributeName=Artist,KeyType=HASH AttributeName=SongTitle,KeyType=RANGE \\\n    --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \\\n    --sse-specification Enabled=true,SSEType=KMS,KMSMasterKeyId=abcd1234-abcd-1234-a123-ab1234a1b234\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"MusicCollection\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"CREATING\",\n        \"CreationDateTime\": \"2020-05-27T11:12:16.431000-07:00\",\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 5,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableSizeBytes\": 0,\n        \"ItemCount\": 0,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n        \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n        \"SSEDescription\": {\n            \"Status\": \"ENABLED\",\n            \"SSEType\": \"KMS\",\n            \"KMSMasterKeyArn\": \"arn:aws:kms:us-west-2:123456789012:key/abcd1234-abcd-1234-a123-ab1234a1b234\"\n        }\n    }\n}\n\n\nFor more information, see Basic Operations for Tables in the Amazon DynamoDB Developer Guide.\n\nExample 4: To create a table with a Local Secondary Index\n\nThe following example uses the specified attributes and key schema to create a table named MusicCollection with a Local Secondary Index named AlbumTitleIndex.\n\naws dynamodb create-table \\\n    --table-name MusicCollection \\\n    --attribute-definitions AttributeName=Artist,AttributeType=S AttributeName=SongTitle,AttributeType=S AttributeName=AlbumTitle,AttributeType=S \\\n    --key-schema AttributeName=Artist,KeyType=HASH AttributeName=SongTitle,KeyType=RANGE \\\n    --provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5 \\\n    --local-secondary-indexes \\\n        \"[\n            {\n                \\\"IndexName\\\": \\\"AlbumTitleIndex\\\",\n                \\\"KeySchema\\\": [\n                    {\\\"AttributeName\\\": \\\"Artist\\\",\\\"KeyType\\\":\\\"HASH\\\"},\n                    {\\\"AttributeName\\\": \\\"AlbumTitle\\\",\\\"KeyType\\\":\\\"RANGE\\\"}\n                ],\n                \\\"Projection\\\": {\n                    \\\"ProjectionType\\\": \\\"INCLUDE\\\",\n                    \\\"NonKeyAttributes\\\": [\\\"Genre\\\", \\\"Year\\\"]\n                }\n            }\n        ]\"\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"AlbumTitle\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"MusicCollection\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"CREATING\",\n        \"CreationDateTime\": \"2020-05-26T15:59:49.473000-07:00\",\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 10,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableSizeBytes\": 0,\n        \"ItemCount\": 0,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n        \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n        \"LocalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"AlbumTitleIndex\",\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"Artist\",\n                        \"KeyType\": \"HASH\"\n                    },\n                    {\n                        \"AttributeName\": \"AlbumTitle\",\n                        \"KeyType\": \"RANGE\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"INCLUDE\",\n                    \"NonKeyAttributes\": [\n                        \"Genre\",\n                        \"Year\"\n                    ]\n                },\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"IndexArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/index/AlbumTitleIndex\"\n            }\n        ]\n    }\n}\n\n\nFor more information, see Basic Operations for Tables in the Amazon DynamoDB Developer Guide.\n\nExample 5: To create a table with a Global Secondary Index\n\nThe following example creates a table named GameScores with a Global Secondary Index called GameTitleIndex. The base table has a partition key of UserId and a sort key of GameTitle, allowing you to find an individual user’s best score for a specific game efficiently, whereas the GSI has a partition key of GameTitle and a sort key of TopScore, allowing you to quickly find the overall highest score for a particular game.\n\naws dynamodb create-table \\\n    --table-name GameScores \\\n    --attribute-definitions AttributeName=UserId,AttributeType=S AttributeName=GameTitle,AttributeType=S AttributeName=TopScore,AttributeType=N \\\n    --key-schema AttributeName=UserId,KeyType=HASH \\\n                AttributeName=GameTitle,KeyType=RANGE \\\n    --provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5 \\\n    --global-secondary-indexes \\\n        \"[\n            {\n                \\\"IndexName\\\": \\\"GameTitleIndex\\\",\n                \\\"KeySchema\\\": [\n                    {\\\"AttributeName\\\":\\\"GameTitle\\\",\\\"KeyType\\\":\\\"HASH\\\"},\n                    {\\\"AttributeName\\\":\\\"TopScore\\\",\\\"KeyType\\\":\\\"RANGE\\\"}\n                ],\n                \\\"Projection\\\": {\n                    \\\"ProjectionType\\\":\\\"INCLUDE\\\",\n                    \\\"NonKeyAttributes\\\":[\\\"UserId\\\"]\n                },\n                \\\"ProvisionedThroughput\\\": {\n                    \\\"ReadCapacityUnits\\\": 10,\n                    \\\"WriteCapacityUnits\\\": 5\n                }\n            }\n        ]\"\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"GameTitle\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"TopScore\",\n                \"AttributeType\": \"N\"\n            },\n            {\n                \"AttributeName\": \"UserId\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"GameScores\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"UserId\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"GameTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"CREATING\",\n        \"CreationDateTime\": \"2020-05-26T17:28:15.602000-07:00\",\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 10,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableSizeBytes\": 0,\n        \"ItemCount\": 0,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/GameScores\",\n        \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n        \"GlobalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"GameTitleIndex\",\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"GameTitle\",\n                        \"KeyType\": \"HASH\"\n                    },\n                    {\n                        \"AttributeName\": \"TopScore\",\n                        \"KeyType\": \"RANGE\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"INCLUDE\",\n                    \"NonKeyAttributes\": [\n                        \"UserId\"\n                    ]\n                },\n                \"IndexStatus\": \"CREATING\",\n                \"ProvisionedThroughput\": {\n                    \"NumberOfDecreasesToday\": 0,\n                    \"ReadCapacityUnits\": 10,\n                    \"WriteCapacityUnits\": 5\n                },\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"IndexArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/GameScores/index/GameTitleIndex\"\n            }\n        ]\n    }\n}\n\n\nFor more information, see Basic Operations for Tables in the Amazon DynamoDB Developer Guide.\n\nExample 6: To create a table with multiple Global Secondary Indexes at once\n\nThe following example creates a table named GameScores with two Global Secondary Indexes. The GSI schemas are passed via a file, rather than on the command line.\n\naws dynamodb create-table \\\n    --table-name GameScores \\\n    --attribute-definitions AttributeName=UserId,AttributeType=S AttributeName=GameTitle,AttributeType=S AttributeName=TopScore,AttributeType=N AttributeName=Date,AttributeType=S \\\n    --key-schema AttributeName=UserId,KeyType=HASH AttributeName=GameTitle,KeyType=RANGE \\\n    --provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5 \\\n    --global-secondary-indexes file://gsi.json\n\n\nContents of gsi.json:\n\n[\n    {\n        \"IndexName\": \"GameTitleIndex\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"GameTitle\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"TopScore\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"Projection\": {\n            \"ProjectionType\": \"ALL\"\n        },\n        \"ProvisionedThroughput\": {\n            \"ReadCapacityUnits\": 10,\n            \"WriteCapacityUnits\": 5\n        }\n    },\n    {\n        \"IndexName\": \"GameDateIndex\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"GameTitle\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"Date\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"Projection\": {\n            \"ProjectionType\": \"ALL\"\n        },\n        \"ProvisionedThroughput\": {\n            \"ReadCapacityUnits\": 5,\n            \"WriteCapacityUnits\": 5\n        }\n    }\n]\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"Date\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"GameTitle\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"TopScore\",\n                \"AttributeType\": \"N\"\n            },\n            {\n                \"AttributeName\": \"UserId\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"GameScores\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"UserId\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"GameTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"CREATING\",\n        \"CreationDateTime\": \"2020-08-04T16:40:55.524000-07:00\",\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 10,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableSizeBytes\": 0,\n        \"ItemCount\": 0,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/GameScores\",\n        \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n        \"GlobalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"GameTitleIndex\",\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"GameTitle\",\n                        \"KeyType\": \"HASH\"\n                    },\n                    {\n                        \"AttributeName\": \"TopScore\",\n                        \"KeyType\": \"RANGE\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"ALL\"\n                },\n                \"IndexStatus\": \"CREATING\",\n                \"ProvisionedThroughput\": {\n                    \"NumberOfDecreasesToday\": 0,\n                    \"ReadCapacityUnits\": 10,\n                    \"WriteCapacityUnits\": 5\n                },\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"IndexArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/GameScores/index/GameTitleIndex\"\n            },\n            {\n                \"IndexName\": \"GameDateIndex\",\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"GameTitle\",\n                        \"KeyType\": \"HASH\"\n                    },\n                    {\n                        \"AttributeName\": \"Date\",\n                        \"KeyType\": \"RANGE\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"ALL\"\n                },\n                \"IndexStatus\": \"CREATING\",\n                \"ProvisionedThroughput\": {\n                    \"NumberOfDecreasesToday\": 0,\n                    \"ReadCapacityUnits\": 5,\n                    \"WriteCapacityUnits\": 5\n                },\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"IndexArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/GameScores/index/GameDateIndex\"\n            }\n        ]\n    }\n}\n\n\nFor more information, see Basic Operations for Tables in the Amazon DynamoDB Developer Guide.\n\nExample 7: To create a table with Streams enabled\n\nThe following example creates a table called GameScores with DynamoDB Streams enabled. Both new and old images of each item will be written to the stream.\n\naws dynamodb create-table\n\n–table-name GameScores –attribute-definitions AttributeName=UserId,AttributeType=S AttributeName=GameTitle,AttributeType=S –key-schema AttributeName=UserId,KeyType=HASH AttributeName=GameTitle,KeyType=RANGE –provisioned-throughput ReadCapacityUnits=10,WriteCapacityUnits=5 –stream-specification StreamEnabled=TRUE,StreamViewType=NEW_AND_OLD_IMAGES\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"GameTitle\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"UserId\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"GameScores\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"UserId\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"GameTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"CREATING\",\n        \"CreationDateTime\": \"2020-05-27T10:49:34.056000-07:00\",\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 10,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableSizeBytes\": 0,\n        \"ItemCount\": 0,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/GameScores\",\n        \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n        \"StreamSpecification\": {\n            \"StreamEnabled\": true,\n            \"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n        },\n        \"LatestStreamLabel\": \"2020-05-27T17:49:34.056\",\n        \"LatestStreamArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/GameScores/stream/2020-05-27T17:49:34.056\"\n    }\n}\n\n\nFor more information, see Basic Operations for Tables in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "delete-backup",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/delete-backup.html",
      "command_description": "Description\n\nDeletes an existing backup of a table.\n\nYou can call DeleteBackup at a maximum rate of 10 times per second.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-backup\n--backup-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--backup-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--backup-arn (string)\n\nThe ARN associated with the backup.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nBackupDescription -> (structure)\n\nContains the description of the backup created for the table.\n\nBackupDetails -> (structure)\n\nContains the details of the backup created for the table.\n\nBackupArn -> (string)\n\nARN associated with the backup.\n\nBackupName -> (string)\n\nName of the requested backup.\n\nBackupSizeBytes -> (long)\n\nSize of the backup in bytes.\n\nBackupStatus -> (string)\n\nBackup can be in one of the following states: CREATING, ACTIVE, DELETED.\n\nBackupType -> (string)\n\nBackupType:\n\nUSER - You create and manage these using the on-demand backup feature.\n\nSYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted table to the state it was in just before the point of deletion.\n\nAWS_BACKUP - On-demand backup created by you from AWS Backup service.\n\nBackupCreationDateTime -> (timestamp)\n\nTime at which the backup was created. This is the request time of the backup.\n\nBackupExpiryDateTime -> (timestamp)\n\nTime at which the automatic on-demand backup created by DynamoDB will expire. This SYSTEM on-demand backup expires automatically 35 days after its creation.\n\nSourceTableDetails -> (structure)\n\nContains the details of the table when the backup was created.\n\nTableName -> (string)\n\nThe name of the table for which the backup was created.\n\nTableId -> (string)\n\nUnique identifier for the table for which the backup was created.\n\nTableArn -> (string)\n\nARN of the table for which backup was created.\n\nTableSizeBytes -> (long)\n\nSize of the table in bytes. Note that this is an approximate value.\n\nKeySchema -> (list)\n\nSchema of the table.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nTableCreationDateTime -> (timestamp)\n\nTime when the source table was created.\n\nProvisionedThroughput -> (structure)\n\nRead IOPs and Write IOPS on the table when the backup was created.\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nItemCount -> (long)\n\nNumber of items in the table. Note that this is an approximate value.\n\nBillingMode -> (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - Sets the read/write capacity mode to PROVISIONED . We recommend using PROVISIONED for predictable workloads.\n\nPAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST . We recommend using PAY_PER_REQUEST for unpredictable workloads.\n\nSourceTableFeatureDetails -> (structure)\n\nContains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL.\n\nLocalSecondaryIndexes -> (list)\n\nRepresents the LSI properties for the table when the backup was created. It includes the IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.\n\n(structure)\n\nRepresents the properties of a local secondary index for the table when the backup was created.\n\nIndexName -> (string)\n\nRepresents the name of the local secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nGlobalSecondaryIndexes -> (list)\n\nRepresents the GSI properties for the table when the backup was created. It includes the IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at the time of backup.\n\n(structure)\n\nRepresents the properties of a global secondary index for the table when the backup was created.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nStreamDescription -> (structure)\n\nStream settings on the table when the backup was created.\n\nStreamEnabled -> (boolean)\n\nIndicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.\n\nStreamViewType -> (string)\n\nWhen an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nTimeToLiveDescription -> (structure)\n\nTime to Live settings on the table when the backup was created.\n\nTimeToLiveStatus -> (string)\n\nThe TTL status for the table.\n\nAttributeName -> (string)\n\nThe name of the TTL attribute for items in the table.\n\nSSEDescription -> (structure)\n\nThe description of the server-side encryption status on the table when the backup was created.\n\nStatus -> (string)\n\nRepresents the current state of server-side encryption. The only supported values are:\n\nENABLED - Server-side encryption is enabled.\n\nUPDATING - Server-side encryption is being updated.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyArn -> (string)\n\nThe AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.\n\nInaccessibleEncryptionDateTime -> (timestamp)\n\nIndicates the time, in UNIX epoch date format, when DynamoDB detected that the table’s AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table’s AWS KMS key is accessible again. DynamoDB will initiate the table archival process when table’s AWS KMS key remains inaccessible for more than seven days from this date.",
      "command_examples": "Examples\n\nTo delete an existing DynamoDB backup\n\nThe following delete-backup example deletes the specified existing backup.\n\naws dynamodb delete-backup \\\n    --backup-arn arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01576616366715-b4e58d3a\n\n\nOutput:\n\n{\n    \"BackupDescription\": {\n        \"BackupDetails\": {\n            \"BackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01576616366715-b4e58d3a\",\n            \"BackupName\": \"MusicCollectionBackup\",\n            \"BackupSizeBytes\": 0,\n            \"BackupStatus\": \"DELETED\",\n            \"BackupType\": \"USER\",\n            \"BackupCreationDateTime\": 1576616366.715\n        },\n        \"SourceTableDetails\": {\n            \"TableName\": \"MusicCollection\",\n            \"TableId\": \"b0c04bcc-309b-4352-b2ae-9088af169fe2\",\n            \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"TableSizeBytes\": 0,\n            \"KeySchema\": [\n                {\n                    \"AttributeName\": \"Artist\",\n                    \"KeyType\": \"HASH\"\n                },\n                {\n                    \"AttributeName\": \"SongTitle\",\n                    \"KeyType\": \"RANGE\"\n                }\n            ],\n            \"TableCreationDateTime\": 1576615228.571,\n            \"ProvisionedThroughput\": {\n                \"ReadCapacityUnits\": 5,\n                \"WriteCapacityUnits\": 5\n            },\n            \"ItemCount\": 0,\n            \"BillingMode\": \"PROVISIONED\"\n        },\n        \"SourceTableFeatureDetails\": {}\n    }\n}\n\n\nFor more information, see On-Demand Backup and Restore for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "delete-item",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/delete-item.html",
      "command_description": "Description\n\nDeletes a single item in a table by primary key. You can perform a conditional delete operation that deletes the item if it exists, or if it has an expected attribute value.\n\nIn addition to deleting an item, you can also return the item’s attribute values in the same operation, using the ReturnValues parameter.\n\nUnless you specify conditions, the DeleteItem is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response.\n\nConditional deletes are useful for deleting items only if specific conditions are met. If those conditions are met, DynamoDB performs the delete. Otherwise, the item is not deleted.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-item\n--table-name <value>\n--key <value>\n[--expected <value>]\n[--conditional-operator <value>]\n[--return-values <value>]\n[--return-consumed-capacity <value>]\n[--return-item-collection-metrics <value>]\n[--condition-expression <value>]\n[--expression-attribute-names <value>]\n[--expression-attribute-values <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "--key <value>",
        "[--expected <value>]",
        "[--conditional-operator <value>]",
        "[--return-values <value>]",
        "[--return-consumed-capacity <value>]",
        "[--return-item-collection-metrics <value>]",
        "[--condition-expression <value>]",
        "[--expression-attribute-names <value>]",
        "[--expression-attribute-values <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table from which to delete the item.\n\n--key (map)\n\nA map of attribute names to AttributeValue objects, representing the primary key of the item to delete.\n\nFor the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"S\": \"string\",\n      \"N\": \"string\",\n      \"B\": blob,\n      \"SS\": [\"string\", ...],\n      \"NS\": [\"string\", ...],\n      \"BS\": [blob, ...],\n      \"M\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"L\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": { ... recursive ... }\n            ...},\n          \"L\": [\n            { ... recursive ... }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"NULL\": true|false,\n      \"BOOL\": true|false\n    }\n  ...}\n\n\n--expected (map)\n\nThis is a legacy parameter. Use ConditionExpression instead. For more information, see Expected in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents a condition to be compared with an attribute value. This condition can be used with DeleteItem , PutItem , or UpdateItem operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use ExpectedAttributeValue in one of two different ways:\n\nUse AttributeValueList to specify one or more values to compare against an attribute. Use ComparisonOperator to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.\n\nUse Value to specify a value that DynamoDB will compare against an attribute. If the values match, then ExpectedAttributeValue evaluates to true and the conditional operation succeeds. Optionally, you can also set Exists to false, indicating that you do not expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.\n\nValue and Exists are incompatible with AttributeValueList and ComparisonOperator . Note that if you use both sets of parameters at once, DynamoDB will return a ValidationException exception.\n\nValue -> (structure)\n\nRepresents the data for the expected attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nExists -> (boolean)\n\nCauses DynamoDB to evaluate the value before attempting a conditional operation:\n\nIf Exists is true , DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a ConditionCheckFailedException .\n\nIf Exists is false , DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a ConditionCheckFailedException .\n\nThe default setting for Exists is true . If you supply a Value all by itself, DynamoDB assumes the attribute exists: You don’t have to set Exists to true , because it is implied.\n\nDynamoDB returns a ValidationException if:\n\nExists is true but there is no Value to check. (You expect a value to exist, but don’t specify what that value is.)\n\nExists is false but you also provide a Value . (You cannot expect an attribute to have a value, while also expecting it not to exist.)\n\nComparisonOperator -> (string)\n\nA comparator for evaluating attributes in the AttributeValueList . For example, equals, greater than, less than, etc.\n\nThe following comparison operators are available:\n\nEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\n\nThe following are descriptions of each comparison operator.\n\nEQ : Equal. EQ is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNE : Not equal. NE is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLE : Less than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLT : Less than. AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGE : Greater than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGT : Greater than. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the existence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NOT_NULL , the result is a Boolean true . This result is because the attribute “a ” exists; its data type is not relevant to the NOT_NULL comparison operator.\n\nNULL : The attribute does not exist. NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NULL , the result is a Boolean false . This is because the attribute “a ” exists; its data type is not relevant to the NULL comparison operator.\n\nCONTAINS : Checks for a subsequence, or value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating “a CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nNOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating “a NOT CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nBEGINS_WITH : Checks for a prefix. AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\n\nIN : Checks for matching elements in a list. AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.\n\nBETWEEN : Greater than or equal to the first value, and less than or equal to the second value. AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}\n\nAttributeValueList -> (list)\n\nOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used.\n\nFor type Number, value comparisons are numeric.\n\nString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A , and a is greater than B . For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters .\n\nFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\n\nFor information on specifying data types in JSON, see JSON Data Format in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"Value\": {\n        \"S\": \"string\",\n        \"N\": \"string\",\n        \"B\": blob,\n        \"SS\": [\"string\", ...],\n        \"NS\": [\"string\", ...],\n        \"BS\": [blob, ...],\n        \"M\": {\"string\": {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n          ...},\n        \"L\": [\n          {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n          ...\n        ],\n        \"NULL\": true|false,\n        \"BOOL\": true|false\n      },\n      \"Exists\": true|false,\n      \"ComparisonOperator\": \"EQ\"|\"NE\"|\"IN\"|\"LE\"|\"LT\"|\"GE\"|\"GT\"|\"BETWEEN\"|\"NOT_NULL\"|\"NULL\"|\"CONTAINS\"|\"NOT_CONTAINS\"|\"BEGINS_WITH\",\n      \"AttributeValueList\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n            ...},\n          \"L\": [\n            {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ]\n    }\n  ...}\n\n\n--conditional-operator (string)\n\nThis is a legacy parameter. Use ConditionExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .\n\nPossible values:\n\nAND\n\nOR\n\n--return-values (string)\n\nUse ReturnValues if you want to get the item attributes as they appeared before they were deleted. For DeleteItem , the valid values are:\n\nNONE - If ReturnValues is not specified, or if its value is NONE , then nothing is returned. (This setting is the default for ReturnValues .)\n\nALL_OLD - The content of the old item is returned.\n\nNote\n\nThe ReturnValues parameter is used by several DynamoDB operations; however, DeleteItem does not recognize any values other than NONE or ALL_OLD .\n\nPossible values:\n\nNONE\n\nALL_OLD\n\nUPDATED_OLD\n\nALL_NEW\n\nUPDATED_NEW\n\n--return-consumed-capacity (string)\n\nDetermines the level of detail about provisioned throughput consumption that is returned in the response:\n\nINDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem , do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).\n\nTOTAL - The response includes only the aggregate ConsumedCapacity for the operation.\n\nNONE - No ConsumedCapacity details are included in the response.\n\nPossible values:\n\nINDEXES\n\nTOTAL\n\nNONE\n\n--return-item-collection-metrics (string)\n\nDetermines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.\n\nPossible values:\n\nSIZE\n\nNONE\n\n--condition-expression (string)\n\nA condition that must be satisfied in order for a conditional DeleteItem to succeed.\n\nAn expression can contain any of the following:\n\nFunctions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size These function names are case-sensitive.\n\nComparison operators: = | <> | < | > | <= | >= | BETWEEN | IN\n\nLogical operators: AND | OR | NOT\n\nFor more information about condition expressions, see Condition Expressions in the Amazon DynamoDB Developer Guide .\n\n--expression-attribute-names (map)\n\nOne or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\n\nTo access an attribute whose name conflicts with a DynamoDB reserved word.\n\nTo create a placeholder for repeating occurrences of an attribute name in an expression.\n\nTo prevent special characters in an attribute name from being misinterpreted in an expression.\n\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\n\nPercentile\n\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\n\n{\"#P\":\"Percentile\"}\n\nYou could then use this substitution in an expression, as in this example:\n\n#P = :val\n\nNote\n\nTokens that begin with the : character are expression attribute values , which are placeholders for the actual value at runtime.\n\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--expression-attribute-values (map)\n\nOne or more values that can be substituted in an expression.\n\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\n\nAvailable | Backordered | Discontinued\n\nYou would first need to specify ExpressionAttributeValues as follows:\n\n{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }\n\nYou could then use these values in an expression, such as this:\n\nProductStatus IN (:avail, :back, :disc)\n\nFor more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"S\": \"string\",\n      \"N\": \"string\",\n      \"B\": blob,\n      \"SS\": [\"string\", ...],\n      \"NS\": [\"string\", ...],\n      \"BS\": [blob, ...],\n      \"M\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"L\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": { ... recursive ... }\n            ...},\n          \"L\": [\n            { ... recursive ... }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"NULL\": true|false,\n      \"BOOL\": true|false\n    }\n  ...}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nAttributes -> (map)\n\nA map of attribute names to AttributeValue objects, representing the item as it appeared before the DeleteItem operation. This map appears in the response only if ReturnValues was specified as ALL_OLD in the request.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nConsumedCapacity -> (structure)\n\nThe capacity units consumed by the DeleteItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Provisioned Mode in the Amazon DynamoDB Developer Guide .\n\nTableName -> (string)\n\nThe name of the table that was affected by the operation.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed by the operation.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed by the operation.\n\nTable -> (structure)\n\nThe amount of throughput consumed on the table affected by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nLocalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each local index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nGlobalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each global index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nItemCollectionMetrics -> (structure)\n\nInformation about item collections, if any, that were affected by the DeleteItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.\n\nEach ItemCollectionMetrics element consists of:\n\nItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.\n\nSizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\n\nItemCollectionKey -> (map)\n\nThe partition key value of the item collection. This value is the same as the partition key value of the item.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nSizeEstimateRangeGB -> (list)\n\nAn estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\n\nThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\n\n(double)",
      "command_examples": "Examples\n\nExample 1: To delete an item\n\nThe following delete-item example deletes an item from the MusicCollection table and requests details about the item that was deleted and the capacity used by the request.\n\naws dynamodb delete-item \\\n    --table-name MusicCollection \\\n    --key file://key.json \\\n    --return-values ALL_OLD \\\n    --return-consumed-capacity TOTAL \\\n    --return-item-collection-metrics SIZE\n\n\nContents of key.json:\n\n{\n    \"Artist\": {\"S\": \"No One You Know\"},\n    \"SongTitle\": {\"S\": \"Scared of My Shadow\"}\n}\n\n\nOutput:\n\n{\n    \"Attributes\": {\n        \"AlbumTitle\": {\n            \"S\": \"Blue Sky Blues\"\n        },\n        \"Artist\": {\n            \"S\": \"No One You Know\"\n        },\n        \"SongTitle\": {\n            \"S\": \"Scared of My Shadow\"\n        }\n    },\n    \"ConsumedCapacity\": {\n        \"TableName\": \"MusicCollection\",\n        \"CapacityUnits\": 2.0\n    },\n    \"ItemCollectionMetrics\": {\n        \"ItemCollectionKey\": {\n            \"Artist\": {\n                \"S\": \"No One You Know\"\n            }\n        },\n        \"SizeEstimateRangeGB\": [\n            0.0,\n            1.0\n        ]\n    }\n}\n\n\nFor more information, see Writing an Item in the Amazon DynamoDB Developer Guide.\n\nExample 2: To delete an item conditionally\n\nThe following example deletes an item from the ProductCatalog table only if its ProductCategory is either Sporting Goods or Gardening Supplies and its price is between 500 and 600. It returns details about the item that was deleted.\n\naws dynamodb delete-item \\\n    --table-name ProductCatalog \\\n    --key '{\"Id\":{\"N\":\"456\"}}' \\\n    --condition-expression \"(ProductCategory IN (:cat1, :cat2)) and (#P between :lo and :hi)\" \\\n    --expression-attribute-names file://names.json \\\n    --expression-attribute-values file://values.json \\\n    --return-values ALL_OLD\n\n\nContents of names.json:\n\n{\n    \"#P\": \"Price\"\n}\n\n\nContents of values.json:\n\n{\n    \":cat1\": {\"S\": \"Sporting Goods\"},\n    \":cat2\": {\"S\": \"Gardening Supplies\"},\n    \":lo\": {\"N\": \"500\"},\n    \":hi\": {\"N\": \"600\"}\n}\n\n\nOutput:\n\n{\n    \"Attributes\": {\n        \"Id\": {\n            \"N\": \"456\"\n        },\n        \"Price\": {\n            \"N\": \"550\"\n        },\n        \"ProductCategory\": {\n            \"S\": \"Sporting Goods\"\n        }\n    }\n}\n\n\nFor more information, see Writing an Item in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "delete-table",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/delete-table.html",
      "command_description": "Description\n\nThe DeleteTable operation deletes a table and all of its items. After a DeleteTable request, the specified table is in the DELETING state until DynamoDB completes the deletion. If the table is in the ACTIVE state, you can delete it. If a table is in CREATING or UPDATING states, then DynamoDB returns a ResourceInUseException . If the specified table does not exist, DynamoDB returns a ResourceNotFoundException . If table is already in the DELETING state, no error is returned.\n\nNote\n\nDynamoDB might continue to accept data read and write operations, such as GetItem and PutItem , on a table in the DELETING state until the table deletion is complete.\n\nWhen you delete a table, any indexes on that table are also deleted.\n\nIf you have DynamoDB Streams enabled on the table, then the corresponding stream on that table goes into the DISABLED state, and the stream is automatically deleted after 24 hours.\n\nUse the DescribeTable action to check the status of the table.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-table\n--table-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table to delete.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableDescription -> (structure)\n\nRepresents the properties of a table.\n\nAttributeDefinitions -> (list)\n\nAn array of AttributeDefinition objects. Each of these objects describes one attribute in the table and index key schema.\n\nEach AttributeDefinition object in this array is composed of:\n\nAttributeName - The name of the attribute.\n\nAttributeType - The data type for the attribute.\n\n(structure)\n\nRepresents an attribute for describing the key schema for the table and indexes.\n\nAttributeName -> (string)\n\nA name for the attribute.\n\nAttributeType -> (string)\n\nThe data type for the attribute, where:\n\nS - the attribute is of type String\n\nN - the attribute is of type Number\n\nB - the attribute is of type Binary\n\nTableName -> (string)\n\nThe name of the table.\n\nKeySchema -> (list)\n\nThe primary key structure for the table. Each KeySchemaElement consists of:\n\nAttributeName - The name of the attribute.\n\nKeyType - The role of the attribute:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nFor more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nTableStatus -> (string)\n\nThe current state of the table:\n\nCREATING - The table is being created.\n\nUPDATING - The table is being updated.\n\nDELETING - The table is being deleted.\n\nACTIVE - The table is ready for use.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table in inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will initiate the table archival process when a table’s AWS KMS key remains inaccessible for more than seven days.\n\nARCHIVING - The table is being archived. Operations are not allowed until archival is complete.\n\nARCHIVED - The table has been archived. See the ArchivalReason for more information.\n\nCreationDateTime -> (timestamp)\n\nThe date and time when the table was created, in UNIX epoch time format.\n\nProvisionedThroughput -> (structure)\n\nThe provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nTableSizeBytes -> (long)\n\nThe total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nTableArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the table.\n\nTableId -> (string)\n\nUnique identifier for the table for which the backup was created.\n\nBillingModeSummary -> (structure)\n\nContains the details for the read/write capacity mode.\n\nBillingMode -> (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - Sets the read/write capacity mode to PROVISIONED . We recommend using PROVISIONED for predictable workloads.\n\nPAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST . We recommend using PAY_PER_REQUEST for unpredictable workloads.\n\nLastUpdateToPayPerRequestDateTime -> (timestamp)\n\nRepresents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.\n\nLocalSecondaryIndexes -> (list)\n\nRepresents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:\n\nIndexName - The name of the local secondary index.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes .\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nIndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a local secondary index.\n\nIndexName -> (string)\n\nRepresents the name of the local secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nGlobalSecondaryIndexes -> (list)\n\nThe global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:\n\nBackfilling - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table. It is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a CreateTable operation.) You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. (This attribute does not appear for indexes that were created during a CreateTable operation.)\n\nIndexName - The name of the global secondary index.\n\nIndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexStatus - The current status of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexStatus -> (string)\n\nThe current state of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nBackfilling -> (boolean)\n\nIndicates whether the index is currently backfilling. Backfilling is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and Backfilling is false.\n\nYou can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false.\n\nNote\n\nFor indexes that were created during a CreateTable operation, the Backfilling attribute does not appear in the DescribeTable output.\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nStreamSpecification -> (structure)\n\nThe current DynamoDB Streams configuration for the table.\n\nStreamEnabled -> (boolean)\n\nIndicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.\n\nStreamViewType -> (string)\n\nWhen an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nLatestStreamLabel -> (string)\n\nA timestamp, in ISO 8601 format, for this stream.\n\nNote that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:\n\nAWS customer ID\n\nTable name\n\nStreamLabel\n\nLatestStreamArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.\n\nGlobalTableVersion -> (string)\n\nRepresents the version of global tables in use, if the table is replicated across AWS Regions.\n\nReplicas -> (list)\n\nRepresents replicas of the table.\n\n(structure)\n\nContains the details of the replica.\n\nRegionName -> (string)\n\nThe name of the Region.\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.\n\nREGION_DISABLED - The replica is inaccessible because the AWS Region has been disabled.\n\nNote\n\nIf the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table is inaccessible.\n\nNote\n\nIf the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nReplicaStatusDescription -> (string)\n\nDetailed information about the replica status.\n\nReplicaStatusPercentProgress -> (string)\n\nSpecifies the progress of a Create, Update, or Delete action on the replica as a percentage.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not described, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nIf not described, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nReplicaInaccessibleDateTime -> (timestamp)\n\nThe time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.\n\nRestoreSummary -> (structure)\n\nContains details for the restore.\n\nSourceBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup from which the table was restored.\n\nSourceTableArn -> (string)\n\nThe ARN of the source table of the backup that is being restored.\n\nRestoreDateTime -> (timestamp)\n\nPoint in time or source backup time.\n\nRestoreInProgress -> (boolean)\n\nIndicates if a restore is in progress or not.\n\nSSEDescription -> (structure)\n\nThe description of the server-side encryption status on the specified table.\n\nStatus -> (string)\n\nRepresents the current state of server-side encryption. The only supported values are:\n\nENABLED - Server-side encryption is enabled.\n\nUPDATING - Server-side encryption is being updated.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyArn -> (string)\n\nThe AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.\n\nInaccessibleEncryptionDateTime -> (timestamp)\n\nIndicates the time, in UNIX epoch date format, when DynamoDB detected that the table’s AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table’s AWS KMS key is accessible again. DynamoDB will initiate the table archival process when table’s AWS KMS key remains inaccessible for more than seven days from this date.\n\nArchivalSummary -> (structure)\n\nContains information about the table archive.\n\nArchivalDateTime -> (timestamp)\n\nThe date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.\n\nArchivalReason -> (string)\n\nThe reason DynamoDB archived the table. Currently, the only possible value is:\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The table was archived due to the table’s AWS KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.\n\nArchivalBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.",
      "command_examples": "Examples\n\nTo delete a table\n\nThe following delete-table example deletes the MusicCollection table.\n\naws dynamodb delete-table \\\n    --table-name MusicCollection\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"TableStatus\": \"DELETING\",\n        \"TableSizeBytes\": 0,\n        \"ItemCount\": 0,\n        \"TableName\": \"MusicCollection\",\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"WriteCapacityUnits\": 5,\n            \"ReadCapacityUnits\": 5\n        }\n    }\n}\n\n\nFor more information, see Deleting a Table in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "describe-backup",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-backup.html",
      "command_description": "Description\n\nDescribes an existing backup of a table.\n\nYou can call DescribeBackup at a maximum rate of 10 times per second.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-backup\n--backup-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--backup-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--backup-arn (string)\n\nThe Amazon Resource Name (ARN) associated with the backup.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nBackupDescription -> (structure)\n\nContains the description of the backup created for the table.\n\nBackupDetails -> (structure)\n\nContains the details of the backup created for the table.\n\nBackupArn -> (string)\n\nARN associated with the backup.\n\nBackupName -> (string)\n\nName of the requested backup.\n\nBackupSizeBytes -> (long)\n\nSize of the backup in bytes.\n\nBackupStatus -> (string)\n\nBackup can be in one of the following states: CREATING, ACTIVE, DELETED.\n\nBackupType -> (string)\n\nBackupType:\n\nUSER - You create and manage these using the on-demand backup feature.\n\nSYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted table to the state it was in just before the point of deletion.\n\nAWS_BACKUP - On-demand backup created by you from AWS Backup service.\n\nBackupCreationDateTime -> (timestamp)\n\nTime at which the backup was created. This is the request time of the backup.\n\nBackupExpiryDateTime -> (timestamp)\n\nTime at which the automatic on-demand backup created by DynamoDB will expire. This SYSTEM on-demand backup expires automatically 35 days after its creation.\n\nSourceTableDetails -> (structure)\n\nContains the details of the table when the backup was created.\n\nTableName -> (string)\n\nThe name of the table for which the backup was created.\n\nTableId -> (string)\n\nUnique identifier for the table for which the backup was created.\n\nTableArn -> (string)\n\nARN of the table for which backup was created.\n\nTableSizeBytes -> (long)\n\nSize of the table in bytes. Note that this is an approximate value.\n\nKeySchema -> (list)\n\nSchema of the table.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nTableCreationDateTime -> (timestamp)\n\nTime when the source table was created.\n\nProvisionedThroughput -> (structure)\n\nRead IOPs and Write IOPS on the table when the backup was created.\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nItemCount -> (long)\n\nNumber of items in the table. Note that this is an approximate value.\n\nBillingMode -> (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - Sets the read/write capacity mode to PROVISIONED . We recommend using PROVISIONED for predictable workloads.\n\nPAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST . We recommend using PAY_PER_REQUEST for unpredictable workloads.\n\nSourceTableFeatureDetails -> (structure)\n\nContains the details of the features enabled on the table when the backup was created. For example, LSIs, GSIs, streams, TTL.\n\nLocalSecondaryIndexes -> (list)\n\nRepresents the LSI properties for the table when the backup was created. It includes the IndexName, KeySchema and Projection for the LSIs on the table at the time of backup.\n\n(structure)\n\nRepresents the properties of a local secondary index for the table when the backup was created.\n\nIndexName -> (string)\n\nRepresents the name of the local secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for a local secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nGlobalSecondaryIndexes -> (list)\n\nRepresents the GSI properties for the table when the backup was created. It includes the IndexName, KeySchema, Projection, and ProvisionedThroughput for the GSIs on the table at the time of backup.\n\n(structure)\n\nRepresents the properties of a global secondary index for the table when the backup was created.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nStreamDescription -> (structure)\n\nStream settings on the table when the backup was created.\n\nStreamEnabled -> (boolean)\n\nIndicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.\n\nStreamViewType -> (string)\n\nWhen an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nTimeToLiveDescription -> (structure)\n\nTime to Live settings on the table when the backup was created.\n\nTimeToLiveStatus -> (string)\n\nThe TTL status for the table.\n\nAttributeName -> (string)\n\nThe name of the TTL attribute for items in the table.\n\nSSEDescription -> (structure)\n\nThe description of the server-side encryption status on the table when the backup was created.\n\nStatus -> (string)\n\nRepresents the current state of server-side encryption. The only supported values are:\n\nENABLED - Server-side encryption is enabled.\n\nUPDATING - Server-side encryption is being updated.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyArn -> (string)\n\nThe AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.\n\nInaccessibleEncryptionDateTime -> (timestamp)\n\nIndicates the time, in UNIX epoch date format, when DynamoDB detected that the table’s AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table’s AWS KMS key is accessible again. DynamoDB will initiate the table archival process when table’s AWS KMS key remains inaccessible for more than seven days from this date.",
      "command_examples": "Examples\n\nTo get information about an existing backup of a table\n\nThe following describe-backup example displays information about the specified existing backup.\n\naws dynamodb describe-backup \\\n    --backup-arn arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01576616366715-b4e58d3a\n\n\nOutput:\n\n{\n    \"BackupDescription\": {\n        \"BackupDetails\": {\n            \"BackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01576616366715-b4e58d3a\",\n            \"BackupName\": \"MusicCollectionBackup\",\n            \"BackupSizeBytes\": 0,\n            \"BackupStatus\": \"AVAILABLE\",\n            \"BackupType\": \"USER\",\n            \"BackupCreationDateTime\": 1576616366.715\n        },\n        \"SourceTableDetails\": {\n            \"TableName\": \"MusicCollection\",\n            \"TableId\": \"b0c04bcc-309b-4352-b2ae-9088af169fe2\",\n            \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"TableSizeBytes\": 0,\n            \"KeySchema\": [\n                {\n                    \"AttributeName\": \"Artist\",\n                    \"KeyType\": \"HASH\"\n                },\n                {\n                    \"AttributeName\": \"SongTitle\",\n                    \"KeyType\": \"RANGE\"\n                }\n            ],\n            \"TableCreationDateTime\": 1576615228.571,\n            \"ProvisionedThroughput\": {\n                \"ReadCapacityUnits\": 5,\n                \"WriteCapacityUnits\": 5\n            },\n            \"ItemCount\": 0,\n            \"BillingMode\": \"PROVISIONED\"\n        },\n        \"SourceTableFeatureDetails\": {}\n    }\n}\n\n\nFor more information, see On-Demand Backup and Restore for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "describe-continuous-backups",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-continuous-backups.html",
      "command_description": "Description\n\nChecks the status of continuous backups and point in time recovery on the specified table. Continuous backups are ENABLED on all tables at table creation. If point in time recovery is enabled, PointInTimeRecoveryStatus will be set to ENABLED.\n\nAfter continuous backups and point in time recovery are enabled, you can restore to any point in time within EarliestRestorableDateTime and LatestRestorableDateTime .\n\nLatestRestorableDateTime is typically 5 minutes before the current time. You can restore your table to any point in time during the last 35 days.\n\nYou can call DescribeContinuousBackups at a maximum rate of 10 times per second.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-continuous-backups\n--table-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nName of the table for which the customer wants to check the continuous backups and point in time recovery settings.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nContinuousBackupsDescription -> (structure)\n\nRepresents the continuous backups and point in time recovery settings on the table.\n\nContinuousBackupsStatus -> (string)\n\nContinuousBackupsStatus can be one of the following states: ENABLED, DISABLED\n\nPointInTimeRecoveryDescription -> (structure)\n\nThe description of the point in time recovery settings applied to the table.\n\nPointInTimeRecoveryStatus -> (string)\n\nThe current state of point in time recovery:\n\nENABLING - Point in time recovery is being enabled.\n\nENABLED - Point in time recovery is enabled.\n\nDISABLED - Point in time recovery is disabled.\n\nEarliestRestorableDateTime -> (timestamp)\n\nSpecifies the earliest point in time you can restore your table to. You can restore your table to any point in time during the last 35 days.\n\nLatestRestorableDateTime -> (timestamp)\n\nLatestRestorableDateTime is typically 5 minutes before the current time.",
      "command_examples": "Examples\n\nTo get information about continuous backups for a DynamoDB table\n\nThe following describe-continuous-backups example displays details about the continuous backup settings for the MusicCollection table.\n\naws dynamodb describe-continuous-backups \\\n    --table-name MusicCollection\n\n\nOutput:\n\n{\n    \"ContinuousBackupsDescription\": {\n        \"ContinuousBackupsStatus\": \"ENABLED\",\n        \"PointInTimeRecoveryDescription\": {\n            \"PointInTimeRecoveryStatus\": \"DISABLED\"\n        }\n    }\n}\n\n\nFor more information, see Point-in-Time Recovery for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "describe-contributor-insights",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-contributor-insights.html",
      "command_description": "Description\n\nReturns information about contributor insights, for a given table or global secondary index.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-contributor-insights\n--table-name <value>\n[--index-name <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "[--index-name <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table to describe.\n\n--index-name (string)\n\nThe name of the global secondary index to describe, if applicable.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableName -> (string)\n\nThe name of the table being described.\n\nIndexName -> (string)\n\nThe name of the global secondary index being described.\n\nContributorInsightsRuleList -> (list)\n\nList of names of the associated Alpine rules.\n\n(string)\n\nContributorInsightsStatus -> (string)\n\nCurrent Status contributor insights.\n\nLastUpdateDateTime -> (timestamp)\n\nTimestamp of the last time the status was changed.\n\nFailureException -> (structure)\n\nReturns information about the last failure that encountered.\n\nThe most common exceptions for a FAILED status are:\n\nLimitExceededException - Per-account Amazon CloudWatch Contributor Insights rule limit reached. Please disable Contributor Insights for other tables/indexes OR disable Contributor Insights rules before retrying.\n\nAccessDeniedException - Amazon CloudWatch Contributor Insights rules cannot be modified due to insufficient permissions.\n\nAccessDeniedException - Failed to create service-linked role for Contributor Insights due to insufficient permissions.\n\nInternalServerError - Failed to create Amazon CloudWatch Contributor Insights rules. Please retry request.\n\nExceptionName -> (string)\n\nException name.\n\nExceptionDescription -> (string)\n\nDescription of the failure.",
      "command_examples": "Examples\n\nTo view Contributor Insights settings for a DynamoDB table\n\nThe following describe-contributor-insights example displays the Contributor Insights settings for the MusicCollection table and the AlbumTitle-index global secondary index.\n\naws dynamodb describe-contributor-insights \\\n    --table-name MusicCollection \\\n    --index-name AlbumTitle-index\n\n\nOutput:\n\n{\n    \"TableName\": \"MusicCollection\",\n    \"IndexName\": \"AlbumTitle-index\",\n    \"ContributorInsightsRuleList\": [\n        \"DynamoDBContributorInsights-PKC-MusicCollection-1576629651520\",\n        \"DynamoDBContributorInsights-SKC-MusicCollection-1576629651520\",\n        \"DynamoDBContributorInsights-PKT-MusicCollection-1576629651520\",\n        \"DynamoDBContributorInsights-SKT-MusicCollection-1576629651520\"\n    ],\n    \"ContributorInsightsStatus\": \"ENABLED\",\n    \"LastUpdateDateTime\": 1576629654.78\n}\n\n\nFor more information, see Analyzing Data Access Using CloudWatch Contributor Insights for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "describe-endpoints",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-endpoints.html",
      "command_description": "Description\n\nReturns the regional endpoint information.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-endpoints\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nEndpoints -> (list)\n\nList of endpoints.\n\n(structure)\n\nAn endpoint information details.\n\nAddress -> (string)\n\nIP address of the endpoint.\n\nCachePeriodInMinutes -> (long)\n\nEndpoint cache time to live (TTL) value.",
      "command_examples": "Examples\n\nTo view regional endpoint information\n\nThe following describe-endpoints example displays details about the endpoints for the current AWS Region.\n\naws dynamodb describe-endpoints\n\n\nOutput:\n\n{\n    \"Endpoints\": [\n        {\n            \"Address\": \"dynamodb.us-west-2.amazonaws.com\",\n            \"CachePeriodInMinutes\": 1440\n        }\n    ]\n}\n\n\nFor more information, see Amazon DynamoDB Endpoints and Quotas in the AWS General Reference."
    },
    {
      "command_name": "describe-export",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-export.html",
      "command_description": "Description\n\nDescribes an existing table export.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-export\n--export-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--export-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--export-arn (string)\n\nThe Amazon Resource Name (ARN) associated with the export.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nExportDescription -> (structure)\n\nRepresents the properties of the export.\n\nExportArn -> (string)\n\nThe Amazon Resource Name (ARN) of the table export.\n\nExportStatus -> (string)\n\nExport can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.\n\nStartTime -> (timestamp)\n\nThe time at which the export task began.\n\nEndTime -> (timestamp)\n\nThe time at which the export task completed.\n\nExportManifest -> (string)\n\nThe name of the manifest file for the export task.\n\nTableArn -> (string)\n\nThe Amazon Resource Name (ARN) of the table that was exported.\n\nTableId -> (string)\n\nUnique ID of the table that was exported.\n\nExportTime -> (timestamp)\n\nPoint in time from which table data was exported.\n\nClientToken -> (string)\n\nThe client token that was provided for the export task. A client token makes calls to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call.\n\nS3Bucket -> (string)\n\nThe name of the Amazon S3 bucket containing the export.\n\nS3BucketOwner -> (string)\n\nThe ID of the AWS account that owns the bucket containing the export.\n\nS3Prefix -> (string)\n\nThe Amazon S3 bucket prefix used as the file name and path of the exported snapshot.\n\nS3SseAlgorithm -> (string)\n\nType of encryption used on the bucket where export data is stored. Valid values for S3SseAlgorithm are:\n\nAES256 - server-side encryption with Amazon S3 managed keys\n\nKMS - server-side encryption with AWS KMS managed keys\n\nS3SseKmsKeyId -> (string)\n\nThe ID of the AWS KMS managed key used to encrypt the S3 bucket where export data is stored (if applicable).\n\nFailureCode -> (string)\n\nStatus code for the result of the failed export.\n\nFailureMessage -> (string)\n\nExport failure reason description.\n\nExportFormat -> (string)\n\nThe format of the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION .\n\nBilledSizeBytes -> (long)\n\nThe billable size of the table export.\n\nItemCount -> (long)\n\nThe number of items exported."
    },
    {
      "command_name": "describe-global-table",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-global-table.html",
      "command_description": "Description\n\nReturns information about the specified global table.\n\nNote\n\nThis operation only applies to Version 2017.11.29 of global tables. If you are using global tables Version 2019.11.21 you can use DescribeTable instead.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-global-table\n--global-table-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--global-table-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--global-table-name (string)\n\nThe name of the global table.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nGlobalTableDescription -> (structure)\n\nContains the details of the global table.\n\nReplicationGroup -> (list)\n\nThe Regions where the global table has replicas.\n\n(structure)\n\nContains the details of the replica.\n\nRegionName -> (string)\n\nThe name of the Region.\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.\n\nREGION_DISABLED - The replica is inaccessible because the AWS Region has been disabled.\n\nNote\n\nIf the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table is inaccessible.\n\nNote\n\nIf the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nReplicaStatusDescription -> (string)\n\nDetailed information about the replica status.\n\nReplicaStatusPercentProgress -> (string)\n\nSpecifies the progress of a Create, Update, or Delete action on the replica as a percentage.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not described, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nIf not described, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nReplicaInaccessibleDateTime -> (timestamp)\n\nThe time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.\n\nGlobalTableArn -> (string)\n\nThe unique identifier of the global table.\n\nCreationDateTime -> (timestamp)\n\nThe creation time of the global table.\n\nGlobalTableStatus -> (string)\n\nThe current state of the global table:\n\nCREATING - The global table is being created.\n\nUPDATING - The global table is being updated.\n\nDELETING - The global table is being deleted.\n\nACTIVE - The global table is ready for use.\n\nGlobalTableName -> (string)\n\nThe global table name.",
      "command_examples": "Examples\n\nTo display information about a DynamoDB global table\n\nThe following describe-global-table example displays details about the MusicCollection global table.\n\naws dynamodb describe-global-table \\\n    --global-table-name MusicCollection\n\n\nOutput:\n\n{\n    \"GlobalTableDescription\": {\n        \"ReplicationGroup\": [\n            {\n                \"RegionName\": \"us-east-2\"\n            },\n            {\n                \"RegionName\": \"us-east-1\"\n            }\n        ],\n        \"GlobalTableArn\": \"arn:aws:dynamodb::123456789012:global-table/MusicCollection\",\n        \"CreationDateTime\": 1576625818.532,\n        \"GlobalTableStatus\": \"ACTIVE\",\n        \"GlobalTableName\": \"MusicCollection\"\n    }\n}\n\n\nFor more information, see DynamoDB Global Tables in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "describe-global-table-settings",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-global-table-settings.html",
      "command_description": "Description\n\nDescribes Region-specific settings for a global table.\n\nNote\n\nThis operation only applies to Version 2017.11.29 of global tables.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-global-table-settings\n--global-table-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--global-table-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--global-table-name (string)\n\nThe name of the global table to describe.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nGlobalTableName -> (string)\n\nThe name of the global table.\n\nReplicaSettings -> (list)\n\nThe Region-specific settings for the global table.\n\n(structure)\n\nRepresents the properties of a replica.\n\nRegionName -> (string)\n\nThe Region name of the replica.\n\nReplicaStatus -> (string)\n\nThe current state of the Region:\n\nCREATING - The Region is being created.\n\nUPDATING - The Region is being updated.\n\nDELETING - The Region is being deleted.\n\nACTIVE - The Region is ready for use.\n\nReplicaBillingModeSummary -> (structure)\n\nThe read/write capacity mode of the replica.\n\nBillingMode -> (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - Sets the read/write capacity mode to PROVISIONED . We recommend using PROVISIONED for predictable workloads.\n\nPAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST . We recommend using PAY_PER_REQUEST for unpredictable workloads.\n\nLastUpdateToPayPerRequestDateTime -> (timestamp)\n\nRepresents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.\n\nReplicaProvisionedReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nReplicaProvisionedReadCapacityAutoScalingSettings -> (structure)\n\nAuto scaling settings for a global table replica’s read capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaProvisionedWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nReplicaProvisionedWriteCapacityAutoScalingSettings -> (structure)\n\nAuto scaling settings for a global table replica’s write capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaGlobalSecondaryIndexSettings -> (list)\n\nReplica global secondary index settings for the global table.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index. The name must be unique among all other indexes on this table.\n\nIndexStatus -> (string)\n\nThe current status of the global secondary index:\n\nCREATING - The global secondary index is being created.\n\nUPDATING - The global secondary index is being updated.\n\nDELETING - The global secondary index is being deleted.\n\nACTIVE - The global secondary index is ready for use.\n\nProvisionedReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException .\n\nProvisionedReadCapacityAutoScalingSettings -> (structure)\n\nAuto scaling settings for a global secondary index replica’s read capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nProvisionedWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nProvisionedWriteCapacityAutoScalingSettings -> (structure)\n\nAuto scaling settings for a global secondary index replica’s write capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).",
      "command_examples": "Examples\n\nTo get information about a DynamoDB global table’s settings\n\nThe following describe-global-table-settings example displays the settings for the MusicCollection global table.\n\naws dynamodb describe-global-table-settings \\\n    --global-table-name MusicCollection\n\n\nOutput:\n\n{\n    \"GlobalTableName\": \"MusicCollection\",\n    \"ReplicaSettings\": [\n        {\n            \"RegionName\": \"us-east-1\",\n            \"ReplicaStatus\": \"ACTIVE\",\n            \"ReplicaProvisionedReadCapacityUnits\": 10,\n            \"ReplicaProvisionedReadCapacityAutoScalingSettings\": {\n                \"AutoScalingDisabled\": true\n            },\n            \"ReplicaProvisionedWriteCapacityUnits\": 5,\n            \"ReplicaProvisionedWriteCapacityAutoScalingSettings\": {\n                \"AutoScalingDisabled\": true\n            }\n        },\n        {\n            \"RegionName\": \"us-east-2\",\n            \"ReplicaStatus\": \"ACTIVE\",\n            \"ReplicaProvisionedReadCapacityUnits\": 10,\n            \"ReplicaProvisionedReadCapacityAutoScalingSettings\": {\n                \"AutoScalingDisabled\": true\n            },\n            \"ReplicaProvisionedWriteCapacityUnits\": 5,\n            \"ReplicaProvisionedWriteCapacityAutoScalingSettings\": {\n                \"AutoScalingDisabled\": true\n            }\n        }\n    ]\n}\n\n\nFor more information, see DynamoDB Global Tables in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "describe-kinesis-streaming-destination",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-kinesis-streaming-destination.html",
      "command_description": "Description\n\nReturns information about the status of Kinesis streaming.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-kinesis-streaming-destination\n--table-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table being described.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableName -> (string)\n\nThe name of the table being described.\n\nKinesisDataStreamDestinations -> (list)\n\nThe list of replica structures for the table being described.\n\n(structure)\n\nDescribes a Kinesis data stream destination.\n\nStreamArn -> (string)\n\nThe ARN for a specific Kinesis data stream.\n\nDestinationStatus -> (string)\n\nThe current status of replication.\n\nDestinationStatusDescription -> (string)\n\nThe human-readable string that corresponds to the replica status."
    },
    {
      "command_name": "describe-limits",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-limits.html",
      "command_description": "Description\n\nReturns the current provisioned-capacity quotas for your AWS account in a Region, both for the Region as a whole and for any one DynamoDB table that you create there.\n\nWhen you establish an AWS account, the account has initial quotas on the maximum read capacity units and write capacity units that you can provision across all of your DynamoDB tables in a given Region. Also, there are per-table quotas that apply when you create a table there. For more information, see Service, Account, and Table Quotas page in the Amazon DynamoDB Developer Guide .\n\nAlthough you can increase these quotas by filing a case at AWS Support Center , obtaining the increase is not instantaneous. The DescribeLimits action lets you write code to compare the capacity you are currently using to those quotas imposed by your account so that you have enough time to apply for an increase before you hit a quota.\n\nFor example, you could use one of the AWS SDKs to do the following:\n\nCall DescribeLimits for a particular Region to obtain your current account quotas on provisioned capacity there.\n\nCreate a variable to hold the aggregate read capacity units provisioned for all your tables in that Region, and one to hold the aggregate write capacity units. Zero them both.\n\nCall ListTables to obtain a list of all your DynamoDB tables.\n\nFor each table name listed by ListTables , do the following:\n\nCall DescribeTable with the table name.\n\nUse the data returned by DescribeTable to add the read capacity units and write capacity units provisioned for the table itself to your variables.\n\nIf the table has one or more global secondary indexes (GSIs), loop over these GSIs and add their provisioned capacity values to your variables as well.\n\nReport the account quotas for that Region returned by DescribeLimits , along with the total current provisioned capacity levels you have calculated.\n\nThis will let you see whether you are getting close to your account-level quotas.\n\nThe per-table quotas apply only when you are creating a new table. They restrict the sum of the provisioned capacity of the new table itself and all its global secondary indexes.\n\nFor existing tables and their GSIs, DynamoDB doesn’t let you increase provisioned capacity extremely rapidly, but the only quota that applies is that the aggregate provisioned capacity over all your tables and GSIs cannot exceed either of the per-account quotas.\n\nNote\n\nDescribeLimits should only be called periodically. You can expect throttling errors if you call it more than once in a minute.\n\nThe DescribeLimits Request element has no content.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-limits\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nAccountMaxReadCapacityUnits -> (long)\n\nThe maximum total read capacity units that your account allows you to provision across all of your tables in this Region.\n\nAccountMaxWriteCapacityUnits -> (long)\n\nThe maximum total write capacity units that your account allows you to provision across all of your tables in this Region.\n\nTableMaxReadCapacityUnits -> (long)\n\nThe maximum read capacity units that your account allows you to provision for a new table that you are creating in this Region, including the read capacity units provisioned for its global secondary indexes (GSIs).\n\nTableMaxWriteCapacityUnits -> (long)\n\nThe maximum write capacity units that your account allows you to provision for a new table that you are creating in this Region, including the write capacity units provisioned for its global secondary indexes (GSIs).",
      "command_examples": "Examples\n\nTo view provisioned-capacity limits\n\nThe following describe-limits example displays provisioned-capacity limits for your account in the current AWS Region.\n\naws dynamodb describe-limits\n\n\nOutput:\n\n{\n    \"AccountMaxReadCapacityUnits\": 80000,\n    \"AccountMaxWriteCapacityUnits\": 80000,\n    \"TableMaxReadCapacityUnits\": 40000,\n    \"TableMaxWriteCapacityUnits\": 40000\n}\n\n\nFor more information, see Limits in DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "describe-table",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-table.html",
      "command_description": "Description\n\nReturns information about the table, including the current status of the table, when it was created, the primary key schema, and any indexes on the table.\n\nNote\n\nIf you issue a DescribeTable request immediately after a CreateTable request, DynamoDB might return a ResourceNotFoundException . This is because DescribeTable uses an eventually consistent query, and the metadata for your table might not be available at that moment. Wait for a few seconds, and then try the DescribeTable request again.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-table\n--table-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table to describe.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTable -> (structure)\n\nThe properties of the table.\n\nAttributeDefinitions -> (list)\n\nAn array of AttributeDefinition objects. Each of these objects describes one attribute in the table and index key schema.\n\nEach AttributeDefinition object in this array is composed of:\n\nAttributeName - The name of the attribute.\n\nAttributeType - The data type for the attribute.\n\n(structure)\n\nRepresents an attribute for describing the key schema for the table and indexes.\n\nAttributeName -> (string)\n\nA name for the attribute.\n\nAttributeType -> (string)\n\nThe data type for the attribute, where:\n\nS - the attribute is of type String\n\nN - the attribute is of type Number\n\nB - the attribute is of type Binary\n\nTableName -> (string)\n\nThe name of the table.\n\nKeySchema -> (list)\n\nThe primary key structure for the table. Each KeySchemaElement consists of:\n\nAttributeName - The name of the attribute.\n\nKeyType - The role of the attribute:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nFor more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nTableStatus -> (string)\n\nThe current state of the table:\n\nCREATING - The table is being created.\n\nUPDATING - The table is being updated.\n\nDELETING - The table is being deleted.\n\nACTIVE - The table is ready for use.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table in inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will initiate the table archival process when a table’s AWS KMS key remains inaccessible for more than seven days.\n\nARCHIVING - The table is being archived. Operations are not allowed until archival is complete.\n\nARCHIVED - The table has been archived. See the ArchivalReason for more information.\n\nCreationDateTime -> (timestamp)\n\nThe date and time when the table was created, in UNIX epoch time format.\n\nProvisionedThroughput -> (structure)\n\nThe provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nTableSizeBytes -> (long)\n\nThe total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nTableArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the table.\n\nTableId -> (string)\n\nUnique identifier for the table for which the backup was created.\n\nBillingModeSummary -> (structure)\n\nContains the details for the read/write capacity mode.\n\nBillingMode -> (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - Sets the read/write capacity mode to PROVISIONED . We recommend using PROVISIONED for predictable workloads.\n\nPAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST . We recommend using PAY_PER_REQUEST for unpredictable workloads.\n\nLastUpdateToPayPerRequestDateTime -> (timestamp)\n\nRepresents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.\n\nLocalSecondaryIndexes -> (list)\n\nRepresents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:\n\nIndexName - The name of the local secondary index.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes .\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nIndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a local secondary index.\n\nIndexName -> (string)\n\nRepresents the name of the local secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nGlobalSecondaryIndexes -> (list)\n\nThe global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:\n\nBackfilling - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table. It is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a CreateTable operation.) You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. (This attribute does not appear for indexes that were created during a CreateTable operation.)\n\nIndexName - The name of the global secondary index.\n\nIndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexStatus - The current status of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexStatus -> (string)\n\nThe current state of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nBackfilling -> (boolean)\n\nIndicates whether the index is currently backfilling. Backfilling is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and Backfilling is false.\n\nYou can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false.\n\nNote\n\nFor indexes that were created during a CreateTable operation, the Backfilling attribute does not appear in the DescribeTable output.\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nStreamSpecification -> (structure)\n\nThe current DynamoDB Streams configuration for the table.\n\nStreamEnabled -> (boolean)\n\nIndicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.\n\nStreamViewType -> (string)\n\nWhen an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nLatestStreamLabel -> (string)\n\nA timestamp, in ISO 8601 format, for this stream.\n\nNote that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:\n\nAWS customer ID\n\nTable name\n\nStreamLabel\n\nLatestStreamArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.\n\nGlobalTableVersion -> (string)\n\nRepresents the version of global tables in use, if the table is replicated across AWS Regions.\n\nReplicas -> (list)\n\nRepresents replicas of the table.\n\n(structure)\n\nContains the details of the replica.\n\nRegionName -> (string)\n\nThe name of the Region.\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.\n\nREGION_DISABLED - The replica is inaccessible because the AWS Region has been disabled.\n\nNote\n\nIf the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table is inaccessible.\n\nNote\n\nIf the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nReplicaStatusDescription -> (string)\n\nDetailed information about the replica status.\n\nReplicaStatusPercentProgress -> (string)\n\nSpecifies the progress of a Create, Update, or Delete action on the replica as a percentage.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not described, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nIf not described, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nReplicaInaccessibleDateTime -> (timestamp)\n\nThe time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.\n\nRestoreSummary -> (structure)\n\nContains details for the restore.\n\nSourceBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup from which the table was restored.\n\nSourceTableArn -> (string)\n\nThe ARN of the source table of the backup that is being restored.\n\nRestoreDateTime -> (timestamp)\n\nPoint in time or source backup time.\n\nRestoreInProgress -> (boolean)\n\nIndicates if a restore is in progress or not.\n\nSSEDescription -> (structure)\n\nThe description of the server-side encryption status on the specified table.\n\nStatus -> (string)\n\nRepresents the current state of server-side encryption. The only supported values are:\n\nENABLED - Server-side encryption is enabled.\n\nUPDATING - Server-side encryption is being updated.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyArn -> (string)\n\nThe AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.\n\nInaccessibleEncryptionDateTime -> (timestamp)\n\nIndicates the time, in UNIX epoch date format, when DynamoDB detected that the table’s AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table’s AWS KMS key is accessible again. DynamoDB will initiate the table archival process when table’s AWS KMS key remains inaccessible for more than seven days from this date.\n\nArchivalSummary -> (structure)\n\nContains information about the table archive.\n\nArchivalDateTime -> (timestamp)\n\nThe date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.\n\nArchivalReason -> (string)\n\nThe reason DynamoDB archived the table. Currently, the only possible value is:\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The table was archived due to the table’s AWS KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.\n\nArchivalBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.",
      "command_examples": "Examples\n\nTo describe a table\n\nThe following describe-table example describes the MusicCollection table.\n\naws dynamodb describe-table \\\n    --table-name MusicCollection\n\n\nOutput:\n\n{\n    \"Table\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"WriteCapacityUnits\": 5,\n            \"ReadCapacityUnits\": 5\n        },\n        \"TableSizeBytes\": 0,\n        \"TableName\": \"MusicCollection\",\n        \"TableStatus\": \"ACTIVE\",\n        \"KeySchema\": [\n            {\n                \"KeyType\": \"HASH\",\n                \"AttributeName\": \"Artist\"\n            },\n            {\n                \"KeyType\": \"RANGE\",\n                \"AttributeName\": \"SongTitle\"\n            }\n        ],\n        \"ItemCount\": 0,\n        \"CreationDateTime\": 1421866952.062\n    }\n}\n\n\nFor more information, see Describing a Table in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "describe-table-replica-auto-scaling",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-table-replica-auto-scaling.html",
      "command_description": "Description\n\nDescribes auto scaling settings across replicas of the global table at once.\n\nNote\n\nThis operation only applies to Version 2019.11.21 of global tables.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-table-replica-auto-scaling\n--table-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableAutoScalingDescription -> (structure)\n\nRepresents the auto scaling properties of the table.\n\nTableName -> (string)\n\nThe name of the table.\n\nTableStatus -> (string)\n\nThe current state of the table:\n\nCREATING - The table is being created.\n\nUPDATING - The table is being updated.\n\nDELETING - The table is being deleted.\n\nACTIVE - The table is ready for use.\n\nReplicas -> (list)\n\nRepresents replicas of the global table.\n\n(structure)\n\nRepresents the auto scaling settings of the replica.\n\nRegionName -> (string)\n\nThe Region where the replica exists.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index auto scaling settings.\n\n(structure)\n\nRepresents the auto scaling configuration for a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nIndexStatus -> (string)\n\nThe current state of the replica global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nProvisionedReadCapacityAutoScalingSettings -> (structure)\n\nRepresents the auto scaling settings for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nProvisionedWriteCapacityAutoScalingSettings -> (structure)\n\nRepresents the auto scaling settings for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaProvisionedReadCapacityAutoScalingSettings -> (structure)\n\nRepresents the auto scaling settings for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaProvisionedWriteCapacityAutoScalingSettings -> (structure)\n\nRepresents the auto scaling settings for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.",
      "command_examples": "Examples\n\nTo view auto scaling settings across replicas of a global table\n\nThe following describe-table-replica-auto-scaling example displays auto scaling settings across replicas of the MusicCollection global table.\n\naws dynamodb describe-table-replica-auto-scaling \\\n    --table-name MusicCollection\n\n\nOutput:\n\n{\n    \"TableAutoScalingDescription\": {\n        \"TableName\": \"MusicCollection\",\n        \"TableStatus\": \"ACTIVE\",\n        \"Replicas\": [\n            {\n                \"RegionName\": \"us-east-1\",\n                \"GlobalSecondaryIndexes\": [],\n                \"ReplicaProvisionedReadCapacityAutoScalingSettings\": {\n                    \"MinimumUnits\": 5,\n                    \"MaximumUnits\": 40000,\n                    \"AutoScalingRoleArn\": \"arn:aws:iam::123456789012:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable\",\n                    \"ScalingPolicies\": [\n                        {\n                            \"PolicyName\": \"DynamoDBReadCapacityUtilization:table/MusicCollection\",\n                            \"TargetTrackingScalingPolicyConfiguration\": {\n                                \"TargetValue\": 70.0\n                            }\n                        }\n                    ]\n                },\n                \"ReplicaProvisionedWriteCapacityAutoScalingSettings\": {\n                    \"MinimumUnits\": 5,\n                    \"MaximumUnits\": 40000,\n                    \"AutoScalingRoleArn\": \"arn:aws:iam::123456789012:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable\",\n                    \"ScalingPolicies\": [\n                        {\n                            \"PolicyName\": \"DynamoDBWriteCapacityUtilization:table/MusicCollection\",\n                            \"TargetTrackingScalingPolicyConfiguration\": {\n                                \"TargetValue\": 70.0\n                            }\n                        }\n                    ]\n                },\n                \"ReplicaStatus\": \"ACTIVE\"\n            },\n            {\n                \"RegionName\": \"us-east-2\",\n                \"GlobalSecondaryIndexes\": [],\n                \"ReplicaProvisionedReadCapacityAutoScalingSettings\": {\n                    \"MinimumUnits\": 5,\n                    \"MaximumUnits\": 40000,\n                    \"AutoScalingRoleArn\": \"arn:aws:iam::123456789012:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable\",\n                    \"ScalingPolicies\": [\n                        {\n                            \"PolicyName\": \"DynamoDBReadCapacityUtilization:table/MusicCollection\",\n                            \"TargetTrackingScalingPolicyConfiguration\": {\n                                \"TargetValue\": 70.0\n                            }\n                        }\n                    ]\n                },\n                \"ReplicaProvisionedWriteCapacityAutoScalingSettings\": {\n                    \"MinimumUnits\": 5,\n                    \"MaximumUnits\": 40000,\n                    \"AutoScalingRoleArn\": \"arn:aws:iam::123456789012:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable\",\n                    \"ScalingPolicies\": [\n                        {\n                            \"PolicyName\": \"DynamoDBWriteCapacityUtilization:table/MusicCollection\",\n                            \"TargetTrackingScalingPolicyConfiguration\": {\n                                \"TargetValue\": 70.0\n                            }\n                        }\n                    ]\n                },\n                \"ReplicaStatus\": \"ACTIVE\"\n            }\n        ]\n    }\n}\n\n\nFor more information, see DynamoDB Global Tables in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "describe-time-to-live",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/describe-time-to-live.html",
      "command_description": "Description\n\nGives a description of the Time to Live (TTL) status on the specified table.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-time-to-live\n--table-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table to be described.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTimeToLiveDescription -> (structure)\n\nTimeToLiveStatus -> (string)\n\nThe TTL status for the table.\n\nAttributeName -> (string)\n\nThe name of the TTL attribute for items in the table.",
      "command_examples": "Examples\n\nTo view Time to Live settings for a table\n\nThe following describe-time-to-live example displays Time to Live settings for the MusicCollection table.\n\naws dynamodb describe-time-to-live \\\n    --table-name MusicCollection\n\n\nOutput:\n\n{\n    \"TimeToLiveDescription\": {\n        \"TimeToLiveStatus\": \"ENABLED\",\n        \"AttributeName\": \"ttl\"\n    }\n}\n\n\nFor more information, see Time to Live in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "disable-kinesis-streaming-destination",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/disable-kinesis-streaming-destination.html",
      "command_description": "Description\n\nStops replication from the DynamoDB table to the Kinesis data stream. This is done without deleting either of the resources.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  disable-kinesis-streaming-destination\n--table-name <value>\n--stream-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "--stream-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the DynamoDB table.\n\n--stream-arn (string)\n\nThe ARN for a Kinesis data stream.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableName -> (string)\n\nThe name of the table being modified.\n\nStreamArn -> (string)\n\nThe ARN for the specific Kinesis data stream.\n\nDestinationStatus -> (string)\n\nThe current status of the replication."
    },
    {
      "command_name": "enable-kinesis-streaming-destination",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/enable-kinesis-streaming-destination.html",
      "command_description": "Description\n\nStarts table data replication to the specified Kinesis data stream at a timestamp chosen during the enable workflow. If this operation doesn’t return results immediately, use DescribeKinesisStreamingDestination to check if streaming to the Kinesis data stream is ACTIVE.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  enable-kinesis-streaming-destination\n--table-name <value>\n--stream-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "--stream-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the DynamoDB table.\n\n--stream-arn (string)\n\nThe ARN for a Kinesis data stream.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableName -> (string)\n\nThe name of the table being modified.\n\nStreamArn -> (string)\n\nThe ARN for the specific Kinesis data stream.\n\nDestinationStatus -> (string)\n\nThe current status of the replication."
    },
    {
      "command_name": "execute-statement",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/execute-statement.html",
      "command_description": "Description\n\nThis operation allows you to perform reads and singleton writes on data stored in DynamoDB, using PartiQL.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  execute-statement\n--statement <value>\n[--parameters <value>]\n[--consistent-read | --no-consistent-read]\n[--next-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--statement <value>",
        "[--parameters <value>]",
        "[--consistent-read | --no-consistent-read]",
        "[--next-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--statement (string)\n\nThe PartiQL statement representing the operation to run.\n\n--parameters (list)\n\nThe parameters for the PartiQL statement, if any.\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n[\n  {\n    \"S\": \"string\",\n    \"N\": \"string\",\n    \"B\": blob,\n    \"SS\": [\"string\", ...],\n    \"NS\": [\"string\", ...],\n    \"BS\": [blob, ...],\n    \"M\": {\"string\": {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": { ... recursive ... }\n            ...},\n          \"L\": [\n            { ... recursive ... }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n      ...},\n    \"L\": [\n      {\n        \"S\": \"string\",\n        \"N\": \"string\",\n        \"B\": blob,\n        \"SS\": [\"string\", ...],\n        \"NS\": [\"string\", ...],\n        \"BS\": [blob, ...],\n        \"M\": {\"string\": { ... recursive ... }\n          ...},\n        \"L\": [\n          { ... recursive ... }\n          ...\n        ],\n        \"NULL\": true|false,\n        \"BOOL\": true|false\n      }\n      ...\n    ],\n    \"NULL\": true|false,\n    \"BOOL\": true|false\n  }\n  ...\n]\n\n\n--consistent-read | --no-consistent-read (boolean)\n\nThe consistency of a read operation. If set to true , then a strongly consistent read is used; otherwise, an eventually consistent read is used.\n\n--next-token (string)\n\nSet this value to get remaining results, if NextToken was returned in the statement response.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nItems -> (list)\n\nIf a read operation was used, this property will contain the result of the reade operation; a map of attribute names and their values. For the write operations this value will be empty.\n\n(map)\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNextToken -> (string)\n\nIf the response of a read request exceeds the response payload limit DynamoDB will set this value in the response. If set, you can use that this value in the subsequent request to get the remaining results."
    },
    {
      "command_name": "execute-transaction",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/execute-transaction.html",
      "command_description": "Description\n\nThis operation allows you to perform transactional reads or writes on data stored in DynamoDB, using PartiQL.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  execute-transaction\n--transact-statements <value>\n[--client-request-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--transact-statements <value>",
        "[--client-request-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--transact-statements (list)\n\nThe list of PartiQL statements representing the transaction to run.\n\n(structure)\n\nRepresents a PartiQL statment that uses parameters.\n\nStatement -> (string)\n\nA PartiQL statment that uses parameters.\n\nParameters -> (list)\n\nThe parameter values.\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n[\n  {\n    \"Statement\": \"string\",\n    \"Parameters\": [\n      {\n        \"S\": \"string\",\n        \"N\": \"string\",\n        \"B\": blob,\n        \"SS\": [\"string\", ...],\n        \"NS\": [\"string\", ...],\n        \"BS\": [blob, ...],\n        \"M\": {\"string\": {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n          ...},\n        \"L\": [\n          {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n          ...\n        ],\n        \"NULL\": true|false,\n        \"BOOL\": true|false\n      }\n      ...\n    ]\n  }\n  ...\n]\n\n\n--client-request-token (string)\n\nSet this value to get remaining results, if NextToken was returned in the statement response.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nResponses -> (list)\n\nThe response to a PartiQL transaction.\n\n(structure)\n\nDetails for the requested item.\n\nItem -> (map)\n\nMap of attribute data consisting of the data type and attribute value.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true"
    },
    {
      "command_name": "export-table-to-point-in-time",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/export-table-to-point-in-time.html",
      "command_description": "Description\n\nExports table data to an S3 bucket. The table must have point in time recovery enabled, and you can export data from any time within the point in time recovery window.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  export-table-to-point-in-time\n--table-arn <value>\n[--export-time <value>]\n[--client-token <value>]\n--s3-bucket <value>\n[--s3-bucket-owner <value>]\n[--s3-prefix <value>]\n[--s3-sse-algorithm <value>]\n[--s3-sse-kms-key-id <value>]\n[--export-format <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-arn <value>",
        "[--export-time <value>]",
        "[--client-token <value>]",
        "--s3-bucket <value>",
        "[--s3-bucket-owner <value>]",
        "[--s3-prefix <value>]",
        "[--s3-sse-algorithm <value>]",
        "[--s3-sse-kms-key-id <value>]",
        "[--export-format <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-arn (string)\n\nThe Amazon Resource Name (ARN) associated with the table to export.\n\n--export-time (timestamp)\n\nTime in the past from which to export table data. The table export will be a snapshot of the table’s state at this point in time.\n\n--client-token (string)\n\nProviding a ClientToken makes the call to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call.\n\nA client token is valid for 8 hours after the first request that uses it is completed. After 8 hours, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 8 hours, or the result might not be idempotent.\n\nIf you submit a request with the same client token but a change in other parameters within the 8-hour idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.\n\n--s3-bucket (string)\n\nThe name of the Amazon S3 bucket to export the snapshot to.\n\n--s3-bucket-owner (string)\n\nThe ID of the AWS account that owns the bucket the export will be stored in.\n\n--s3-prefix (string)\n\nThe Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.\n\n--s3-sse-algorithm (string)\n\nType of encryption used on the bucket where export data will be stored. Valid values for S3SseAlgorithm are:\n\nAES256 - server-side encryption with Amazon S3 managed keys\n\nKMS - server-side encryption with AWS KMS managed keys\n\nPossible values:\n\nAES256\n\nKMS\n\n--s3-sse-kms-key-id (string)\n\nThe ID of the AWS KMS managed key used to encrypt the S3 bucket where export data will be stored (if applicable).\n\n--export-format (string)\n\nThe format for the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION .\n\nPossible values:\n\nDYNAMODB_JSON\n\nION\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nExportDescription -> (structure)\n\nContains a description of the table export.\n\nExportArn -> (string)\n\nThe Amazon Resource Name (ARN) of the table export.\n\nExportStatus -> (string)\n\nExport can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.\n\nStartTime -> (timestamp)\n\nThe time at which the export task began.\n\nEndTime -> (timestamp)\n\nThe time at which the export task completed.\n\nExportManifest -> (string)\n\nThe name of the manifest file for the export task.\n\nTableArn -> (string)\n\nThe Amazon Resource Name (ARN) of the table that was exported.\n\nTableId -> (string)\n\nUnique ID of the table that was exported.\n\nExportTime -> (timestamp)\n\nPoint in time from which table data was exported.\n\nClientToken -> (string)\n\nThe client token that was provided for the export task. A client token makes calls to ExportTableToPointInTimeInput idempotent, meaning that multiple identical calls have the same effect as one single call.\n\nS3Bucket -> (string)\n\nThe name of the Amazon S3 bucket containing the export.\n\nS3BucketOwner -> (string)\n\nThe ID of the AWS account that owns the bucket containing the export.\n\nS3Prefix -> (string)\n\nThe Amazon S3 bucket prefix used as the file name and path of the exported snapshot.\n\nS3SseAlgorithm -> (string)\n\nType of encryption used on the bucket where export data is stored. Valid values for S3SseAlgorithm are:\n\nAES256 - server-side encryption with Amazon S3 managed keys\n\nKMS - server-side encryption with AWS KMS managed keys\n\nS3SseKmsKeyId -> (string)\n\nThe ID of the AWS KMS managed key used to encrypt the S3 bucket where export data is stored (if applicable).\n\nFailureCode -> (string)\n\nStatus code for the result of the failed export.\n\nFailureMessage -> (string)\n\nExport failure reason description.\n\nExportFormat -> (string)\n\nThe format of the exported data. Valid values for ExportFormat are DYNAMODB_JSON or ION .\n\nBilledSizeBytes -> (long)\n\nThe billable size of the table export.\n\nItemCount -> (long)\n\nThe number of items exported."
    },
    {
      "command_name": "get-item",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/get-item.html",
      "command_description": "Description\n\nThe GetItem operation returns a set of attributes for the item with the given primary key. If there is no matching item, GetItem does not return any data and there will be no Item element in the response.\n\nGetItem provides an eventually consistent read by default. If your application requires a strongly consistent read, set ConsistentRead to true . Although a strongly consistent read might take more time than an eventually consistent read, it always returns the last updated value.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-item\n--table-name <value>\n--key <value>\n[--attributes-to-get <value>]\n[--consistent-read | --no-consistent-read]\n[--return-consumed-capacity <value>]\n[--projection-expression <value>]\n[--expression-attribute-names <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "--key <value>",
        "[--attributes-to-get <value>]",
        "[--consistent-read | --no-consistent-read]",
        "[--return-consumed-capacity <value>]",
        "[--projection-expression <value>]",
        "[--expression-attribute-names <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table containing the requested item.\n\n--key (map)\n\nA map of attribute names to AttributeValue objects, representing the primary key of the item to retrieve.\n\nFor the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"S\": \"string\",\n      \"N\": \"string\",\n      \"B\": blob,\n      \"SS\": [\"string\", ...],\n      \"NS\": [\"string\", ...],\n      \"BS\": [blob, ...],\n      \"M\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"L\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": { ... recursive ... }\n            ...},\n          \"L\": [\n            { ... recursive ... }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"NULL\": true|false,\n      \"BOOL\": true|false\n    }\n  ...}\n\n\n--attributes-to-get (list)\n\nThis is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--consistent-read | --no-consistent-read (boolean)\n\nDetermines the read consistency model: If set to true , then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.\n\n--return-consumed-capacity (string)\n\nDetermines the level of detail about provisioned throughput consumption that is returned in the response:\n\nINDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem , do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).\n\nTOTAL - The response includes only the aggregate ConsumedCapacity for the operation.\n\nNONE - No ConsumedCapacity details are included in the response.\n\nPossible values:\n\nINDEXES\n\nTOTAL\n\nNONE\n\n--projection-expression (string)\n\nA string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n\nIf no attribute names are specified, then all attributes are returned. If any of the requested attributes are not found, they do not appear in the result.\n\nFor more information, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .\n\n--expression-attribute-names (map)\n\nOne or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\n\nTo access an attribute whose name conflicts with a DynamoDB reserved word.\n\nTo create a placeholder for repeating occurrences of an attribute name in an expression.\n\nTo prevent special characters in an attribute name from being misinterpreted in an expression.\n\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\n\nPercentile\n\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\n\n{\"#P\":\"Percentile\"}\n\nYou could then use this substitution in an expression, as in this example:\n\n#P = :val\n\nNote\n\nTokens that begin with the : character are expression attribute values , which are placeholders for the actual value at runtime.\n\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nItem -> (map)\n\nA map of attribute names to AttributeValue objects, as specified by ProjectionExpression .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nConsumedCapacity -> (structure)\n\nThe capacity units consumed by the GetItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Read/Write Capacity Mode in the Amazon DynamoDB Developer Guide .\n\nTableName -> (string)\n\nThe name of the table that was affected by the operation.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed by the operation.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed by the operation.\n\nTable -> (structure)\n\nThe amount of throughput consumed on the table affected by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nLocalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each local index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nGlobalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each global index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.",
      "command_examples": "Examples\n\nExample 1: To read an item in a table\n\nThe following get-item example retrieves an item from the MusicCollection table. The table has a hash-and-range primary key (Artist and SongTitle), so you must specify both of these attributes. The command also requests information about the read capacity consumed by the operation.\n\naws dynamodb get-item \\\n    --table-name MusicCollection \\\n    --key file://key.json \\\n    --return-consumed-capacity TOTAL\n\n\nContents of key.json:\n\n{\n    \"Artist\": {\"S\": \"Acme Band\"},\n    \"SongTitle\": {\"S\": \"Happy Day\"}\n}\n\n\nOutput:\n\n{\n    \"Item\": {\n        \"AlbumTitle\": {\n            \"S\": \"Songs About Life\"\n        },\n        \"SongTitle\": {\n            \"S\": \"Happy Day\"\n        },\n        \"Artist\": {\n            \"S\": \"Acme Band\"\n        }\n    },\n    \"ConsumedCapacity\": {\n        \"TableName\": \"MusicCollection\",\n        \"CapacityUnits\": 0.5\n    }\n}\n\n\nFor more information, see Reading an Item in the Amazon DynamoDB Developer Guide.\n\nExample 2: To read an item using a consistent read\n\nThe following example retrieves an item from the MusicCollection table using strongly consistent reads.\n\naws dynamodb get-item \\\n    --table-name MusicCollection \\\n    --key file://key.json \\\n    --consistent-read \\\n    --return-consumed-capacity TOTAL\n\n\nContents of key.json:\n\n{\n    \"Artist\": {\"S\": \"Acme Band\"},\n    \"SongTitle\": {\"S\": \"Happy Day\"}\n}\n\n\nOutput:\n\n{\n    \"Item\": {\n        \"AlbumTitle\": {\n            \"S\": \"Songs About Life\"\n        },\n        \"SongTitle\": {\n            \"S\": \"Happy Day\"\n        },\n        \"Artist\": {\n            \"S\": \"Acme Band\"\n        }\n    },\n    \"ConsumedCapacity\": {\n        \"TableName\": \"MusicCollection\",\n        \"CapacityUnits\": 1.0\n    }\n}\n\n\nFor more information, see Reading an Item in the Amazon DynamoDB Developer Guide.\n\nExample 3: To retrieve specific attributes of an item\n\nThe following example uses a projection expression to retrieve only three attributes of the desired item.\n\naws dynamodb get-item \\\n    --table-name ProductCatalog \\\n    --key '{\"Id\": {\"N\": \"102\"}}' \\\n    --projection-expression \"#T, #C, #P\" \\\n    --expression-attribute-names file://names.json\n\n\nContents of names.json:\n\n{\n    \"#T\": \"Title\",\n    \"#C\": \"ProductCategory\",\n    \"#P\": \"Price\"\n}\n\n\nOutput:\n\n{\n    \"Item\": {\n        \"Price\": {\n            \"N\": \"20\"\n        },\n        \"Title\": {\n            \"S\": \"Book 102 Title\"\n        },\n        \"ProductCategory\": {\n            \"S\": \"Book\"\n        }\n    }\n}\n\n\nFor more information, see Reading an Item in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "list-backups",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/list-backups.html",
      "command_description": "Description\n\nList backups associated with an AWS account. To list backups for a given table, specify TableName . ListBackups returns a paginated list of results with at most 1 MB worth of items in a page. You can also specify a maximum number of entries to be returned in a page.\n\nIn the request, start time is inclusive, but end time is exclusive. Note that these boundaries are for the time at which the original backup was requested.\n\nYou can call ListBackups a maximum of five times per second.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-backups is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: BackupSummaries",
      "command_synopsis": "Synopsis\n  list-backups\n[--table-name <value>]\n[--time-range-lower-bound <value>]\n[--time-range-upper-bound <value>]\n[--backup-type <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--table-name <value>]",
        "[--time-range-lower-bound <value>]",
        "[--time-range-upper-bound <value>]",
        "[--backup-type <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe backups from the table specified by TableName are listed.\n\n--time-range-lower-bound (timestamp)\n\nOnly backups created after this time are listed. TimeRangeLowerBound is inclusive.\n\n--time-range-upper-bound (timestamp)\n\nOnly backups created before this time are listed. TimeRangeUpperBound is exclusive.\n\n--backup-type (string)\n\nThe backups from the table specified by BackupType are listed.\n\nWhere BackupType can be:\n\nUSER - On-demand backup created by you.\n\nSYSTEM - On-demand backup automatically created by DynamoDB.\n\nALL - All types of on-demand backups (USER and SYSTEM).\n\nPossible values:\n\nUSER\n\nSYSTEM\n\nAWS_BACKUP\n\nALL\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nBackupSummaries -> (list)\n\nList of BackupSummary objects.\n\n(structure)\n\nContains details for the backup.\n\nTableName -> (string)\n\nName of the table.\n\nTableId -> (string)\n\nUnique identifier for the table.\n\nTableArn -> (string)\n\nARN associated with the table.\n\nBackupArn -> (string)\n\nARN associated with the backup.\n\nBackupName -> (string)\n\nName of the specified backup.\n\nBackupCreationDateTime -> (timestamp)\n\nTime at which the backup was created.\n\nBackupExpiryDateTime -> (timestamp)\n\nTime at which the automatic on-demand backup created by DynamoDB will expire. This SYSTEM on-demand backup expires automatically 35 days after its creation.\n\nBackupStatus -> (string)\n\nBackup can be in one of the following states: CREATING, ACTIVE, DELETED.\n\nBackupType -> (string)\n\nBackupType:\n\nUSER - You create and manage these using the on-demand backup feature.\n\nSYSTEM - If you delete a table with point-in-time recovery enabled, a SYSTEM backup is automatically created and is retained for 35 days (at no additional cost). System backups allow you to restore the deleted table to the state it was in just before the point of deletion.\n\nAWS_BACKUP - On-demand backup created by you from AWS Backup service.\n\nBackupSizeBytes -> (long)\n\nSize of the backup in bytes.\n\nLastEvaluatedBackupArn -> (string)\n\nThe ARN of the backup last evaluated when the current page of results was returned, inclusive of the current page of results. This value may be specified as the ExclusiveStartBackupArn of a new ListBackups operation in order to fetch the next page of results.\n\nIf LastEvaluatedBackupArn is empty, then the last page of results has been processed and there are no more results to be retrieved.\n\nIf LastEvaluatedBackupArn is not empty, this may or may not indicate that there is more data to be returned. All results are guaranteed to have been returned if and only if no value for LastEvaluatedBackupArn is returned.",
      "command_examples": "Examples\n\nExample 1: To list all existing DynamoDB backups\n\nThe following list-backups example lists all of your existing backups.\n\naws dynamodb list-backups\n\n\nOutput:\n\n{\n    \"BackupSummaries\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n            \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"BackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01234567890123-a1bcd234\",\n            \"BackupName\": \"MusicCollectionBackup1\",\n            \"BackupCreationDateTime\": \"2020-02-12T14:41:51.617000-08:00\",\n            \"BackupStatus\": \"AVAILABLE\",\n            \"BackupType\": \"USER\",\n            \"BackupSizeBytes\": 170\n        },\n        {\n            \"TableName\": \"MusicCollection\",\n            \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n            \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"BackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01234567890123-b2abc345\",\n            \"BackupName\": \"MusicCollectionBackup2\",\n            \"BackupCreationDateTime\": \"2020-06-26T11:08:35.431000-07:00\",\n            \"BackupStatus\": \"AVAILABLE\",\n            \"BackupType\": \"USER\",\n            \"BackupSizeBytes\": 400\n        }\n    ]\n}\n\n\nFor more information, see On-Demand Backup and Restore for DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 2: To list user-created backups in a specific time range\n\nThe following example lists only backups of the MusicCollection table that were created by the user (not those automatically created by DynamoDB) with a creation date between January 1, 2020 and March 1, 2020.\n\naws dynamodb list-backups \\\n    --table-name MusicCollection \\\n    --time-range-lower-bound 1577836800 \\\n    --time-range-upper-bound 1583020800 \\\n    --backup-type USER\n\n\nOutput:\n\n{\n    \"BackupSummaries\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n            \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"BackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01234567890123-a1bcd234\",\n            \"BackupName\": \"MusicCollectionBackup1\",\n            \"BackupCreationDateTime\": \"2020-02-12T14:41:51.617000-08:00\",\n            \"BackupStatus\": \"AVAILABLE\",\n            \"BackupType\": \"USER\",\n            \"BackupSizeBytes\": 170\n        }\n    ]\n}\n\n\nFor more information, see On-Demand Backup and Restore for DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 3: To limit page size\n\nThe following example returns a list of all existing backups, but retrieves only one item in each call, performing multiple calls if necessary to get the entire list. Limiting the page size is useful when running list commands on a large number of resources, which can result in a “timed out” error when using the default page size of 1000.\n\naws dynamodb list-backups \\\n    --page-size 1\n\n\nOutput:\n\n{\n    \"BackupSummaries\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n            \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"BackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01234567890123-a1bcd234\",\n            \"BackupName\": \"MusicCollectionBackup1\",\n            \"BackupCreationDateTime\": \"2020-02-12T14:41:51.617000-08:00\",\n            \"BackupStatus\": \"AVAILABLE\",\n            \"BackupType\": \"USER\",\n            \"BackupSizeBytes\": 170\n        },\n        {\n            \"TableName\": \"MusicCollection\",\n            \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n            \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"BackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01234567890123-b2abc345\",\n            \"BackupName\": \"MusicCollectionBackup2\",\n            \"BackupCreationDateTime\": \"2020-06-26T11:08:35.431000-07:00\",\n            \"BackupStatus\": \"AVAILABLE\",\n            \"BackupType\": \"USER\",\n            \"BackupSizeBytes\": 400\n        }\n    ]\n}\n\n\nFor more information, see On-Demand Backup and Restore for DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 4: To limit the number of items returned\n\nThe following example limits the number of items returned to 1. The response includes a NextToken value with which to retrieve the next page of results.\n\naws dynamodb list-backups \\\n    --max-items 1\n\n\nOutput:\n\n{\n    \"BackupSummaries\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n            \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"BackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01234567890123-a1bcd234\",\n            \"BackupName\": \"MusicCollectionBackup1\",\n            \"BackupCreationDateTime\": \"2020-02-12T14:41:51.617000-08:00\",\n            \"BackupStatus\": \"AVAILABLE\",\n            \"BackupType\": \"USER\",\n            \"BackupSizeBytes\": 170\n        }\n    ],\n    \"NextToken\": \"abCDeFGhiJKlmnOPqrSTuvwxYZ1aBCdEFghijK7LM51nOpqRSTuv3WxY3ZabC5dEFGhI2Jk3LmnoPQ6RST9\"\n}\n\n\nFor more information, see On-Demand Backup and Restore for DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 5: To retrieve the next page of results\n\nThe following command uses the NextToken value from a previous call to the list-backups command to retrieve another page of results. Since the response in this case does not include a NextToken value, we know that we have reached the end of the results.\n\naws dynamodb list-backups \\\n    --starting-token abCDeFGhiJKlmnOPqrSTuvwxYZ1aBCdEFghijK7LM51nOpqRSTuv3WxY3ZabC5dEFGhI2Jk3LmnoPQ6RST9\n\n\nOutput\n\n{\n    \"BackupSummaries\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"TableId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n            \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"BackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01234567890123-b2abc345\",\n            \"BackupName\": \"MusicCollectionBackup2\",\n            \"BackupCreationDateTime\": \"2020-06-26T11:08:35.431000-07:00\",\n            \"BackupStatus\": \"AVAILABLE\",\n            \"BackupType\": \"USER\",\n            \"BackupSizeBytes\": 400\n        }\n    ]\n}\n\n\nFor more information, see On-Demand Backup and Restore for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "list-contributor-insights",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/list-contributor-insights.html",
      "command_description": "Description\n\nReturns a list of ContributorInsightsSummary for a table and all its global secondary indexes.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-contributor-insights\n[--table-name <value>]\n[--next-token <value>]\n[--max-results <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--table-name <value>]",
        "[--next-token <value>]",
        "[--max-results <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table.\n\n--next-token (string)\n\nA token to for the desired page, if there is one.\n\n--max-results (integer)\n\nMaximum number of results to return per page.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nContributorInsightsSummaries -> (list)\n\nA list of ContributorInsightsSummary.\n\n(structure)\n\nRepresents a Contributor Insights summary entry.\n\nTableName -> (string)\n\nName of the table associated with the summary.\n\nIndexName -> (string)\n\nName of the index associated with the summary, if any.\n\nContributorInsightsStatus -> (string)\n\nDescribes the current status for contributor insights for the given table and index, if applicable.\n\nNextToken -> (string)\n\nA token to go to the next page if there is one.",
      "command_examples": "Examples\n\nExample 1: To view a list of Contributor Insights summaries\n\nThe following list-contributor-insights example displays a list of Contributor Insights summaries.\n\naws dynamodb list-contributor-insights\n\n\nOutput:\n\n{\n    \"ContributorInsightsSummaries\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"IndexName\": \"AlbumTitle-index\",\n            \"ContributorInsightsStatus\": \"ENABLED\"\n        },\n        {\n            \"TableName\": \"ProductCatalog\",\n            \"ContributorInsightsStatus\": \"ENABLED\"\n        },\n        {\n            \"TableName\": \"Forum\",\n            \"ContributorInsightsStatus\": \"ENABLED\"\n        },\n        {\n            \"TableName\": \"Reply\",\n            \"ContributorInsightsStatus\": \"ENABLED\"\n        },\n        {\n            \"TableName\": \"Thread\",\n            \"ContributorInsightsStatus\": \"ENABLED\"\n        }\n    ]\n}\n\n\nFor more information, see Analyzing Data Access Using CloudWatch Contributor Insights for DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 2: To limit the number of items returned\n\nThe following example limits the number of items returned to 4. The response includes a NextToken value with which to retrieve the next page of results.\n\naws dynamodb list-contributor-insights \\\n    --max-results 4\n\n\nOutput:\n\n{\n    \"ContributorInsightsSummaries\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"IndexName\": \"AlbumTitle-index\",\n            \"ContributorInsightsStatus\": \"ENABLED\"\n        },\n        {\n            \"TableName\": \"ProductCatalog\",\n            \"ContributorInsightsStatus\": \"ENABLED\"\n        },\n        {\n            \"TableName\": \"Forum\",\n            \"ContributorInsightsStatus\": \"ENABLED\"\n        }\n    ],\n    \"NextToken\": \"abCDeFGhiJKlmnOPqrSTuvwxYZ1aBCdEFghijK7LM51nOpqRSTuv3WxY3ZabC5dEFGhI2Jk3LmnoPQ6RST9\"\n}\n\n\nFor more information, see Analyzing Data Access Using CloudWatch Contributor Insights for DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 3: To retrieve the next page of results\n\nThe following command uses the NextToken value from a previous call to the list-contributor-insights command to retrieve another page of results. Since the response in this case does not include a NextToken value, we know that we have reached the end of the results.\n\naws dynamodb list-contributor-insights \\\n    --max-results 4 \\\n    --next-token abCDeFGhiJKlmnOPqrSTuvwxYZ1aBCdEFghijK7LM51nOpqRSTuv3WxY3ZabC5dEFGhI2Jk3LmnoPQ6RST9\n\n\nOutput:\n\n{\n    \"ContributorInsightsSummaries\": [\n        {\n            \"TableName\": \"Reply\",\n            \"ContributorInsightsStatus\": \"ENABLED\"\n        },\n        {\n            \"TableName\": \"Thread\",\n            \"ContributorInsightsStatus\": \"ENABLED\"\n        }\n    ]\n}\n\n\nFor more information, see Analyzing Data Access Using CloudWatch Contributor Insights for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "list-exports",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/list-exports.html",
      "command_description": "Description\n\nLists completed exports within the past 90 days.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-exports\n[--table-arn <value>]\n[--max-results <value>]\n[--next-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--table-arn <value>]",
        "[--max-results <value>]",
        "[--next-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-arn (string)\n\nThe Amazon Resource Name (ARN) associated with the exported table.\n\n--max-results (integer)\n\nMaximum number of results to return per page.\n\n--next-token (string)\n\nAn optional string that, if supplied, must be copied from the output of a previous call to ListExports . When provided in this manner, the API fetches the next page of results.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nExportSummaries -> (list)\n\nA list of ExportSummary objects.\n\n(structure)\n\nSummary information about an export task.\n\nExportArn -> (string)\n\nThe Amazon Resource Name (ARN) of the export.\n\nExportStatus -> (string)\n\nExport can be in one of the following states: IN_PROGRESS, COMPLETED, or FAILED.\n\nNextToken -> (string)\n\nIf this value is returned, there are additional results to be displayed. To retrieve them, call ListExports again, with NextToken set to this value."
    },
    {
      "command_name": "list-global-tables",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/list-global-tables.html",
      "command_description": "Description\n\nLists all global tables that have a replica in the specified Region.\n\nNote\n\nThis operation only applies to Version 2017.11.29 of global tables.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-global-tables\n[--exclusive-start-global-table-name <value>]\n[--limit <value>]\n[--region-name <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--exclusive-start-global-table-name <value>]",
        "[--limit <value>]",
        "[--region-name <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--exclusive-start-global-table-name (string)\n\nThe first global table name that this operation will evaluate.\n\n--limit (integer)\n\nThe maximum number of table names to return, if the parameter is not specified DynamoDB defaults to 100.\n\nIf the number of global tables DynamoDB finds reaches this limit, it stops the operation and returns the table names collected up to that point, with a table name in the LastEvaluatedGlobalTableName to apply in a subsequent operation to the ExclusiveStartGlobalTableName parameter.\n\n--region-name (string)\n\nLists the global tables in a specific Region.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nGlobalTables -> (list)\n\nList of global table names.\n\n(structure)\n\nRepresents the properties of a global table.\n\nGlobalTableName -> (string)\n\nThe global table name.\n\nReplicationGroup -> (list)\n\nThe Regions where the global table has replicas.\n\n(structure)\n\nRepresents the properties of a replica.\n\nRegionName -> (string)\n\nThe Region where the replica needs to be created.\n\nLastEvaluatedGlobalTableName -> (string)\n\nLast evaluated global table name.",
      "command_examples": "Examples\n\nTo list existing DynamoDB global tables\n\nThe following list-global-tables example lists all of your existing global tables.\n\naws dynamodb list-global-tables\n\n\nOutput:\n\n{\n    \"GlobalTables\": [\n        {\n            \"GlobalTableName\": \"MusicCollection\",\n            \"ReplicationGroup\": [\n                {\n                    \"RegionName\": \"us-east-2\"\n                },\n                {\n                    \"RegionName\": \"us-east-1\"\n                }\n            ]\n        }\n    ]\n}\n\n\nFor more information, see DynamoDB Global Tables in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "list-tables",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/list-tables.html",
      "command_description": "Description\n\nReturns an array of table names associated with the current account and endpoint. The output from ListTables is paginated, with each page returning a maximum of 100 table names.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-tables is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: TableNames",
      "command_synopsis": "Synopsis\n  list-tables\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableNames -> (list)\n\nThe names of the tables associated with the current account at the current endpoint. The maximum size of this array is 100.\n\nIf LastEvaluatedTableName also appears in the output, you can use this value as the ExclusiveStartTableName parameter in a subsequent ListTables request and obtain the next page of results.\n\n(string)\n\nLastEvaluatedTableName -> (string)\n\nThe name of the last table in the current page of results. Use this value as the ExclusiveStartTableName in a new request to obtain the next page of results, until all the table names are returned.\n\nIf you do not receive a LastEvaluatedTableName value in the response, this means that there are no more table names to be retrieved.",
      "command_examples": "Examples\n\nExample 1: To list tables\n\nThe following list-tables example lists all of the tables associated with the current AWS account and Region.\n\naws dynamodb list-tables\n\n\nOutput:\n\n{\n    \"TableNames\": [\n        \"Forum\",\n        \"ProductCatalog\",\n        \"Reply\",\n        \"Thread\"\n    ]\n}\n\n\nFor more information, see Listing Table Names in the Amazon DynamoDB Developer Guide.\n\nExample 2: To limit page size\n\nThe following example returns a list of all existing tables, but retrieves only one item in each call, performing multiple calls if necessary to get the entire list. Limiting the page size is useful when running list commands on a large number of resources, which can result in a “timed out” error when using the default page size of 1000.\n\naws dynamodb list-tables \\\n    --page-size 1\n\n\nOutput:\n\n{\n    \"TableNames\": [\n        \"Forum\",\n        \"ProductCatalog\",\n        \"Reply\",\n        \"Thread\"\n    ]\n}\n\n\nFor more information, see Listing Table Names in the Amazon DynamoDB Developer Guide.\n\nExample 3: To limit the number of items returned\n\nThe following example limits the number of items returned to 2. The response includes a NextToken value with which to retrieve the next page of results.\n\naws dynamodb list-tables \\\n    --max-items 2\n\n\nOutput:\n\n{\n    \"TableNames\": [\n        \"Forum\",\n        \"ProductCatalog\"\n    ],\n    \"NextToken\": \"abCDeFGhiJKlmnOPqrSTuvwxYZ1aBCdEFghijK7LM51nOpqRSTuv3WxY3ZabC5dEFGhI2Jk3LmnoPQ6RST9\"\n}\n\n\nFor more information, see Listing Table Names in the Amazon DynamoDB Developer Guide.\n\nExample 4: To retrieve the next page of results\n\nThe following command uses the NextToken value from a previous call to the list-tables command to retrieve another page of results. Since the response in this case does not include a NextToken value, we know that we have reached the end of the results.\n\naws dynamodb list-tables \\\n    --starting-token abCDeFGhiJKlmnOPqrSTuvwxYZ1aBCdEFghijK7LM51nOpqRSTuv3WxY3ZabC5dEFGhI2Jk3LmnoPQ6RST9\n\n\nOutput:\n\n{\n    \"TableNames\": [\n        \"Reply\",\n        \"Thread\"\n    ]\n}\n\n\nFor more information, see Listing Table Names in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "list-tags-of-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/list-tags-of-resource.html",
      "command_description": "Description\n\nList all tags on an Amazon DynamoDB resource. You can call ListTagsOfResource up to 10 times per second, per account.\n\nFor an overview on tagging DynamoDB resources, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-tags-of-resource is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: Tags",
      "command_synopsis": "Synopsis\n  list-tags-of-resource\n--resource-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe Amazon DynamoDB resource with tags to be listed. This value is an Amazon Resource Name (ARN).\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTags -> (list)\n\nThe tags currently associated with the Amazon DynamoDB resource.\n\n(structure)\n\nDescribes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table.\n\nAWS-assigned tag names and values are automatically assigned the aws: prefix, which the user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix user: in the Cost Allocation Report. You cannot backdate the application of a tag.\n\nFor an overview on tagging DynamoDB resources, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide .\n\nKey -> (string)\n\nThe key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.\n\nValue -> (string)\n\nThe value of the tag. Tag values are case-sensitive and can be null.\n\nNextToken -> (string)\n\nIf this value is returned, there are additional results to be displayed. To retrieve them, call ListTagsOfResource again, with NextToken set to this value.",
      "command_examples": "Examples\n\nExample 1: To list tags of a DynamoDB resource\n\nThe following list-tags-of-resource example displays tags for the MusicCollection table.\n\naws dynamodb list-tags-of-resource \\\n    --resource-arn arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\n\n\nOutput:\n\n{\n    \"Tags\": [\n        {\n            \"Key\": \"Owner\",\n            \"Value\": \"blueTeam\"\n        },\n        {\n            \"Key\": \"Environment\",\n            \"Value\": \"Production\"\n        }\n    ]\n}\n\n\nFor more information, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 2: To limit the number of tags returned\n\nThe following example limits the number of tags returned to 1. The response includes a NextToken value with which to retrieve the next page of results.\n\naws dynamodb list-tags-of-resource \\\n    --resource-arn arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection \\\n    --max-items 1\n\n\nOutput:\n\n{\n    \"Tags\": [\n        {\n            \"Key\": \"Owner\",\n            \"Value\": \"blueTeam\"\n        }\n    ],\n    \"NextToken\": \"abCDeFGhiJKlmnOPqrSTuvwxYZ1aBCdEFghijK7LM51nOpqRSTuv3WxY3ZabC5dEFGhI2Jk3LmnoPQ6RST9\"\n}\n\n\nFor more information, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 3: To retrieve the next page of results\n\nThe following command uses the NextToken value from a previous call to the list-tags-of-resource command to retrieve another page of results. Since the response in this case does not include a NextToken value, we know that we have reached the end of the results.\n\naws dynamodb list-tags-of-resource \\\n    --resource-arn arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection \\\n    --starting-token abCDeFGhiJKlmnOPqrSTuvwxYZ1aBCdEFghijK7LM51nOpqRSTuv3WxY3ZabC5dEFGhI2Jk3LmnoPQ6RST9\n\n\nOutput:\n\n{\n    \"Tags\": [\n        {\n            \"Key\": \"Environment\",\n            \"Value\": \"Production\"\n        }\n    ]\n}\n\n\nFor more information, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "put-item",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/put-item.html",
      "command_description": "Description\n\nCreates a new item, or replaces an old item with a new item. If an item that has the same primary key as the new item already exists in the specified table, the new item completely replaces the existing item. You can perform a conditional put operation (add a new item if one with the specified primary key doesn’t exist), or replace an existing item if it has certain attribute values. You can return the item’s attribute values in the same operation, using the ReturnValues parameter.\n\nWarning\n\nThis topic provides general information about the PutItem API.\n\nFor information on how to call the PutItem API using the AWS SDK in specific languages, see the following:\n\nPutItem in the AWS Command Line Interface\n\nPutItem in the AWS SDK for .NET\n\nPutItem in the AWS SDK for C++\n\nPutItem in the AWS SDK for Go\n\nPutItem in the AWS SDK for Java\n\nPutItem in the AWS SDK for JavaScript\n\nPutItem in the AWS SDK for PHP V3\n\nPutItem in the AWS SDK for Python\n\nPutItem in the AWS SDK for Ruby V2\n\nWhen you add an item, the primary key attributes are the only required attributes. Attribute values cannot be null.\n\nEmpty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index. Set type attributes cannot be empty.\n\nInvalid Requests with empty values will be rejected with a ValidationException exception.\n\nNote\n\nTo prevent a new item from replacing an existing item, use a conditional expression that contains the attribute_not_exists function with the name of the attribute being used as the partition key for the table. Since every record must contain that attribute, the attribute_not_exists function will only succeed if no matching item exists.\n\nFor more information about PutItem , see Working with Items in the Amazon DynamoDB Developer Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-item\n--table-name <value>\n--item <value>\n[--expected <value>]\n[--return-values <value>]\n[--return-consumed-capacity <value>]\n[--return-item-collection-metrics <value>]\n[--conditional-operator <value>]\n[--condition-expression <value>]\n[--expression-attribute-names <value>]\n[--expression-attribute-values <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "--item <value>",
        "[--expected <value>]",
        "[--return-values <value>]",
        "[--return-consumed-capacity <value>]",
        "[--return-item-collection-metrics <value>]",
        "[--conditional-operator <value>]",
        "[--condition-expression <value>]",
        "[--expression-attribute-names <value>]",
        "[--expression-attribute-values <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table to contain the item.\n\n--item (map)\n\nA map of attribute name/value pairs, one for each attribute. Only the primary key attributes are required; you can optionally provide other attribute name-value pairs for the item.\n\nYou must provide all of the attributes for the primary key. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide both values for both the partition key and the sort key.\n\nIf you specify any attributes that are part of an index key, then the data types for those attributes must match those of the schema in the table’s attribute definition.\n\nEmpty String and Binary attribute values are allowed. Attribute values of type String and Binary must have a length greater than zero if the attribute is used as a key attribute for a table or index.\n\nFor more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide .\n\nEach element in the Item map is an AttributeValue object.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"S\": \"string\",\n      \"N\": \"string\",\n      \"B\": blob,\n      \"SS\": [\"string\", ...],\n      \"NS\": [\"string\", ...],\n      \"BS\": [blob, ...],\n      \"M\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"L\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": { ... recursive ... }\n            ...},\n          \"L\": [\n            { ... recursive ... }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"NULL\": true|false,\n      \"BOOL\": true|false\n    }\n  ...}\n\n\n--expected (map)\n\nThis is a legacy parameter. Use ConditionExpression instead. For more information, see Expected in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents a condition to be compared with an attribute value. This condition can be used with DeleteItem , PutItem , or UpdateItem operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use ExpectedAttributeValue in one of two different ways:\n\nUse AttributeValueList to specify one or more values to compare against an attribute. Use ComparisonOperator to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.\n\nUse Value to specify a value that DynamoDB will compare against an attribute. If the values match, then ExpectedAttributeValue evaluates to true and the conditional operation succeeds. Optionally, you can also set Exists to false, indicating that you do not expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.\n\nValue and Exists are incompatible with AttributeValueList and ComparisonOperator . Note that if you use both sets of parameters at once, DynamoDB will return a ValidationException exception.\n\nValue -> (structure)\n\nRepresents the data for the expected attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nExists -> (boolean)\n\nCauses DynamoDB to evaluate the value before attempting a conditional operation:\n\nIf Exists is true , DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a ConditionCheckFailedException .\n\nIf Exists is false , DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a ConditionCheckFailedException .\n\nThe default setting for Exists is true . If you supply a Value all by itself, DynamoDB assumes the attribute exists: You don’t have to set Exists to true , because it is implied.\n\nDynamoDB returns a ValidationException if:\n\nExists is true but there is no Value to check. (You expect a value to exist, but don’t specify what that value is.)\n\nExists is false but you also provide a Value . (You cannot expect an attribute to have a value, while also expecting it not to exist.)\n\nComparisonOperator -> (string)\n\nA comparator for evaluating attributes in the AttributeValueList . For example, equals, greater than, less than, etc.\n\nThe following comparison operators are available:\n\nEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\n\nThe following are descriptions of each comparison operator.\n\nEQ : Equal. EQ is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNE : Not equal. NE is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLE : Less than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLT : Less than. AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGE : Greater than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGT : Greater than. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the existence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NOT_NULL , the result is a Boolean true . This result is because the attribute “a ” exists; its data type is not relevant to the NOT_NULL comparison operator.\n\nNULL : The attribute does not exist. NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NULL , the result is a Boolean false . This is because the attribute “a ” exists; its data type is not relevant to the NULL comparison operator.\n\nCONTAINS : Checks for a subsequence, or value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating “a CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nNOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating “a NOT CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nBEGINS_WITH : Checks for a prefix. AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\n\nIN : Checks for matching elements in a list. AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.\n\nBETWEEN : Greater than or equal to the first value, and less than or equal to the second value. AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}\n\nAttributeValueList -> (list)\n\nOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used.\n\nFor type Number, value comparisons are numeric.\n\nString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A , and a is greater than B . For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters .\n\nFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\n\nFor information on specifying data types in JSON, see JSON Data Format in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"Value\": {\n        \"S\": \"string\",\n        \"N\": \"string\",\n        \"B\": blob,\n        \"SS\": [\"string\", ...],\n        \"NS\": [\"string\", ...],\n        \"BS\": [blob, ...],\n        \"M\": {\"string\": {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n          ...},\n        \"L\": [\n          {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n          ...\n        ],\n        \"NULL\": true|false,\n        \"BOOL\": true|false\n      },\n      \"Exists\": true|false,\n      \"ComparisonOperator\": \"EQ\"|\"NE\"|\"IN\"|\"LE\"|\"LT\"|\"GE\"|\"GT\"|\"BETWEEN\"|\"NOT_NULL\"|\"NULL\"|\"CONTAINS\"|\"NOT_CONTAINS\"|\"BEGINS_WITH\",\n      \"AttributeValueList\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n            ...},\n          \"L\": [\n            {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ]\n    }\n  ...}\n\n\n--return-values (string)\n\nUse ReturnValues if you want to get the item attributes as they appeared before they were updated with the PutItem request. For PutItem , the valid values are:\n\nNONE - If ReturnValues is not specified, or if its value is NONE , then nothing is returned. (This setting is the default for ReturnValues .)\n\nALL_OLD - If PutItem overwrote an attribute name-value pair, then the content of the old item is returned.\n\nNote\n\nThe ReturnValues parameter is used by several DynamoDB operations; however, PutItem does not recognize any values other than NONE or ALL_OLD .\n\nPossible values:\n\nNONE\n\nALL_OLD\n\nUPDATED_OLD\n\nALL_NEW\n\nUPDATED_NEW\n\n--return-consumed-capacity (string)\n\nDetermines the level of detail about provisioned throughput consumption that is returned in the response:\n\nINDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem , do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).\n\nTOTAL - The response includes only the aggregate ConsumedCapacity for the operation.\n\nNONE - No ConsumedCapacity details are included in the response.\n\nPossible values:\n\nINDEXES\n\nTOTAL\n\nNONE\n\n--return-item-collection-metrics (string)\n\nDetermines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.\n\nPossible values:\n\nSIZE\n\nNONE\n\n--conditional-operator (string)\n\nThis is a legacy parameter. Use ConditionExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .\n\nPossible values:\n\nAND\n\nOR\n\n--condition-expression (string)\n\nA condition that must be satisfied in order for a conditional PutItem operation to succeed.\n\nAn expression can contain any of the following:\n\nFunctions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size These function names are case-sensitive.\n\nComparison operators: = | <> | < | > | <= | >= | BETWEEN | IN\n\nLogical operators: AND | OR | NOT\n\nFor more information on condition expressions, see Condition Expressions in the Amazon DynamoDB Developer Guide .\n\n--expression-attribute-names (map)\n\nOne or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\n\nTo access an attribute whose name conflicts with a DynamoDB reserved word.\n\nTo create a placeholder for repeating occurrences of an attribute name in an expression.\n\nTo prevent special characters in an attribute name from being misinterpreted in an expression.\n\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\n\nPercentile\n\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\n\n{\"#P\":\"Percentile\"}\n\nYou could then use this substitution in an expression, as in this example:\n\n#P = :val\n\nNote\n\nTokens that begin with the : character are expression attribute values , which are placeholders for the actual value at runtime.\n\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--expression-attribute-values (map)\n\nOne or more values that can be substituted in an expression.\n\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\n\nAvailable | Backordered | Discontinued\n\nYou would first need to specify ExpressionAttributeValues as follows:\n\n{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }\n\nYou could then use these values in an expression, such as this:\n\nProductStatus IN (:avail, :back, :disc)\n\nFor more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"S\": \"string\",\n      \"N\": \"string\",\n      \"B\": blob,\n      \"SS\": [\"string\", ...],\n      \"NS\": [\"string\", ...],\n      \"BS\": [blob, ...],\n      \"M\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"L\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": { ... recursive ... }\n            ...},\n          \"L\": [\n            { ... recursive ... }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"NULL\": true|false,\n      \"BOOL\": true|false\n    }\n  ...}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nAttributes -> (map)\n\nThe attribute values as they appeared before the PutItem operation, but only if ReturnValues is specified as ALL_OLD in the request. Each element consists of an attribute name and an attribute value.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nConsumedCapacity -> (structure)\n\nThe capacity units consumed by the PutItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Read/Write Capacity Mode in the Amazon DynamoDB Developer Guide .\n\nTableName -> (string)\n\nThe name of the table that was affected by the operation.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed by the operation.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed by the operation.\n\nTable -> (structure)\n\nThe amount of throughput consumed on the table affected by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nLocalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each local index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nGlobalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each global index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nItemCollectionMetrics -> (structure)\n\nInformation about item collections, if any, that were affected by the PutItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.\n\nEach ItemCollectionMetrics element consists of:\n\nItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.\n\nSizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\n\nItemCollectionKey -> (map)\n\nThe partition key value of the item collection. This value is the same as the partition key value of the item.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nSizeEstimateRangeGB -> (list)\n\nAn estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\n\nThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\n\n(double)",
      "command_examples": "Examples\n\nExample 1: To add an item to a table\n\nThe following put-item example adds a new item to the MusicCollection table.\n\naws dynamodb put-item \\\n    --table-name MusicCollection \\\n    --item file://item.json \\\n    --return-consumed-capacity TOTAL \\\n    --return-item-collection-metrics SIZE\n\n\nContents of item.json:\n\n{\n    \"Artist\": {\"S\": \"No One You Know\"},\n    \"SongTitle\": {\"S\": \"Call Me Today\"},\n    \"AlbumTitle\": {\"S\": \"Greatest Hits\"}\n}\n\n\nOutput:\n\n{\n    \"ConsumedCapacity\": {\n        \"TableName\": \"MusicCollection\",\n        \"CapacityUnits\": 1.0\n    },\n    \"ItemCollectionMetrics\": {\n        \"ItemCollectionKey\": {\n            \"Artist\": {\n                \"S\": \"No One You Know\"\n            }\n        },\n        \"SizeEstimateRangeGB\": [\n            0.0,\n            1.0\n        ]\n    }\n}\n\n\nFor more information, see Writing an Item in the Amazon DynamoDB Developer Guide.\n\nExample 2: To conditionally overwrite an item in a table\n\nThe following put-item example overwrites an existing item in the MusicCollection table only if that existing item has an AlbumTitle attribute with a value of Greatest Hits. The command returns the previous value of the item.\n\naws dynamodb put-item \\\n    --table-name MusicCollection \\\n    --item file://item.json \\\n    --condition-expression \"#A = :A\" \\\n    --expression-attribute-names file://names.json \\\n    --expression-attribute-values file://values.json \\\n    --return-values ALL_OLD\n\n\nContents of item.json:\n\n{\n    \"Artist\": {\"S\": \"No One You Know\"},\n    \"SongTitle\": {\"S\": \"Call Me Today\"},\n    \"AlbumTitle\": {\"S\": \"Somewhat Famous\"}\n}\n\n\nContents of names.json:\n\n{\n    \"#A\": \"AlbumTitle\"\n}\n\n\nContents of values.json:\n\n{\n    \":A\": {\"S\": \"Greatest Hits\"}\n}\n\n\nOutput:\n\n{\n    \"Attributes\": {\n        \"AlbumTitle\": {\n            \"S\": \"Greatest Hits\"\n        },\n        \"Artist\": {\n            \"S\": \"No One You Know\"\n        },\n        \"SongTitle\": {\n            \"S\": \"Call Me Today\"\n        }\n    }\n}\n\n\nIf the key already exists, you should see the following output:\n\nA client error (ConditionalCheckFailedException) occurred when calling the PutItem operation: The conditional request failed.\n\n\nFor more information, see Writing an Item in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "query",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/query.html",
      "command_description": "Description\n\nThe Query operation finds items based on primary key values. You can query any table or secondary index that has a composite primary key (a partition key and a sort key).\n\nUse the KeyConditionExpression parameter to provide a specific value for the partition key. The Query operation will return all of the items from the table or index with that partition key value. You can optionally narrow the scope of the Query operation by specifying a sort key value and a comparison operator in KeyConditionExpression . To further refine the Query results, you can optionally provide a FilterExpression . A FilterExpression determines which items within the results should be returned to you. All of the other results are discarded.\n\nA Query operation always returns a result set. If no matching items are found, the result set will be empty. Queries that do not return results consume the minimum number of read capacity units for that type of read operation.\n\nNote\n\nDynamoDB calculates the number of read capacity units consumed based on item size, not on the amount of data that is returned to an application. The number of capacity units consumed will be the same whether you request all of the attributes (the default behavior) or just some of them (using a projection expression). The number will also be the same whether or not you use a FilterExpression .\n\nQuery results are always sorted by the sort key value. If the data type of the sort key is Number, the results are returned in numeric order; otherwise, the results are returned in order of UTF-8 bytes. By default, the sort order is ascending. To reverse the order, set the ScanIndexForward parameter to false.\n\nA single Query operation will read up to the maximum number of items set (if using the Limit parameter) or a maximum of 1 MB of data and then apply any filtering to the results using FilterExpression . If LastEvaluatedKey is present in the response, you will need to paginate the result set. For more information, see Paginating the Results in the Amazon DynamoDB Developer Guide .\n\nFilterExpression is applied after a Query finishes, but before the results are returned. A FilterExpression cannot contain partition key or sort key attributes. You need to specify those attributes in the KeyConditionExpression .\n\nNote\n\nA Query operation can return an empty result set and a LastEvaluatedKey if all the items read for the page of results are filtered out.\n\nYou can query a table, a local secondary index, or a global secondary index. For a query on a table or on a local secondary index, you can set the ConsistentRead parameter to true and obtain a strongly consistent result. Global secondary indexes support eventually consistent reads only, so do not specify ConsistentRead when querying a global secondary index.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nquery is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: Items, Count, ScannedCount",
      "command_synopsis": "Synopsis\n  query\n--table-name <value>\n[--index-name <value>]\n[--select <value>]\n[--attributes-to-get <value>]\n[--consistent-read | --no-consistent-read]\n[--key-conditions <value>]\n[--query-filter <value>]\n[--conditional-operator <value>]\n[--scan-index-forward | --no-scan-index-forward]\n[--return-consumed-capacity <value>]\n[--projection-expression <value>]\n[--filter-expression <value>]\n[--key-condition-expression <value>]\n[--expression-attribute-names <value>]\n[--expression-attribute-values <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "[--index-name <value>]",
        "[--select <value>]",
        "[--attributes-to-get <value>]",
        "[--consistent-read | --no-consistent-read]",
        "[--key-conditions <value>]",
        "[--query-filter <value>]",
        "[--conditional-operator <value>]",
        "[--scan-index-forward | --no-scan-index-forward]",
        "[--return-consumed-capacity <value>]",
        "[--projection-expression <value>]",
        "[--filter-expression <value>]",
        "[--key-condition-expression <value>]",
        "[--expression-attribute-names <value>]",
        "[--expression-attribute-values <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table containing the requested items.\n\n--index-name (string)\n\nThe name of an index to query. This index can be any local secondary index or global secondary index on the table. Note that if you use the IndexName parameter, you must also provide TableName.\n\n--select (string)\n\nThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\n\nALL_ATTRIBUTES - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.\n\nALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL_ATTRIBUTES .\n\nCOUNT - Returns the number of matching items, rather than the matching items themselves.\n\nSPECIFIC_ATTRIBUTES - Returns only the attributes listed in AttributesToGet . This return value is equivalent to specifying AttributesToGet without specifying any value for Select . If you query or scan a local secondary index and request only attributes that are projected into that index, the operation will read only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency. If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.\n\nIf neither Select nor AttributesToGet are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and AttributesToGet together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES . (This usage is equivalent to specifying AttributesToGet without any value for Select .)\n\nNote\n\nIf you use the ProjectionExpression parameter, then the value for Select can only be SPECIFIC_ATTRIBUTES . Any other value for Select will return an error.\n\nPossible values:\n\nALL_ATTRIBUTES\n\nALL_PROJECTED_ATTRIBUTES\n\nSPECIFIC_ATTRIBUTES\n\nCOUNT\n\n--attributes-to-get (list)\n\nThis is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--consistent-read | --no-consistent-read (boolean)\n\nDetermines the read consistency model: If set to true , then the operation uses strongly consistent reads; otherwise, the operation uses eventually consistent reads.\n\nStrongly consistent reads are not supported on global secondary indexes. If you query a global secondary index with ConsistentRead set to true , you will receive a ValidationException .\n\n--key-conditions (map)\n\nThis is a legacy parameter. Use KeyConditionExpression instead. For more information, see KeyConditions in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the selection criteria for a Query or Scan operation:\n\nFor a Query operation, Condition is used for specifying the KeyConditions to use when querying a table or an index. For KeyConditions , only the following comparison operators are supported: EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN Condition is also used in a QueryFilter , which evaluates the query results and returns only the desired values.\n\nFor a Scan operation, Condition is used in a ScanFilter , which evaluates the scan results and returns only the desired values.\n\nAttributeValueList -> (list)\n\nOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used.\n\nFor type Number, value comparisons are numeric.\n\nString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A , and a is greater than B . For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters .\n\nFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nComparisonOperator -> (string)\n\nA comparator for evaluating attributes. For example, equals, greater than, less than, etc.\n\nThe following comparison operators are available:\n\nEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\n\nThe following are descriptions of each comparison operator.\n\nEQ : Equal. EQ is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNE : Not equal. NE is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLE : Less than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLT : Less than. AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGE : Greater than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGT : Greater than. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the existence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NOT_NULL , the result is a Boolean true . This result is because the attribute “a ” exists; its data type is not relevant to the NOT_NULL comparison operator.\n\nNULL : The attribute does not exist. NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NULL , the result is a Boolean false . This is because the attribute “a ” exists; its data type is not relevant to the NULL comparison operator.\n\nCONTAINS : Checks for a subsequence, or value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating “a CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nNOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating “a NOT CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nBEGINS_WITH : Checks for a prefix. AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\n\nIN : Checks for matching elements in a list. AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.\n\nBETWEEN : Greater than or equal to the first value, and less than or equal to the second value. AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}\n\nFor usage examples of AttributeValueList and ComparisonOperator , see Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide .\n\nJSON Syntax:\n\n{\"string\": {\n      \"AttributeValueList\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n            ...},\n          \"L\": [\n            {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"ComparisonOperator\": \"EQ\"|\"NE\"|\"IN\"|\"LE\"|\"LT\"|\"GE\"|\"GT\"|\"BETWEEN\"|\"NOT_NULL\"|\"NULL\"|\"CONTAINS\"|\"NOT_CONTAINS\"|\"BEGINS_WITH\"\n    }\n  ...}\n\n\n--query-filter (map)\n\nThis is a legacy parameter. Use FilterExpression instead. For more information, see QueryFilter in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the selection criteria for a Query or Scan operation:\n\nFor a Query operation, Condition is used for specifying the KeyConditions to use when querying a table or an index. For KeyConditions , only the following comparison operators are supported: EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN Condition is also used in a QueryFilter , which evaluates the query results and returns only the desired values.\n\nFor a Scan operation, Condition is used in a ScanFilter , which evaluates the scan results and returns only the desired values.\n\nAttributeValueList -> (list)\n\nOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used.\n\nFor type Number, value comparisons are numeric.\n\nString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A , and a is greater than B . For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters .\n\nFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nComparisonOperator -> (string)\n\nA comparator for evaluating attributes. For example, equals, greater than, less than, etc.\n\nThe following comparison operators are available:\n\nEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\n\nThe following are descriptions of each comparison operator.\n\nEQ : Equal. EQ is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNE : Not equal. NE is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLE : Less than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLT : Less than. AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGE : Greater than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGT : Greater than. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the existence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NOT_NULL , the result is a Boolean true . This result is because the attribute “a ” exists; its data type is not relevant to the NOT_NULL comparison operator.\n\nNULL : The attribute does not exist. NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NULL , the result is a Boolean false . This is because the attribute “a ” exists; its data type is not relevant to the NULL comparison operator.\n\nCONTAINS : Checks for a subsequence, or value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating “a CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nNOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating “a NOT CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nBEGINS_WITH : Checks for a prefix. AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\n\nIN : Checks for matching elements in a list. AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.\n\nBETWEEN : Greater than or equal to the first value, and less than or equal to the second value. AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}\n\nFor usage examples of AttributeValueList and ComparisonOperator , see Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide .\n\nJSON Syntax:\n\n{\"string\": {\n      \"AttributeValueList\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n            ...},\n          \"L\": [\n            {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"ComparisonOperator\": \"EQ\"|\"NE\"|\"IN\"|\"LE\"|\"LT\"|\"GE\"|\"GT\"|\"BETWEEN\"|\"NOT_NULL\"|\"NULL\"|\"CONTAINS\"|\"NOT_CONTAINS\"|\"BEGINS_WITH\"\n    }\n  ...}\n\n\n--conditional-operator (string)\n\nThis is a legacy parameter. Use FilterExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .\n\nPossible values:\n\nAND\n\nOR\n\n--scan-index-forward | --no-scan-index-forward (boolean)\n\nSpecifies the order for index traversal: If true (default), the traversal is performed in ascending order; if false , the traversal is performed in descending order.\n\nItems with the same partition key value are stored in sorted order by sort key. If the sort key data type is Number, the results are stored in numeric order. For type String, the results are stored in order of UTF-8 bytes. For type Binary, DynamoDB treats each byte of the binary data as unsigned.\n\nIf ScanIndexForward is true , DynamoDB returns the results in the order in which they are stored (by sort key value). This is the default behavior. If ScanIndexForward is false , DynamoDB reads the results in reverse order by sort key value, and then returns the results to the client.\n\n--return-consumed-capacity (string)\n\nDetermines the level of detail about provisioned throughput consumption that is returned in the response:\n\nINDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem , do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).\n\nTOTAL - The response includes only the aggregate ConsumedCapacity for the operation.\n\nNONE - No ConsumedCapacity details are included in the response.\n\nPossible values:\n\nINDEXES\n\nTOTAL\n\nNONE\n\n--projection-expression (string)\n\nA string that identifies one or more attributes to retrieve from the table. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n\nIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\n\nFor more information, see Accessing Item Attributes in the Amazon DynamoDB Developer Guide .\n\n--filter-expression (string)\n\nA string that contains conditions that DynamoDB applies after the Query operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned.\n\nA FilterExpression does not allow key attributes. You cannot define a filter expression based on a partition key or a sort key.\n\nNote\n\nA FilterExpression is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.\n\nFor more information, see Filter Expressions in the Amazon DynamoDB Developer Guide .\n\n--key-condition-expression (string)\n\nThe condition that specifies the key values for items to be retrieved by the Query action.\n\nThe condition must perform an equality test on a single partition key value.\n\nThe condition can optionally perform one of several comparison tests on a single sort key value. This allows Query to retrieve one item with a given partition key value and sort key value, or several items that have the same partition key value but different sort key values.\n\nThe partition key equality test is required, and must be specified in the following format:\n\npartitionKeyName = :partitionkeyval\n\nIf you also want to provide a condition for the sort key, it must be combined using AND with the condition for the sort key. Following is an example, using the = comparison operator for the sort key:\n\npartitionKeyName = :partitionkeyval AND sortKeyName = :sortkeyval\n\nValid comparisons for the sort key condition are as follows:\n\nsortKeyName = :sortkeyval - true if the sort key value is equal to :sortkeyval .\n\nsortKeyName < :sortkeyval - true if the sort key value is less than :sortkeyval .\n\nsortKeyName <= :sortkeyval - true if the sort key value is less than or equal to :sortkeyval .\n\nsortKeyName > :sortkeyval - true if the sort key value is greater than :sortkeyval .\n\nsortKeyName >= :sortkeyval - true if the sort key value is greater than or equal to :sortkeyval .\n\nsortKeyName BETWEEN :sortkeyval1 AND :sortkeyval2 - true if the sort key value is greater than or equal to :sortkeyval1 , and less than or equal to :sortkeyval2 .\n\nbegins_with ( sortKeyName , :sortkeyval ) - true if the sort key value begins with a particular operand. (You cannot use this function with a sort key that is of type Number.) Note that the function name begins_with is case-sensitive.\n\nUse the ExpressionAttributeValues parameter to replace tokens such as :partitionval and :sortval with actual values at runtime.\n\nYou can optionally use the ExpressionAttributeNames parameter to replace the names of the partition key and sort key with placeholder tokens. This option might be necessary if an attribute name conflicts with a DynamoDB reserved word. For example, the following KeyConditionExpression parameter causes an error because Size is a reserved word:\n\nSize = :myval\n\nTo work around this, define a placeholder (such a #S ) to represent the attribute name Size . KeyConditionExpression then is as follows:\n\n#S = :myval\n\nFor a list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide .\n\nFor more information on ExpressionAttributeNames and ExpressionAttributeValues , see Using Placeholders for Attribute Names and Values in the Amazon DynamoDB Developer Guide .\n\n--expression-attribute-names (map)\n\nOne or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\n\nTo access an attribute whose name conflicts with a DynamoDB reserved word.\n\nTo create a placeholder for repeating occurrences of an attribute name in an expression.\n\nTo prevent special characters in an attribute name from being misinterpreted in an expression.\n\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\n\nPercentile\n\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\n\n{\"#P\":\"Percentile\"}\n\nYou could then use this substitution in an expression, as in this example:\n\n#P = :val\n\nNote\n\nTokens that begin with the : character are expression attribute values , which are placeholders for the actual value at runtime.\n\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--expression-attribute-values (map)\n\nOne or more values that can be substituted in an expression.\n\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\n\nAvailable | Backordered | Discontinued\n\nYou would first need to specify ExpressionAttributeValues as follows:\n\n{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }\n\nYou could then use these values in an expression, such as this:\n\nProductStatus IN (:avail, :back, :disc)\n\nFor more information on expression attribute values, see Specifying Conditions in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"S\": \"string\",\n      \"N\": \"string\",\n      \"B\": blob,\n      \"SS\": [\"string\", ...],\n      \"NS\": [\"string\", ...],\n      \"BS\": [blob, ...],\n      \"M\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"L\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": { ... recursive ... }\n            ...},\n          \"L\": [\n            { ... recursive ... }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"NULL\": true|false,\n      \"BOOL\": true|false\n    }\n  ...}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nItems -> (list)\n\nAn array of item attributes that match the query criteria. Each element in this array consists of an attribute name and the value for that attribute.\n\n(map)\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nCount -> (integer)\n\nThe number of items in the response.\n\nIf you used a QueryFilter in the request, then Count is the number of items returned after the filter was applied, and ScannedCount is the number of matching items before the filter was applied.\n\nIf you did not use a filter in the request, then Count and ScannedCount are the same.\n\nScannedCount -> (integer)\n\nThe number of items evaluated, before any QueryFilter is applied. A high ScannedCount value with few, or no, Count results indicates an inefficient Query operation. For more information, see Count and ScannedCount in the Amazon DynamoDB Developer Guide .\n\nIf you did not use a filter in the request, then ScannedCount is the same as Count .\n\nLastEvaluatedKey -> (map)\n\nThe primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\n\nIf LastEvaluatedKey is empty, then the “last page” of results has been processed and there is no more data to be retrieved.\n\nIf LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nConsumedCapacity -> (structure)\n\nThe capacity units consumed by the Query operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Provisioned Throughput in the Amazon DynamoDB Developer Guide .\n\nTableName -> (string)\n\nThe name of the table that was affected by the operation.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed by the operation.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed by the operation.\n\nTable -> (structure)\n\nThe amount of throughput consumed on the table affected by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nLocalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each local index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nGlobalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each global index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.",
      "command_examples": "Examples\n\nExample 1: To query a table\n\nThe following query example queries items in the MusicCollection table. The table has a hash-and-range primary key (Artist and SongTitle), but this query only specifies the hash key value. It returns song titles by the artist named “No One You Know”.\n\naws dynamodb query \\\n    --table-name MusicCollection \\\n    --projection-expression \"SongTitle\" \\\n    --key-condition-expression \"Artist = :v1\" \\\n    --expression-attribute-values file://expression-attributes.json \\\n    --return-consumed-capacity TOTAL\n\n\nContents of expression-attributes.json:\n\n{\n    \":v1\": {\"S\": \"No One You Know\"}\n}\n\n\nOutput:\n\n{\n    \"Items\": [\n        {\n            \"SongTitle\": {\n                \"S\": \"Call Me Today\"\n            },\n            \"SongTitle\": {\n                \"S\": \"Scared of My Shadow\"\n            }\n        }\n    ],\n    \"Count\": 2,\n    \"ScannedCount\": 2,\n    \"ConsumedCapacity\": {\n        \"TableName\": \"MusicCollection\",\n        \"CapacityUnits\": 0.5\n    }\n}\n\n\nFor more information, see Working with Queries in DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 2: To query a table using strongly consistent reads and traverse the index in descending order\n\nThe following example performs the same query as the first example, but returns results in reverse order and uses strongly consistent reads.\n\naws dynamodb query \\\n    --table-name MusicCollection \\\n    --projection-expression \"SongTitle\" \\\n    --key-condition-expression \"Artist = :v1\" \\\n    --expression-attribute-values file://expression-attributes.json \\\n    --consistent-read \\\n    --no-scan-index-forward \\\n    --return-consumed-capacity TOTAL\n\n\nContents of expression-attributes.json:\n\n{\n    \":v1\": {\"S\": \"No One You Know\"}\n}\n\n\nOutput:\n\n{\n    \"Items\": [\n        {\n            \"SongTitle\": {\n                \"S\": \"Scared of My Shadow\"\n            }\n        },\n        {\n            \"SongTitle\": {\n                \"S\": \"Call Me Today\"\n            }\n        }\n    ],\n    \"Count\": 2,\n    \"ScannedCount\": 2,\n    \"ConsumedCapacity\": {\n        \"TableName\": \"MusicCollection\",\n        \"CapacityUnits\": 1.0\n    }\n}\n\n\nFor more information, see Working with Queries in DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 3: To filter out specific results\n\nThe following example queries the MusicCollection but excludes results with specific values in the AlbumTitle attribute. Note that this does not affect the ScannedCount or ConsumedCapacity, because the filter is applied after the items have been read.\n\naws dynamodb query \\\n    --table-name MusicCollection \\\n    --key-condition-expression \"#n1 = :v1\" \\\n    --filter-expression \"NOT (#n2 IN (:v2, :v3))\" \\\n    --expression-attribute-names file://names.json \\\n    --expression-attribute-values file://values.json \\\n    --return-consumed-capacity TOTAL\n\n\nContents of values.json:\n\n{\n    \":v1\": {\"S\": \"No One You Know\"},\n    \":v2\": {\"S\": \"Blue Sky Blues\"},\n    \":v3\": {\"S\": \"Greatest Hits\"}\n}\n\n\nContents of names.json:\n\n{\n    \"#n1\": \"Artist\",\n    \"#n2\": \"AlbumTitle\"\n}\n\n\nOutput:\n\n{\n    \"Items\": [\n        {\n            \"AlbumTitle\": {\n                \"S\": \"Somewhat Famous\"\n            },\n            \"Artist\": {\n                \"S\": \"No One You Know\"\n            },\n            \"SongTitle\": {\n                \"S\": \"Call Me Today\"\n            }\n        }\n    ],\n    \"Count\": 1,\n    \"ScannedCount\": 2,\n    \"ConsumedCapacity\": {\n        \"TableName\": \"MusicCollection\",\n        \"CapacityUnits\": 0.5\n    }\n}\n\n\nFor more information, see Working with Queries in DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 4: To retrieve only an item count\n\nThe following example retrieves a count of items matching the query, but does not retrieve any of the items themselves.\n\naws dynamodb query \\\n    --table-name MusicCollection \\\n    --select COUNT \\\n    --key-condition-expression \"Artist = :v1\" \\\n    --expression-attribute-values file://expression-attributes.json\n\n\nContents of expression-attributes.json:\n\n{\n    \":v1\": {\"S\": \"No One You Know\"}\n}\n\n\nOutput:\n\n{\n    \"Count\": 2,\n    \"ScannedCount\": 2,\n    \"ConsumedCapacity\": null\n}\n\n\nFor more information, see Working with Queries in DynamoDB in the Amazon DynamoDB Developer Guide.\n\nExample 5: To query an index\n\nThe following example queries the local secondary index AlbumTitleIndex. The query returns all attributes from the base table that have been projected into the local secondary index. Note that when querying a local secondary index or global secondary index, you must also provide the name of the base table using the table-name parameter.\n\naws dynamodb query \\\n    --table-name MusicCollection \\\n    --index-name AlbumTitleIndex \\\n    --key-condition-expression \"Artist = :v1\" \\\n    --expression-attribute-values file://expression-attributes.json \\\n    --select ALL_PROJECTED_ATTRIBUTES \\\n    --return-consumed-capacity INDEXES\n\n\nContents of expression-attributes.json:\n\n{\n    \":v1\": {\"S\": \"No One You Know\"}\n}\n\n\nOutput:\n\n{\n    \"Items\": [\n        {\n            \"AlbumTitle\": {\n                \"S\": \"Blue Sky Blues\"\n            },\n            \"Artist\": {\n                \"S\": \"No One You Know\"\n            },\n            \"SongTitle\": {\n                \"S\": \"Scared of My Shadow\"\n            }\n        },\n        {\n            \"AlbumTitle\": {\n                \"S\": \"Somewhat Famous\"\n            },\n            \"Artist\": {\n                \"S\": \"No One You Know\"\n            },\n            \"SongTitle\": {\n                \"S\": \"Call Me Today\"\n            }\n        }\n    ],\n    \"Count\": 2,\n    \"ScannedCount\": 2,\n    \"ConsumedCapacity\": {\n        \"TableName\": \"MusicCollection\",\n        \"CapacityUnits\": 0.5,\n        \"Table\": {\n            \"CapacityUnits\": 0.0\n        },\n        \"LocalSecondaryIndexes\": {\n            \"AlbumTitleIndex\": {\n                \"CapacityUnits\": 0.5\n            }\n        }\n    }\n}\n\n\nFor more information, see Working with Queries in DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "restore-table-from-backup",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/restore-table-from-backup.html",
      "command_description": "Description\n\nCreates a new table from an existing backup. Any number of users can execute up to 4 concurrent restores (any type of restore) in a given account.\n\nYou can call RestoreTableFromBackup at a maximum rate of 10 times per second.\n\nYou must manually set up the following on the restored table:\n\nAuto scaling policies\n\nIAM policies\n\nAmazon CloudWatch metrics and alarms\n\nTags\n\nStream settings\n\nTime to Live (TTL) settings\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  restore-table-from-backup\n--target-table-name <value>\n--backup-arn <value>\n[--billing-mode-override <value>]\n[--global-secondary-index-override <value>]\n[--local-secondary-index-override <value>]\n[--provisioned-throughput-override <value>]\n[--sse-specification-override <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--target-table-name <value>",
        "--backup-arn <value>",
        "[--billing-mode-override <value>]",
        "[--global-secondary-index-override <value>]",
        "[--local-secondary-index-override <value>]",
        "[--provisioned-throughput-override <value>]",
        "[--sse-specification-override <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--target-table-name (string)\n\nThe name of the new table to which the backup must be restored.\n\n--backup-arn (string)\n\nThe Amazon Resource Name (ARN) associated with the backup.\n\n--billing-mode-override (string)\n\nThe billing mode of the restored table.\n\nPossible values:\n\nPROVISIONED\n\nPAY_PER_REQUEST\n\n--global-secondary-index-override (list)\n\nList of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index. The name must be unique among all other indexes on this table.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nShorthand Syntax:\n\nIndexName=string,KeySchema=[{AttributeName=string,KeyType=string},{AttributeName=string,KeyType=string}],Projection={ProjectionType=string,NonKeyAttributes=[string,string]},ProvisionedThroughput={ReadCapacityUnits=long,WriteCapacityUnits=long} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"IndexName\": \"string\",\n    \"KeySchema\": [\n      {\n        \"AttributeName\": \"string\",\n        \"KeyType\": \"HASH\"|\"RANGE\"\n      }\n      ...\n    ],\n    \"Projection\": {\n      \"ProjectionType\": \"ALL\"|\"KEYS_ONLY\"|\"INCLUDE\",\n      \"NonKeyAttributes\": [\"string\", ...]\n    },\n    \"ProvisionedThroughput\": {\n      \"ReadCapacityUnits\": long,\n      \"WriteCapacityUnits\": long\n    }\n  }\n  ...\n]\n\n\n--local-secondary-index-override (list)\n\nList of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.\n\n(structure)\n\nRepresents the properties of a local secondary index.\n\nIndexName -> (string)\n\nThe name of the local secondary index. The name must be unique among all other indexes on this table.\n\nKeySchema -> (list)\n\nThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nShorthand Syntax:\n\nIndexName=string,KeySchema=[{AttributeName=string,KeyType=string},{AttributeName=string,KeyType=string}],Projection={ProjectionType=string,NonKeyAttributes=[string,string]} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"IndexName\": \"string\",\n    \"KeySchema\": [\n      {\n        \"AttributeName\": \"string\",\n        \"KeyType\": \"HASH\"|\"RANGE\"\n      }\n      ...\n    ],\n    \"Projection\": {\n      \"ProjectionType\": \"ALL\"|\"KEYS_ONLY\"|\"INCLUDE\",\n      \"NonKeyAttributes\": [\"string\", ...]\n    }\n  }\n  ...\n]\n\n\n--provisioned-throughput-override (structure)\n\nProvisioned throughput settings for the restored table.\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nShorthand Syntax:\n\nReadCapacityUnits=long,WriteCapacityUnits=long\n\n\nJSON Syntax:\n\n{\n  \"ReadCapacityUnits\": long,\n  \"WriteCapacityUnits\": long\n}\n\n\n--sse-specification-override (structure)\n\nThe new server-side encryption settings for the restored table.\n\nEnabled -> (boolean)\n\nIndicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK. If enabled (true), server-side encryption type is set to KMS and an AWS managed CMK is used (AWS KMS charges apply). If disabled (false) or not specified, server-side encryption is set to AWS owned CMK.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB customer master key alias/aws/dynamodb.\n\nShorthand Syntax:\n\nEnabled=boolean,SSEType=string,KMSMasterKeyId=string\n\n\nJSON Syntax:\n\n{\n  \"Enabled\": true|false,\n  \"SSEType\": \"AES256\"|\"KMS\",\n  \"KMSMasterKeyId\": \"string\"\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableDescription -> (structure)\n\nThe description of the table created from an existing backup.\n\nAttributeDefinitions -> (list)\n\nAn array of AttributeDefinition objects. Each of these objects describes one attribute in the table and index key schema.\n\nEach AttributeDefinition object in this array is composed of:\n\nAttributeName - The name of the attribute.\n\nAttributeType - The data type for the attribute.\n\n(structure)\n\nRepresents an attribute for describing the key schema for the table and indexes.\n\nAttributeName -> (string)\n\nA name for the attribute.\n\nAttributeType -> (string)\n\nThe data type for the attribute, where:\n\nS - the attribute is of type String\n\nN - the attribute is of type Number\n\nB - the attribute is of type Binary\n\nTableName -> (string)\n\nThe name of the table.\n\nKeySchema -> (list)\n\nThe primary key structure for the table. Each KeySchemaElement consists of:\n\nAttributeName - The name of the attribute.\n\nKeyType - The role of the attribute:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nFor more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nTableStatus -> (string)\n\nThe current state of the table:\n\nCREATING - The table is being created.\n\nUPDATING - The table is being updated.\n\nDELETING - The table is being deleted.\n\nACTIVE - The table is ready for use.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table in inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will initiate the table archival process when a table’s AWS KMS key remains inaccessible for more than seven days.\n\nARCHIVING - The table is being archived. Operations are not allowed until archival is complete.\n\nARCHIVED - The table has been archived. See the ArchivalReason for more information.\n\nCreationDateTime -> (timestamp)\n\nThe date and time when the table was created, in UNIX epoch time format.\n\nProvisionedThroughput -> (structure)\n\nThe provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nTableSizeBytes -> (long)\n\nThe total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nTableArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the table.\n\nTableId -> (string)\n\nUnique identifier for the table for which the backup was created.\n\nBillingModeSummary -> (structure)\n\nContains the details for the read/write capacity mode.\n\nBillingMode -> (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - Sets the read/write capacity mode to PROVISIONED . We recommend using PROVISIONED for predictable workloads.\n\nPAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST . We recommend using PAY_PER_REQUEST for unpredictable workloads.\n\nLastUpdateToPayPerRequestDateTime -> (timestamp)\n\nRepresents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.\n\nLocalSecondaryIndexes -> (list)\n\nRepresents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:\n\nIndexName - The name of the local secondary index.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes .\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nIndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a local secondary index.\n\nIndexName -> (string)\n\nRepresents the name of the local secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nGlobalSecondaryIndexes -> (list)\n\nThe global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:\n\nBackfilling - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table. It is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a CreateTable operation.) You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. (This attribute does not appear for indexes that were created during a CreateTable operation.)\n\nIndexName - The name of the global secondary index.\n\nIndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexStatus - The current status of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexStatus -> (string)\n\nThe current state of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nBackfilling -> (boolean)\n\nIndicates whether the index is currently backfilling. Backfilling is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and Backfilling is false.\n\nYou can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false.\n\nNote\n\nFor indexes that were created during a CreateTable operation, the Backfilling attribute does not appear in the DescribeTable output.\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nStreamSpecification -> (structure)\n\nThe current DynamoDB Streams configuration for the table.\n\nStreamEnabled -> (boolean)\n\nIndicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.\n\nStreamViewType -> (string)\n\nWhen an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nLatestStreamLabel -> (string)\n\nA timestamp, in ISO 8601 format, for this stream.\n\nNote that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:\n\nAWS customer ID\n\nTable name\n\nStreamLabel\n\nLatestStreamArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.\n\nGlobalTableVersion -> (string)\n\nRepresents the version of global tables in use, if the table is replicated across AWS Regions.\n\nReplicas -> (list)\n\nRepresents replicas of the table.\n\n(structure)\n\nContains the details of the replica.\n\nRegionName -> (string)\n\nThe name of the Region.\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.\n\nREGION_DISABLED - The replica is inaccessible because the AWS Region has been disabled.\n\nNote\n\nIf the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table is inaccessible.\n\nNote\n\nIf the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nReplicaStatusDescription -> (string)\n\nDetailed information about the replica status.\n\nReplicaStatusPercentProgress -> (string)\n\nSpecifies the progress of a Create, Update, or Delete action on the replica as a percentage.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not described, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nIf not described, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nReplicaInaccessibleDateTime -> (timestamp)\n\nThe time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.\n\nRestoreSummary -> (structure)\n\nContains details for the restore.\n\nSourceBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup from which the table was restored.\n\nSourceTableArn -> (string)\n\nThe ARN of the source table of the backup that is being restored.\n\nRestoreDateTime -> (timestamp)\n\nPoint in time or source backup time.\n\nRestoreInProgress -> (boolean)\n\nIndicates if a restore is in progress or not.\n\nSSEDescription -> (structure)\n\nThe description of the server-side encryption status on the specified table.\n\nStatus -> (string)\n\nRepresents the current state of server-side encryption. The only supported values are:\n\nENABLED - Server-side encryption is enabled.\n\nUPDATING - Server-side encryption is being updated.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyArn -> (string)\n\nThe AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.\n\nInaccessibleEncryptionDateTime -> (timestamp)\n\nIndicates the time, in UNIX epoch date format, when DynamoDB detected that the table’s AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table’s AWS KMS key is accessible again. DynamoDB will initiate the table archival process when table’s AWS KMS key remains inaccessible for more than seven days from this date.\n\nArchivalSummary -> (structure)\n\nContains information about the table archive.\n\nArchivalDateTime -> (timestamp)\n\nThe date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.\n\nArchivalReason -> (string)\n\nThe reason DynamoDB archived the table. Currently, the only possible value is:\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The table was archived due to the table’s AWS KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.\n\nArchivalBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.",
      "command_examples": "Examples\n\nTo restore a DynamoDB table from an existing backup\n\nThe following restore-table-from-backup example restores the specified table from an existing backup.\n\naws dynamodb restore-table-from-backup \\\n    --target-table-name MusicCollection \\\n    --backup-arnarn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01576616366715-b4e58d3a\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"MusicCollection2\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"CREATING\",\n        \"CreationDateTime\": 1576618274.326,\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 5,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableSizeBytes\": 0,\n        \"ItemCount\": 0,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection2\",\n        \"TableId\": \"114865c9-5ef3-496c-b4d1-c4cbdd2d44fb\",\n        \"BillingModeSummary\": {\n            \"BillingMode\": \"PROVISIONED\"\n        },\n        \"RestoreSummary\": {\n            \"SourceBackupArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/backup/01576616366715-b4e58d3a\",\n            \"SourceTableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"RestoreDateTime\": 1576616366.715,\n            \"RestoreInProgress\": true\n        }\n    }\n}\n\n\nFor more information, see On-Demand Backup and Restore for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "restore-table-to-point-in-time",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/restore-table-to-point-in-time.html",
      "command_description": "Description\n\nRestores the specified table to the specified point in time within EarliestRestorableDateTime and LatestRestorableDateTime . You can restore your table to any point in time during the last 35 days. Any number of users can execute up to 4 concurrent restores (any type of restore) in a given account.\n\nWhen you restore using point in time recovery, DynamoDB restores your table data to the state based on the selected date and time (day:hour:minute:second) to a new table.\n\nAlong with data, the following are also included on the new restored table using point in time recovery:\n\nGlobal secondary indexes (GSIs)\n\nLocal secondary indexes (LSIs)\n\nProvisioned read and write capacity\n\nEncryption settings\n\nWarning\n\nAll these settings come from the current settings of the source table at the time of restore.\n\nYou must manually set up the following on the restored table:\n\nAuto scaling policies\n\nIAM policies\n\nAmazon CloudWatch metrics and alarms\n\nTags\n\nStream settings\n\nTime to Live (TTL) settings\n\nPoint in time recovery settings\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  restore-table-to-point-in-time\n[--source-table-arn <value>]\n[--source-table-name <value>]\n--target-table-name <value>\n[--use-latest-restorable-time | --no-use-latest-restorable-time]\n[--restore-date-time <value>]\n[--billing-mode-override <value>]\n[--global-secondary-index-override <value>]\n[--local-secondary-index-override <value>]\n[--provisioned-throughput-override <value>]\n[--sse-specification-override <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--source-table-arn <value>]",
        "[--source-table-name <value>]",
        "--target-table-name <value>",
        "[--use-latest-restorable-time | --no-use-latest-restorable-time]",
        "[--restore-date-time <value>]",
        "[--billing-mode-override <value>]",
        "[--global-secondary-index-override <value>]",
        "[--local-secondary-index-override <value>]",
        "[--provisioned-throughput-override <value>]",
        "[--sse-specification-override <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--source-table-arn (string)\n\nThe DynamoDB table that will be restored. This value is an Amazon Resource Name (ARN).\n\n--source-table-name (string)\n\nName of the source table that is being restored.\n\n--target-table-name (string)\n\nThe name of the new table to which it must be restored to.\n\n--use-latest-restorable-time | --no-use-latest-restorable-time (boolean)\n\nRestore the table to the latest possible time. LatestRestorableDateTime is typically 5 minutes before the current time.\n\n--restore-date-time (timestamp)\n\nTime in the past to restore the table to.\n\n--billing-mode-override (string)\n\nThe billing mode of the restored table.\n\nPossible values:\n\nPROVISIONED\n\nPAY_PER_REQUEST\n\n--global-secondary-index-override (list)\n\nList of global secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index. The name must be unique among all other indexes on this table.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nShorthand Syntax:\n\nIndexName=string,KeySchema=[{AttributeName=string,KeyType=string},{AttributeName=string,KeyType=string}],Projection={ProjectionType=string,NonKeyAttributes=[string,string]},ProvisionedThroughput={ReadCapacityUnits=long,WriteCapacityUnits=long} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"IndexName\": \"string\",\n    \"KeySchema\": [\n      {\n        \"AttributeName\": \"string\",\n        \"KeyType\": \"HASH\"|\"RANGE\"\n      }\n      ...\n    ],\n    \"Projection\": {\n      \"ProjectionType\": \"ALL\"|\"KEYS_ONLY\"|\"INCLUDE\",\n      \"NonKeyAttributes\": [\"string\", ...]\n    },\n    \"ProvisionedThroughput\": {\n      \"ReadCapacityUnits\": long,\n      \"WriteCapacityUnits\": long\n    }\n  }\n  ...\n]\n\n\n--local-secondary-index-override (list)\n\nList of local secondary indexes for the restored table. The indexes provided should match existing secondary indexes. You can choose to exclude some or all of the indexes at the time of restore.\n\n(structure)\n\nRepresents the properties of a local secondary index.\n\nIndexName -> (string)\n\nThe name of the local secondary index. The name must be unique among all other indexes on this table.\n\nKeySchema -> (list)\n\nThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the local secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nShorthand Syntax:\n\nIndexName=string,KeySchema=[{AttributeName=string,KeyType=string},{AttributeName=string,KeyType=string}],Projection={ProjectionType=string,NonKeyAttributes=[string,string]} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"IndexName\": \"string\",\n    \"KeySchema\": [\n      {\n        \"AttributeName\": \"string\",\n        \"KeyType\": \"HASH\"|\"RANGE\"\n      }\n      ...\n    ],\n    \"Projection\": {\n      \"ProjectionType\": \"ALL\"|\"KEYS_ONLY\"|\"INCLUDE\",\n      \"NonKeyAttributes\": [\"string\", ...]\n    }\n  }\n  ...\n]\n\n\n--provisioned-throughput-override (structure)\n\nProvisioned throughput settings for the restored table.\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nShorthand Syntax:\n\nReadCapacityUnits=long,WriteCapacityUnits=long\n\n\nJSON Syntax:\n\n{\n  \"ReadCapacityUnits\": long,\n  \"WriteCapacityUnits\": long\n}\n\n\n--sse-specification-override (structure)\n\nThe new server-side encryption settings for the restored table.\n\nEnabled -> (boolean)\n\nIndicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK. If enabled (true), server-side encryption type is set to KMS and an AWS managed CMK is used (AWS KMS charges apply). If disabled (false) or not specified, server-side encryption is set to AWS owned CMK.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB customer master key alias/aws/dynamodb.\n\nShorthand Syntax:\n\nEnabled=boolean,SSEType=string,KMSMasterKeyId=string\n\n\nJSON Syntax:\n\n{\n  \"Enabled\": true|false,\n  \"SSEType\": \"AES256\"|\"KMS\",\n  \"KMSMasterKeyId\": \"string\"\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableDescription -> (structure)\n\nRepresents the properties of a table.\n\nAttributeDefinitions -> (list)\n\nAn array of AttributeDefinition objects. Each of these objects describes one attribute in the table and index key schema.\n\nEach AttributeDefinition object in this array is composed of:\n\nAttributeName - The name of the attribute.\n\nAttributeType - The data type for the attribute.\n\n(structure)\n\nRepresents an attribute for describing the key schema for the table and indexes.\n\nAttributeName -> (string)\n\nA name for the attribute.\n\nAttributeType -> (string)\n\nThe data type for the attribute, where:\n\nS - the attribute is of type String\n\nN - the attribute is of type Number\n\nB - the attribute is of type Binary\n\nTableName -> (string)\n\nThe name of the table.\n\nKeySchema -> (list)\n\nThe primary key structure for the table. Each KeySchemaElement consists of:\n\nAttributeName - The name of the attribute.\n\nKeyType - The role of the attribute:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nFor more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nTableStatus -> (string)\n\nThe current state of the table:\n\nCREATING - The table is being created.\n\nUPDATING - The table is being updated.\n\nDELETING - The table is being deleted.\n\nACTIVE - The table is ready for use.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table in inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will initiate the table archival process when a table’s AWS KMS key remains inaccessible for more than seven days.\n\nARCHIVING - The table is being archived. Operations are not allowed until archival is complete.\n\nARCHIVED - The table has been archived. See the ArchivalReason for more information.\n\nCreationDateTime -> (timestamp)\n\nThe date and time when the table was created, in UNIX epoch time format.\n\nProvisionedThroughput -> (structure)\n\nThe provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nTableSizeBytes -> (long)\n\nThe total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nTableArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the table.\n\nTableId -> (string)\n\nUnique identifier for the table for which the backup was created.\n\nBillingModeSummary -> (structure)\n\nContains the details for the read/write capacity mode.\n\nBillingMode -> (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - Sets the read/write capacity mode to PROVISIONED . We recommend using PROVISIONED for predictable workloads.\n\nPAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST . We recommend using PAY_PER_REQUEST for unpredictable workloads.\n\nLastUpdateToPayPerRequestDateTime -> (timestamp)\n\nRepresents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.\n\nLocalSecondaryIndexes -> (list)\n\nRepresents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:\n\nIndexName - The name of the local secondary index.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes .\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nIndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a local secondary index.\n\nIndexName -> (string)\n\nRepresents the name of the local secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nGlobalSecondaryIndexes -> (list)\n\nThe global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:\n\nBackfilling - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table. It is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a CreateTable operation.) You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. (This attribute does not appear for indexes that were created during a CreateTable operation.)\n\nIndexName - The name of the global secondary index.\n\nIndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexStatus - The current status of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexStatus -> (string)\n\nThe current state of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nBackfilling -> (boolean)\n\nIndicates whether the index is currently backfilling. Backfilling is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and Backfilling is false.\n\nYou can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false.\n\nNote\n\nFor indexes that were created during a CreateTable operation, the Backfilling attribute does not appear in the DescribeTable output.\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nStreamSpecification -> (structure)\n\nThe current DynamoDB Streams configuration for the table.\n\nStreamEnabled -> (boolean)\n\nIndicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.\n\nStreamViewType -> (string)\n\nWhen an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nLatestStreamLabel -> (string)\n\nA timestamp, in ISO 8601 format, for this stream.\n\nNote that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:\n\nAWS customer ID\n\nTable name\n\nStreamLabel\n\nLatestStreamArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.\n\nGlobalTableVersion -> (string)\n\nRepresents the version of global tables in use, if the table is replicated across AWS Regions.\n\nReplicas -> (list)\n\nRepresents replicas of the table.\n\n(structure)\n\nContains the details of the replica.\n\nRegionName -> (string)\n\nThe name of the Region.\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.\n\nREGION_DISABLED - The replica is inaccessible because the AWS Region has been disabled.\n\nNote\n\nIf the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table is inaccessible.\n\nNote\n\nIf the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nReplicaStatusDescription -> (string)\n\nDetailed information about the replica status.\n\nReplicaStatusPercentProgress -> (string)\n\nSpecifies the progress of a Create, Update, or Delete action on the replica as a percentage.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not described, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nIf not described, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nReplicaInaccessibleDateTime -> (timestamp)\n\nThe time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.\n\nRestoreSummary -> (structure)\n\nContains details for the restore.\n\nSourceBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup from which the table was restored.\n\nSourceTableArn -> (string)\n\nThe ARN of the source table of the backup that is being restored.\n\nRestoreDateTime -> (timestamp)\n\nPoint in time or source backup time.\n\nRestoreInProgress -> (boolean)\n\nIndicates if a restore is in progress or not.\n\nSSEDescription -> (structure)\n\nThe description of the server-side encryption status on the specified table.\n\nStatus -> (string)\n\nRepresents the current state of server-side encryption. The only supported values are:\n\nENABLED - Server-side encryption is enabled.\n\nUPDATING - Server-side encryption is being updated.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyArn -> (string)\n\nThe AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.\n\nInaccessibleEncryptionDateTime -> (timestamp)\n\nIndicates the time, in UNIX epoch date format, when DynamoDB detected that the table’s AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table’s AWS KMS key is accessible again. DynamoDB will initiate the table archival process when table’s AWS KMS key remains inaccessible for more than seven days from this date.\n\nArchivalSummary -> (structure)\n\nContains information about the table archive.\n\nArchivalDateTime -> (timestamp)\n\nThe date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.\n\nArchivalReason -> (string)\n\nThe reason DynamoDB archived the table. Currently, the only possible value is:\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The table was archived due to the table’s AWS KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.\n\nArchivalBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.",
      "command_examples": "Examples\n\nTo restore a DynamoDB table to a point in time\n\nThe following restore-table-to-point-in-time example restores the MusicCollection table to the specified point in time.\n\naws dynamodb restore-table-to-point-in-time \\\n    --source-table-name MusicCollection \\\n    --target-table-name MusicCollectionRestore \\\n    --restore-date-time 1576622404.0\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"MusicCollectionRestore\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"CREATING\",\n        \"CreationDateTime\": 1576623311.86,\n        \"ProvisionedThroughput\": {\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 5,\n            \"WriteCapacityUnits\": 5\n        },\n        \"TableSizeBytes\": 0,\n        \"ItemCount\": 0,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollectionRestore\",\n        \"TableId\": \"befd9e0e-1843-4dc6-a147-d6d00e85cb1f\",\n        \"BillingModeSummary\": {\n            \"BillingMode\": \"PROVISIONED\"\n        },\n        \"RestoreSummary\": {\n            \"SourceTableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n            \"RestoreDateTime\": 1576622404.0,\n            \"RestoreInProgress\": true\n        }\n    }\n}\n\n\nFor more information, see Point-in-Time Recovery for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "scan",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/scan.html",
      "command_description": "Description\n\nThe Scan operation returns one or more items and item attributes by accessing every item in a table or a secondary index. To have DynamoDB return fewer items, you can provide a FilterExpression operation.\n\nIf the total number of scanned items exceeds the maximum dataset size limit of 1 MB, the scan stops and results are returned to the user as a LastEvaluatedKey value to continue the scan in a subsequent operation. The results also include the number of items exceeding the limit. A scan can result in no table data meeting the filter criteria.\n\nA single Scan operation reads up to the maximum number of items set (if using the Limit parameter) or a maximum of 1 MB of data and then apply any filtering to the results using FilterExpression . If LastEvaluatedKey is present in the response, you need to paginate the result set. For more information, see Paginating the Results in the Amazon DynamoDB Developer Guide .\n\nScan operations proceed sequentially; however, for faster performance on a large table or secondary index, applications can request a parallel Scan operation by providing the Segment and TotalSegments parameters. For more information, see Parallel Scan in the Amazon DynamoDB Developer Guide .\n\nScan uses eventually consistent reads when accessing the data in a table; therefore, the result set might not include the changes to data in the table immediately before the operation began. If you need a consistent copy of the data, as of the time that the Scan begins, you can set the ConsistentRead parameter to true .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nscan is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: Items, Count, ScannedCount",
      "command_synopsis": "Synopsis\n  scan\n--table-name <value>\n[--index-name <value>]\n[--attributes-to-get <value>]\n[--select <value>]\n[--scan-filter <value>]\n[--conditional-operator <value>]\n[--return-consumed-capacity <value>]\n[--total-segments <value>]\n[--segment <value>]\n[--projection-expression <value>]\n[--filter-expression <value>]\n[--expression-attribute-names <value>]\n[--expression-attribute-values <value>]\n[--consistent-read | --no-consistent-read]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "[--index-name <value>]",
        "[--attributes-to-get <value>]",
        "[--select <value>]",
        "[--scan-filter <value>]",
        "[--conditional-operator <value>]",
        "[--return-consumed-capacity <value>]",
        "[--total-segments <value>]",
        "[--segment <value>]",
        "[--projection-expression <value>]",
        "[--filter-expression <value>]",
        "[--expression-attribute-names <value>]",
        "[--expression-attribute-values <value>]",
        "[--consistent-read | --no-consistent-read]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table containing the requested items; or, if you provide IndexName , the name of the table to which that index belongs.\n\n--index-name (string)\n\nThe name of a secondary index to scan. This index can be any local secondary index or global secondary index. Note that if you use the IndexName parameter, you must also provide TableName .\n\n--attributes-to-get (list)\n\nThis is a legacy parameter. Use ProjectionExpression instead. For more information, see AttributesToGet in the Amazon DynamoDB Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--select (string)\n\nThe attributes to be returned in the result. You can retrieve all item attributes, specific item attributes, the count of matching items, or in the case of an index, some or all of the attributes projected into the index.\n\nALL_ATTRIBUTES - Returns all of the item attributes from the specified table or index. If you query a local secondary index, then for each matching item in the index, DynamoDB fetches the entire item from the parent table. If the index is configured to project all item attributes, then all of the data can be obtained from the local secondary index, and no fetching is required.\n\nALL_PROJECTED_ATTRIBUTES - Allowed only when querying an index. Retrieves all attributes that have been projected into the index. If the index is configured to project all attributes, this return value is equivalent to specifying ALL_ATTRIBUTES .\n\nCOUNT - Returns the number of matching items, rather than the matching items themselves.\n\nSPECIFIC_ATTRIBUTES - Returns only the attributes listed in AttributesToGet . This return value is equivalent to specifying AttributesToGet without specifying any value for Select . If you query or scan a local secondary index and request only attributes that are projected into that index, the operation reads only the index and not the table. If any of the requested attributes are not projected into the local secondary index, DynamoDB fetches each of these attributes from the parent table. This extra fetching incurs additional throughput cost and latency. If you query or scan a global secondary index, you can only request attributes that are projected into the index. Global secondary index queries cannot fetch attributes from the parent table.\n\nIf neither Select nor AttributesToGet are specified, DynamoDB defaults to ALL_ATTRIBUTES when accessing a table, and ALL_PROJECTED_ATTRIBUTES when accessing an index. You cannot use both Select and AttributesToGet together in a single request, unless the value for Select is SPECIFIC_ATTRIBUTES . (This usage is equivalent to specifying AttributesToGet without any value for Select .)\n\nNote\n\nIf you use the ProjectionExpression parameter, then the value for Select can only be SPECIFIC_ATTRIBUTES . Any other value for Select will return an error.\n\nPossible values:\n\nALL_ATTRIBUTES\n\nALL_PROJECTED_ATTRIBUTES\n\nSPECIFIC_ATTRIBUTES\n\nCOUNT\n\n--scan-filter (map)\n\nThis is a legacy parameter. Use FilterExpression instead. For more information, see ScanFilter in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the selection criteria for a Query or Scan operation:\n\nFor a Query operation, Condition is used for specifying the KeyConditions to use when querying a table or an index. For KeyConditions , only the following comparison operators are supported: EQ | LE | LT | GE | GT | BEGINS_WITH | BETWEEN Condition is also used in a QueryFilter , which evaluates the query results and returns only the desired values.\n\nFor a Scan operation, Condition is used in a ScanFilter , which evaluates the scan results and returns only the desired values.\n\nAttributeValueList -> (list)\n\nOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used.\n\nFor type Number, value comparisons are numeric.\n\nString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A , and a is greater than B . For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters .\n\nFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nComparisonOperator -> (string)\n\nA comparator for evaluating attributes. For example, equals, greater than, less than, etc.\n\nThe following comparison operators are available:\n\nEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\n\nThe following are descriptions of each comparison operator.\n\nEQ : Equal. EQ is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNE : Not equal. NE is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLE : Less than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLT : Less than. AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGE : Greater than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGT : Greater than. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the existence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NOT_NULL , the result is a Boolean true . This result is because the attribute “a ” exists; its data type is not relevant to the NOT_NULL comparison operator.\n\nNULL : The attribute does not exist. NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NULL , the result is a Boolean false . This is because the attribute “a ” exists; its data type is not relevant to the NULL comparison operator.\n\nCONTAINS : Checks for a subsequence, or value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating “a CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nNOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating “a NOT CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nBEGINS_WITH : Checks for a prefix. AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\n\nIN : Checks for matching elements in a list. AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.\n\nBETWEEN : Greater than or equal to the first value, and less than or equal to the second value. AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}\n\nFor usage examples of AttributeValueList and ComparisonOperator , see Legacy Conditional Parameters in the Amazon DynamoDB Developer Guide .\n\nJSON Syntax:\n\n{\"string\": {\n      \"AttributeValueList\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n            ...},\n          \"L\": [\n            {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"ComparisonOperator\": \"EQ\"|\"NE\"|\"IN\"|\"LE\"|\"LT\"|\"GE\"|\"GT\"|\"BETWEEN\"|\"NOT_NULL\"|\"NULL\"|\"CONTAINS\"|\"NOT_CONTAINS\"|\"BEGINS_WITH\"\n    }\n  ...}\n\n\n--conditional-operator (string)\n\nThis is a legacy parameter. Use FilterExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .\n\nPossible values:\n\nAND\n\nOR\n\n--return-consumed-capacity (string)\n\nDetermines the level of detail about provisioned throughput consumption that is returned in the response:\n\nINDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem , do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).\n\nTOTAL - The response includes only the aggregate ConsumedCapacity for the operation.\n\nNONE - No ConsumedCapacity details are included in the response.\n\nPossible values:\n\nINDEXES\n\nTOTAL\n\nNONE\n\n--total-segments (integer)\n\nFor a parallel Scan request, TotalSegments represents the total number of segments into which the Scan operation will be divided. The value of TotalSegments corresponds to the number of application workers that will perform the parallel scan. For example, if you want to use four application threads to scan a table or an index, specify a TotalSegments value of 4.\n\nThe value for TotalSegments must be greater than or equal to 1, and less than or equal to 1000000. If you specify a TotalSegments value of 1, the Scan operation will be sequential rather than parallel.\n\nIf you specify TotalSegments , you must also specify Segment .\n\n--segment (integer)\n\nFor a parallel Scan request, Segment identifies an individual segment to be scanned by an application worker.\n\nSegment IDs are zero-based, so the first segment is always 0. For example, if you want to use four application threads to scan a table or an index, then the first thread specifies a Segment value of 0, the second thread specifies 1, and so on.\n\nThe value of LastEvaluatedKey returned from a parallel Scan request must be used as ExclusiveStartKey with the same segment ID in a subsequent Scan operation.\n\nThe value for Segment must be greater than or equal to 0, and less than the value provided for TotalSegments .\n\nIf you provide Segment , you must also provide TotalSegments .\n\n--projection-expression (string)\n\nA string that identifies one or more attributes to retrieve from the specified table or index. These attributes can include scalars, sets, or elements of a JSON document. The attributes in the expression must be separated by commas.\n\nIf no attribute names are specified, then all attributes will be returned. If any of the requested attributes are not found, they will not appear in the result.\n\nFor more information, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .\n\n--filter-expression (string)\n\nA string that contains conditions that DynamoDB applies after the Scan operation, but before the data is returned to you. Items that do not satisfy the FilterExpression criteria are not returned.\n\nNote\n\nA FilterExpression is applied after the items have already been read; the process of filtering does not consume any additional read capacity units.\n\nFor more information, see Filter Expressions in the Amazon DynamoDB Developer Guide .\n\n--expression-attribute-names (map)\n\nOne or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\n\nTo access an attribute whose name conflicts with a DynamoDB reserved word.\n\nTo create a placeholder for repeating occurrences of an attribute name in an expression.\n\nTo prevent special characters in an attribute name from being misinterpreted in an expression.\n\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\n\nPercentile\n\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide ). To work around this, you could specify the following for ExpressionAttributeNames :\n\n{\"#P\":\"Percentile\"}\n\nYou could then use this substitution in an expression, as in this example:\n\n#P = :val\n\nNote\n\nTokens that begin with the : character are expression attribute values , which are placeholders for the actual value at runtime.\n\nFor more information on expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--expression-attribute-values (map)\n\nOne or more values that can be substituted in an expression.\n\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\n\nAvailable | Backordered | Discontinued\n\nYou would first need to specify ExpressionAttributeValues as follows:\n\n{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }\n\nYou could then use these values in an expression, such as this:\n\nProductStatus IN (:avail, :back, :disc)\n\nFor more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"S\": \"string\",\n      \"N\": \"string\",\n      \"B\": blob,\n      \"SS\": [\"string\", ...],\n      \"NS\": [\"string\", ...],\n      \"BS\": [blob, ...],\n      \"M\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"L\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": { ... recursive ... }\n            ...},\n          \"L\": [\n            { ... recursive ... }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"NULL\": true|false,\n      \"BOOL\": true|false\n    }\n  ...}\n\n\n--consistent-read | --no-consistent-read (boolean)\n\nA Boolean value that determines the read consistency model during the scan:\n\nIf ConsistentRead is false , then the data returned from Scan might not contain the results from other recently completed write operations (PutItem , UpdateItem , or DeleteItem ).\n\nIf ConsistentRead is true , then all of the write operations that completed before the Scan began are guaranteed to be contained in the Scan response.\n\nThe default setting for ConsistentRead is false .\n\nThe ConsistentRead parameter is not supported on global secondary indexes. If you scan a global secondary index with ConsistentRead set to true, you will receive a ValidationException .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nItems -> (list)\n\nAn array of item attributes that match the scan criteria. Each element in this array consists of an attribute name and the value for that attribute.\n\n(map)\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nCount -> (integer)\n\nThe number of items in the response.\n\nIf you set ScanFilter in the request, then Count is the number of items returned after the filter was applied, and ScannedCount is the number of matching items before the filter was applied.\n\nIf you did not use a filter in the request, then Count is the same as ScannedCount .\n\nScannedCount -> (integer)\n\nThe number of items evaluated, before any ScanFilter is applied. A high ScannedCount value with few, or no, Count results indicates an inefficient Scan operation. For more information, see Count and ScannedCount in the Amazon DynamoDB Developer Guide .\n\nIf you did not use a filter in the request, then ScannedCount is the same as Count .\n\nLastEvaluatedKey -> (map)\n\nThe primary key of the item where the operation stopped, inclusive of the previous result set. Use this value to start a new operation, excluding this value in the new request.\n\nIf LastEvaluatedKey is empty, then the “last page” of results has been processed and there is no more data to be retrieved.\n\nIf LastEvaluatedKey is not empty, it does not necessarily mean that there is more data in the result set. The only way to know when you have reached the end of the result set is when LastEvaluatedKey is empty.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nConsumedCapacity -> (structure)\n\nThe capacity units consumed by the Scan operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Provisioned Throughput in the Amazon DynamoDB Developer Guide .\n\nTableName -> (string)\n\nThe name of the table that was affected by the operation.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed by the operation.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed by the operation.\n\nTable -> (structure)\n\nThe amount of throughput consumed on the table affected by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nLocalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each local index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nGlobalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each global index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.",
      "command_examples": "Examples\n\nTo scan a table\n\nThe following scan example scans the entire MusicCollection table, and then narrows the results to songs by the artist “No One You Know”. For each item, only the album title and song title are returned.\n\naws dynamodb scan \\\n    --table-name MusicCollection \\\n    --filter-expression \"Artist = :a\" \\\n    --projection-expression \"#ST, #AT\" \\\n    --expression-attribute-names file://expression-attribute-names.json \\\n    --expression-attribute-values file://expression-attribute-values.json\n\n\nContents of expression-attribute-names.json:\n\n{\n    \"#ST\": \"SongTitle\",\n    \"#AT\":\"AlbumTitle\"\n}\n\n\nContents of expression-attribute-values.json:\n\n{\n    \":a\": {\"S\": \"No One You Know\"}\n}\n\n\nOutput:\n\n{\n    \"Count\": 2,\n    \"Items\": [\n        {\n            \"SongTitle\": {\n                \"S\": \"Call Me Today\"\n            },\n            \"AlbumTitle\": {\n                \"S\": \"Somewhat Famous\"\n            }\n        },\n        {\n            \"SongTitle\": {\n                \"S\": \"Scared of My Shadow\"\n            },\n            \"AlbumTitle\": {\n                \"S\": \"Blue Sky Blues\"\n            }\n        }\n    ],\n    \"ScannedCount\": 3,\n    \"ConsumedCapacity\": null\n}\n\n\nFor more information, see Working with Scans in DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "tag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/tag-resource.html",
      "command_description": "Description\n\nAssociate a set of tags with an Amazon DynamoDB resource. You can then activate these user-defined tags so that they appear on the Billing and Cost Management console for cost allocation tracking. You can call TagResource up to five times per second, per account.\n\nFor an overview on tagging DynamoDB resources, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  tag-resource\n--resource-arn <value>\n--tags <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--tags <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nIdentifies the Amazon DynamoDB resource to which tags should be added. This value is an Amazon Resource Name (ARN).\n\n--tags (list)\n\nThe tags to be assigned to the Amazon DynamoDB resource.\n\n(structure)\n\nDescribes a tag. A tag is a key-value pair. You can add up to 50 tags to a single DynamoDB table.\n\nAWS-assigned tag names and values are automatically assigned the aws: prefix, which the user cannot assign. AWS-assigned tag names do not count towards the tag limit of 50. User-assigned tag names have the prefix user: in the Cost Allocation Report. You cannot backdate the application of a tag.\n\nFor an overview on tagging DynamoDB resources, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide .\n\nKey -> (string)\n\nThe key of the tag. Tag keys are case sensitive. Each DynamoDB table can only have up to one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.\n\nValue -> (string)\n\nThe value of the tag. Tag values are case-sensitive and can be null.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo add tags to a DynamoDB resource\n\nThe following tag-resource example adds a tag key/value pair to the MusicCollection table.\n\naws dynamodb tag-resource \\\n    --resource-arn arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection \\\n    --tags Key=Owner,Value=blueTeam\n\n\nThis command produces no output.\n\nFor more information, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "transact-get-items",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/transact-get-items.html",
      "command_description": "Description\n\nTransactGetItems is a synchronous operation that atomically retrieves multiple items from one or more tables (but not from indexes) in a single account and Region. A TransactGetItems call can contain up to 25 TransactGetItem objects, each of which contains a Get structure that specifies an item to retrieve from a table in the account and Region. A call to TransactGetItems cannot retrieve items from tables in more than one AWS account or Region. The aggregate size of the items in the transaction cannot exceed 4 MB.\n\nDynamoDB rejects the entire TransactGetItems request if any of the following is true:\n\nA conflicting operation is in the process of updating an item to be read.\n\nThere is insufficient provisioned capacity for the transaction to be completed.\n\nThere is a user error, such as an invalid data format.\n\nThe aggregate size of the items in the transaction cannot exceed 4 MB.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  transact-get-items\n--transact-items <value>\n[--return-consumed-capacity <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--transact-items <value>",
        "[--return-consumed-capacity <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--transact-items (list)\n\nAn ordered array of up to 25 TransactGetItem objects, each of which contains a Get structure.\n\n(structure)\n\nSpecifies an item to be retrieved as part of the transaction.\n\nGet -> (structure)\n\nContains the primary key that identifies the item to get, together with the name of the table that contains the item, and optionally the specific attributes of the item to retrieve.\n\nKey -> (map)\n\nA map of attribute names to AttributeValue objects that specifies the primary key of the item to retrieve.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nTableName -> (string)\n\nThe name of the table from which to retrieve the specified item.\n\nProjectionExpression -> (string)\n\nA string that identifies one or more attributes of the specified item to retrieve from the table. The attributes in the expression must be separated by commas. If no attribute names are specified, then all attributes of the specified item are returned. If any of the requested attributes are not found, they do not appear in the result.\n\nExpressionAttributeNames -> (map)\n\nOne or more substitution tokens for attribute names in the ProjectionExpression parameter.\n\nkey -> (string)\n\nvalue -> (string)\n\nJSON Syntax:\n\n[\n  {\n    \"Get\": {\n      \"Key\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": {\n                  \"S\": \"string\",\n                  \"N\": \"string\",\n                  \"B\": blob,\n                  \"SS\": [\"string\", ...],\n                  \"NS\": [\"string\", ...],\n                  \"BS\": [blob, ...],\n                  \"M\": {\"string\": { ... recursive ... }\n                    ...},\n                  \"L\": [\n                    { ... recursive ... }\n                    ...\n                  ],\n                  \"NULL\": true|false,\n                  \"BOOL\": true|false\n                }\n              ...},\n            \"L\": [\n              {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"TableName\": \"string\",\n      \"ProjectionExpression\": \"string\",\n      \"ExpressionAttributeNames\": {\"string\": \"string\"\n        ...}\n    }\n  }\n  ...\n]\n\n\n--return-consumed-capacity (string)\n\nA value of TOTAL causes consumed capacity information to be returned, and a value of NONE prevents that information from being returned. No other value is valid.\n\nPossible values:\n\nINDEXES\n\nTOTAL\n\nNONE\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nConsumedCapacity -> (list)\n\nIf the ReturnConsumedCapacity value was TOTAL , this is an array of ConsumedCapacity objects, one for each table addressed by TransactGetItem objects in the TransactItems parameter. These ConsumedCapacity objects report the read-capacity units consumed by the TransactGetItems call in that table.\n\n(structure)\n\nThe capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the request asked for it. For more information, see Provisioned Throughput in the Amazon DynamoDB Developer Guide .\n\nTableName -> (string)\n\nThe name of the table that was affected by the operation.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed by the operation.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed by the operation.\n\nTable -> (structure)\n\nThe amount of throughput consumed on the table affected by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nLocalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each local index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nGlobalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each global index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nResponses -> (list)\n\nAn ordered array of up to 25 ItemResponse objects, each of which corresponds to the TransactGetItem object in the same position in the TransactItems array. Each ItemResponse object contains a Map of the name-value pairs that are the projected attributes of the requested item.\n\nIf a requested item could not be retrieved, the corresponding ItemResponse object is Null, or if the requested item has no projected attributes, the corresponding ItemResponse object is an empty Map.\n\n(structure)\n\nDetails for the requested item.\n\nItem -> (map)\n\nMap of attribute data consisting of the data type and attribute value.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true",
      "command_examples": "Examples\n\nTo retrieve multiple items atomically from one or more tables\n\nThe following transact-get-items example retrieves multiple items atomically.\n\naws dynamodb transact-get-items \\\n    --transact-items file://transact-items.json \\\n    --return-consumed-capacity TOTAL\n\n\nContents of transact-items.json:\n\n[\n    {\n        \"Get\": {\n            \"Key\": {\n                \"Artist\": {\"S\": \"Acme Band\"},\n                \"SongTitle\": {\"S\": \"Happy Day\"}\n            },\n            \"TableName\": \"MusicCollection\"\n        }\n    },\n    {\n        \"Get\": {\n            \"Key\": {\n                \"Artist\": {\"S\": \"No One You Know\"},\n                \"SongTitle\": {\"S\": \"Call Me Today\"}\n            },\n            \"TableName\": \"MusicCollection\"\n        }\n    }\n]\n\n\nOutput:\n\n{\n    \"ConsumedCapacity\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"CapacityUnits\": 4.0,\n            \"ReadCapacityUnits\": 4.0\n        }\n    ],\n    \"Responses\": [\n        {\n            \"Item\": {\n                \"AlbumTitle\": {\n                    \"S\": \"Songs About Life\"\n                },\n                \"Artist\": {\n                    \"S\": \"Acme Band\"\n                },\n                \"SongTitle\": {\n                    \"S\": \"Happy Day\"\n                }\n            }\n        },\n        {\n            \"Item\": {\n                \"AlbumTitle\": {\n                    \"S\": \"Somewhat Famous\"\n                },\n                \"Artist\": {\n                    \"S\": \"No One You Know\"\n                },\n                \"SongTitle\": {\n                    \"S\": \"Call Me Today\"\n                }\n            }\n        }\n    ]\n}\n\n\nFor more information, see Managing Complex Workflows with DynamoDB Transactions in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "transact-write-items",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/transact-write-items.html",
      "command_description": "Description\n\nTransactWriteItems is a synchronous write operation that groups up to 25 action requests. These actions can target items in different tables, but not in different AWS accounts or Regions, and no two actions can target the same item. For example, you cannot both ConditionCheck and Update the same item. The aggregate size of the items in the transaction cannot exceed 4 MB.\n\nThe actions are completed atomically so that either all of them succeed, or all of them fail. They are defined by the following objects:\n\nPut — Initiates a PutItem operation to write a new item. This structure specifies the primary key of the item to be written, the name of the table to write it in, an optional condition expression that must be satisfied for the write to succeed, a list of the item’s attributes, and a field indicating whether to retrieve the item’s attributes if the condition is not met.\n\nUpdate — Initiates an UpdateItem operation to update an existing item. This structure specifies the primary key of the item to be updated, the name of the table where it resides, an optional condition expression that must be satisfied for the update to succeed, an expression that defines one or more attributes to be updated, and a field indicating whether to retrieve the item’s attributes if the condition is not met.\n\nDelete — Initiates a DeleteItem operation to delete an existing item. This structure specifies the primary key of the item to be deleted, the name of the table where it resides, an optional condition expression that must be satisfied for the deletion to succeed, and a field indicating whether to retrieve the item’s attributes if the condition is not met.\n\nConditionCheck — Applies a condition to an item that is not being modified by the transaction. This structure specifies the primary key of the item to be checked, the name of the table where it resides, a condition expression that must be satisfied for the transaction to succeed, and a field indicating whether to retrieve the item’s attributes if the condition is not met.\n\nDynamoDB rejects the entire TransactWriteItems request if any of the following is true:\n\nA condition in one of the condition expressions is not met.\n\nAn ongoing operation is in the process of updating the same item.\n\nThere is insufficient provisioned capacity for the transaction to be completed.\n\nAn item size becomes too large (bigger than 400 KB), a local secondary index (LSI) becomes too large, or a similar validation error occurs because of changes made by the transaction.\n\nThe aggregate size of the items in the transaction exceeds 4 MB.\n\nThere is a user error, such as an invalid data format.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  transact-write-items\n--transact-items <value>\n[--return-consumed-capacity <value>]\n[--return-item-collection-metrics <value>]\n[--client-request-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--transact-items <value>",
        "[--return-consumed-capacity <value>]",
        "[--return-item-collection-metrics <value>]",
        "[--client-request-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--transact-items (list)\n\nAn ordered array of up to 25 TransactWriteItem objects, each of which contains a ConditionCheck , Put , Update , or Delete object. These can operate on items in different tables, but the tables must reside in the same AWS account and Region, and no two of them can operate on the same item.\n\n(structure)\n\nA list of requests that can perform update, put, delete, or check operations on multiple items in one or more tables atomically.\n\nConditionCheck -> (structure)\n\nA request to perform a check item operation.\n\nKey -> (map)\n\nThe primary key of the item to be checked. Each element consists of an attribute name and a value for that attribute.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nTableName -> (string)\n\nName of the table for the check item request.\n\nConditionExpression -> (string)\n\nA condition that must be satisfied in order for a conditional update to succeed.\n\nExpressionAttributeNames -> (map)\n\nOne or more substitution tokens for attribute names in an expression.\n\nkey -> (string)\n\nvalue -> (string)\n\nExpressionAttributeValues -> (map)\n\nOne or more values that can be substituted in an expression.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nReturnValuesOnConditionCheckFailure -> (string)\n\nUse ReturnValuesOnConditionCheckFailure to get the item attributes if the ConditionCheck condition fails. For ReturnValuesOnConditionCheckFailure , the valid values are: NONE and ALL_OLD.\n\nPut -> (structure)\n\nA request to perform a PutItem operation.\n\nItem -> (map)\n\nA map of attribute name to attribute values, representing the primary key of the item to be written by PutItem . All of the table’s primary key attributes must be specified, and their data types must match those of the table’s key schema. If any attributes are present in the item that are part of an index key schema for the table, their types must match the index key schema.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nTableName -> (string)\n\nName of the table in which to write the item.\n\nConditionExpression -> (string)\n\nA condition that must be satisfied in order for a conditional update to succeed.\n\nExpressionAttributeNames -> (map)\n\nOne or more substitution tokens for attribute names in an expression.\n\nkey -> (string)\n\nvalue -> (string)\n\nExpressionAttributeValues -> (map)\n\nOne or more values that can be substituted in an expression.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nReturnValuesOnConditionCheckFailure -> (string)\n\nUse ReturnValuesOnConditionCheckFailure to get the item attributes if the Put condition fails. For ReturnValuesOnConditionCheckFailure , the valid values are: NONE and ALL_OLD.\n\nDelete -> (structure)\n\nA request to perform a DeleteItem operation.\n\nKey -> (map)\n\nThe primary key of the item to be deleted. Each element consists of an attribute name and a value for that attribute.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nTableName -> (string)\n\nName of the table in which the item to be deleted resides.\n\nConditionExpression -> (string)\n\nA condition that must be satisfied in order for a conditional delete to succeed.\n\nExpressionAttributeNames -> (map)\n\nOne or more substitution tokens for attribute names in an expression.\n\nkey -> (string)\n\nvalue -> (string)\n\nExpressionAttributeValues -> (map)\n\nOne or more values that can be substituted in an expression.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nReturnValuesOnConditionCheckFailure -> (string)\n\nUse ReturnValuesOnConditionCheckFailure to get the item attributes if the Delete condition fails. For ReturnValuesOnConditionCheckFailure , the valid values are: NONE and ALL_OLD.\n\nUpdate -> (structure)\n\nA request to perform an UpdateItem operation.\n\nKey -> (map)\n\nThe primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nUpdateExpression -> (string)\n\nAn expression that defines one or more attributes to be updated, the action to be performed on them, and new value(s) for them.\n\nTableName -> (string)\n\nName of the table for the UpdateItem request.\n\nConditionExpression -> (string)\n\nA condition that must be satisfied in order for a conditional update to succeed.\n\nExpressionAttributeNames -> (map)\n\nOne or more substitution tokens for attribute names in an expression.\n\nkey -> (string)\n\nvalue -> (string)\n\nExpressionAttributeValues -> (map)\n\nOne or more values that can be substituted in an expression.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nReturnValuesOnConditionCheckFailure -> (string)\n\nUse ReturnValuesOnConditionCheckFailure to get the item attributes if the Update condition fails. For ReturnValuesOnConditionCheckFailure , the valid values are: NONE, ALL_OLD, UPDATED_OLD, ALL_NEW, UPDATED_NEW.\n\nJSON Syntax:\n\n[\n  {\n    \"ConditionCheck\": {\n      \"Key\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": {\n                  \"S\": \"string\",\n                  \"N\": \"string\",\n                  \"B\": blob,\n                  \"SS\": [\"string\", ...],\n                  \"NS\": [\"string\", ...],\n                  \"BS\": [blob, ...],\n                  \"M\": {\"string\": { ... recursive ... }\n                    ...},\n                  \"L\": [\n                    { ... recursive ... }\n                    ...\n                  ],\n                  \"NULL\": true|false,\n                  \"BOOL\": true|false\n                }\n              ...},\n            \"L\": [\n              {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"TableName\": \"string\",\n      \"ConditionExpression\": \"string\",\n      \"ExpressionAttributeNames\": {\"string\": \"string\"\n        ...},\n      \"ExpressionAttributeValues\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": {\n                  \"S\": \"string\",\n                  \"N\": \"string\",\n                  \"B\": blob,\n                  \"SS\": [\"string\", ...],\n                  \"NS\": [\"string\", ...],\n                  \"BS\": [blob, ...],\n                  \"M\": {\"string\": { ... recursive ... }\n                    ...},\n                  \"L\": [\n                    { ... recursive ... }\n                    ...\n                  ],\n                  \"NULL\": true|false,\n                  \"BOOL\": true|false\n                }\n              ...},\n            \"L\": [\n              {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"ReturnValuesOnConditionCheckFailure\": \"ALL_OLD\"|\"NONE\"\n    },\n    \"Put\": {\n      \"Item\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": {\n                  \"S\": \"string\",\n                  \"N\": \"string\",\n                  \"B\": blob,\n                  \"SS\": [\"string\", ...],\n                  \"NS\": [\"string\", ...],\n                  \"BS\": [blob, ...],\n                  \"M\": {\"string\": { ... recursive ... }\n                    ...},\n                  \"L\": [\n                    { ... recursive ... }\n                    ...\n                  ],\n                  \"NULL\": true|false,\n                  \"BOOL\": true|false\n                }\n              ...},\n            \"L\": [\n              {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"TableName\": \"string\",\n      \"ConditionExpression\": \"string\",\n      \"ExpressionAttributeNames\": {\"string\": \"string\"\n        ...},\n      \"ExpressionAttributeValues\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": {\n                  \"S\": \"string\",\n                  \"N\": \"string\",\n                  \"B\": blob,\n                  \"SS\": [\"string\", ...],\n                  \"NS\": [\"string\", ...],\n                  \"BS\": [blob, ...],\n                  \"M\": {\"string\": { ... recursive ... }\n                    ...},\n                  \"L\": [\n                    { ... recursive ... }\n                    ...\n                  ],\n                  \"NULL\": true|false,\n                  \"BOOL\": true|false\n                }\n              ...},\n            \"L\": [\n              {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"ReturnValuesOnConditionCheckFailure\": \"ALL_OLD\"|\"NONE\"\n    },\n    \"Delete\": {\n      \"Key\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": {\n                  \"S\": \"string\",\n                  \"N\": \"string\",\n                  \"B\": blob,\n                  \"SS\": [\"string\", ...],\n                  \"NS\": [\"string\", ...],\n                  \"BS\": [blob, ...],\n                  \"M\": {\"string\": { ... recursive ... }\n                    ...},\n                  \"L\": [\n                    { ... recursive ... }\n                    ...\n                  ],\n                  \"NULL\": true|false,\n                  \"BOOL\": true|false\n                }\n              ...},\n            \"L\": [\n              {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"TableName\": \"string\",\n      \"ConditionExpression\": \"string\",\n      \"ExpressionAttributeNames\": {\"string\": \"string\"\n        ...},\n      \"ExpressionAttributeValues\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": {\n                  \"S\": \"string\",\n                  \"N\": \"string\",\n                  \"B\": blob,\n                  \"SS\": [\"string\", ...],\n                  \"NS\": [\"string\", ...],\n                  \"BS\": [blob, ...],\n                  \"M\": {\"string\": { ... recursive ... }\n                    ...},\n                  \"L\": [\n                    { ... recursive ... }\n                    ...\n                  ],\n                  \"NULL\": true|false,\n                  \"BOOL\": true|false\n                }\n              ...},\n            \"L\": [\n              {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"ReturnValuesOnConditionCheckFailure\": \"ALL_OLD\"|\"NONE\"\n    },\n    \"Update\": {\n      \"Key\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": {\n                  \"S\": \"string\",\n                  \"N\": \"string\",\n                  \"B\": blob,\n                  \"SS\": [\"string\", ...],\n                  \"NS\": [\"string\", ...],\n                  \"BS\": [blob, ...],\n                  \"M\": {\"string\": { ... recursive ... }\n                    ...},\n                  \"L\": [\n                    { ... recursive ... }\n                    ...\n                  ],\n                  \"NULL\": true|false,\n                  \"BOOL\": true|false\n                }\n              ...},\n            \"L\": [\n              {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"UpdateExpression\": \"string\",\n      \"TableName\": \"string\",\n      \"ConditionExpression\": \"string\",\n      \"ExpressionAttributeNames\": {\"string\": \"string\"\n        ...},\n      \"ExpressionAttributeValues\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": {\n                  \"S\": \"string\",\n                  \"N\": \"string\",\n                  \"B\": blob,\n                  \"SS\": [\"string\", ...],\n                  \"NS\": [\"string\", ...],\n                  \"BS\": [blob, ...],\n                  \"M\": {\"string\": { ... recursive ... }\n                    ...},\n                  \"L\": [\n                    { ... recursive ... }\n                    ...\n                  ],\n                  \"NULL\": true|false,\n                  \"BOOL\": true|false\n                }\n              ...},\n            \"L\": [\n              {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"ReturnValuesOnConditionCheckFailure\": \"ALL_OLD\"|\"NONE\"\n    }\n  }\n  ...\n]\n\n\n--return-consumed-capacity (string)\n\nDetermines the level of detail about provisioned throughput consumption that is returned in the response:\n\nINDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem , do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).\n\nTOTAL - The response includes only the aggregate ConsumedCapacity for the operation.\n\nNONE - No ConsumedCapacity details are included in the response.\n\nPossible values:\n\nINDEXES\n\nTOTAL\n\nNONE\n\n--return-item-collection-metrics (string)\n\nDetermines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections (if any), that were modified during the operation and are returned in the response. If set to NONE (the default), no statistics are returned.\n\nPossible values:\n\nSIZE\n\nNONE\n\n--client-request-token (string)\n\nProviding a ClientRequestToken makes the call to TransactWriteItems idempotent, meaning that multiple identical calls have the same effect as one single call.\n\nAlthough multiple identical calls using the same client request token produce the same result on the server (no side effects), the responses to the calls might not be the same. If the ReturnConsumedCapacity> parameter is set, then the initial TransactWriteItems call returns the amount of write capacity units consumed in making the changes. Subsequent TransactWriteItems calls with the same client token return the number of read capacity units consumed in reading the item.\n\nA client request token is valid for 10 minutes after the first request that uses it is completed. After 10 minutes, any request with the same client token is treated as a new request. Do not resubmit the same request with the same client token for more than 10 minutes, or the result might not be idempotent.\n\nIf you submit a request with the same client token but a change in other parameters within the 10-minute idempotency window, DynamoDB returns an IdempotentParameterMismatch exception.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nConsumedCapacity -> (list)\n\nThe capacity units consumed by the entire TransactWriteItems operation. The values of the list are ordered according to the ordering of the TransactItems request parameter.\n\n(structure)\n\nThe capacity units consumed by an operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the request asked for it. For more information, see Provisioned Throughput in the Amazon DynamoDB Developer Guide .\n\nTableName -> (string)\n\nThe name of the table that was affected by the operation.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed by the operation.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed by the operation.\n\nTable -> (structure)\n\nThe amount of throughput consumed on the table affected by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nLocalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each local index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nGlobalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each global index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nItemCollectionMetrics -> (map)\n\nA list of tables that were processed by TransactWriteItems and, for each table, information about any item collections that were affected by individual UpdateItem , PutItem , or DeleteItem operations.\n\nkey -> (string)\n\nvalue -> (list)\n\n(structure)\n\nInformation about item collections, if any, that were affected by the operation. ItemCollectionMetrics is only returned if the request asked for it. If the table does not have any local secondary indexes, this information is not returned in the response.\n\nItemCollectionKey -> (map)\n\nThe partition key value of the item collection. This value is the same as the partition key value of the item.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nSizeEstimateRangeGB -> (list)\n\nAn estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\n\nThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\n\n(double)",
      "command_examples": "Examples\n\nExample 1: To write items atomically to one or more tables\n\nThe following transact-write-items example updates one item and deletes another. The operation fails if either operation fails, or if either item contains a Rating attribute.\n\naws dynamodb transact-write-items \\\n    --transact-items file://transact-items.json \\\n    --return-consumed-capacity TOTAL \\\n    --return-item-collection-metrics SIZE\n\n\nContents of the transact-items.json file:\n\n[\n    {\n        \"Update\": {\n            \"Key\": {\n                \"Artist\": {\"S\": \"Acme Band\"},\n                \"SongTitle\": {\"S\": \"Happy Day\"}\n            },\n            \"UpdateExpression\": \"SET AlbumTitle = :newval\",\n            \"ExpressionAttributeValues\": {\n                \":newval\": {\"S\": \"Updated Album Title\"}\n            },\n            \"TableName\": \"MusicCollection\",\n            \"ConditionExpression\": \"attribute_not_exists(Rating)\"\n        }\n    },\n    {\n        \"Delete\": {\n            \"Key\": {\n                \"Artist\": {\"S\": \"No One You Know\"},\n                \"SongTitle\": {\"S\": \"Call Me Today\"}\n            },\n            \"TableName\": \"MusicCollection\",\n            \"ConditionExpression\": \"attribute_not_exists(Rating)\"\n        }\n    }\n]\n\n\nOutput:\n\n{\n    \"ConsumedCapacity\": [\n        {\n            \"TableName\": \"MusicCollection\",\n            \"CapacityUnits\": 10.0,\n            \"WriteCapacityUnits\": 10.0\n        }\n    ],\n    \"ItemCollectionMetrics\": {\n        \"MusicCollection\": [\n            {\n                \"ItemCollectionKey\": {\n                    \"Artist\": {\n                        \"S\": \"No One You Know\"\n                    }\n                },\n                \"SizeEstimateRangeGB\": [\n                    0.0,\n                    1.0\n                ]\n            },\n            {\n                \"ItemCollectionKey\": {\n                    \"Artist\": {\n                        \"S\": \"Acme Band\"\n                    }\n                },\n                \"SizeEstimateRangeGB\": [\n                    0.0,\n                    1.0\n                ]\n            }\n        ]\n    }\n}\n\n\nFor more information, see Managing Complex Workflows with DynamoDB Transactions in the Amazon DynamoDB Developer Guide.\n\nExample 2: To write items atomically using a client request token\n\nThe following command uses a client request token to make the call to transact-write-items idempotent, meaning that multiple calls have the same effect as one single call.\n\naws dynamodb transact-write-items \\\n    --transact-items file://transact-items.json \\\n    --client-request-token abc123\n\n\nContents of the transact-items.json file:\n\n[\n    {\n        \"Update\": {\n            \"Key\": {\n                \"Artist\": {\"S\": \"Acme Band\"},\n                \"SongTitle\": {\"S\": \"Happy Day\"}\n            },\n            \"UpdateExpression\": \"SET AlbumTitle = :newval\",\n            \"ExpressionAttributeValues\": {\n                \":newval\": {\"S\": \"Updated Album Title\"}\n            },\n            \"TableName\": \"MusicCollection\",\n            \"ConditionExpression\": \"attribute_not_exists(Rating)\"\n        }\n    },\n    {\n        \"Delete\": {\n            \"Key\": {\n                \"Artist\": {\"S\": \"No One You Know\"},\n                \"SongTitle\": {\"S\": \"Call Me Today\"}\n            },\n            \"TableName\": \"MusicCollection\",\n            \"ConditionExpression\": \"attribute_not_exists(Rating)\"\n        }\n    }\n]\n\n\nThis command produces no output.\n\nFor more information, see Managing Complex Workflows with DynamoDB Transactions in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "untag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/untag-resource.html",
      "command_description": "Description\n\nRemoves the association of tags from an Amazon DynamoDB resource. You can call UntagResource up to five times per second, per account.\n\nFor an overview on tagging DynamoDB resources, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  untag-resource\n--resource-arn <value>\n--tag-keys <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--tag-keys <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe DynamoDB resource that the tags will be removed from. This value is an Amazon Resource Name (ARN).\n\n--tag-keys (list)\n\nA list of tag keys. Existing tags of the resource whose keys are members of this list will be removed from the DynamoDB resource.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo remove a tag from a DynamoDB resource\n\nThe following untag-resource example removes the tag with the key Owner from the MusicCollection table.\n\naws dynamodb untag-resource \\\n    --resource-arn arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection \\\n    --tag-keys Owner\n\n\nThis command produces no output.\n\nFor more information, see Tagging for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "update-continuous-backups",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/update-continuous-backups.html",
      "command_description": "Description\n\nUpdateContinuousBackups enables or disables point in time recovery for the specified table. A successful UpdateContinuousBackups call returns the current ContinuousBackupsDescription . Continuous backups are ENABLED on all tables at table creation. If point in time recovery is enabled, PointInTimeRecoveryStatus will be set to ENABLED.\n\nOnce continuous backups and point in time recovery are enabled, you can restore to any point in time within EarliestRestorableDateTime and LatestRestorableDateTime .\n\nLatestRestorableDateTime is typically 5 minutes before the current time. You can restore your table to any point in time during the last 35 days.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-continuous-backups\n--table-name <value>\n--point-in-time-recovery-specification <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "--point-in-time-recovery-specification <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table.\n\n--point-in-time-recovery-specification (structure)\n\nRepresents the settings used to enable point in time recovery.\n\nPointInTimeRecoveryEnabled -> (boolean)\n\nIndicates whether point in time recovery is enabled (true) or disabled (false) on the table.\n\nShorthand Syntax:\n\nPointInTimeRecoveryEnabled=boolean\n\n\nJSON Syntax:\n\n{\n  \"PointInTimeRecoveryEnabled\": true|false\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nContinuousBackupsDescription -> (structure)\n\nRepresents the continuous backups and point in time recovery settings on the table.\n\nContinuousBackupsStatus -> (string)\n\nContinuousBackupsStatus can be one of the following states: ENABLED, DISABLED\n\nPointInTimeRecoveryDescription -> (structure)\n\nThe description of the point in time recovery settings applied to the table.\n\nPointInTimeRecoveryStatus -> (string)\n\nThe current state of point in time recovery:\n\nENABLING - Point in time recovery is being enabled.\n\nENABLED - Point in time recovery is enabled.\n\nDISABLED - Point in time recovery is disabled.\n\nEarliestRestorableDateTime -> (timestamp)\n\nSpecifies the earliest point in time you can restore your table to. You can restore your table to any point in time during the last 35 days.\n\nLatestRestorableDateTime -> (timestamp)\n\nLatestRestorableDateTime is typically 5 minutes before the current time.",
      "command_examples": "Examples\n\nTo update continuous backup settings for a DynamoDB table\n\nThe following update-continuous-backups example enables point-in-time recovery for the MusicCollection table.\n\naws dynamodb update-continuous-backups \\\n    --table-name MusicCollection \\\n    --point-in-time-recovery-specification PointInTimeRecoveryEnabled=true\n\n\nOutput:\n\n{\n    \"ContinuousBackupsDescription\": {\n        \"ContinuousBackupsStatus\": \"ENABLED\",\n        \"PointInTimeRecoveryDescription\": {\n            \"PointInTimeRecoveryStatus\": \"ENABLED\",\n            \"EarliestRestorableDateTime\": 1576622404.0,\n            \"LatestRestorableDateTime\": 1576622404.0\n        }\n    }\n}\n\n\nFor more information, see Point-in-Time Recovery for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "update-contributor-insights",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/update-contributor-insights.html",
      "command_description": "Description\n\nUpdates the status for contributor insights for a specific table or index.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-contributor-insights\n--table-name <value>\n[--index-name <value>]\n--contributor-insights-action <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "[--index-name <value>]",
        "--contributor-insights-action <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table.\n\n--index-name (string)\n\nThe global secondary index name, if applicable.\n\n--contributor-insights-action (string)\n\nRepresents the contributor insights action.\n\nPossible values:\n\nENABLE\n\nDISABLE\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableName -> (string)\n\nThe name of the table.\n\nIndexName -> (string)\n\nThe name of the global secondary index, if applicable.\n\nContributorInsightsStatus -> (string)\n\nThe status of contributor insights",
      "command_examples": "Examples\n\nTo enable Contributor Insights on a table\n\nThe following update-contributor-insights example enables Contributor Insights on the MusicCollection table and the AlbumTitle-index global secondary index.\n\naws dynamodb update-contributor-insights \\\n    --table-name MusicCollection \\\n    --index-name AlbumTitle-index \\\n    --contributor-insights-action ENABLE\n\n\nOutput:\n\n{\n    \"TableName\": \"MusicCollection\",\n    \"IndexName\": \"AlbumTitle-index\",\n    \"ContributorInsightsStatus\": \"ENABLING\"\n}\n\n\nFor more information, see Analyzing Data Access Using CloudWatch Contributor Insights for DynamoDB in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "update-global-table",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/update-global-table.html",
      "command_description": "Description\n\nAdds or removes replicas in the specified global table. The global table must already exist to be able to use this operation. Any replica to be added must be empty, have the same name as the global table, have the same key schema, have DynamoDB Streams enabled, and have the same provisioned and maximum write capacity units.\n\nNote\n\nAlthough you can use UpdateGlobalTable to add replicas and remove replicas in a single request, for simplicity we recommend that you issue separate requests for adding or removing replicas.\n\nIf global secondary indexes are specified, then the following conditions must also be met:\n\nThe global secondary indexes must have the same name.\n\nThe global secondary indexes must have the same hash key and sort key (if present).\n\nThe global secondary indexes must have the same provisioned and maximum write capacity units.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-global-table\n--global-table-name <value>\n--replica-updates <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--global-table-name <value>",
        "--replica-updates <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--global-table-name (string)\n\nThe global table name.\n\n--replica-updates (list)\n\nA list of Regions that should be added or removed from the global table.\n\n(structure)\n\nRepresents one of the following:\n\nA new replica to be added to an existing global table.\n\nNew parameters for an existing replica.\n\nAn existing replica to be removed from an existing global table.\n\nCreate -> (structure)\n\nThe parameters required for creating a replica on an existing global table.\n\nRegionName -> (string)\n\nThe Region of the replica to be added.\n\nDelete -> (structure)\n\nThe name of the existing replica to be removed.\n\nRegionName -> (string)\n\nThe Region of the replica to be removed.\n\nShorthand Syntax:\n\nCreate={RegionName=string},Delete={RegionName=string} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Create\": {\n      \"RegionName\": \"string\"\n    },\n    \"Delete\": {\n      \"RegionName\": \"string\"\n    }\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nGlobalTableDescription -> (structure)\n\nContains the details of the global table.\n\nReplicationGroup -> (list)\n\nThe Regions where the global table has replicas.\n\n(structure)\n\nContains the details of the replica.\n\nRegionName -> (string)\n\nThe name of the Region.\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.\n\nREGION_DISABLED - The replica is inaccessible because the AWS Region has been disabled.\n\nNote\n\nIf the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table is inaccessible.\n\nNote\n\nIf the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nReplicaStatusDescription -> (string)\n\nDetailed information about the replica status.\n\nReplicaStatusPercentProgress -> (string)\n\nSpecifies the progress of a Create, Update, or Delete action on the replica as a percentage.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not described, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nIf not described, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nReplicaInaccessibleDateTime -> (timestamp)\n\nThe time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.\n\nGlobalTableArn -> (string)\n\nThe unique identifier of the global table.\n\nCreationDateTime -> (timestamp)\n\nThe creation time of the global table.\n\nGlobalTableStatus -> (string)\n\nThe current state of the global table:\n\nCREATING - The global table is being created.\n\nUPDATING - The global table is being updated.\n\nDELETING - The global table is being deleted.\n\nACTIVE - The global table is ready for use.\n\nGlobalTableName -> (string)\n\nThe global table name.",
      "command_examples": "Examples\n\nTo update a DynamoDB global table\n\nThe following update-global-table example adds a replica in the specified Region to the MusicCollection global table.\n\naws dynamodb update-global-table \\\n    --global-table-name MusicCollection \\\n    --replica-updates Create={RegionName=eu-west-1}\n\n\nOutput:\n\n{\n    \"GlobalTableDescription\": {\n        \"ReplicationGroup\": [\n            {\n                \"RegionName\": \"eu-west-1\"\n            },\n            {\n                \"RegionName\": \"us-east-2\"\n            },\n            {\n                \"RegionName\": \"us-east-1\"\n            }\n        ],\n        \"GlobalTableArn\": \"arn:aws:dynamodb::123456789012:global-table/MusicCollection\",\n        \"CreationDateTime\": 1576625818.532,\n        \"GlobalTableStatus\": \"ACTIVE\",\n        \"GlobalTableName\": \"MusicCollection\"\n    }\n}\n\n\nFor more information, see DynamoDB Global Tables in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "update-global-table-settings",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/update-global-table-settings.html",
      "command_description": "Description\n\nUpdates settings for a global table.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-global-table-settings\n--global-table-name <value>\n[--global-table-billing-mode <value>]\n[--global-table-provisioned-write-capacity-units <value>]\n[--global-table-provisioned-write-capacity-auto-scaling-settings-update <value>]\n[--global-table-global-secondary-index-settings-update <value>]\n[--replica-settings-update <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--global-table-name <value>",
        "[--global-table-billing-mode <value>]",
        "[--global-table-provisioned-write-capacity-units <value>]",
        "[--global-table-provisioned-write-capacity-auto-scaling-settings-update <value>]",
        "[--global-table-global-secondary-index-settings-update <value>]",
        "[--replica-settings-update <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--global-table-name (string)\n\nThe name of the global table\n\n--global-table-billing-mode (string)\n\nThe billing mode of the global table. If GlobalTableBillingMode is not specified, the global table defaults to PROVISIONED capacity billing mode.\n\nPROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to Provisioned Mode .\n\nPAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to On-Demand Mode .\n\nPossible values:\n\nPROVISIONED\n\nPAY_PER_REQUEST\n\n--global-table-provisioned-write-capacity-units (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.\n\n--global-table-provisioned-write-capacity-auto-scaling-settings-update (structure)\n\nAuto scaling settings for managing provisioned write capacity for the global table.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring auto scaling policy.\n\nScalingPolicyUpdate -> (structure)\n\nThe scaling policy to apply for scaling target global table or global secondary index capacity units.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nShorthand Syntax:\n\nMinimumUnits=long,MaximumUnits=long,AutoScalingDisabled=boolean,AutoScalingRoleArn=string,ScalingPolicyUpdate={PolicyName=string,TargetTrackingScalingPolicyConfiguration={DisableScaleIn=boolean,ScaleInCooldown=integer,ScaleOutCooldown=integer,TargetValue=double}}\n\n\nJSON Syntax:\n\n{\n  \"MinimumUnits\": long,\n  \"MaximumUnits\": long,\n  \"AutoScalingDisabled\": true|false,\n  \"AutoScalingRoleArn\": \"string\",\n  \"ScalingPolicyUpdate\": {\n    \"PolicyName\": \"string\",\n    \"TargetTrackingScalingPolicyConfiguration\": {\n      \"DisableScaleIn\": true|false,\n      \"ScaleInCooldown\": integer,\n      \"ScaleOutCooldown\": integer,\n      \"TargetValue\": double\n    }\n  }\n}\n\n\n--global-table-global-secondary-index-settings-update (list)\n\nRepresents the settings of a global secondary index for a global table that will be modified.\n\n(structure)\n\nRepresents the settings of a global secondary index for a global table that will be modified.\n\nIndexName -> (string)\n\nThe name of the global secondary index. The name must be unique among all other indexes on this table.\n\nProvisionedWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.\n\nProvisionedWriteCapacityAutoScalingSettingsUpdate -> (structure)\n\nAuto scaling settings for managing a global secondary index’s write capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring auto scaling policy.\n\nScalingPolicyUpdate -> (structure)\n\nThe scaling policy to apply for scaling target global table or global secondary index capacity units.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nJSON Syntax:\n\n[\n  {\n    \"IndexName\": \"string\",\n    \"ProvisionedWriteCapacityUnits\": long,\n    \"ProvisionedWriteCapacityAutoScalingSettingsUpdate\": {\n      \"MinimumUnits\": long,\n      \"MaximumUnits\": long,\n      \"AutoScalingDisabled\": true|false,\n      \"AutoScalingRoleArn\": \"string\",\n      \"ScalingPolicyUpdate\": {\n        \"PolicyName\": \"string\",\n        \"TargetTrackingScalingPolicyConfiguration\": {\n          \"DisableScaleIn\": true|false,\n          \"ScaleInCooldown\": integer,\n          \"ScaleOutCooldown\": integer,\n          \"TargetValue\": double\n        }\n      }\n    }\n  }\n  ...\n]\n\n\n--replica-settings-update (list)\n\nRepresents the settings for a global table in a Region that will be modified.\n\n(structure)\n\nRepresents the settings for a global table in a Region that will be modified.\n\nRegionName -> (string)\n\nThe Region of the replica to be added.\n\nReplicaProvisionedReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nReplicaProvisionedReadCapacityAutoScalingSettingsUpdate -> (structure)\n\nAuto scaling settings for managing a global table replica’s read capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring auto scaling policy.\n\nScalingPolicyUpdate -> (structure)\n\nThe scaling policy to apply for scaling target global table or global secondary index capacity units.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaGlobalSecondaryIndexSettingsUpdate -> (list)\n\nRepresents the settings of a global secondary index for a global table that will be modified.\n\n(structure)\n\nRepresents the settings of a global secondary index for a global table that will be modified.\n\nIndexName -> (string)\n\nThe name of the global secondary index. The name must be unique among all other indexes on this table.\n\nProvisionedReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException .\n\nProvisionedReadCapacityAutoScalingSettingsUpdate -> (structure)\n\nAuto scaling settings for managing a global secondary index replica’s read capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring auto scaling policy.\n\nScalingPolicyUpdate -> (structure)\n\nThe scaling policy to apply for scaling target global table or global secondary index capacity units.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nJSON Syntax:\n\n[\n  {\n    \"RegionName\": \"string\",\n    \"ReplicaProvisionedReadCapacityUnits\": long,\n    \"ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate\": {\n      \"MinimumUnits\": long,\n      \"MaximumUnits\": long,\n      \"AutoScalingDisabled\": true|false,\n      \"AutoScalingRoleArn\": \"string\",\n      \"ScalingPolicyUpdate\": {\n        \"PolicyName\": \"string\",\n        \"TargetTrackingScalingPolicyConfiguration\": {\n          \"DisableScaleIn\": true|false,\n          \"ScaleInCooldown\": integer,\n          \"ScaleOutCooldown\": integer,\n          \"TargetValue\": double\n        }\n      }\n    },\n    \"ReplicaGlobalSecondaryIndexSettingsUpdate\": [\n      {\n        \"IndexName\": \"string\",\n        \"ProvisionedReadCapacityUnits\": long,\n        \"ProvisionedReadCapacityAutoScalingSettingsUpdate\": {\n          \"MinimumUnits\": long,\n          \"MaximumUnits\": long,\n          \"AutoScalingDisabled\": true|false,\n          \"AutoScalingRoleArn\": \"string\",\n          \"ScalingPolicyUpdate\": {\n            \"PolicyName\": \"string\",\n            \"TargetTrackingScalingPolicyConfiguration\": {\n              \"DisableScaleIn\": true|false,\n              \"ScaleInCooldown\": integer,\n              \"ScaleOutCooldown\": integer,\n              \"TargetValue\": double\n            }\n          }\n        }\n      }\n      ...\n    ]\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nGlobalTableName -> (string)\n\nThe name of the global table.\n\nReplicaSettings -> (list)\n\nThe Region-specific settings for the global table.\n\n(structure)\n\nRepresents the properties of a replica.\n\nRegionName -> (string)\n\nThe Region name of the replica.\n\nReplicaStatus -> (string)\n\nThe current state of the Region:\n\nCREATING - The Region is being created.\n\nUPDATING - The Region is being updated.\n\nDELETING - The Region is being deleted.\n\nACTIVE - The Region is ready for use.\n\nReplicaBillingModeSummary -> (structure)\n\nThe read/write capacity mode of the replica.\n\nBillingMode -> (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - Sets the read/write capacity mode to PROVISIONED . We recommend using PROVISIONED for predictable workloads.\n\nPAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST . We recommend using PAY_PER_REQUEST for unpredictable workloads.\n\nLastUpdateToPayPerRequestDateTime -> (timestamp)\n\nRepresents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.\n\nReplicaProvisionedReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nReplicaProvisionedReadCapacityAutoScalingSettings -> (structure)\n\nAuto scaling settings for a global table replica’s read capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaProvisionedWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nReplicaProvisionedWriteCapacityAutoScalingSettings -> (structure)\n\nAuto scaling settings for a global table replica’s write capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaGlobalSecondaryIndexSettings -> (list)\n\nReplica global secondary index settings for the global table.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index. The name must be unique among all other indexes on this table.\n\nIndexStatus -> (string)\n\nThe current status of the global secondary index:\n\nCREATING - The global secondary index is being created.\n\nUPDATING - The global secondary index is being updated.\n\nDELETING - The global secondary index is being deleted.\n\nACTIVE - The global secondary index is ready for use.\n\nProvisionedReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException .\n\nProvisionedReadCapacityAutoScalingSettings -> (structure)\n\nAuto scaling settings for a global secondary index replica’s read capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nProvisionedWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nProvisionedWriteCapacityAutoScalingSettings -> (structure)\n\nAuto scaling settings for a global secondary index replica’s write capacity units.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).",
      "command_examples": "Examples\n\nTo update provisioned write capacity settings on a DynamoDB global table\n\nThe following update-global-table-settings example sets the provisioned write capacity of the MusicCollection global table to 15.\n\naws dynamodb update-global-table-settings \\\n    --global-table-name MusicCollection \\\n    --global-table-provisioned-write-capacity-units 15\n\n\nOutput:\n\n{\n    \"GlobalTableName\": \"MusicCollection\",\n    \"ReplicaSettings\": [\n        {\n            \"RegionName\": \"eu-west-1\",\n            \"ReplicaStatus\": \"UPDATING\",\n            \"ReplicaProvisionedReadCapacityUnits\": 10,\n            \"ReplicaProvisionedReadCapacityAutoScalingSettings\": {\n                \"AutoScalingDisabled\": true\n            },\n            \"ReplicaProvisionedWriteCapacityUnits\": 10,\n            \"ReplicaProvisionedWriteCapacityAutoScalingSettings\": {\n                \"AutoScalingDisabled\": true\n            }\n        },\n        {\n            \"RegionName\": \"us-east-1\",\n            \"ReplicaStatus\": \"UPDATING\",\n            \"ReplicaProvisionedReadCapacityUnits\": 10,\n            \"ReplicaProvisionedReadCapacityAutoScalingSettings\": {\n                \"AutoScalingDisabled\": true\n            },\n            \"ReplicaProvisionedWriteCapacityUnits\": 10,\n            \"ReplicaProvisionedWriteCapacityAutoScalingSettings\": {\n                \"AutoScalingDisabled\": true\n            }\n        },\n        {\n            \"RegionName\": \"us-east-2\",\n            \"ReplicaStatus\": \"UPDATING\",\n            \"ReplicaProvisionedReadCapacityUnits\": 10,\n            \"ReplicaProvisionedReadCapacityAutoScalingSettings\": {\n                \"AutoScalingDisabled\": true\n            },\n            \"ReplicaProvisionedWriteCapacityUnits\": 10,\n            \"ReplicaProvisionedWriteCapacityAutoScalingSettings\": {\n                \"AutoScalingDisabled\": true\n            }\n        }\n    ]\n}\n\n\nFor more information, see DynamoDB Global Tables in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "update-item",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/update-item.html",
      "command_description": "Description\n\nEdits an existing item’s attributes, or adds a new item to the table if it does not already exist. You can put, delete, or add attribute values. You can also perform a conditional update on an existing item (insert a new attribute name-value pair if it doesn’t exist, or replace an existing name-value pair if it has certain expected attribute values).\n\nYou can also return the item’s attribute values in the same UpdateItem operation using the ReturnValues parameter.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-item\n--table-name <value>\n--key <value>\n[--attribute-updates <value>]\n[--expected <value>]\n[--conditional-operator <value>]\n[--return-values <value>]\n[--return-consumed-capacity <value>]\n[--return-item-collection-metrics <value>]\n[--update-expression <value>]\n[--condition-expression <value>]\n[--expression-attribute-names <value>]\n[--expression-attribute-values <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "--key <value>",
        "[--attribute-updates <value>]",
        "[--expected <value>]",
        "[--conditional-operator <value>]",
        "[--return-values <value>]",
        "[--return-consumed-capacity <value>]",
        "[--return-item-collection-metrics <value>]",
        "[--update-expression <value>]",
        "[--condition-expression <value>]",
        "[--expression-attribute-names <value>]",
        "[--expression-attribute-values <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table containing the item to update.\n\n--key (map)\n\nThe primary key of the item to be updated. Each element consists of an attribute name and a value for that attribute.\n\nFor the primary key, you must provide all of the attributes. For example, with a simple primary key, you only need to provide a value for the partition key. For a composite primary key, you must provide values for both the partition key and the sort key.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"S\": \"string\",\n      \"N\": \"string\",\n      \"B\": blob,\n      \"SS\": [\"string\", ...],\n      \"NS\": [\"string\", ...],\n      \"BS\": [blob, ...],\n      \"M\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"L\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": { ... recursive ... }\n            ...},\n          \"L\": [\n            { ... recursive ... }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"NULL\": true|false,\n      \"BOOL\": true|false\n    }\n  ...}\n\n\n--attribute-updates (map)\n\nThis is a legacy parameter. Use UpdateExpression instead. For more information, see AttributeUpdates in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nFor the UpdateItem operation, represents the attributes to be modified, the action to perform on each, and the new value for each.\n\nNote\n\nYou cannot use UpdateItem to update any primary key attributes. Instead, you will need to delete the item, and then use PutItem to create a new item with new attributes.\n\nAttribute values cannot be null; string and binary type attributes must have lengths greater than zero; and set type attributes must not be empty. Requests with empty values will be rejected with a ValidationException exception.\n\nValue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nAction -> (string)\n\nSpecifies how to perform the update. Valid values are PUT (default), DELETE , and ADD . The behavior depends on whether the specified primary key already exists in the table.\n\nIf an item with the specified *Key* is found in the table:\n\nPUT - Adds the specified attribute to the item. If the attribute already exists, it is replaced by the new value.\n\nDELETE - If no value is specified, the attribute and its value are removed from the item. The data type of the specified value must match the existing value’s data type. If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set [a,b,c] and the DELETE action specified [a,c] , then the final attribute value would be [b] . Specifying an empty set is an error.\n\nADD - If the attribute does not already exist, then the attribute and its values are added to the item. If the attribute does exist, then the behavior of ADD depends on the data type of the attribute:\n\nIf the existing attribute is a number, and if Value is also a number, then the Value is mathematically added to the existing attribute. If Value is a negative number, then it is subtracted from the existing attribute.\n\nNote\n\nIf you use ADD to increment or decrement a number value for an item that doesn’t exist before the update, DynamoDB uses 0 as the initial value. In addition, if you use ADD to update an existing item, and intend to increment or decrement an attribute value which does not yet exist, DynamoDB uses 0 as the initial value. For example, suppose that the item you want to update does not yet have an attribute named itemcount , but you decide to ADD the number 3 to this attribute anyway, even though it currently does not exist. DynamoDB will create the itemcount attribute, set its initial value to 0 , and finally add 3 to it. The result will be a new itemcount attribute in the item, with a value of 3 .\n\nIf the existing data type is a set, and if the Value is also a set, then the Value is added to the existing set. (This is a set operation, not mathematical addition.) For example, if the attribute value was the set [1,2] , and the ADD action specified [3] , then the final attribute value would be [1,2,3] . An error occurs if an Add action is specified for a set attribute and the attribute type specified does not match the existing set type. Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the Value must also be a set of strings. The same holds true for number sets and binary sets.\n\nThis action is only valid for an existing attribute whose data type is number or is a set. Do not use ADD for any other data types.\n\nIf no item with the specified *Key* is found:\n\nPUT - DynamoDB creates a new item with the specified primary key, and then adds the attribute.\n\nDELETE - Nothing happens; there is no attribute to delete.\n\nADD - DynamoDB creates an item with the supplied primary key and number (or set of numbers) for the attribute value. The only data types allowed are number and number set; no other data types can be specified.\n\nJSON Syntax:\n\n{\"string\": {\n      \"Value\": {\n        \"S\": \"string\",\n        \"N\": \"string\",\n        \"B\": blob,\n        \"SS\": [\"string\", ...],\n        \"NS\": [\"string\", ...],\n        \"BS\": [blob, ...],\n        \"M\": {\"string\": {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n          ...},\n        \"L\": [\n          {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n          ...\n        ],\n        \"NULL\": true|false,\n        \"BOOL\": true|false\n      },\n      \"Action\": \"ADD\"|\"PUT\"|\"DELETE\"\n    }\n  ...}\n\n\n--expected (map)\n\nThis is a legacy parameter. Use ConditionExpression instead. For more information, see Expected in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents a condition to be compared with an attribute value. This condition can be used with DeleteItem , PutItem , or UpdateItem operations; if the comparison evaluates to true, the operation succeeds; if not, the operation fails. You can use ExpectedAttributeValue in one of two different ways:\n\nUse AttributeValueList to specify one or more values to compare against an attribute. Use ComparisonOperator to specify how you want to perform the comparison. If the comparison evaluates to true, then the conditional operation succeeds.\n\nUse Value to specify a value that DynamoDB will compare against an attribute. If the values match, then ExpectedAttributeValue evaluates to true and the conditional operation succeeds. Optionally, you can also set Exists to false, indicating that you do not expect to find the attribute value in the table. In this case, the conditional operation succeeds only if the comparison evaluates to false.\n\nValue and Exists are incompatible with AttributeValueList and ComparisonOperator . Note that if you use both sets of parameters at once, DynamoDB will return a ValidationException exception.\n\nValue -> (structure)\n\nRepresents the data for the expected attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nExists -> (boolean)\n\nCauses DynamoDB to evaluate the value before attempting a conditional operation:\n\nIf Exists is true , DynamoDB will check to see if that attribute value already exists in the table. If it is found, then the operation succeeds. If it is not found, the operation fails with a ConditionCheckFailedException .\n\nIf Exists is false , DynamoDB assumes that the attribute value does not exist in the table. If in fact the value does not exist, then the assumption is valid and the operation succeeds. If the value is found, despite the assumption that it does not exist, the operation fails with a ConditionCheckFailedException .\n\nThe default setting for Exists is true . If you supply a Value all by itself, DynamoDB assumes the attribute exists: You don’t have to set Exists to true , because it is implied.\n\nDynamoDB returns a ValidationException if:\n\nExists is true but there is no Value to check. (You expect a value to exist, but don’t specify what that value is.)\n\nExists is false but you also provide a Value . (You cannot expect an attribute to have a value, while also expecting it not to exist.)\n\nComparisonOperator -> (string)\n\nA comparator for evaluating attributes in the AttributeValueList . For example, equals, greater than, less than, etc.\n\nThe following comparison operators are available:\n\nEQ | NE | LE | LT | GE | GT | NOT_NULL | NULL | CONTAINS | NOT_CONTAINS | BEGINS_WITH | IN | BETWEEN\n\nThe following are descriptions of each comparison operator.\n\nEQ : Equal. EQ is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue element of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNE : Not equal. NE is supported for all data types, including lists and maps. AttributeValueList can contain only one AttributeValue of type String, Number, Binary, String Set, Number Set, or Binary Set. If an item contains an AttributeValue of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not equal {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLE : Less than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nLT : Less than. AttributeValueList can contain only one AttributeValue of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGE : Greater than or equal. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nGT : Greater than. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not equal {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]} .\n\nNOT_NULL : The attribute exists. NOT_NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the existence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NOT_NULL , the result is a Boolean true . This result is because the attribute “a ” exists; its data type is not relevant to the NOT_NULL comparison operator.\n\nNULL : The attribute does not exist. NULL is supported for all data types, including lists and maps.\n\nNote\n\nThis operator tests for the nonexistence of an attribute, not its data type. If the data type of attribute “a ” is null, and you evaluate it using NULL , the result is a Boolean false . This is because the attribute “a ” exists; its data type is not relevant to the NULL comparison operator.\n\nCONTAINS : Checks for a subsequence, or value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is of type String, then the operator checks for a substring match. If the target attribute of the comparison is of type Binary, then the operator looks for a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it finds an exact match with any member of the set. CONTAINS is supported for lists: When evaluating “a CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nNOT_CONTAINS : Checks for absence of a subsequence, or absence of a value in a set. AttributeValueList can contain only one AttributeValue element of type String, Number, or Binary (not a set type). If the target attribute of the comparison is a String, then the operator checks for the absence of a substring match. If the target attribute of the comparison is Binary, then the operator checks for the absence of a subsequence of the target that matches the input. If the target attribute of the comparison is a set (“SS “, “NS “, or “BS “), then the operator evaluates to true if it does not find an exact match with any member of the set. NOT_CONTAINS is supported for lists: When evaluating “a NOT CONTAINS b “, “a ” can be a list; however, “b ” cannot be a set, a map, or a list.\n\nBEGINS_WITH : Checks for a prefix. AttributeValueList can contain only one AttributeValue of type String or Binary (not a Number or a set type). The target attribute of the comparison must be of type String or Binary (not a Number or a set type).\n\nIN : Checks for matching elements in a list. AttributeValueList can contain one or more AttributeValue elements of type String, Number, or Binary. These attributes are compared against an existing attribute of an item. If any elements of the input are equal to the item attribute, the expression evaluates to true.\n\nBETWEEN : Greater than or equal to the first value, and less than or equal to the second value. AttributeValueList must contain two AttributeValue elements of the same type, either String, Number, or Binary (not a set type). A target attribute matches if the target value is greater than, or equal to, the first element and less than, or equal to, the second element. If an item contains an AttributeValue element of a different type than the one provided in the request, the value does not match. For example, {\"S\":\"6\"} does not compare to {\"N\":\"6\"} . Also, {\"N\":\"6\"} does not compare to {\"NS\":[\"6\", \"2\", \"1\"]}\n\nAttributeValueList -> (list)\n\nOne or more values to evaluate against the supplied attribute. The number of values in the list depends on the ComparisonOperator being used.\n\nFor type Number, value comparisons are numeric.\n\nString value comparisons for greater than, equals, or less than are based on ASCII character code values. For example, a is greater than A , and a is greater than B . For a list of code values, see http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters .\n\nFor Binary, DynamoDB treats each byte of the binary data as unsigned when it compares binary values.\n\nFor information on specifying data types in JSON, see JSON Data Format in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"Value\": {\n        \"S\": \"string\",\n        \"N\": \"string\",\n        \"B\": blob,\n        \"SS\": [\"string\", ...],\n        \"NS\": [\"string\", ...],\n        \"BS\": [blob, ...],\n        \"M\": {\"string\": {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n          ...},\n        \"L\": [\n          {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n          ...\n        ],\n        \"NULL\": true|false,\n        \"BOOL\": true|false\n      },\n      \"Exists\": true|false,\n      \"ComparisonOperator\": \"EQ\"|\"NE\"|\"IN\"|\"LE\"|\"LT\"|\"GE\"|\"GT\"|\"BETWEEN\"|\"NOT_NULL\"|\"NULL\"|\"CONTAINS\"|\"NOT_CONTAINS\"|\"BEGINS_WITH\",\n      \"AttributeValueList\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": {\n                \"S\": \"string\",\n                \"N\": \"string\",\n                \"B\": blob,\n                \"SS\": [\"string\", ...],\n                \"NS\": [\"string\", ...],\n                \"BS\": [blob, ...],\n                \"M\": {\"string\": { ... recursive ... }\n                  ...},\n                \"L\": [\n                  { ... recursive ... }\n                  ...\n                ],\n                \"NULL\": true|false,\n                \"BOOL\": true|false\n              }\n            ...},\n          \"L\": [\n            {\n              \"S\": \"string\",\n              \"N\": \"string\",\n              \"B\": blob,\n              \"SS\": [\"string\", ...],\n              \"NS\": [\"string\", ...],\n              \"BS\": [blob, ...],\n              \"M\": {\"string\": { ... recursive ... }\n                ...},\n              \"L\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"NULL\": true|false,\n              \"BOOL\": true|false\n            }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ]\n    }\n  ...}\n\n\n--conditional-operator (string)\n\nThis is a legacy parameter. Use ConditionExpression instead. For more information, see ConditionalOperator in the Amazon DynamoDB Developer Guide .\n\nPossible values:\n\nAND\n\nOR\n\n--return-values (string)\n\nUse ReturnValues if you want to get the item attributes as they appear before or after they are updated. For UpdateItem , the valid values are:\n\nNONE - If ReturnValues is not specified, or if its value is NONE , then nothing is returned. (This setting is the default for ReturnValues .)\n\nALL_OLD - Returns all of the attributes of the item, as they appeared before the UpdateItem operation.\n\nUPDATED_OLD - Returns only the updated attributes, as they appeared before the UpdateItem operation.\n\nALL_NEW - Returns all of the attributes of the item, as they appear after the UpdateItem operation.\n\nUPDATED_NEW - Returns only the updated attributes, as they appear after the UpdateItem operation.\n\nThere is no additional cost associated with requesting a return value aside from the small network and processing overhead of receiving a larger response. No read capacity units are consumed.\n\nThe values returned are strongly consistent.\n\nPossible values:\n\nNONE\n\nALL_OLD\n\nUPDATED_OLD\n\nALL_NEW\n\nUPDATED_NEW\n\n--return-consumed-capacity (string)\n\nDetermines the level of detail about provisioned throughput consumption that is returned in the response:\n\nINDEXES - The response includes the aggregate ConsumedCapacity for the operation, together with ConsumedCapacity for each table and secondary index that was accessed. Note that some operations, such as GetItem and BatchGetItem , do not access any indexes at all. In these cases, specifying INDEXES will only return ConsumedCapacity information for table(s).\n\nTOTAL - The response includes only the aggregate ConsumedCapacity for the operation.\n\nNONE - No ConsumedCapacity details are included in the response.\n\nPossible values:\n\nINDEXES\n\nTOTAL\n\nNONE\n\n--return-item-collection-metrics (string)\n\nDetermines whether item collection metrics are returned. If set to SIZE , the response includes statistics about item collections, if any, that were modified during the operation are returned in the response. If set to NONE (the default), no statistics are returned.\n\nPossible values:\n\nSIZE\n\nNONE\n\n--update-expression (string)\n\nAn expression that defines one or more attributes to be updated, the action to be performed on them, and new values for them.\n\nThe following action values are available for UpdateExpression .\n\nSET - Adds one or more attributes and values to an item. If any of these attributes already exist, they are replaced by the new values. You can also use SET to add or subtract from an attribute that is of type Number. For example: SET myNum = myNum + :val SET supports the following functions:\n\nif_not_exists (path, operand) - if the item does not contain an attribute at the specified path, then if_not_exists evaluates to operand; otherwise, it evaluates to path. You can use this function to avoid overwriting an attribute that may already be present in the item.\n\nlist_append (operand, operand) - evaluates to a list with a new element added to it. You can append the new element to the start or the end of the list by reversing the order of the operands.\n\nThese function names are case-sensitive.\n\nREMOVE - Removes one or more attributes from an item.\n\nADD - Adds the specified value to the item, if the attribute does not already exist. If the attribute does exist, then the behavior of ADD depends on the data type of the attribute:\n\nIf the existing attribute is a number, and if Value is also a number, then Value is mathematically added to the existing attribute. If Value is a negative number, then it is subtracted from the existing attribute.\n\nNote\n\nIf you use ADD to increment or decrement a number value for an item that doesn’t exist before the update, DynamoDB uses 0 as the initial value. Similarly, if you use ADD for an existing item to increment or decrement an attribute value that doesn’t exist before the update, DynamoDB uses 0 as the initial value. For example, suppose that the item you want to update doesn’t have an attribute named itemcount , but you decide to ADD the number 3 to this attribute anyway. DynamoDB will create the itemcount attribute, set its initial value to 0 , and finally add 3 to it. The result will be a new itemcount attribute in the item, with a value of 3 .\n\nIf the existing data type is a set and if Value is also a set, then Value is added to the existing set. For example, if the attribute value is the set [1,2] , and the ADD action specified [3] , then the final attribute value is [1,2,3] . An error occurs if an ADD action is specified for a set attribute and the attribute type specified does not match the existing set type. Both sets must have the same primitive data type. For example, if the existing data type is a set of strings, the Value must also be a set of strings.\n\nWarning\n\nThe ADD action only supports Number and set data types. In addition, ADD can only be used on top-level attributes, not nested attributes.\n\nDELETE - Deletes an element from a set. If a set of values is specified, then those values are subtracted from the old set. For example, if the attribute value was the set [a,b,c] and the DELETE action specifies [a,c] , then the final attribute value is [b] . Specifying an empty set is an error.\n\nWarning\n\nThe DELETE action only supports set data types. In addition, DELETE can only be used on top-level attributes, not nested attributes.\n\nYou can have many actions in a single expression, such as the following: SET a=:value1, b=:value2 DELETE :value3, :value4, :value5\n\nFor more information on update expressions, see Modifying Items and Attributes in the Amazon DynamoDB Developer Guide .\n\n--condition-expression (string)\n\nA condition that must be satisfied in order for a conditional update to succeed.\n\nAn expression can contain any of the following:\n\nFunctions: attribute_exists | attribute_not_exists | attribute_type | contains | begins_with | size These function names are case-sensitive.\n\nComparison operators: = | <> | < | > | <= | >= | BETWEEN | IN\n\nLogical operators: AND | OR | NOT\n\nFor more information about condition expressions, see Specifying Conditions in the Amazon DynamoDB Developer Guide .\n\n--expression-attribute-names (map)\n\nOne or more substitution tokens for attribute names in an expression. The following are some use cases for using ExpressionAttributeNames :\n\nTo access an attribute whose name conflicts with a DynamoDB reserved word.\n\nTo create a placeholder for repeating occurrences of an attribute name in an expression.\n\nTo prevent special characters in an attribute name from being misinterpreted in an expression.\n\nUse the # character in an expression to dereference an attribute name. For example, consider the following attribute name:\n\nPercentile\n\nThe name of this attribute conflicts with a reserved word, so it cannot be used directly in an expression. (For the complete list of reserved words, see Reserved Words in the Amazon DynamoDB Developer Guide .) To work around this, you could specify the following for ExpressionAttributeNames :\n\n{\"#P\":\"Percentile\"}\n\nYou could then use this substitution in an expression, as in this example:\n\n#P = :val\n\nNote\n\nTokens that begin with the : character are expression attribute values , which are placeholders for the actual value at runtime.\n\nFor more information about expression attribute names, see Specifying Item Attributes in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--expression-attribute-values (map)\n\nOne or more values that can be substituted in an expression.\n\nUse the : (colon) character in an expression to dereference an attribute value. For example, suppose that you wanted to check whether the value of the ProductStatus attribute was one of the following:\n\nAvailable | Backordered | Discontinued\n\nYou would first need to specify ExpressionAttributeValues as follows:\n\n{ \":avail\":{\"S\":\"Available\"}, \":back\":{\"S\":\"Backordered\"}, \":disc\":{\"S\":\"Discontinued\"} }\n\nYou could then use these values in an expression, such as this:\n\nProductStatus IN (:avail, :back, :disc)\n\nFor more information on expression attribute values, see Condition Expressions in the Amazon DynamoDB Developer Guide .\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nJSON Syntax:\n\n{\"string\": {\n      \"S\": \"string\",\n      \"N\": \"string\",\n      \"B\": blob,\n      \"SS\": [\"string\", ...],\n      \"NS\": [\"string\", ...],\n      \"BS\": [blob, ...],\n      \"M\": {\"string\": {\n            \"S\": \"string\",\n            \"N\": \"string\",\n            \"B\": blob,\n            \"SS\": [\"string\", ...],\n            \"NS\": [\"string\", ...],\n            \"BS\": [blob, ...],\n            \"M\": {\"string\": { ... recursive ... }\n              ...},\n            \"L\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"NULL\": true|false,\n            \"BOOL\": true|false\n          }\n        ...},\n      \"L\": [\n        {\n          \"S\": \"string\",\n          \"N\": \"string\",\n          \"B\": blob,\n          \"SS\": [\"string\", ...],\n          \"NS\": [\"string\", ...],\n          \"BS\": [blob, ...],\n          \"M\": {\"string\": { ... recursive ... }\n            ...},\n          \"L\": [\n            { ... recursive ... }\n            ...\n          ],\n          \"NULL\": true|false,\n          \"BOOL\": true|false\n        }\n        ...\n      ],\n      \"NULL\": true|false,\n      \"BOOL\": true|false\n    }\n  ...}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nAttributes -> (map)\n\nA map of attribute values as they appear before or after the UpdateItem operation, as determined by the ReturnValues parameter.\n\nThe Attributes map is only present if ReturnValues was specified as something other than NONE in the request. Each element represents one attribute.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nConsumedCapacity -> (structure)\n\nThe capacity units consumed by the UpdateItem operation. The data returned includes the total provisioned throughput consumed, along with statistics for the table and any indexes involved in the operation. ConsumedCapacity is only returned if the ReturnConsumedCapacity parameter was specified. For more information, see Provisioned Throughput in the Amazon DynamoDB Developer Guide .\n\nTableName -> (string)\n\nThe name of the table that was affected by the operation.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed by the operation.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed by the operation.\n\nTable -> (structure)\n\nThe amount of throughput consumed on the table affected by the operation.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nLocalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each local index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nGlobalSecondaryIndexes -> (map)\n\nThe amount of throughput consumed on each global index affected by the operation.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the amount of provisioned throughput capacity consumed on a table or an index.\n\nReadCapacityUnits -> (double)\n\nThe total number of read capacity units consumed on a table or an index.\n\nWriteCapacityUnits -> (double)\n\nThe total number of write capacity units consumed on a table or an index.\n\nCapacityUnits -> (double)\n\nThe total number of capacity units consumed on a table or an index.\n\nItemCollectionMetrics -> (structure)\n\nInformation about item collections, if any, that were affected by the UpdateItem operation. ItemCollectionMetrics is only returned if the ReturnItemCollectionMetrics parameter was specified. If the table does not have any local secondary indexes, this information is not returned in the response.\n\nEach ItemCollectionMetrics element consists of:\n\nItemCollectionKey - The partition key value of the item collection. This is the same as the partition key value of the item itself.\n\nSizeEstimateRangeGB - An estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit. The estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\n\nItemCollectionKey -> (map)\n\nThe partition key value of the item collection. This value is the same as the partition key value of the item.\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\nvalue -> (structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n(structure)\n\nRepresents the data for an attribute.\n\nEach attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.\n\nFor more information, see Data Types in the Amazon DynamoDB Developer Guide .\n\nS -> (string)\n\nAn attribute of type String. For example:\n\n\"S\": \"Hello\"\n\nN -> (string)\n\nAn attribute of type Number. For example:\n\n\"N\": \"123.45\"\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\nB -> (blob)\n\nAn attribute of type Binary. For example:\n\n\"B\": \"dGhpcyB0ZXh0IGlzIGJhc2U2NC1lbmNvZGVk\"\n\nSS -> (list)\n\nAn attribute of type String Set. For example:\n\n\"SS\": [\"Giraffe\", \"Hippo\" ,\"Zebra\"]\n\n(string)\n\nNS -> (list)\n\nAn attribute of type Number Set. For example:\n\n\"NS\": [\"42.2\", \"-19\", \"7.5\", \"3.14\"]\n\nNumbers are sent across the network to DynamoDB as strings, to maximize compatibility across languages and libraries. However, DynamoDB treats them as number type attributes for mathematical operations.\n\n(string)\n\nBS -> (list)\n\nAn attribute of type Binary Set. For example:\n\n\"BS\": [\"U3Vubnk=\", \"UmFpbnk=\", \"U25vd3k=\"]\n\n(blob)\n\nM -> (map)\n\nAn attribute of type Map. For example:\n\n\"M\": {\"Name\": {\"S\": \"Joe\"}, \"Age\": {\"N\": \"35\"}}\n\nkey -> (string)\n\n( … recursive … )\n\nL -> (list)\n\nAn attribute of type List. For example:\n\n\"L\": [ {\"S\": \"Cookies\"} , {\"S\": \"Coffee\"}, {\"N\", \"3.14159\"}]\n\n( … recursive … )\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nNULL -> (boolean)\n\nAn attribute of type Null. For example:\n\n\"NULL\": true\n\nBOOL -> (boolean)\n\nAn attribute of type Boolean. For example:\n\n\"BOOL\": true\n\nSizeEstimateRangeGB -> (list)\n\nAn estimate of item collection size, in gigabytes. This value is a two-element array containing a lower bound and an upper bound for the estimate. The estimate includes the size of all the items in the table, plus the size of all attributes projected into all of the local secondary indexes on that table. Use this estimate to measure whether a local secondary index is approaching its size limit.\n\nThe estimate is subject to change over time; therefore, do not rely on the precision or accuracy of the estimate.\n\n(double)",
      "command_examples": "Examples\n\nExample 1: To update an item in a table\n\nThe following update-item example updates an item in the MusicCollection table. It adds a new attribute (Year) and modifies the AlbumTitle attribute. All of the attributes in the item, as they appear after the update, are returned in the response.\n\naws dynamodb update-item \\\n    --table-name MusicCollection \\\n    --key file://key.json \\\n    --update-expression \"SET #Y = :y, #AT = :t\" \\\n    --expression-attribute-names file://expression-attribute-names.json \\\n    --expression-attribute-values file://expression-attribute-values.json  \\\n    --return-values ALL_NEW \\\n    --return-consumed-capacity TOTAL \\\n    --return-item-collection-metrics SIZE\n\n\nContents of key.json:\n\n{\n    \"Artist\": {\"S\": \"Acme Band\"},\n    \"SongTitle\": {\"S\": \"Happy Day\"}\n}\n\n\nContents of expression-attribute-names.json:\n\n{\n    \"#Y\":\"Year\", \"#AT\":\"AlbumTitle\"\n}\n\n\nContents of expression-attribute-values.json:\n\n{\n    \":y\":{\"N\": \"2015\"},\n    \":t\":{\"S\": \"Louder Than Ever\"}\n}\n\n\nOutput:\n\n{\n    \"Attributes\": {\n        \"AlbumTitle\": {\n            \"S\": \"Louder Than Ever\"\n        },\n        \"Awards\": {\n            \"N\": \"10\"\n        },\n        \"Artist\": {\n            \"S\": \"Acme Band\"\n        },\n        \"Year\": {\n            \"N\": \"2015\"\n        },\n        \"SongTitle\": {\n            \"S\": \"Happy Day\"\n        }\n    },\n    \"ConsumedCapacity\": {\n        \"TableName\": \"MusicCollection\",\n        \"CapacityUnits\": 3.0\n    },\n    \"ItemCollectionMetrics\": {\n        \"ItemCollectionKey\": {\n            \"Artist\": {\n                \"S\": \"Acme Band\"\n            }\n        },\n        \"SizeEstimateRangeGB\": [\n            0.0,\n            1.0\n        ]\n    }\n}\n\n\nFor more information, see Writing an Item in the Amazon DynamoDB Developer Guide.\n\nExample 2: To update an item conditionally\n\nThe following example updates an item in the MusicCollection table, but only if the existing item does not already have a Year attribute.\n\naws dynamodb update-item \\\n    --table-name MusicCollection \\\n    --key file://key.json \\\n    --update-expression \"SET #Y = :y, #AT = :t\" \\\n    --expression-attribute-names file://expression-attribute-names.json \\\n    --expression-attribute-values file://expression-attribute-values.json  \\\n    --condition-expression \"attribute_not_exists(#Y)\"\n\n\nContents of key.json:\n\n{\n    \"Artist\": {\"S\": \"Acme Band\"},\n    \"SongTitle\": {\"S\": \"Happy Day\"}\n}\n\n\nContents of expression-attribute-names.json:\n\n{\n    \"#Y\":\"Year\",\n    \"#AT\":\"AlbumTitle\"\n}\n\n\nContents of expression-attribute-values.json:\n\n{\n    \":y\":{\"N\": \"2015\"},\n    \":t\":{\"S\": \"Louder Than Ever\"}\n}\n\n\nIf the item already has a Year attribute, DynamoDB returns the following output.\n\nAn error occurred (ConditionalCheckFailedException) when calling the UpdateItem operation: The conditional request failed\n\n\nFor more information, see Writing an Item in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "update-table",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/update-table.html",
      "command_description": "Description\n\nModifies the provisioned throughput settings, global secondary indexes, or DynamoDB Streams settings for a given table.\n\nYou can only perform one of the following operations at once:\n\nModify the provisioned throughput settings of the table.\n\nEnable or disable DynamoDB Streams on the table.\n\nRemove a global secondary index from the table.\n\nCreate a new global secondary index on the table. After the index begins backfilling, you can use UpdateTable to perform other operations.\n\nUpdateTable is an asynchronous operation; while it is executing, the table status changes from ACTIVE to UPDATING . While it is UPDATING , you cannot issue another UpdateTable request. When the table returns to the ACTIVE state, the UpdateTable operation is complete.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-table\n[--attribute-definitions <value>]\n--table-name <value>\n[--billing-mode <value>]\n[--provisioned-throughput <value>]\n[--global-secondary-index-updates <value>]\n[--stream-specification <value>]\n[--sse-specification <value>]\n[--replica-updates <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--attribute-definitions <value>]",
        "--table-name <value>",
        "[--billing-mode <value>]",
        "[--provisioned-throughput <value>]",
        "[--global-secondary-index-updates <value>]",
        "[--stream-specification <value>]",
        "[--sse-specification <value>]",
        "[--replica-updates <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--attribute-definitions (list)\n\nAn array of attributes that describe the key schema for the table and indexes. If you are adding a new global secondary index to the table, AttributeDefinitions must include the key element(s) of the new index.\n\n(structure)\n\nRepresents an attribute for describing the key schema for the table and indexes.\n\nAttributeName -> (string)\n\nA name for the attribute.\n\nAttributeType -> (string)\n\nThe data type for the attribute, where:\n\nS - the attribute is of type String\n\nN - the attribute is of type Number\n\nB - the attribute is of type Binary\n\nShorthand Syntax:\n\nAttributeName=string,AttributeType=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"AttributeName\": \"string\",\n    \"AttributeType\": \"S\"|\"N\"|\"B\"\n  }\n  ...\n]\n\n\n--table-name (string)\n\nThe name of the table to be updated.\n\n--billing-mode (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. When switching from pay-per-request to provisioned capacity, initial provisioned capacity values must be set. The initial provisioned capacity values are estimated based on the consumed read and write capacity of your table and global secondary indexes over the past 30 minutes.\n\nPROVISIONED - We recommend using PROVISIONED for predictable workloads. PROVISIONED sets the billing mode to Provisioned Mode .\n\nPAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable workloads. PAY_PER_REQUEST sets the billing mode to On-Demand Mode .\n\nPossible values:\n\nPROVISIONED\n\nPAY_PER_REQUEST\n\n--provisioned-throughput (structure)\n\nThe new provisioned throughput settings for the specified table or index.\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nShorthand Syntax:\n\nReadCapacityUnits=long,WriteCapacityUnits=long\n\n\nJSON Syntax:\n\n{\n  \"ReadCapacityUnits\": long,\n  \"WriteCapacityUnits\": long\n}\n\n\n--global-secondary-index-updates (list)\n\nAn array of one or more global secondary indexes for the table. For each index in the array, you can request one action:\n\nCreate - add a new global secondary index to the table.\n\nUpdate - modify the provisioned throughput settings of an existing global secondary index.\n\nDelete - remove a global secondary index from the table.\n\nYou can create or delete only one global secondary index per UpdateTable operation.\n\nFor more information, see Managing Global Secondary Indexes in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents one of the following:\n\nA new global secondary index to be added to an existing table.\n\nNew provisioned throughput parameters for an existing global secondary index.\n\nAn existing global secondary index to be removed from an existing table.\n\nUpdate -> (structure)\n\nThe name of an existing global secondary index, along with new provisioned throughput settings to be applied to that index.\n\nIndexName -> (string)\n\nThe name of the global secondary index to be updated.\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nCreate -> (structure)\n\nThe parameters required for creating a global secondary index on an existing table:\n\nIndexName\n\nKeySchema\n\nAttributeDefinitions\n\nProjection\n\nProvisionedThroughput\n\nIndexName -> (string)\n\nThe name of the global secondary index to be created.\n\nKeySchema -> (list)\n\nThe key schema for the global secondary index.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException . For more information, see Specifying Read and Write Requirements in the Amazon DynamoDB Developer Guide .\n\nIf read/write capacity mode is PAY_PER_REQUEST the value is set to 0.\n\nDelete -> (structure)\n\nThe name of an existing global secondary index to be removed.\n\nIndexName -> (string)\n\nThe name of the global secondary index to be deleted.\n\nJSON Syntax:\n\n[\n  {\n    \"Update\": {\n      \"IndexName\": \"string\",\n      \"ProvisionedThroughput\": {\n        \"ReadCapacityUnits\": long,\n        \"WriteCapacityUnits\": long\n      }\n    },\n    \"Create\": {\n      \"IndexName\": \"string\",\n      \"KeySchema\": [\n        {\n          \"AttributeName\": \"string\",\n          \"KeyType\": \"HASH\"|\"RANGE\"\n        }\n        ...\n      ],\n      \"Projection\": {\n        \"ProjectionType\": \"ALL\"|\"KEYS_ONLY\"|\"INCLUDE\",\n        \"NonKeyAttributes\": [\"string\", ...]\n      },\n      \"ProvisionedThroughput\": {\n        \"ReadCapacityUnits\": long,\n        \"WriteCapacityUnits\": long\n      }\n    },\n    \"Delete\": {\n      \"IndexName\": \"string\"\n    }\n  }\n  ...\n]\n\n\n--stream-specification (structure)\n\nRepresents the DynamoDB Streams configuration for the table.\n\nNote\n\nYou receive a ResourceInUseException if you try to enable a stream on a table that already has a stream, or if you try to disable a stream on a table that doesn’t have a stream.\n\nStreamEnabled -> (boolean)\n\nIndicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.\n\nStreamViewType -> (string)\n\nWhen an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nShorthand Syntax:\n\nStreamEnabled=boolean,StreamViewType=string\n\n\nJSON Syntax:\n\n{\n  \"StreamEnabled\": true|false,\n  \"StreamViewType\": \"NEW_IMAGE\"|\"OLD_IMAGE\"|\"NEW_AND_OLD_IMAGES\"|\"KEYS_ONLY\"\n}\n\n\n--sse-specification (structure)\n\nThe new server-side encryption settings for the specified table.\n\nEnabled -> (boolean)\n\nIndicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK. If enabled (true), server-side encryption type is set to KMS and an AWS managed CMK is used (AWS KMS charges apply). If disabled (false) or not specified, server-side encryption is set to AWS owned CMK.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB customer master key alias/aws/dynamodb.\n\nShorthand Syntax:\n\nEnabled=boolean,SSEType=string,KMSMasterKeyId=string\n\n\nJSON Syntax:\n\n{\n  \"Enabled\": true|false,\n  \"SSEType\": \"AES256\"|\"KMS\",\n  \"KMSMasterKeyId\": \"string\"\n}\n\n\n--replica-updates (list)\n\nA list of replica update actions (create, delete, or update) for the table.\n\nNote\n\nThis property only applies to Version 2019.11.21 of global tables.\n\n(structure)\n\nRepresents one of the following:\n\nA new replica to be added to an existing regional table or global table. This request invokes the CreateTableReplica action in the destination Region.\n\nNew parameters for an existing replica. This request invokes the UpdateTable action in the destination Region.\n\nAn existing replica to be deleted. The request invokes the DeleteTableReplica action in the destination Region, deleting the replica and all if its items in the destination Region.\n\nCreate -> (structure)\n\nThe parameters required for creating a replica for the table.\n\nRegionName -> (string)\n\nThe Region where the new replica will be created.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) that should be used for AWS KMS encryption in the new replica. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS master key alias/aws/dynamodb.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not specified, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica table GSI-specific provisioned throughput. If not specified, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nUpdate -> (structure)\n\nThe parameters required for updating a replica for the table.\n\nRegionName -> (string)\n\nThe Region where the replica exists.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) of the replica that should be used for AWS KMS encryption. To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. Note that you should only provide this parameter if the key is different from the default DynamoDB KMS master key alias/aws/dynamodb.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not specified, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica table GSI-specific provisioned throughput. If not specified, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nDelete -> (structure)\n\nThe parameters required for deleting a replica for the table.\n\nRegionName -> (string)\n\nThe Region where the replica exists.\n\nJSON Syntax:\n\n[\n  {\n    \"Create\": {\n      \"RegionName\": \"string\",\n      \"KMSMasterKeyId\": \"string\",\n      \"ProvisionedThroughputOverride\": {\n        \"ReadCapacityUnits\": long\n      },\n      \"GlobalSecondaryIndexes\": [\n        {\n          \"IndexName\": \"string\",\n          \"ProvisionedThroughputOverride\": {\n            \"ReadCapacityUnits\": long\n          }\n        }\n        ...\n      ]\n    },\n    \"Update\": {\n      \"RegionName\": \"string\",\n      \"KMSMasterKeyId\": \"string\",\n      \"ProvisionedThroughputOverride\": {\n        \"ReadCapacityUnits\": long\n      },\n      \"GlobalSecondaryIndexes\": [\n        {\n          \"IndexName\": \"string\",\n          \"ProvisionedThroughputOverride\": {\n            \"ReadCapacityUnits\": long\n          }\n        }\n        ...\n      ]\n    },\n    \"Delete\": {\n      \"RegionName\": \"string\"\n    }\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableDescription -> (structure)\n\nRepresents the properties of the table.\n\nAttributeDefinitions -> (list)\n\nAn array of AttributeDefinition objects. Each of these objects describes one attribute in the table and index key schema.\n\nEach AttributeDefinition object in this array is composed of:\n\nAttributeName - The name of the attribute.\n\nAttributeType - The data type for the attribute.\n\n(structure)\n\nRepresents an attribute for describing the key schema for the table and indexes.\n\nAttributeName -> (string)\n\nA name for the attribute.\n\nAttributeType -> (string)\n\nThe data type for the attribute, where:\n\nS - the attribute is of type String\n\nN - the attribute is of type Number\n\nB - the attribute is of type Binary\n\nTableName -> (string)\n\nThe name of the table.\n\nKeySchema -> (list)\n\nThe primary key structure for the table. Each KeySchemaElement consists of:\n\nAttributeName - The name of the attribute.\n\nKeyType - The role of the attribute:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nFor more information about primary keys, see Primary Key in the Amazon DynamoDB Developer Guide .\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nTableStatus -> (string)\n\nThe current state of the table:\n\nCREATING - The table is being created.\n\nUPDATING - The table is being updated.\n\nDELETING - The table is being deleted.\n\nACTIVE - The table is ready for use.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table in inaccessible. Table operations may fail due to failure to use the AWS KMS key. DynamoDB will initiate the table archival process when a table’s AWS KMS key remains inaccessible for more than seven days.\n\nARCHIVING - The table is being archived. Operations are not allowed until archival is complete.\n\nARCHIVED - The table has been archived. See the ArchivalReason for more information.\n\nCreationDateTime -> (timestamp)\n\nThe date and time when the table was created, in UNIX epoch time format.\n\nProvisionedThroughput -> (structure)\n\nThe provisioned throughput settings for the table, consisting of read and write capacity units, along with data about increases and decreases.\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nTableSizeBytes -> (long)\n\nThe total size of the specified table, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified table. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nTableArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the table.\n\nTableId -> (string)\n\nUnique identifier for the table for which the backup was created.\n\nBillingModeSummary -> (structure)\n\nContains the details for the read/write capacity mode.\n\nBillingMode -> (string)\n\nControls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later.\n\nPROVISIONED - Sets the read/write capacity mode to PROVISIONED . We recommend using PROVISIONED for predictable workloads.\n\nPAY_PER_REQUEST - Sets the read/write capacity mode to PAY_PER_REQUEST . We recommend using PAY_PER_REQUEST for unpredictable workloads.\n\nLastUpdateToPayPerRequestDateTime -> (timestamp)\n\nRepresents the time when PAY_PER_REQUEST was last set as the read/write capacity mode.\n\nLocalSecondaryIndexes -> (list)\n\nRepresents one or more local secondary indexes on the table. Each index is scoped to a given partition key value. Tables with one or more local secondary indexes are subject to an item collection size limit, where the amount of data within a given item collection cannot exceed 10 GB. Each element is composed of:\n\nIndexName - The name of the local secondary index.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - Only the specified table attributes are projected into the index. The list of projected attributes is in NonKeyAttributes .\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nIndexSizeBytes - Represents the total size of the index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount - Represents the number of items in the index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a local secondary index.\n\nIndexName -> (string)\n\nRepresents the name of the local secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for the local secondary index, consisting of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nGlobalSecondaryIndexes -> (list)\n\nThe global secondary indexes, if any, on the table. Each index is scoped to a given partition key value. Each element is composed of:\n\nBackfilling - If true, then the index is currently in the backfilling phase. Backfilling occurs only when a new global secondary index is added to the table. It is the process by which DynamoDB populates the new index with data from the table. (This attribute does not appear for indexes that were created during a CreateTable operation.) You can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false. (This attribute does not appear for indexes that were created during a CreateTable operation.)\n\nIndexName - The name of the global secondary index.\n\nIndexSizeBytes - The total size of the global secondary index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexStatus - The current status of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nItemCount - The number of items in the global secondary index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nKeySchema - Specifies the complete index key schema. The attribute names in the key schema must be between 1 and 255 characters (inclusive). The key schema must begin with the same partition key as the table.\n\nProjection - Specifies attributes that are copied (projected) from the table into the index. These are in addition to the primary key attributes and index key attributes, which are automatically projected. Each attribute specification is composed of:\n\nProjectionType - One of the following:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes - A list of one or more non-key attribute names that are projected into the secondary index. The total count of attributes provided in NonKeyAttributes , summed across all of the secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\nProvisionedThroughput - The provisioned throughput settings for the global secondary index, consisting of read and write capacity units, along with data about increases and decreases.\n\nIf the table is in the DELETING state, no information about indexes will be returned.\n\n(structure)\n\nRepresents the properties of a global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nKeySchema -> (list)\n\nThe complete key schema for a global secondary index, which consists of one or more pairs of attribute names and key types:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\n(structure)\n\nRepresents a single element of a key schema. A key schema specifies the attributes that make up the primary key of a table, or the key attributes of an index.\n\nA KeySchemaElement represents exactly one attribute of the primary key. For example, a simple primary key would be represented by one KeySchemaElement (for the partition key). A composite primary key would require one KeySchemaElement for the partition key, and another KeySchemaElement for the sort key.\n\nA KeySchemaElement must be a scalar, top-level attribute (not a nested attribute). The data type must be one of String, Number, or Binary. The attribute cannot be nested within a List or a Map.\n\nAttributeName -> (string)\n\nThe name of a key attribute.\n\nKeyType -> (string)\n\nThe role that this key attribute will assume:\n\nHASH - partition key\n\nRANGE - sort key\n\nNote\n\nThe partition key of an item is also known as its hash attribute . The term “hash attribute” derives from DynamoDB’s usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values.\n\nThe sort key of an item is also known as its range attribute . The term “range attribute” derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value.\n\nProjection -> (structure)\n\nRepresents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.\n\nProjectionType -> (string)\n\nThe set of attributes that are projected into the index:\n\nKEYS_ONLY - Only the index and primary keys are projected into the index.\n\nINCLUDE - In addition to the attributes described in KEYS_ONLY , the secondary index will include other non-key attributes that you specify.\n\nALL - All of the table attributes are projected into the index.\n\nNonKeyAttributes -> (list)\n\nRepresents the non-key attribute names which will be projected into the index.\n\nFor local secondary indexes, the total count of NonKeyAttributes summed across all of the local secondary indexes, must not exceed 20. If you project the same attribute into two different indexes, this counts as two distinct attributes when determining the total.\n\n(string)\n\nIndexStatus -> (string)\n\nThe current state of the global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nBackfilling -> (boolean)\n\nIndicates whether the index is currently backfilling. Backfilling is the process of reading items from the table and determining whether they can be added to the index. (Not all items will qualify: For example, a partition key cannot have any duplicate values.) If an item can be added to the index, DynamoDB will do so. After all items have been processed, the backfilling operation is complete and Backfilling is false.\n\nYou can delete an index that is being created during the Backfilling phase when IndexStatus is set to CREATING and Backfilling is true. You can’t delete the index that is being created when IndexStatus is set to CREATING and Backfilling is false.\n\nNote\n\nFor indexes that were created during a CreateTable operation, the Backfilling attribute does not appear in the DescribeTable output.\n\nProvisionedThroughput -> (structure)\n\nRepresents the provisioned throughput settings for the specified global secondary index.\n\nFor current minimum and maximum provisioned throughput values, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nLastIncreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput increase for this table.\n\nLastDecreaseDateTime -> (timestamp)\n\nThe date and time of the last provisioned throughput decrease for this table.\n\nNumberOfDecreasesToday -> (long)\n\nThe number of provisioned throughput decreases for this table during this UTC calendar day. For current maximums on provisioned throughput decreases, see Service, Account, and Table Quotas in the Amazon DynamoDB Developer Guide .\n\nReadCapacityUnits -> (long)\n\nThe maximum number of strongly consistent reads consumed per second before DynamoDB returns a ThrottlingException . Eventually consistent reads require less effort than strongly consistent reads, so a setting of 50 ReadCapacityUnits per second provides 100 eventually consistent ReadCapacityUnits per second.\n\nWriteCapacityUnits -> (long)\n\nThe maximum number of writes consumed per second before DynamoDB returns a ThrottlingException .\n\nIndexSizeBytes -> (long)\n\nThe total size of the specified index, in bytes. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nItemCount -> (long)\n\nThe number of items in the specified index. DynamoDB updates this value approximately every six hours. Recent changes might not be reflected in this value.\n\nIndexArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the index.\n\nStreamSpecification -> (structure)\n\nThe current DynamoDB Streams configuration for the table.\n\nStreamEnabled -> (boolean)\n\nIndicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.\n\nStreamViewType -> (string)\n\nWhen an item in the table is modified, StreamViewType determines what information is written to the stream for this table. Valid values for StreamViewType are:\n\nKEYS_ONLY - Only the key attributes of the modified item are written to the stream.\n\nNEW_IMAGE - The entire item, as it appears after it was modified, is written to the stream.\n\nOLD_IMAGE - The entire item, as it appeared before it was modified, is written to the stream.\n\nNEW_AND_OLD_IMAGES - Both the new and the old item images of the item are written to the stream.\n\nLatestStreamLabel -> (string)\n\nA timestamp, in ISO 8601 format, for this stream.\n\nNote that LatestStreamLabel is not a unique identifier for the stream, because it is possible that a stream from another table might have the same timestamp. However, the combination of the following three elements is guaranteed to be unique:\n\nAWS customer ID\n\nTable name\n\nStreamLabel\n\nLatestStreamArn -> (string)\n\nThe Amazon Resource Name (ARN) that uniquely identifies the latest stream for this table.\n\nGlobalTableVersion -> (string)\n\nRepresents the version of global tables in use, if the table is replicated across AWS Regions.\n\nReplicas -> (list)\n\nRepresents replicas of the table.\n\n(structure)\n\nContains the details of the replica.\n\nRegionName -> (string)\n\nThe name of the Region.\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.\n\nREGION_DISABLED - The replica is inaccessible because the AWS Region has been disabled.\n\nNote\n\nIf the AWS Region remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The AWS KMS key used to encrypt the table is inaccessible.\n\nNote\n\nIf the AWS KMS key remains inaccessible for more than 20 hours, DynamoDB will remove this replica from the replication group. The replica will not be deleted and replication will stop from and to this region.\n\nReplicaStatusDescription -> (string)\n\nDetailed information about the replica status.\n\nReplicaStatusPercentProgress -> (string)\n\nSpecifies the progress of a Create, Update, or Delete action on the replica as a percentage.\n\nKMSMasterKeyId -> (string)\n\nThe AWS KMS customer master key (CMK) of the replica that will be used for AWS KMS encryption.\n\nProvisionedThroughputOverride -> (structure)\n\nReplica-specific provisioned throughput. If not described, uses the source table’s provisioned throughput settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index settings.\n\n(structure)\n\nRepresents the properties of a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedThroughputOverride -> (structure)\n\nIf not described, uses the source table GSI’s read capacity settings.\n\nReadCapacityUnits -> (long)\n\nReplica-specific read capacity units. If not specified, uses the source table’s read capacity settings.\n\nReplicaInaccessibleDateTime -> (timestamp)\n\nThe time at which the replica was first detected as inaccessible. To determine cause of inaccessibility check the ReplicaStatus property.\n\nRestoreSummary -> (structure)\n\nContains details for the restore.\n\nSourceBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup from which the table was restored.\n\nSourceTableArn -> (string)\n\nThe ARN of the source table of the backup that is being restored.\n\nRestoreDateTime -> (timestamp)\n\nPoint in time or source backup time.\n\nRestoreInProgress -> (boolean)\n\nIndicates if a restore is in progress or not.\n\nSSEDescription -> (structure)\n\nThe description of the server-side encryption status on the specified table.\n\nStatus -> (string)\n\nRepresents the current state of server-side encryption. The only supported values are:\n\nENABLED - Server-side encryption is enabled.\n\nUPDATING - Server-side encryption is being updated.\n\nSSEType -> (string)\n\nServer-side encryption type. The only supported value is:\n\nKMS - Server-side encryption that uses AWS Key Management Service. The key is stored in your account and is managed by AWS KMS (AWS KMS charges apply).\n\nKMSMasterKeyArn -> (string)\n\nThe AWS KMS customer master key (CMK) ARN used for the AWS KMS encryption.\n\nInaccessibleEncryptionDateTime -> (timestamp)\n\nIndicates the time, in UNIX epoch date format, when DynamoDB detected that the table’s AWS KMS key was inaccessible. This attribute will automatically be cleared when DynamoDB detects that the table’s AWS KMS key is accessible again. DynamoDB will initiate the table archival process when table’s AWS KMS key remains inaccessible for more than seven days from this date.\n\nArchivalSummary -> (structure)\n\nContains information about the table archive.\n\nArchivalDateTime -> (timestamp)\n\nThe date and time when table archival was initiated by DynamoDB, in UNIX epoch time format.\n\nArchivalReason -> (string)\n\nThe reason DynamoDB archived the table. Currently, the only possible value is:\n\nINACCESSIBLE_ENCRYPTION_CREDENTIALS - The table was archived due to the table’s AWS KMS key being inaccessible for more than seven days. An On-Demand backup was created at the archival time.\n\nArchivalBackupArn -> (string)\n\nThe Amazon Resource Name (ARN) of the backup the table was archived to, when applicable in the archival reason. If you wish to restore this backup to the same table name, you will need to delete the original table.",
      "command_examples": "Examples\n\nExample 1: To modify a table’s billing mode\n\nThe following update-table example increases the provisioned read and write capacity on the MusicCollection table.\n\naws dynamodb update-table \\\n    --table-name MusicCollection \\\n    --billing-mode PROVISIONED \\\n    --provisioned-throughput ReadCapacityUnits=15,WriteCapacityUnits=10\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"AlbumTitle\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"MusicCollection\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"UPDATING\",\n        \"CreationDateTime\": \"2020-05-26T15:59:49.473000-07:00\",\n        \"ProvisionedThroughput\": {\n            \"LastIncreaseDateTime\": \"2020-07-28T13:18:18.921000-07:00\",\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 15,\n            \"WriteCapacityUnits\": 10\n        },\n        \"TableSizeBytes\": 182,\n        \"ItemCount\": 2,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n        \"TableId\": \"abcd0123-01ab-23cd-0123-abcdef123456\",\n        \"BillingModeSummary\": {\n            \"BillingMode\": \"PROVISIONED\",\n            \"LastUpdateToPayPerRequestDateTime\": \"2020-07-28T13:14:48.366000-07:00\"\n        }\n    }\n}\n\n\nFor more information, see Updating a Table in the Amazon DynamoDB Developer Guide.\n\nExample 2: To create a global secondary index\n\nThe following example adds a global secondary index to the MusicCollection table.\n\naws dynamodb update-table \\\n    --table-name MusicCollection \\\n    --attribute-definitions AttributeName=AlbumTitle,AttributeType=S \\\n    --global-secondary-index-updates file://gsi-updates.json\n\n\nContents of gsi-updates.json:\n\n[\n    {\n        \"Create\": {\n            \"IndexName\": \"AlbumTitle-index\",\n            \"KeySchema\": [\n                {\n                    \"AttributeName\": \"AlbumTitle\",\n                    \"KeyType\": \"HASH\"\n                }\n            ],\n            \"ProvisionedThroughput\": {\n                \"ReadCapacityUnits\": 10,\n                \"WriteCapacityUnits\": 10\n            },\n            \"Projection\": {\n                \"ProjectionType\": \"ALL\"\n            }\n        }\n    }\n]\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"AlbumTitle\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"MusicCollection\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"UPDATING\",\n        \"CreationDateTime\": \"2020-05-26T15:59:49.473000-07:00\",\n        \"ProvisionedThroughput\": {\n            \"LastIncreaseDateTime\": \"2020-07-28T12:59:17.537000-07:00\",\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 15,\n            \"WriteCapacityUnits\": 10\n        },\n        \"TableSizeBytes\": 182,\n        \"ItemCount\": 2,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n        \"TableId\": \"abcd0123-01ab-23cd-0123-abcdef123456\",\n        \"BillingModeSummary\": {\n            \"BillingMode\": \"PROVISIONED\",\n            \"LastUpdateToPayPerRequestDateTime\": \"2020-07-28T13:14:48.366000-07:00\"\n        },\n        \"GlobalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"AlbumTitle-index\",\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"AlbumTitle\",\n                        \"KeyType\": \"HASH\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"ALL\"\n                },\n                \"IndexStatus\": \"CREATING\",\n                \"Backfilling\": false,\n                \"ProvisionedThroughput\": {\n                    \"NumberOfDecreasesToday\": 0,\n                    \"ReadCapacityUnits\": 10,\n                    \"WriteCapacityUnits\": 10\n                },\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"IndexArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/index/AlbumTitle-index\"\n            }\n        ]\n    }\n}\n\n\nFor more information, see Updating a Table in the Amazon DynamoDB Developer Guide.\n\nExample 3: To enable DynamoDB Streams on a table\n\nThe following command enables DynamoDB Streams on the MusicCollection table.\n\naws dynamodb update-table \\\n    --table-name MusicCollection \\\n    --stream-specification StreamEnabled=true,StreamViewType=NEW_IMAGE\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"AlbumTitle\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"MusicCollection\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"UPDATING\",\n        \"CreationDateTime\": \"2020-05-26T15:59:49.473000-07:00\",\n        \"ProvisionedThroughput\": {\n            \"LastIncreaseDateTime\": \"2020-07-28T12:59:17.537000-07:00\",\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 15,\n            \"WriteCapacityUnits\": 10\n        },\n        \"TableSizeBytes\": 182,\n        \"ItemCount\": 2,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n        \"TableId\": \"abcd0123-01ab-23cd-0123-abcdef123456\",\n        \"BillingModeSummary\": {\n            \"BillingMode\": \"PROVISIONED\",\n            \"LastUpdateToPayPerRequestDateTime\": \"2020-07-28T13:14:48.366000-07:00\"\n        },\n        \"LocalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"AlbumTitleIndex\",\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"Artist\",\n                        \"KeyType\": \"HASH\"\n                    },\n                    {\n                        \"AttributeName\": \"AlbumTitle\",\n                        \"KeyType\": \"RANGE\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"INCLUDE\",\n                    \"NonKeyAttributes\": [\n                        \"Year\",\n                        \"Genre\"\n                    ]\n                },\n                \"IndexSizeBytes\": 139,\n                \"ItemCount\": 2,\n                \"IndexArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/index/AlbumTitleIndex\"\n            }\n        ],\n        \"GlobalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"AlbumTitle-index\",\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"AlbumTitle\",\n                        \"KeyType\": \"HASH\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"ALL\"\n                },\n                \"IndexStatus\": \"ACTIVE\",\n                \"ProvisionedThroughput\": {\n                    \"NumberOfDecreasesToday\": 0,\n                    \"ReadCapacityUnits\": 10,\n                    \"WriteCapacityUnits\": 10\n                },\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"IndexArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/index/AlbumTitle-index\"\n            }\n        ],\n        \"StreamSpecification\": {\n            \"StreamEnabled\": true,\n            \"StreamViewType\": \"NEW_IMAGE\"\n        },\n        \"LatestStreamLabel\": \"2020-07-28T21:53:39.112\",\n        \"LatestStreamArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/stream/2020-07-28T21:53:39.112\"\n    }\n}\n\n\nFor more information, see Updating a Table in the Amazon DynamoDB Developer Guide.\n\nExample 4: To enable server-side encryption\n\nThe following example enables server-side encryption on the MusicCollection table.\n\naws dynamodb update-table \\\n    --table-name MusicCollection \\\n    --sse-specification Enabled=true,SSEType=KMS\n\n\nOutput:\n\n{\n    \"TableDescription\": {\n        \"AttributeDefinitions\": [\n            {\n                \"AttributeName\": \"AlbumTitle\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"Artist\",\n                \"AttributeType\": \"S\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"AttributeType\": \"S\"\n            }\n        ],\n        \"TableName\": \"MusicCollection\",\n        \"KeySchema\": [\n            {\n                \"AttributeName\": \"Artist\",\n                \"KeyType\": \"HASH\"\n            },\n            {\n                \"AttributeName\": \"SongTitle\",\n                \"KeyType\": \"RANGE\"\n            }\n        ],\n        \"TableStatus\": \"ACTIVE\",\n        \"CreationDateTime\": \"2020-05-26T15:59:49.473000-07:00\",\n        \"ProvisionedThroughput\": {\n            \"LastIncreaseDateTime\": \"2020-07-28T12:59:17.537000-07:00\",\n            \"NumberOfDecreasesToday\": 0,\n            \"ReadCapacityUnits\": 15,\n            \"WriteCapacityUnits\": 10\n        },\n        \"TableSizeBytes\": 182,\n        \"ItemCount\": 2,\n        \"TableArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection\",\n        \"TableId\": \"abcd0123-01ab-23cd-0123-abcdef123456\",\n        \"BillingModeSummary\": {\n            \"BillingMode\": \"PROVISIONED\",\n            \"LastUpdateToPayPerRequestDateTime\": \"2020-07-28T13:14:48.366000-07:00\"\n        },\n        \"LocalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"AlbumTitleIndex\",\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"Artist\",\n                        \"KeyType\": \"HASH\"\n                    },\n                    {\n                        \"AttributeName\": \"AlbumTitle\",\n                        \"KeyType\": \"RANGE\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"INCLUDE\",\n                    \"NonKeyAttributes\": [\n                        \"Year\",\n                        \"Genre\"\n                    ]\n                },\n                \"IndexSizeBytes\": 139,\n                \"ItemCount\": 2,\n                \"IndexArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/index/AlbumTitleIndex\"\n            }\n        ],\n        \"GlobalSecondaryIndexes\": [\n            {\n                \"IndexName\": \"AlbumTitle-index\",\n                \"KeySchema\": [\n                    {\n                        \"AttributeName\": \"AlbumTitle\",\n                        \"KeyType\": \"HASH\"\n                    }\n                ],\n                \"Projection\": {\n                    \"ProjectionType\": \"ALL\"\n                },\n                \"IndexStatus\": \"ACTIVE\",\n                \"ProvisionedThroughput\": {\n                    \"NumberOfDecreasesToday\": 0,\n                    \"ReadCapacityUnits\": 10,\n                    \"WriteCapacityUnits\": 10\n                },\n                \"IndexSizeBytes\": 0,\n                \"ItemCount\": 0,\n                \"IndexArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/index/AlbumTitle-index\"\n            }\n        ],\n        \"StreamSpecification\": {\n            \"StreamEnabled\": true,\n            \"StreamViewType\": \"NEW_IMAGE\"\n        },\n        \"LatestStreamLabel\": \"2020-07-28T21:53:39.112\",\n        \"LatestStreamArn\": \"arn:aws:dynamodb:us-west-2:123456789012:table/MusicCollection/stream/2020-07-28T21:53:39.112\",\n        \"SSEDescription\": {\n            \"Status\": \"UPDATING\"\n        }\n    }\n}\n\n\nFor more information, see Updating a Table in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "update-table-replica-auto-scaling",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/update-table-replica-auto-scaling.html",
      "command_description": "Description\n\nUpdates auto scaling settings on your global tables at once.\n\nNote\n\nThis operation only applies to Version 2019.11.21 of global tables.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-table-replica-auto-scaling\n[--global-secondary-index-updates <value>]\n--table-name <value>\n[--provisioned-write-capacity-auto-scaling-update <value>]\n[--replica-updates <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--global-secondary-index-updates <value>]",
        "--table-name <value>",
        "[--provisioned-write-capacity-auto-scaling-update <value>]",
        "[--replica-updates <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--global-secondary-index-updates (list)\n\nRepresents the auto scaling settings of the global secondary indexes of the replica to be updated.\n\n(structure)\n\nRepresents the auto scaling settings of a global secondary index for a global table that will be modified.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedWriteCapacityAutoScalingUpdate -> (structure)\n\nRepresents the auto scaling settings to be modified for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring auto scaling policy.\n\nScalingPolicyUpdate -> (structure)\n\nThe scaling policy to apply for scaling target global table or global secondary index capacity units.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nJSON Syntax:\n\n[\n  {\n    \"IndexName\": \"string\",\n    \"ProvisionedWriteCapacityAutoScalingUpdate\": {\n      \"MinimumUnits\": long,\n      \"MaximumUnits\": long,\n      \"AutoScalingDisabled\": true|false,\n      \"AutoScalingRoleArn\": \"string\",\n      \"ScalingPolicyUpdate\": {\n        \"PolicyName\": \"string\",\n        \"TargetTrackingScalingPolicyConfiguration\": {\n          \"DisableScaleIn\": true|false,\n          \"ScaleInCooldown\": integer,\n          \"ScaleOutCooldown\": integer,\n          \"TargetValue\": double\n        }\n      }\n    }\n  }\n  ...\n]\n\n\n--table-name (string)\n\nThe name of the global table to be updated.\n\n--provisioned-write-capacity-auto-scaling-update (structure)\n\nRepresents the auto scaling settings to be modified for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring auto scaling policy.\n\nScalingPolicyUpdate -> (structure)\n\nThe scaling policy to apply for scaling target global table or global secondary index capacity units.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nShorthand Syntax:\n\nMinimumUnits=long,MaximumUnits=long,AutoScalingDisabled=boolean,AutoScalingRoleArn=string,ScalingPolicyUpdate={PolicyName=string,TargetTrackingScalingPolicyConfiguration={DisableScaleIn=boolean,ScaleInCooldown=integer,ScaleOutCooldown=integer,TargetValue=double}}\n\n\nJSON Syntax:\n\n{\n  \"MinimumUnits\": long,\n  \"MaximumUnits\": long,\n  \"AutoScalingDisabled\": true|false,\n  \"AutoScalingRoleArn\": \"string\",\n  \"ScalingPolicyUpdate\": {\n    \"PolicyName\": \"string\",\n    \"TargetTrackingScalingPolicyConfiguration\": {\n      \"DisableScaleIn\": true|false,\n      \"ScaleInCooldown\": integer,\n      \"ScaleOutCooldown\": integer,\n      \"TargetValue\": double\n    }\n  }\n}\n\n\n--replica-updates (list)\n\nRepresents the auto scaling settings of replicas of the table that will be modified.\n\n(structure)\n\nRepresents the auto scaling settings of a replica that will be modified.\n\nRegionName -> (string)\n\nThe Region where the replica exists.\n\nReplicaGlobalSecondaryIndexUpdates -> (list)\n\nRepresents the auto scaling settings of global secondary indexes that will be modified.\n\n(structure)\n\nRepresents the auto scaling settings of a global secondary index for a replica that will be modified.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nProvisionedReadCapacityAutoScalingUpdate -> (structure)\n\nRepresents the auto scaling settings to be modified for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring auto scaling policy.\n\nScalingPolicyUpdate -> (structure)\n\nThe scaling policy to apply for scaling target global table or global secondary index capacity units.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaProvisionedReadCapacityAutoScalingUpdate -> (structure)\n\nRepresents the auto scaling settings to be modified for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring auto scaling policy.\n\nScalingPolicyUpdate -> (structure)\n\nThe scaling policy to apply for scaling target global table or global secondary index capacity units.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nJSON Syntax:\n\n[\n  {\n    \"RegionName\": \"string\",\n    \"ReplicaGlobalSecondaryIndexUpdates\": [\n      {\n        \"IndexName\": \"string\",\n        \"ProvisionedReadCapacityAutoScalingUpdate\": {\n          \"MinimumUnits\": long,\n          \"MaximumUnits\": long,\n          \"AutoScalingDisabled\": true|false,\n          \"AutoScalingRoleArn\": \"string\",\n          \"ScalingPolicyUpdate\": {\n            \"PolicyName\": \"string\",\n            \"TargetTrackingScalingPolicyConfiguration\": {\n              \"DisableScaleIn\": true|false,\n              \"ScaleInCooldown\": integer,\n              \"ScaleOutCooldown\": integer,\n              \"TargetValue\": double\n            }\n          }\n        }\n      }\n      ...\n    ],\n    \"ReplicaProvisionedReadCapacityAutoScalingUpdate\": {\n      \"MinimumUnits\": long,\n      \"MaximumUnits\": long,\n      \"AutoScalingDisabled\": true|false,\n      \"AutoScalingRoleArn\": \"string\",\n      \"ScalingPolicyUpdate\": {\n        \"PolicyName\": \"string\",\n        \"TargetTrackingScalingPolicyConfiguration\": {\n          \"DisableScaleIn\": true|false,\n          \"ScaleInCooldown\": integer,\n          \"ScaleOutCooldown\": integer,\n          \"TargetValue\": double\n        }\n      }\n    }\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTableAutoScalingDescription -> (structure)\n\nReturns information about the auto scaling settings of a table with replicas.\n\nTableName -> (string)\n\nThe name of the table.\n\nTableStatus -> (string)\n\nThe current state of the table:\n\nCREATING - The table is being created.\n\nUPDATING - The table is being updated.\n\nDELETING - The table is being deleted.\n\nACTIVE - The table is ready for use.\n\nReplicas -> (list)\n\nRepresents replicas of the global table.\n\n(structure)\n\nRepresents the auto scaling settings of the replica.\n\nRegionName -> (string)\n\nThe Region where the replica exists.\n\nGlobalSecondaryIndexes -> (list)\n\nReplica-specific global secondary index auto scaling settings.\n\n(structure)\n\nRepresents the auto scaling configuration for a replica global secondary index.\n\nIndexName -> (string)\n\nThe name of the global secondary index.\n\nIndexStatus -> (string)\n\nThe current state of the replica global secondary index:\n\nCREATING - The index is being created.\n\nUPDATING - The index is being updated.\n\nDELETING - The index is being deleted.\n\nACTIVE - The index is ready for use.\n\nProvisionedReadCapacityAutoScalingSettings -> (structure)\n\nRepresents the auto scaling settings for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nProvisionedWriteCapacityAutoScalingSettings -> (structure)\n\nRepresents the auto scaling settings for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaProvisionedReadCapacityAutoScalingSettings -> (structure)\n\nRepresents the auto scaling settings for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaProvisionedWriteCapacityAutoScalingSettings -> (structure)\n\nRepresents the auto scaling settings for a global table or global secondary index.\n\nMinimumUnits -> (long)\n\nThe minimum capacity units that a global table or global secondary index should be scaled down to.\n\nMaximumUnits -> (long)\n\nThe maximum capacity units that a global table or global secondary index should be scaled up to.\n\nAutoScalingDisabled -> (boolean)\n\nDisabled auto scaling for this global table or global secondary index.\n\nAutoScalingRoleArn -> (string)\n\nRole ARN used for configuring the auto scaling policy.\n\nScalingPolicies -> (list)\n\nInformation about the scaling policies.\n\n(structure)\n\nRepresents the properties of the scaling policy.\n\nPolicyName -> (string)\n\nThe name of the scaling policy.\n\nTargetTrackingScalingPolicyConfiguration -> (structure)\n\nRepresents a target tracking scaling policy configuration.\n\nDisableScaleIn -> (boolean)\n\nIndicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won’t remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.\n\nScaleInCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale in activity completes before another scale in activity can start. The cooldown period is used to block subsequent scale in requests until it has expired. You should scale in conservatively to protect your application’s availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, application auto scaling scales out your scalable target immediately.\n\nScaleOutCooldown -> (integer)\n\nThe amount of time, in seconds, after a scale out activity completes before another scale out activity can start. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. You should continuously (but not excessively) scale out.\n\nTargetValue -> (double)\n\nThe target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).\n\nReplicaStatus -> (string)\n\nThe current state of the replica:\n\nCREATING - The replica is being created.\n\nUPDATING - The replica is being updated.\n\nDELETING - The replica is being deleted.\n\nACTIVE - The replica is ready for use.",
      "command_examples": "Examples\n\nTo update auto scaling settings across replicas of a global table\n\nThe following update-table-replica-auto-scaling example updates write capacity auto scaling settings across replicas of the specified global table.\n\naws dynamodb update-table-replica-auto-scaling \\\n    --table-name MusicCollection \\\n    --provisioned-write-capacity-auto-scaling-update file://auto-scaling-policy.json\n\n\nContents of auto-scaling-policy.json:\n\n{\n    \"MinimumUnits\": 10,\n    \"MaximumUnits\": 100,\n    \"AutoScalingDisabled\": false,\n    \"ScalingPolicyUpdate\": {\n        \"PolicyName\": \"DynamoDBWriteCapacityUtilization:table/MusicCollection\",\n        \"TargetTrackingScalingPolicyConfiguration\": {\n            \"TargetValue\": 80\n        }\n    }\n}\n\n\nOutput:\n\n{\n    \"TableAutoScalingDescription\": {\n        \"TableName\": \"MusicCollection\",\n        \"TableStatus\": \"ACTIVE\",\n        \"Replicas\": [\n            {\n                \"RegionName\": \"eu-central-1\",\n                \"GlobalSecondaryIndexes\": [],\n                \"ReplicaProvisionedReadCapacityAutoScalingSettings\": {\n                    \"MinimumUnits\": 5,\n                    \"MaximumUnits\": 40000,\n                    \"AutoScalingRoleArn\": \"arn:aws:iam::123456789012:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable\",\n                    \"ScalingPolicies\": [\n                        {\n                            \"PolicyName\": \"DynamoDBReadCapacityUtilization:table/MusicCollection\",\n                            \"TargetTrackingScalingPolicyConfiguration\": {\n                                \"TargetValue\": 70.0\n                            }\n                        }\n                    ]\n                },\n                \"ReplicaProvisionedWriteCapacityAutoScalingSettings\": {\n                    \"MinimumUnits\": 10,\n                    \"MaximumUnits\": 100,\n                    \"AutoScalingRoleArn\": \"arn:aws:iam::123456789012:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable\",\n                    \"ScalingPolicies\": [\n                        {\n                            \"PolicyName\": \"DynamoDBWriteCapacityUtilization:table/MusicCollection\",\n                            \"TargetTrackingScalingPolicyConfiguration\": {\n                                \"TargetValue\": 80.0\n                            }\n                        }\n                    ]\n                },\n                \"ReplicaStatus\": \"ACTIVE\"\n            },\n            {\n                \"RegionName\": \"us-east-1\",\n                \"GlobalSecondaryIndexes\": [],\n                \"ReplicaProvisionedReadCapacityAutoScalingSettings\": {\n                    \"MinimumUnits\": 5,\n                    \"MaximumUnits\": 40000,\n                    \"AutoScalingRoleArn\": \"arn:aws:iam::123456789012:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable\",\n                    \"ScalingPolicies\": [\n                        {\n                            \"PolicyName\": \"DynamoDBReadCapacityUtilization:table/MusicCollection\",\n                            \"TargetTrackingScalingPolicyConfiguration\": {\n                                \"TargetValue\": 70.0\n                            }\n                        }\n                    ]\n                },\n                \"ReplicaProvisionedWriteCapacityAutoScalingSettings\": {\n                    \"MinimumUnits\": 10,\n                    \"MaximumUnits\": 100,\n                    \"AutoScalingRoleArn\": \"arn:aws:iam::123456789012:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable\",\n                    \"ScalingPolicies\": [\n                        {\n                            \"PolicyName\": \"DynamoDBWriteCapacityUtilization:table/MusicCollection\",\n                            \"TargetTrackingScalingPolicyConfiguration\": {\n                                \"TargetValue\": 80.0\n                            }\n                        }\n                    ]\n                },\n                \"ReplicaStatus\": \"ACTIVE\"\n            },\n            {\n                \"RegionName\": \"us-east-2\",\n                \"GlobalSecondaryIndexes\": [],\n                \"ReplicaProvisionedReadCapacityAutoScalingSettings\": {\n                    \"MinimumUnits\": 5,\n                    \"MaximumUnits\": 40000,\n                    \"AutoScalingRoleArn\": \"arn:aws:iam::123456789012:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable\",\n                    \"ScalingPolicies\": [\n                        {\n                            \"PolicyName\": \"DynamoDBReadCapacityUtilization:table/MusicCollection\",\n                            \"TargetTrackingScalingPolicyConfiguration\": {\n                                \"TargetValue\": 70.0\n                            }\n                        }\n                    ]\n                },\n                \"ReplicaProvisionedWriteCapacityAutoScalingSettings\": {\n                    \"MinimumUnits\": 10,\n                    \"MaximumUnits\": 100,\n                    \"AutoScalingRoleArn\": \"arn:aws:iam::123456789012:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable\",\n                    \"ScalingPolicies\": [\n                        {\n                            \"PolicyName\": \"DynamoDBWriteCapacityUtilization:table/MusicCollection\",\n                            \"TargetTrackingScalingPolicyConfiguration\": {\n                                \"TargetValue\": 80.0\n                            }\n                        }\n                    ]\n                },\n                \"ReplicaStatus\": \"ACTIVE\"\n            }\n        ]\n    }\n}\n\n\nFor more information, see DynamoDB Global Tables in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "update-time-to-live",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/update-time-to-live.html",
      "command_description": "Description\n\nThe UpdateTimeToLive method enables or disables Time to Live (TTL) for the specified table. A successful UpdateTimeToLive call returns the current TimeToLiveSpecification . It can take up to one hour for the change to fully process. Any additional UpdateTimeToLive calls for the same table during this one hour duration result in a ValidationException .\n\nTTL compares the current time in epoch time format to the time stored in the TTL attribute of an item. If the epoch time value stored in the attribute is less than the current time, the item is marked as expired and subsequently deleted.\n\nNote\n\nThe epoch time format is the number of seconds elapsed since 12:00:00 AM January 1, 1970 UTC.\n\nDynamoDB deletes expired items on a best-effort basis to ensure availability of throughput for other data operations.\n\nWarning\n\nDynamoDB typically deletes expired items within two days of expiration. The exact duration within which an item gets deleted after expiration is specific to the nature of the workload. Items that have expired and not been deleted will still show up in reads, queries, and scans.\n\nAs items are deleted, they are removed from any local secondary index and global secondary index immediately in the same eventually consistent way as a standard delete operation.\n\nFor more information, see Time To Live in the Amazon DynamoDB Developer Guide.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-time-to-live\n--table-name <value>\n--time-to-live-specification <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--table-name <value>",
        "--time-to-live-specification <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--table-name (string)\n\nThe name of the table to be configured.\n\n--time-to-live-specification (structure)\n\nRepresents the settings used to enable or disable Time to Live for the specified table.\n\nEnabled -> (boolean)\n\nIndicates whether TTL is to be enabled (true) or disabled (false) on the table.\n\nAttributeName -> (string)\n\nThe name of the TTL attribute used to store the expiration time for items in the table.\n\nShorthand Syntax:\n\nEnabled=boolean,AttributeName=string\n\n\nJSON Syntax:\n\n{\n  \"Enabled\": true|false,\n  \"AttributeName\": \"string\"\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTimeToLiveSpecification -> (structure)\n\nRepresents the output of an UpdateTimeToLive operation.\n\nEnabled -> (boolean)\n\nIndicates whether TTL is to be enabled (true) or disabled (false) on the table.\n\nAttributeName -> (string)\n\nThe name of the TTL attribute used to store the expiration time for items in the table.",
      "command_examples": "Examples\n\nTo update Time to Live settings on a table\n\nThe following update-time-to-live example enables Time to Live on the specified table.\n\naws dynamodb update-time-to-live \\\n    --table-name MusicCollection \\\n    --time-to-live-specification Enabled=true,AttributeName=ttl\n\n\nOutput:\n\n{\n    \"TimeToLiveSpecification\": {\n        \"Enabled\": true,\n        \"AttributeName\": \"ttl\"\n    }\n}\n\n\nFor more information, see Time to Live in the Amazon DynamoDB Developer Guide."
    },
    {
      "command_name": "wait",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/wait/index.html",
      "command_description": "Description\n\nWait until a particular condition is satisfied. Each subcommand polls an API until the listed requirement is met.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_options": []
    },
    {
      "command_name": "wizard",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/dynamodb/wizard/index.html",
      "command_description": "Description\n\nInteractive command for creating and configuring AWS resources.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\nwizard\n",
      "command_options": [],
      "command_options_description": "Options\n\nNone\n\nSee ‘aws help’ for descriptions of global parameters."
    }
  ],
  "service_description": "Description\n\nAmazon DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability. DynamoDB lets you offload the administrative burdens of operating and scaling a distributed database, so that you don’t have to worry about hardware provisioning, setup and configuration, replication, software patching, or cluster scaling.\n\nWith DynamoDB, you can create database tables that can store and retrieve any amount of data, and serve any level of request traffic. You can scale up or scale down your tables’ throughput capacity without downtime or performance degradation, and use the AWS Management Console to monitor resource utilization and performance metrics.\n\nDynamoDB automatically spreads the data and traffic for your tables over a sufficient number of servers to handle your throughput and storage requirements, while maintaining consistent and fast performance. All of your data is stored on solid state disks (SSDs) and automatically replicated across multiple Availability Zones in an AWS region, providing built-in high availability and data durability."
}