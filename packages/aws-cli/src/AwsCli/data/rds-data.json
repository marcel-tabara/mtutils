{
  "service_name": "rds-data",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds-data/index.html",
  "service_commands": [
    {
      "command_name": "batch-execute-statement",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds-data/batch-execute-statement.html",
      "command_description": "Description\n\nRuns a batch SQL statement over an array of data.\n\nYou can run bulk update and insert operations for multiple records using a DML statement with different parameter sets. Bulk operations can provide a significant performance improvement over individual insert and update operations.\n\nWarning\n\nIf a call isn’t part of a transaction because it doesn’t include the transactionID parameter, changes that result from the call are committed automatically.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-execute-statement\n[--database <value>]\n[--parameter-sets <value>]\n--resource-arn <value>\n[--schema <value>]\n--secret-arn <value>\n--sql <value>\n[--transaction-id <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--database <value>]",
        "[--parameter-sets <value>]",
        "--resource-arn <value>",
        "[--schema <value>]",
        "--secret-arn <value>",
        "--sql <value>",
        "[--transaction-id <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--database (string)\n\nThe name of the database.\n\n--parameter-sets (list)\n\nThe parameter set for the batch operation.\n\nThe SQL statement is executed as many times as the number of parameter sets provided. To execute a SQL statement with no parameters, use one of the following options:\n\nSpecify one or more empty parameter sets.\n\nUse the ExecuteStatement operation instead of the BatchExecuteStatement operation.\n\nNote\n\nArray parameters are not supported.\n\n(list)\n\n(structure)\n\nA parameter used in a SQL statement.\n\nname -> (string)\n\nThe name of the parameter.\n\ntypeHint -> (string)\n\nA hint that specifies the correct object type for data type mapping. Possible values are as follows:\n\nDATE - The corresponding String parameter value is sent as an object of DATE type to the database. The accepted format is YYYY-MM-DD .\n\nDECIMAL - The corresponding String parameter value is sent as an object of DECIMAL type to the database.\n\nJSON - The corresponding String parameter value is sent as an object of JSON type to the database.\n\nTIME - The corresponding String parameter value is sent as an object of TIME type to the database. The accepted format is HH:MM:SS[.FFF] .\n\nTIMESTAMP - The corresponding String parameter value is sent as an object of TIMESTAMP type to the database. The accepted format is YYYY-MM-DD HH:MM:SS[.FFF] .\n\nUUID - The corresponding String parameter value is sent as an object of UUID type to the database.\n\nvalue -> (structure)\n\nThe value of the parameter.\n\narrayValue -> (structure)\n\nAn array of values.\n\narrayValues -> (list)\n\nAn array of arrays.\n\n(structure)\n\nContains an array.\n\narrayValues -> (list)\n\nAn array of arrays.\n\n( … recursive … )\n\nbooleanValues -> (list)\n\nAn array of Boolean values.\n\n(boolean)\n\ndoubleValues -> (list)\n\nAn array of integers.\n\n(double)\n\nlongValues -> (list)\n\nAn array of floating point numbers.\n\n(long)\n\nstringValues -> (list)\n\nAn array of strings.\n\n(string)\n\nbooleanValues -> (list)\n\nAn array of Boolean values.\n\n(boolean)\n\ndoubleValues -> (list)\n\nAn array of integers.\n\n(double)\n\nlongValues -> (list)\n\nAn array of floating point numbers.\n\n(long)\n\nstringValues -> (list)\n\nAn array of strings.\n\n(string)\n\nblobValue -> (blob)\n\nA value of BLOB data type.\n\nbooleanValue -> (boolean)\n\nA value of Boolean data type.\n\ndoubleValue -> (double)\n\nA value of double data type.\n\nisNull -> (boolean)\n\nA NULL value.\n\nlongValue -> (long)\n\nA value of long data type.\n\nstringValue -> (string)\n\nA value of string data type.\n\nJSON Syntax:\n\n[\n  [\n    {\n      \"name\": \"string\",\n      \"typeHint\": \"JSON\"|\"UUID\"|\"TIMESTAMP\"|\"DATE\"|\"TIME\"|\"DECIMAL\",\n      \"value\": {\n        \"arrayValue\": {\n          \"arrayValues\": [\n            {\n              \"arrayValues\": [\n                { ... recursive ... }\n                ...\n              ],\n              \"booleanValues\": [true|false, ...],\n              \"doubleValues\": [double, ...],\n              \"longValues\": [long, ...],\n              \"stringValues\": [\"string\", ...]\n            }\n            ...\n          ],\n          \"booleanValues\": [true|false, ...],\n          \"doubleValues\": [double, ...],\n          \"longValues\": [long, ...],\n          \"stringValues\": [\"string\", ...]\n        },\n        \"blobValue\": blob,\n        \"booleanValue\": true|false,\n        \"doubleValue\": double,\n        \"isNull\": true|false,\n        \"longValue\": long,\n        \"stringValue\": \"string\"\n      }\n    }\n    ...\n  ]\n  ...\n]\n\n\n--resource-arn (string)\n\nThe Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n\n--schema (string)\n\nThe name of the database schema.\n\n--secret-arn (string)\n\nThe name or ARN of the secret that enables access to the DB cluster.\n\n--sql (string)\n\nThe SQL statement to run.\n\n--transaction-id (string)\n\nThe identifier of a transaction that was started by using the BeginTransaction operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.\n\nIf the SQL statement is not part of a transaction, don’t set this parameter.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nupdateResults -> (list)\n\nThe execution results of each batch entry.\n\n(structure)\n\nThe response elements represent the results of an update.\n\ngeneratedFields -> (list)\n\nValues for fields generated during the request.\n\n(structure)\n\nContains a value.\n\narrayValue -> (structure)\n\nAn array of values.\n\narrayValues -> (list)\n\nAn array of arrays.\n\n(structure)\n\nContains an array.\n\narrayValues -> (list)\n\nAn array of arrays.\n\n( … recursive … )\n\nbooleanValues -> (list)\n\nAn array of Boolean values.\n\n(boolean)\n\ndoubleValues -> (list)\n\nAn array of integers.\n\n(double)\n\nlongValues -> (list)\n\nAn array of floating point numbers.\n\n(long)\n\nstringValues -> (list)\n\nAn array of strings.\n\n(string)\n\nbooleanValues -> (list)\n\nAn array of Boolean values.\n\n(boolean)\n\ndoubleValues -> (list)\n\nAn array of integers.\n\n(double)\n\nlongValues -> (list)\n\nAn array of floating point numbers.\n\n(long)\n\nstringValues -> (list)\n\nAn array of strings.\n\n(string)\n\nblobValue -> (blob)\n\nA value of BLOB data type.\n\nbooleanValue -> (boolean)\n\nA value of Boolean data type.\n\ndoubleValue -> (double)\n\nA value of double data type.\n\nisNull -> (boolean)\n\nA NULL value.\n\nlongValue -> (long)\n\nA value of long data type.\n\nstringValue -> (string)\n\nA value of string data type.",
      "command_examples": "Examples\n\nTo execute a batch SQL statement\n\nThe following batch-execute-statement example executes a batch SQL statement over an array of data with a parameter set.\n\naws rds-data batch-execute-statement \\\n    --resource-arn \"arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster\" \\\n    --database \"mydb\" \\\n    --secret-arn \"arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret\" \\\n    --sql \"insert into mytable values (:id, :val)\" \\\n    --parameter-sets \"[[{\\\"name\\\": \\\"id\\\", \\\"value\\\": {\\\"longValue\\\": 1}},{\\\"name\\\": \\\"val\\\", \\\"value\\\": {\\\"stringValue\\\": \\\"ValueOne\\\"}}],\n        [{\\\"name\\\": \\\"id\\\", \\\"value\\\": {\\\"longValue\\\": 2}},{\\\"name\\\": \\\"val\\\", \\\"value\\\": {\\\"stringValue\\\": \\\"ValueTwo\\\"}}],\n        [{\\\"name\\\": \\\"id\\\", \\\"value\\\": {\\\"longValue\\\": 3}},{\\\"name\\\": \\\"val\\\", \\\"value\\\": {\\\"stringValue\\\": \\\"ValueThree\\\"}}]]\"\n\n\nThis command produces no output.\n\nFor more information, see Using the Data API for Aurora Serverless in the Amazon RDS User Guide."
    },
    {
      "command_name": "begin-transaction",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds-data/begin-transaction.html",
      "command_description": "Description\n\nStarts a SQL transaction.\n\n<important> <p>A transaction can run for a maximum of 24 hours. A transaction is terminated and rolled back automatically after 24 hours.</p> <p>A transaction times out if no calls use its transaction ID in three minutes. If a transaction times out before it's committed, it's rolled back automatically.</p> <p>DDL statements inside a transaction cause an implicit commit. We recommend that you run each DDL statement in a separate <code>ExecuteStatement</code> call with <code>continueAfterTimeout</code> enabled.</p> </important>\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  begin-transaction\n[--database <value>]\n--resource-arn <value>\n[--schema <value>]\n--secret-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--database <value>]",
        "--resource-arn <value>",
        "[--schema <value>]",
        "--secret-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--database (string)\n\nThe name of the database.\n\n--resource-arn (string)\n\nThe Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n\n--schema (string)\n\nThe name of the database schema.\n\n--secret-arn (string)\n\nThe name or ARN of the secret that enables access to the DB cluster.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ntransactionId -> (string)\n\nThe transaction ID of the transaction started by the call.",
      "command_examples": "Examples\n\nTo start a SQL transaction\n\nThe following begin-transaction example starts a SQL transaction.\n\naws rds-data begin-transaction \\\n    --resource-arn \"arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster\" \\\n    --database \"mydb\" \\\n    --secret-arn \"arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret\"\n\n\nOutput:\n\n{\n    \"transactionId\": \"ABC1234567890xyz\"\n}\n\n\nFor more information, see Using the Data API for Aurora Serverless in the Amazon RDS User Guide."
    },
    {
      "command_name": "commit-transaction",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds-data/commit-transaction.html",
      "command_description": "Description\n\nEnds a SQL transaction started with the BeginTransaction operation and commits the changes.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  commit-transaction\n--resource-arn <value>\n--secret-arn <value>\n--transaction-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--secret-arn <value>",
        "--transaction-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n\n--secret-arn (string)\n\nThe name or ARN of the secret that enables access to the DB cluster.\n\n--transaction-id (string)\n\nThe identifier of the transaction to end and commit.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ntransactionStatus -> (string)\n\nThe status of the commit operation.",
      "command_examples": "Examples\n\nTo commit a SQL transaction\n\nThe following commit-transaction example ends the specified SQL transaction and commits the changes that you made as part of it.\n\naws rds-data commit-transaction \\\n    --resource-arn \"arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster\" \\\n    --secret-arn \"arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret\" \\\n    --transaction-id \"ABC1234567890xyz\"\n\n\nOutput:\n\n{\n    \"transactionStatus\": \"Transaction Committed\"\n}\n\n\nFor more information, see Using the Data API for Aurora Serverless in the Amazon RDS User Guide."
    },
    {
      "command_name": "execute-statement",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds-data/execute-statement.html",
      "command_description": "Description\n\nRuns a SQL statement against a database.\n\nWarning\n\nIf a call isn’t part of a transaction because it doesn’t include the transactionID parameter, changes that result from the call are committed automatically.\n\nThe response size limit is 1 MB. If the call returns more than 1 MB of response data, the call is terminated.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  execute-statement\n[--continue-after-timeout | --no-continue-after-timeout]\n[--database <value>]\n[--include-result-metadata | --no-include-result-metadata]\n[--parameters <value>]\n--resource-arn <value>\n[--result-set-options <value>]\n[--schema <value>]\n--secret-arn <value>\n--sql <value>\n[--transaction-id <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--continue-after-timeout | --no-continue-after-timeout]",
        "[--database <value>]",
        "[--include-result-metadata | --no-include-result-metadata]",
        "[--parameters <value>]",
        "--resource-arn <value>",
        "[--result-set-options <value>]",
        "[--schema <value>]",
        "--secret-arn <value>",
        "--sql <value>",
        "[--transaction-id <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--continue-after-timeout | --no-continue-after-timeout (boolean)\n\nA value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.\n\nWarning\n\nFor DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.\n\n--database (string)\n\nThe name of the database.\n\n--include-result-metadata | --no-include-result-metadata (boolean)\n\nA value that indicates whether to include metadata in the results.\n\n--parameters (list)\n\nThe parameters for the SQL statement.\n\nNote\n\nArray parameters are not supported.\n\n(structure)\n\nA parameter used in a SQL statement.\n\nname -> (string)\n\nThe name of the parameter.\n\ntypeHint -> (string)\n\nA hint that specifies the correct object type for data type mapping. Possible values are as follows:\n\nDATE - The corresponding String parameter value is sent as an object of DATE type to the database. The accepted format is YYYY-MM-DD .\n\nDECIMAL - The corresponding String parameter value is sent as an object of DECIMAL type to the database.\n\nJSON - The corresponding String parameter value is sent as an object of JSON type to the database.\n\nTIME - The corresponding String parameter value is sent as an object of TIME type to the database. The accepted format is HH:MM:SS[.FFF] .\n\nTIMESTAMP - The corresponding String parameter value is sent as an object of TIMESTAMP type to the database. The accepted format is YYYY-MM-DD HH:MM:SS[.FFF] .\n\nUUID - The corresponding String parameter value is sent as an object of UUID type to the database.\n\nvalue -> (structure)\n\nThe value of the parameter.\n\narrayValue -> (structure)\n\nAn array of values.\n\narrayValues -> (list)\n\nAn array of arrays.\n\n(structure)\n\nContains an array.\n\narrayValues -> (list)\n\nAn array of arrays.\n\n( … recursive … )\n\nbooleanValues -> (list)\n\nAn array of Boolean values.\n\n(boolean)\n\ndoubleValues -> (list)\n\nAn array of integers.\n\n(double)\n\nlongValues -> (list)\n\nAn array of floating point numbers.\n\n(long)\n\nstringValues -> (list)\n\nAn array of strings.\n\n(string)\n\nbooleanValues -> (list)\n\nAn array of Boolean values.\n\n(boolean)\n\ndoubleValues -> (list)\n\nAn array of integers.\n\n(double)\n\nlongValues -> (list)\n\nAn array of floating point numbers.\n\n(long)\n\nstringValues -> (list)\n\nAn array of strings.\n\n(string)\n\nblobValue -> (blob)\n\nA value of BLOB data type.\n\nbooleanValue -> (boolean)\n\nA value of Boolean data type.\n\ndoubleValue -> (double)\n\nA value of double data type.\n\nisNull -> (boolean)\n\nA NULL value.\n\nlongValue -> (long)\n\nA value of long data type.\n\nstringValue -> (string)\n\nA value of string data type.\n\nJSON Syntax:\n\n[\n  {\n    \"name\": \"string\",\n    \"typeHint\": \"JSON\"|\"UUID\"|\"TIMESTAMP\"|\"DATE\"|\"TIME\"|\"DECIMAL\",\n    \"value\": {\n      \"arrayValue\": {\n        \"arrayValues\": [\n          {\n            \"arrayValues\": [\n              { ... recursive ... }\n              ...\n            ],\n            \"booleanValues\": [true|false, ...],\n            \"doubleValues\": [double, ...],\n            \"longValues\": [long, ...],\n            \"stringValues\": [\"string\", ...]\n          }\n          ...\n        ],\n        \"booleanValues\": [true|false, ...],\n        \"doubleValues\": [double, ...],\n        \"longValues\": [long, ...],\n        \"stringValues\": [\"string\", ...]\n      },\n      \"blobValue\": blob,\n      \"booleanValue\": true|false,\n      \"doubleValue\": double,\n      \"isNull\": true|false,\n      \"longValue\": long,\n      \"stringValue\": \"string\"\n    }\n  }\n  ...\n]\n\n\n--resource-arn (string)\n\nThe Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n\n--result-set-options (structure)\n\nOptions that control how the result set is returned.\n\ndecimalReturnType -> (string)\n\nA value that indicates how a field of DECIMAL type is represented in the response. The value of STRING , the default, specifies that it is converted to a String value. The value of DOUBLE_OR_LONG specifies that it is converted to a Long value if its scale is 0, or to a Double value otherwise.\n\nWarning\n\nConversion to Double or Long can result in roundoff errors due to precision loss. We recommend converting to String, especially when working with currency values.\n\nShorthand Syntax:\n\ndecimalReturnType=string\n\n\nJSON Syntax:\n\n{\n  \"decimalReturnType\": \"STRING\"|\"DOUBLE_OR_LONG\"\n}\n\n\n--schema (string)\n\nThe name of the database schema.\n\nNote\n\nCurrently, the schema parameter isn’t supported.\n\n--secret-arn (string)\n\nThe name or ARN of the secret that enables access to the DB cluster.\n\n--sql (string)\n\nThe SQL statement to run.\n\n--transaction-id (string)\n\nThe identifier of a transaction that was started by using the BeginTransaction operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.\n\nIf the SQL statement is not part of a transaction, don’t set this parameter.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncolumnMetadata -> (list)\n\nMetadata for the columns included in the results.\n\n(structure)\n\nContains the metadata for a column.\n\narrayBaseColumnType -> (integer)\n\nThe type of the column.\n\nisAutoIncrement -> (boolean)\n\nA value that indicates whether the column increments automatically.\n\nisCaseSensitive -> (boolean)\n\nA value that indicates whether the column is case-sensitive.\n\nisCurrency -> (boolean)\n\nA value that indicates whether the column contains currency values.\n\nisSigned -> (boolean)\n\nA value that indicates whether an integer column is signed.\n\nlabel -> (string)\n\nThe label for the column.\n\nname -> (string)\n\nThe name of the column.\n\nnullable -> (integer)\n\nA value that indicates whether the column is nullable.\n\nprecision -> (integer)\n\nThe precision value of a decimal number column.\n\nscale -> (integer)\n\nThe scale value of a decimal number column.\n\nschemaName -> (string)\n\nThe name of the schema that owns the table that includes the column.\n\ntableName -> (string)\n\nThe name of the table that includes the column.\n\ntype -> (integer)\n\nThe type of the column.\n\ntypeName -> (string)\n\nThe database-specific data type of the column.\n\ngeneratedFields -> (list)\n\nValues for fields generated during the request.\n\n<note> <p>The <code>generatedFields</code> data isn't supported by Aurora PostgreSQL. To get the values of generated fields, use the <code>RETURNING</code> clause. For more information, see <a href=\"https://www.postgresql.org/docs/10/dml-returning.html\">Returning Data From Modified Rows</a> in the PostgreSQL documentation.</p> </note>\n\n(structure)\n\nContains a value.\n\narrayValue -> (structure)\n\nAn array of values.\n\narrayValues -> (list)\n\nAn array of arrays.\n\n(structure)\n\nContains an array.\n\narrayValues -> (list)\n\nAn array of arrays.\n\n( … recursive … )\n\nbooleanValues -> (list)\n\nAn array of Boolean values.\n\n(boolean)\n\ndoubleValues -> (list)\n\nAn array of integers.\n\n(double)\n\nlongValues -> (list)\n\nAn array of floating point numbers.\n\n(long)\n\nstringValues -> (list)\n\nAn array of strings.\n\n(string)\n\nbooleanValues -> (list)\n\nAn array of Boolean values.\n\n(boolean)\n\ndoubleValues -> (list)\n\nAn array of integers.\n\n(double)\n\nlongValues -> (list)\n\nAn array of floating point numbers.\n\n(long)\n\nstringValues -> (list)\n\nAn array of strings.\n\n(string)\n\nblobValue -> (blob)\n\nA value of BLOB data type.\n\nbooleanValue -> (boolean)\n\nA value of Boolean data type.\n\ndoubleValue -> (double)\n\nA value of double data type.\n\nisNull -> (boolean)\n\nA NULL value.\n\nlongValue -> (long)\n\nA value of long data type.\n\nstringValue -> (string)\n\nA value of string data type.\n\nnumberOfRecordsUpdated -> (long)\n\nThe number of records updated by the request.\n\nrecords -> (list)\n\nThe records returned by the SQL statement.\n\n(list)\n\n(structure)\n\nContains a value.\n\narrayValue -> (structure)\n\nAn array of values.\n\narrayValues -> (list)\n\nAn array of arrays.\n\n(structure)\n\nContains an array.\n\narrayValues -> (list)\n\nAn array of arrays.\n\n( … recursive … )\n\nbooleanValues -> (list)\n\nAn array of Boolean values.\n\n(boolean)\n\ndoubleValues -> (list)\n\nAn array of integers.\n\n(double)\n\nlongValues -> (list)\n\nAn array of floating point numbers.\n\n(long)\n\nstringValues -> (list)\n\nAn array of strings.\n\n(string)\n\nbooleanValues -> (list)\n\nAn array of Boolean values.\n\n(boolean)\n\ndoubleValues -> (list)\n\nAn array of integers.\n\n(double)\n\nlongValues -> (list)\n\nAn array of floating point numbers.\n\n(long)\n\nstringValues -> (list)\n\nAn array of strings.\n\n(string)\n\nblobValue -> (blob)\n\nA value of BLOB data type.\n\nbooleanValue -> (boolean)\n\nA value of Boolean data type.\n\ndoubleValue -> (double)\n\nA value of double data type.\n\nisNull -> (boolean)\n\nA NULL value.\n\nlongValue -> (long)\n\nA value of long data type.\n\nstringValue -> (string)\n\nA value of string data type.",
      "command_examples": "Examples\n\nExample 1: To execute a SQL statement that is part of a transaction\n\nThe following execute-statement example runs a SQL statement that is part of a transaction.\n\naws rds-data execute-statement \\\n    --resource-arn \"arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster\" \\\n    --database \"mydb\" \\\n    --secret-arn \"arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret\" \\\n    --sql \"update mytable set quantity=5 where id=201\" \\\n    --transaction-id \"ABC1234567890xyz\"\n\n\nOutput:\n\n{\n    \"numberOfRecordsUpdated\": 1\n}\n\n\nExample 2: To execute a SQL statement with parameters\n\nThe following execute-statement example runs a SQL statement with parameters.\n\naws rds-data execute-statement \\\n    --resource-arn \"arn:aws:rds:us-east-1:123456789012:cluster:mydbcluster\" \\\n    --database \"mydb\" \\\n    --secret-arn \"arn:aws:secretsmanager:us-east-1:123456789012:secret:mysecret\" \\\n    --sql \"insert into mytable values (:id, :val)\" \\\n    --parameters \"[{\\\"name\\\": \\\"id\\\", \\\"value\\\": {\\\"longValue\\\": 1}},{\\\"name\\\": \\\"val\\\", \\\"value\\\": {\\\"stringValue\\\": \\\"value1\\\"}}]\"\n\n\nOutput:\n\n{\n    \"numberOfRecordsUpdated\": 1\n}\n\n\nFor more information, see Using the Data API for Aurora Serverless in the Amazon RDS User Guide."
    },
    {
      "command_name": "rollback-transaction",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/rds-data/rollback-transaction.html",
      "command_description": "Description\n\nPerforms a rollback of a transaction. Rolling back a transaction cancels its changes.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  rollback-transaction\n--resource-arn <value>\n--secret-arn <value>\n--transaction-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--secret-arn <value>",
        "--transaction-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.\n\n--secret-arn (string)\n\nThe name or ARN of the secret that enables access to the DB cluster.\n\n--transaction-id (string)\n\nThe identifier of the transaction to roll back.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ntransactionStatus -> (string)\n\nThe status of the rollback operation.",
      "command_examples": "Examples\n\nTo roll back a SQL transaction\n\nThe following rollback-transaction example rolls back the specified SQL transaction.\n\naws rds-data rollback-transaction \\\n    --resource-arn \"arn:aws:rds:us-west-2:123456789012:cluster:mydbcluster\" \\\n    --secret-arn \"arn:aws:secretsmanager:us-west-2:123456789012:secret:mysecret\" \\\n    --transaction-id \"ABC1234567890xyz\"\n\n\nOutput:\n\n{\n    \"transactionStatus\": \"Rollback Complete\"\n}\n\n\nFor more information, see Using the Data API for Aurora Serverless in the Amazon RDS User Guide."
    }
  ],
  "service_description": "Description\n\nAmazon RDS provides an HTTP endpoint to run SQL statements on an Amazon Aurora Serverless DB cluster. To run these statements, you work with the Data Service API.\n\nFor more information about the Data Service API, see Using the Data API for Aurora Serverless in the Amazon Aurora User Guide ."
}