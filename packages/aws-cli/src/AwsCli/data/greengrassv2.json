{
  "service_name": "greengrassv2",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/index.html",
  "service_commands": [
    {
      "command_name": "batch-associate-client-device-with-core-device",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/batch-associate-client-device-with-core-device.html",
      "command_description": "Description\n\nAssociate a list of client devices with a core device. Use this API operation to specify which client devices can discover a core device through cloud discovery. With cloud discovery, client devices connect to IoT Greengrass to retrieve associated core devices’ connectivity information and certificates. For more information, see Configure cloud discovery in the IoT Greengrass V2 Developer Guide .\n\nNote\n\nClient devices are local IoT devices that connect to and communicate with an IoT Greengrass core device over MQTT. You can connect client devices to a core device to sync MQTT messages and data to Amazon Web Services IoT Core and interact with client devices in Greengrass components. For more information, see Interact with local IoT devices in the IoT Greengrass V2 Developer Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-associate-client-device-with-core-device\n[--entries <value>]\n--core-device-thing-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--entries <value>]",
        "--core-device-thing-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--entries (list)\n\nThe list of client devices to associate.\n\n(structure)\n\nContains a request to associate a client device with a core device. The BatchAssociateClientDeviceWithCoreDevice operation consumes a list of these requests.\n\nthingName -> (string)\n\nThe name of the IoT thing that represents the client device to associate.\n\nShorthand Syntax:\n\nthingName=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"thingName\": \"string\"\n  }\n  ...\n]\n\n\n--core-device-thing-name (string)\n\nThe name of the core device. This is also the name of the IoT thing.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nerrorEntries -> (list)\n\nThe list of any errors for the entries in the request. Each error entry contains the name of the IoT thing that failed to associate.\n\n(structure)\n\nContains an error that occurs from a request to associate a client device with a core device. The BatchAssociateClientDeviceWithCoreDevice operation returns a list of these errors.\n\nthingName -> (string)\n\nThe name of the IoT thing whose associate request failed.\n\ncode -> (string)\n\nThe error code for the request.\n\nmessage -> (string)\n\nA message that provides additional information about the error.",
      "command_examples": "Examples\n\nTo associate client devices with a core device\n\nThe following batch-associate-client-device-with-core-device example associates two client devices with a core device.\n\naws greengrassv2 batch-associate-client-device-with-core-device \\\n  --core-device-thing-name MyGreengrassCore \\\n  --entries thingName=MyClientDevice1 thingName=MyClientDevice2\n\n\nOutput:\n\n{\n    \"errorEntries\": []\n}\n\n\nFor more information, see Interact with local IoT devices in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "batch-disassociate-client-device-from-core-device",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/batch-disassociate-client-device-from-core-device.html",
      "command_description": "Description\n\nDisassociate a list of client devices from a core device. After you disassociate a client device from a core device, the client device won’t be able to use cloud discovery to retrieve the core device’s connectivity information and certificates.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-disassociate-client-device-from-core-device\n[--entries <value>]\n--core-device-thing-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--entries <value>]",
        "--core-device-thing-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--entries (list)\n\nThe list of client devices to disassociate.\n\n(structure)\n\nContains a request to disassociate a client device from a core device. The BatchDisassociateClientDeviceWithCoreDevice operation consumes a list of these requests.\n\nthingName -> (string)\n\nThe name of the IoT thing that represents the client device to disassociate.\n\nShorthand Syntax:\n\nthingName=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"thingName\": \"string\"\n  }\n  ...\n]\n\n\n--core-device-thing-name (string)\n\nThe name of the core device. This is also the name of the IoT thing.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nerrorEntries -> (list)\n\nThe list of errors (if any) for the entries in the request. Each error entry contains the name of the IoT thing that failed to disassociate.\n\n(structure)\n\nContains an error that occurs from a request to disassociate a client device from a core device. The BatchDisassociateClientDeviceWithCoreDevice operation returns a list of these errors.\n\nthingName -> (string)\n\nThe name of the IoT thing whose disassociate request failed.\n\ncode -> (string)\n\nThe error code for the request.\n\nmessage -> (string)\n\nA message that provides additional information about the error.",
      "command_examples": "Examples\n\nTo disassociate client devices from a core device\n\nThe following batch-disassociate-client-device-from-core-device example disassociates two client devices from a core device.\n\naws greengrassv2 batch-disassociate-client-device-from-core-device \\\n  --core-device-thing-name MyGreengrassCore \\\n  --entries thingName=MyClientDevice1 thingName=MyClientDevice2\n\n\nOutput:\n\n{\n    \"errorEntries\": []\n}\n\n\nFor more information, see Interact with local IoT devices in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "cancel-deployment",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/cancel-deployment.html",
      "command_description": "Description\n\nCancels a deployment. This operation cancels the deployment for devices that haven’t yet received it. If a device already received the deployment, this operation doesn’t change anything for that device.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  cancel-deployment\n--deployment-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--deployment-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--deployment-id (string)\n\nThe ID of the deployment.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nmessage -> (string)\n\nA message that communicates if the cancel was successful.",
      "command_examples": "Examples\n\nTo cancel a deployment\n\nThe following cancel-deployment example stops a continuous deployment to a thing group.\n\naws greengrassv2 cancel-deployment \\\n    --deployment-id a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\n\n\nOutput:\n\n{\n    \"message\": \"SUCCESS\"\n}\n\n\nFor more information, see Cancel deployments in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "create-component-version",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/create-component-version.html",
      "command_description": "Description\n\nCreates a component. Components are software that run on Greengrass core devices. After you develop and test a component on your core device, you can use this operation to upload your component to IoT Greengrass. Then, you can deploy the component to other core devices.\n\nYou can use this operation to do the following:\n\nCreate components from recipes Create a component from a recipe, which is a file that defines the component’s metadata, parameters, dependencies, lifecycle, artifacts, and platform capability. For more information, see IoT Greengrass component recipe reference in the IoT Greengrass V2 Developer Guide . To create a component from a recipe, specify inlineRecipe when you call this operation.\n\nCreate components from Lambda functions Create a component from an Lambda function that runs on IoT Greengrass. This creates a recipe and artifacts from the Lambda function’s deployment package. You can use this operation to migrate Lambda functions from IoT Greengrass V1 to IoT Greengrass V2. This function only accepts Lambda functions that use the following runtimes:\n\nPython 2.7 – python2.7\n\nPython 3.7 – python3.7\n\nPython 3.8 – python3.8\n\nJava 8 – java8\n\nNode.js 10 – nodejs10.x\n\nNode.js 12 – nodejs12.x\n\nTo create a component from a Lambda function, specify lambdaFunction when you call this operation.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-component-version\n[--inline-recipe <value>]\n[--lambda-function <value>]\n[--tags <value>]\n[--client-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--inline-recipe <value>]",
        "[--lambda-function <value>]",
        "[--tags <value>]",
        "[--client-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--inline-recipe (blob)\n\nThe recipe to use to create the component. The recipe defines the component’s metadata, parameters, dependencies, lifecycle, artifacts, and platform compatibility.\n\nYou must specify either inlineRecipe or lambdaFunction .\n\n--lambda-function (structure)\n\nThe parameters to create a component from a Lambda function.\n\nYou must specify either inlineRecipe or lambdaFunction .\n\nlambdaArn -> (string)\n\nThe ARN of the Lambda function. The ARN must include the version of the function to import. You can’t use version aliases like $LATEST .\n\ncomponentName -> (string)\n\nThe name of the component.\n\nDefaults to the name of the Lambda function.\n\ncomponentVersion -> (string)\n\nThe version of the component.\n\nDefaults to the version of the Lambda function as a semantic version. For example, if your function version is 3 , the component version becomes 3.0.0 .\n\ncomponentPlatforms -> (list)\n\nThe platforms that the component version supports.\n\n(structure)\n\nContains information about a platform that a component supports.\n\nname -> (string)\n\nThe friendly name of the platform. This name helps you identify the platform.\n\nIf you omit this parameter, IoT Greengrass creates a friendly name from the os and architecture of the platform.\n\nattributes -> (map)\n\nA dictionary of attributes for the platform. The IoT Greengrass Core software defines the os and platform by default. You can specify additional platform attributes for a core device when you deploy the Greengrass nucleus component. For more information, see the Greengrass nucleus component in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\ncomponentDependencies -> (map)\n\nThe component versions on which this Lambda function component depends.\n\nkey -> (string)\n\nvalue -> (structure)\n\nContains information about a component dependency for a Lambda function component.\n\nversionRequirement -> (string)\n\nThe component version requirement for the component dependency.\n\nIoT Greengrass V2 uses semantic version constraints. For more information, see Semantic Versioning .\n\ndependencyType -> (string)\n\nThe type of this dependency. Choose from the following options:\n\nSOFT – The component doesn’t restart if the dependency changes state.\n\nHARD – The component restarts if the dependency changes state.\n\nDefault: HARD\n\ncomponentLambdaParameters -> (structure)\n\nThe system and runtime parameters for the Lambda function as it runs on the Greengrass core device.\n\neventSources -> (list)\n\nThe list of event sources to which to subscribe to receive work messages. The Lambda function runs when it receives a message from an event source. You can subscribe this function to local publish/subscribe messages and Amazon Web Services IoT Core MQTT messages.\n\n(structure)\n\nContains information about an event source for an Lambda function. The event source defines the topics on which this Lambda function subscribes to receive messages that run the function.\n\ntopic -> (string)\n\nThe topic to which to subscribe to receive event messages.\n\ntype -> (string)\n\nThe type of event source. Choose from the following options:\n\nPUB_SUB – Subscribe to local publish/subscribe messages. This event source type doesn’t support MQTT wildcards (+ and # ) in the event source topic.\n\nIOT_CORE – Subscribe to Amazon Web Services IoT Core MQTT messages. This event source type supports MQTT wildcards (+ and # ) in the event source topic.\n\nmaxQueueSize -> (integer)\n\nThe maximum size of the message queue for the Lambda function component. The IoT Greengrass core stores messages in a FIFO (first-in-first-out) queue until it can run the Lambda function to consume each message.\n\nmaxInstancesCount -> (integer)\n\nThe maximum number of instances that a non-pinned Lambda function can run at the same time.\n\nmaxIdleTimeInSeconds -> (integer)\n\nThe maximum amount of time in seconds that a non-pinned Lambda function can idle before the IoT Greengrass Core software stops its process.\n\ntimeoutInSeconds -> (integer)\n\nThe maximum amount of time in seconds that the Lambda function can process a work item.\n\nstatusTimeoutInSeconds -> (integer)\n\nThe interval in seconds at which a pinned (also known as long-lived) Lambda function component sends status updates to the Lambda manager component.\n\npinned -> (boolean)\n\nWhether or not the Lambda function is pinned, or long-lived.\n\nA pinned Lambda function starts when IoT Greengrass starts and keeps running in its own container.\n\nA non-pinned Lambda function starts only when it receives a work item and exists after it idles for maxIdleTimeInSeconds . If the function has multiple work items, the IoT Greengrass Core software creates multiple instances of the function.\n\nDefault: true\n\ninputPayloadEncodingType -> (string)\n\nThe encoding type that the Lambda function supports.\n\nDefault: json\n\nexecArgs -> (list)\n\nThe list of arguments to pass to the Lambda function when it runs.\n\n(string)\n\nenvironmentVariables -> (map)\n\nThe map of environment variables that are available to the Lambda function when it runs.\n\nkey -> (string)\n\nvalue -> (string)\n\nlinuxProcessParams -> (structure)\n\nThe parameters for the Linux process that contains the Lambda function.\n\nisolationMode -> (string)\n\nThe isolation mode for the process that contains the Lambda function. The process can run in an isolated runtime environment inside the IoT Greengrass container, or as a regular process outside any container.\n\nDefault: GreengrassContainer\n\ncontainerParams -> (structure)\n\nThe parameters for the container in which the Lambda function runs.\n\nmemorySizeInKB -> (integer)\n\nThe memory size of the container, expressed in kilobytes.\n\nDefault: 16384 (16 MB)\n\nmountROSysfs -> (boolean)\n\nWhether or not the container can read information from the device’s /sys folder.\n\nDefault: false\n\nvolumes -> (list)\n\nThe list of volumes that the container can access.\n\n(structure)\n\nContains information about a volume that Linux processes in a container can access. When you define a volume, the IoT Greengrass Core software mounts the source files to the destination inside the container.\n\nsourcePath -> (string)\n\nThe path to the physical volume in the file system.\n\ndestinationPath -> (string)\n\nThe path to the logical volume in the file system.\n\npermission -> (string)\n\nThe permission to access the volume: read/only (ro ) or read/write (rw ).\n\nDefault: ro\n\naddGroupOwner -> (boolean)\n\nWhether or not to add the IoT Greengrass user group as an owner of the volume.\n\nDefault: false\n\ndevices -> (list)\n\nThe list of system devices that the container can access.\n\n(structure)\n\nContains information about a device that Linux processes in a container can access.\n\npath -> (string)\n\nThe mount path for the device in the file system.\n\npermission -> (string)\n\nThe permission to access the device: read/only (ro ) or read/write (rw ).\n\nDefault: ro\n\naddGroupOwner -> (boolean)\n\nWhether or not to add the component’s system user as an owner of the device.\n\nDefault: false\n\nJSON Syntax:\n\n{\n  \"lambdaArn\": \"string\",\n  \"componentName\": \"string\",\n  \"componentVersion\": \"string\",\n  \"componentPlatforms\": [\n    {\n      \"name\": \"string\",\n      \"attributes\": {\"string\": \"string\"\n        ...}\n    }\n    ...\n  ],\n  \"componentDependencies\": {\"string\": {\n        \"versionRequirement\": \"string\",\n        \"dependencyType\": \"HARD\"|\"SOFT\"\n      }\n    ...},\n  \"componentLambdaParameters\": {\n    \"eventSources\": [\n      {\n        \"topic\": \"string\",\n        \"type\": \"PUB_SUB\"|\"IOT_CORE\"\n      }\n      ...\n    ],\n    \"maxQueueSize\": integer,\n    \"maxInstancesCount\": integer,\n    \"maxIdleTimeInSeconds\": integer,\n    \"timeoutInSeconds\": integer,\n    \"statusTimeoutInSeconds\": integer,\n    \"pinned\": true|false,\n    \"inputPayloadEncodingType\": \"json\"|\"binary\",\n    \"execArgs\": [\"string\", ...],\n    \"environmentVariables\": {\"string\": \"string\"\n      ...},\n    \"linuxProcessParams\": {\n      \"isolationMode\": \"GreengrassContainer\"|\"NoContainer\",\n      \"containerParams\": {\n        \"memorySizeInKB\": integer,\n        \"mountROSysfs\": true|false,\n        \"volumes\": [\n          {\n            \"sourcePath\": \"string\",\n            \"destinationPath\": \"string\",\n            \"permission\": \"ro\"|\"rw\",\n            \"addGroupOwner\": true|false\n          }\n          ...\n        ],\n        \"devices\": [\n          {\n            \"path\": \"string\",\n            \"permission\": \"ro\"|\"rw\",\n            \"addGroupOwner\": true|false\n          }\n          ...\n        ]\n      }\n    }\n  }\n}\n\n\n--tags (map)\n\nA list of key-value pairs that contain metadata for the resource. For more information, see Tag your resources in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--client-token (string)\n\nA unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\narn -> (string)\n\nThe ARN of the component version.\n\ncomponentName -> (string)\n\nThe name of the component.\n\ncomponentVersion -> (string)\n\nThe version of the component.\n\ncreationTimestamp -> (timestamp)\n\nThe time at which the component was created, expressed in ISO 8601 format.\n\nstatus -> (structure)\n\nThe status of the component version in IoT Greengrass V2. This status is different from the status of the component on a core device.\n\ncomponentState -> (string)\n\nThe state of the component.\n\nmessage -> (string)\n\nA message that communicates details, such as errors, about the status of the component.\n\nerrors -> (map)\n\nA dictionary of errors that communicate why the component is in an error state. For example, if IoT Greengrass can’t access an artifact for the component, then errors contains the artifact’s URI as a key, and the error message as the value for that key.\n\nkey -> (string)\n\nvalue -> (string)",
      "command_examples": "Examples\n\nExample 1: To create a component version from a recipe\n\nThe following create-component-version example creates a version of a Hello World component from a recipe file.\n\naws greengrassv2 create-component-version \\\n    --inline-recipe fileb://com.example.HelloWorld-1.0.0.json\n\n\nContents of com.example.HelloWorld-1.0.0.json:\n\n{\n    \"RecipeFormatVersion\": \"2020-01-25\",\n    \"ComponentName\": \"com.example.HelloWorld\",\n    \"ComponentVersion\": \"1.0.0\",\n    \"ComponentDescription\": \"My first AWS IoT Greengrass component.\",\n    \"ComponentPublisher\": \"Amazon\",\n    \"ComponentConfiguration\": {\n        \"DefaultConfiguration\": {\n            \"Message\": \"world\"\n        }\n    },\n    \"Manifests\": [\n        {\n            \"Platform\": {\n                \"os\": \"linux\"\n            },\n            \"Lifecycle\": {\n                \"Run\": \"echo 'Hello {configuration:/Message}'\"\n            }\n        }\n    ]\n}\n\n\nOutput:\n\n{\n    \"arn\": \"arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld:versions:1.0.0\",\n    \"componentName\": \"com.example.HelloWorld\",\n    \"componentVersion\": \"1.0.0\",\n    \"creationTimestamp\": \"2021-01-07T16:24:33.650000-08:00\",\n    \"status\": {\n        \"componentState\": \"REQUESTED\",\n        \"message\": \"NONE\",\n        \"errors\": {}\n    }\n}\n\n\nFor more information, see Create custom components and Upload components to deploy in the AWS IoT Greengrass V2 Developer Guide.\n\nExample 2: To create a component version from an AWS Lambda function\n\nThe following create-component-version example creates a version of a Hello World component from an AWS Lambda function.\n\naws greengrassv2 create-component-version \\\n    --cli-input-json file://lambda-function-component.json\n\n\nContents of lambda-function-component.json:\n\n{\n    \"lambdaFunction\": {\n        \"lambdaArn\": \"arn:aws:lambda:us-west-2:123456789012:function:HelloWorldPythonLambda:1\",\n        \"componentName\": \"com.example.HelloWorld\",\n        \"componentVersion\": \"1.0.0\",\n        \"componentLambdaParameters\": {\n            \"eventSources\": [\n                {\n                    \"topic\": \"hello/world/+\",\n                    \"type\": \"IOT_CORE\"\n                }\n            ]\n        }\n    }\n}\n\n\nOutput:\n\n{\n    \"arn\": \"arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld:versions:1.0.0\",\n    \"componentName\": \"com.example.HelloWorld\",\n    \"componentVersion\": \"1.0.0\",\n    \"creationTimestamp\": \"2021-01-07T17:05:27.347000-08:00\",\n    \"status\": {\n        \"componentState\": \"REQUESTED\",\n        \"message\": \"NONE\",\n        \"errors\": {}\n    }\n}\n\n\nFor more information, see Run AWS Lambda functions in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "create-deployment",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/create-deployment.html",
      "command_description": "Description\n\nCreates a continuous deployment for a target, which is a Greengrass core device or group of core devices. When you add a new core device to a group of core devices that has a deployment, IoT Greengrass deploys that group’s deployment to the new device.\n\nYou can define one deployment for each target. When you create a new deployment for a target that has an existing deployment, you replace the previous deployment. IoT Greengrass applies the new deployment to the target devices.\n\nEvery deployment has a revision number that indicates how many deployment revisions you define for a target. Use this operation to create a new revision of an existing deployment. This operation returns the revision number of the new deployment when you create it.\n\nFor more information, see the Create deployments in the IoT Greengrass V2 Developer Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-deployment\n--target-arn <value>\n[--deployment-name <value>]\n[--components <value>]\n[--iot-job-configuration <value>]\n[--deployment-policies <value>]\n[--tags <value>]\n[--client-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--target-arn <value>",
        "[--deployment-name <value>]",
        "[--components <value>]",
        "[--iot-job-configuration <value>]",
        "[--deployment-policies <value>]",
        "[--tags <value>]",
        "[--client-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--target-arn (string)\n\nThe ARN of the target IoT thing or thing group.\n\n--deployment-name (string)\n\nThe name of the deployment.\n\n--components (map)\n\nThe components to deploy. This is a dictionary, where each key is the name of a component, and each key’s value is the version and configuration to deploy for that component.\n\nkey -> (string)\n\nvalue -> (structure)\n\nContains information about a component to deploy.\n\ncomponentVersion -> (string)\n\nThe version of the component.\n\nconfigurationUpdate -> (structure)\n\nThe configuration updates to deploy for the component. You can define reset updates and merge updates. A reset updates the keys that you specify to the default configuration for the component. A merge updates the core device’s component configuration with the keys and values that you specify. The IoT Greengrass Core software applies reset updates before it applies merge updates. For more information, see Update component configurations in the IoT Greengrass V2 Developer Guide .\n\nmerge -> (string)\n\nA serialized JSON string that contains the configuration object to merge to target devices. The core device merges this configuration with the component’s existing configuration. If this is the first time a component deploys on a device, the core device merges this configuration with the component’s default configuration. This means that the core device keeps it’s existing configuration for keys and values that you don’t specify in this object. For more information, see Merge configuration updates in the IoT Greengrass V2 Developer Guide .\n\nreset -> (list)\n\nThe list of configuration nodes to reset to default values on target devices. Use JSON pointers to specify each node to reset. JSON pointers start with a forward slash (/ ) and use forward slashes to separate the key for each level in the object. For more information, see the JSON pointer specification and Reset configuration updates in the IoT Greengrass V2 Developer Guide .\n\n(string)\n\nrunWith -> (structure)\n\nThe system user and group that the IoT Greengrass Core software uses to run component processes on the core device. If you omit this parameter, the IoT Greengrass Core software uses the system user and group that you configure for the core device. For more information, see Configure the user and group that run components in the IoT Greengrass V2 Developer Guide .\n\nposixUser -> (string)\n\nThe POSIX system user and (optional) group to use to run this component. Specify the user and group separated by a colon (: ) in the following format: user:group . The group is optional. If you don’t specify a group, the IoT Greengrass Core software uses the primary user for the group.\n\nIf you omit this parameter, the IoT Greengrass Core software uses the default system user and group that you configure on the Greengrass nucleus component. For more information, see Configure the user and group that run components .\n\nsystemResourceLimits -> (structure)\n\nThe system resource limits to apply to this component’s process on the core device.\n\nIf you omit this parameter, the IoT Greengrass Core software uses the default system resource limits that you configure on the Greengrass nucleus component. For more information, see Configure system resource limits for components .\n\nmemory -> (long)\n\nThe maximum amount of RAM, expressed in kilobytes, that a component’s processes can use on the core device.\n\ncpus -> (double)\n\nThe maximum amount of CPU time that a component’s processes can use on the core device. A core device’s total CPU time is equivalent to the device’s number of CPU cores. For example, on a core device with 4 CPU cores, you can set this value to 2 to limit the component’s processes to 50 percent usage of each CPU core. On a device with 1 CPU core, you can set this value to 0.25 to limit the component’s processes to 25 percent usage of the CPU. If you set this value to a number greater than the number of CPU cores, the IoT Greengrass Core software doesn’t limit the component’s CPU usage.\n\nShorthand Syntax:\n\nKeyName1=componentVersion=string,configurationUpdate={merge=string,reset=[string,string]},runWith={posixUser=string,systemResourceLimits={memory=long,cpus=double}},KeyName2=componentVersion=string,configurationUpdate={merge=string,reset=[string,string]},runWith={posixUser=string,systemResourceLimits={memory=long,cpus=double}}\n\n\nJSON Syntax:\n\n{\"string\": {\n      \"componentVersion\": \"string\",\n      \"configurationUpdate\": {\n        \"merge\": \"string\",\n        \"reset\": [\"string\", ...]\n      },\n      \"runWith\": {\n        \"posixUser\": \"string\",\n        \"systemResourceLimits\": {\n          \"memory\": long,\n          \"cpus\": double\n        }\n      }\n    }\n  ...}\n\n\n--iot-job-configuration (structure)\n\nThe job configuration for the deployment configuration. The job configuration specifies the rollout, timeout, and stop configurations for the deployment configuration.\n\njobExecutionsRolloutConfig -> (structure)\n\nThe rollout configuration for the job. This configuration defines the rate at which the job rolls out to the fleet of target devices.\n\nexponentialRate -> (structure)\n\nThe exponential rate to increase the job rollout rate.\n\nbaseRatePerMinute -> (integer)\n\nThe minimum number of devices that receive a pending job notification, per minute, when the job starts. This parameter defines the initial rollout rate of the job.\n\nincrementFactor -> (double)\n\nThe exponential factor to increase the rollout rate for the job.\n\nThis parameter supports up to one digit after the decimal (for example, you can specify 1.5 , but not 1.55 ).\n\nrateIncreaseCriteria -> (structure)\n\nThe criteria to increase the rollout rate for the job.\n\nnumberOfNotifiedThings -> (integer)\n\nThe number of devices to receive the job notification before the rollout rate increases.\n\nnumberOfSucceededThings -> (integer)\n\nThe number of devices to successfully run the configuration job before the rollout rate increases.\n\nmaximumPerMinute -> (integer)\n\nThe maximum number of devices that receive a pending job notification, per minute.\n\nabortConfig -> (structure)\n\nThe stop configuration for the job. This configuration defines when and how to stop a job rollout.\n\ncriteriaList -> (list)\n\nThe list of criteria that define when and how to cancel the configuration deployment.\n\n(structure)\n\nContains criteria that define when and how to cancel a job.\n\nThe deployment stops if the following conditions are true:\n\nThe number of things that receive the deployment exceeds the minNumberOfExecutedThings .\n\nThe percentage of failures with type failureType exceeds the thresholdPercentage .\n\nfailureType -> (string)\n\nThe type of job deployment failure that can cancel a job.\n\naction -> (string)\n\nThe action to perform when the criteria are met.\n\nthresholdPercentage -> (double)\n\nThe minimum percentage of failureType failures that occur before the job can cancel.\n\nThis parameter supports up to two digits after the decimal (for example, you can specify 10.9 or 10.99 , but not 10.999 ).\n\nminNumberOfExecutedThings -> (integer)\n\nThe minimum number of things that receive the configuration before the job can cancel.\n\ntimeoutConfig -> (structure)\n\nThe timeout configuration for the job. This configuration defines the amount of time each device has to complete the job.\n\ninProgressTimeoutInMinutes -> (long)\n\nThe amount of time, in minutes, that devices have to complete the job. The timer starts when the job status is set to IN_PROGRESS . If the job status doesn’t change to a terminal state before the time expires, then the job status is set to TIMED_OUT .\n\nThe timeout interval must be between 1 minute and 7 days (10080 minutes).\n\nJSON Syntax:\n\n{\n  \"jobExecutionsRolloutConfig\": {\n    \"exponentialRate\": {\n      \"baseRatePerMinute\": integer,\n      \"incrementFactor\": double,\n      \"rateIncreaseCriteria\": {\n        \"numberOfNotifiedThings\": integer,\n        \"numberOfSucceededThings\": integer\n      }\n    },\n    \"maximumPerMinute\": integer\n  },\n  \"abortConfig\": {\n    \"criteriaList\": [\n      {\n        \"failureType\": \"FAILED\"|\"REJECTED\"|\"TIMED_OUT\"|\"ALL\",\n        \"action\": \"CANCEL\",\n        \"thresholdPercentage\": double,\n        \"minNumberOfExecutedThings\": integer\n      }\n      ...\n    ]\n  },\n  \"timeoutConfig\": {\n    \"inProgressTimeoutInMinutes\": long\n  }\n}\n\n\n--deployment-policies (structure)\n\nThe deployment policies for the deployment. These policies define how the deployment updates components and handles failure.\n\nfailureHandlingPolicy -> (string)\n\nThe failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.\n\nDefault: ROLLBACK\n\ncomponentUpdatePolicy -> (structure)\n\nThe component update policy for the configuration deployment. This policy defines when it’s safe to deploy the configuration to devices.\n\ntimeoutInSeconds -> (integer)\n\nThe amount of time in seconds that each component on a device has to report that it’s safe to update. If the component waits for longer than this timeout, then the deployment proceeds on the device.\n\nDefault: 60\n\naction -> (string)\n\nWhether or not to notify components and wait for components to become safe to update. Choose from the following options:\n\nNOTIFY_COMPONENTS – The deployment notifies each component before it stops and updates that component. Components can use the SubscribeToComponentUpdates IPC operation to receive these notifications. Then, components can respond with the DeferComponentUpdate IPC operation. For more information, see Create deployments in the IoT Greengrass V2 Developer Guide .\n\nSKIP_NOTIFY_COMPONENTS – The deployment doesn’t notify components or wait for them to be safe to update.\n\nDefault: NOTIFY_COMPONENTS\n\nconfigurationValidationPolicy -> (structure)\n\nThe configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.\n\ntimeoutInSeconds -> (integer)\n\nThe amount of time in seconds that a component can validate its configuration updates. If the validation time exceeds this timeout, then the deployment proceeds for the device.\n\nDefault: 30\n\nShorthand Syntax:\n\nfailureHandlingPolicy=string,componentUpdatePolicy={timeoutInSeconds=integer,action=string},configurationValidationPolicy={timeoutInSeconds=integer}\n\n\nJSON Syntax:\n\n{\n  \"failureHandlingPolicy\": \"ROLLBACK\"|\"DO_NOTHING\",\n  \"componentUpdatePolicy\": {\n    \"timeoutInSeconds\": integer,\n    \"action\": \"NOTIFY_COMPONENTS\"|\"SKIP_NOTIFY_COMPONENTS\"\n  },\n  \"configurationValidationPolicy\": {\n    \"timeoutInSeconds\": integer\n  }\n}\n\n\n--tags (map)\n\nA list of key-value pairs that contain metadata for the resource. For more information, see Tag your resources in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--client-token (string)\n\nA unique, case-sensitive identifier that you can provide to ensure that the request is idempotent. Idempotency means that the request is successfully processed only once, even if you send the request multiple times. When a request succeeds, and you specify the same client token for subsequent successful requests, the IoT Greengrass V2 service returns the successful response that it caches from the previous request. IoT Greengrass V2 caches successful responses for idempotent requests for up to 8 hours.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ndeploymentId -> (string)\n\nThe ID of the deployment.\n\niotJobId -> (string)\n\nThe ID of the IoT job that applies the deployment to target devices.\n\niotJobArn -> (string)\n\nThe ARN of the IoT job that applies the deployment to target devices.",
      "command_examples": "Examples\n\nExample 1: To create a deployment\n\nThe following create-deployment example deploys the AWS IoT Greengrass Command Line Interface to a core device.\n\naws greengrassv2 create-deployment \\\n    --cli-input-json file://cli-deployment.json\n\n\nContents of cli-deployment.json:\n\n{\n    \"targetArn\": \"arn:aws:iot:us-west-2:123456789012:thing/MyGreengrassCore\",\n    \"deploymentName\": \"Deployment for MyGreengrassCore\",\n    \"components\": {\n        \"aws.greengrass.Cli\": {\n            \"componentVersion\": \"2.0.3\"\n        }\n    },\n    \"deploymentPolicies\": {\n        \"failureHandlingPolicy\": \"DO_NOTHING\",\n        \"componentUpdatePolicy\": {\n            \"timeoutInSeconds\": 60,\n            \"action\": \"NOTIFY_COMPONENTS\"\n        },\n        \"configurationValidationPolicy\": {\n            \"timeoutInSeconds\": 60\n        }\n    },\n    \"iotJobConfiguration\": {}\n}\n\n\nOutput:\n\n{\n    \"deploymentId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\"\n}\n\n\nFor more information, see Create deployments in the AWS IoT Greengrass V2 Developer Guide.\n\nExample 2: To create a deployment that updates component configurations\n\nThe following create-deployment example deploys the AWS IoT Greengrass nucleus component to a group of core devices. This deployment applies the following configuration updates for the nucleus component:\n\nReset the target devices’ proxy settings to their default no proxy settings.\n\nReset the target devices’ MQTT settings to their defaults.\n\nSets the JVM options for the nucleus’ JVM.\n\nSets the logging level for the nucleus.\n\naws greengrassv2 create-deployment \\\n    --cli-input-json file://nucleus-deployment.json\n\n\nContents of nucleus-deployment.json:\n\n{\n    \"targetArn\": \"arn:aws:iot:us-west-2:123456789012:thinggroup/MyGreengrassCoreGroup\",\n    \"deploymentName\": \"Deployment for MyGreengrassCoreGroup\",\n    \"components\": {\n        \"aws.greengrass.Nucleus\": {\n            \"componentVersion\": \"2.0.3\",\n            \"configurationUpdate\": {\n                \"reset\": [\n                    \"/networkProxy\",\n                    \"/mqtt\"\n                ],\n                \"merge\": \"{\\\"jvmOptions\\\":\\\"-Xmx64m\\\",\\\"logging\\\":{\\\"level\\\":\\\"WARN\\\"}}\"\n            }\n        }\n    },\n    \"deploymentPolicies\": {\n        \"failureHandlingPolicy\": \"ROLLBACK\",\n        \"componentUpdatePolicy\": {\n            \"timeoutInSeconds\": 60,\n            \"action\": \"NOTIFY_COMPONENTS\"\n        },\n        \"configurationValidationPolicy\": {\n            \"timeoutInSeconds\": 60\n        }\n    },\n    \"iotJobConfiguration\": {}\n}\n\n\nOutput:\n\n{\n    \"deploymentId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n    \"iotJobId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE22222\",\n    \"iotJobArn\": \"arn:aws:iot:us-west-2:123456789012:job/a1b2c3d4-5678-90ab-cdef-EXAMPLE22222\"\n}\n\n\nFor more information, see Create deployments and Update component configurations in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "delete-component",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/delete-component.html",
      "command_description": "Description\n\nDeletes a version of a component from IoT Greengrass.\n\nNote\n\nThis operation deletes the component’s recipe and artifacts. As a result, deployments that refer to this component version will fail. If you have deployments that use this component version, you can remove the component from the deployment or update the deployment to use a valid version.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-component\n--arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--arn (string)\n\nThe ARN of the component version.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete a component version\n\nThe following delete-component example deletes a Hello World component.\n\naws greengrassv2 delete-component \\\n    --arn arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld:versions:1.0.0\n\n\nThis command produces no output.\n\nFor more information, see Manage components in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "delete-core-device",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/delete-core-device.html",
      "command_description": "Description\n\nDeletes a Greengrass core device, which is an IoT thing. This operation removes the core device from the list of core devices. This operation doesn’t delete the IoT thing. For more information about how to delete the IoT thing, see DeleteThing in the IoT API Reference .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-core-device\n--core-device-thing-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--core-device-thing-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--core-device-thing-name (string)\n\nThe name of the core device. This is also the name of the IoT thing.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete a core device\n\nThe following delete-core-device example deletes an AWS IoT Greengrass core device.\n\naws greengrassv2 delete-core-device \\\n    --core-device-thing-name MyGreengrassCore\n\n\nThis command produces no output.\n\nFor more information, see Uninstall the AWS IoT Greengrass Core software in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "describe-component",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/describe-component.html",
      "command_description": "Description\n\nRetrieves metadata for a version of a component.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-component\n--arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--arn (string)\n\nThe ARN of the component version.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\narn -> (string)\n\nThe ARN of the component version.\n\ncomponentName -> (string)\n\nThe name of the component.\n\ncomponentVersion -> (string)\n\nThe version of the component.\n\ncreationTimestamp -> (timestamp)\n\nThe time at which the component was created, expressed in ISO 8601 format.\n\npublisher -> (string)\n\nThe publisher of the component version.\n\ndescription -> (string)\n\nThe description of the component version.\n\nstatus -> (structure)\n\nThe status of the component version in IoT Greengrass V2. This status is different from the status of the component on a core device.\n\ncomponentState -> (string)\n\nThe state of the component.\n\nmessage -> (string)\n\nA message that communicates details, such as errors, about the status of the component.\n\nerrors -> (map)\n\nA dictionary of errors that communicate why the component is in an error state. For example, if IoT Greengrass can’t access an artifact for the component, then errors contains the artifact’s URI as a key, and the error message as the value for that key.\n\nkey -> (string)\n\nvalue -> (string)\n\nplatforms -> (list)\n\nThe platforms that the component version supports.\n\n(structure)\n\nContains information about a platform that a component supports.\n\nname -> (string)\n\nThe friendly name of the platform. This name helps you identify the platform.\n\nIf you omit this parameter, IoT Greengrass creates a friendly name from the os and architecture of the platform.\n\nattributes -> (map)\n\nA dictionary of attributes for the platform. The IoT Greengrass Core software defines the os and platform by default. You can specify additional platform attributes for a core device when you deploy the Greengrass nucleus component. For more information, see the Greengrass nucleus component in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\ntags -> (map)\n\nA list of key-value pairs that contain metadata for the resource. For more information, see Tag your resources in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)",
      "command_examples": "Examples\n\nTo describe a component version\n\nThe following describe-component example describes a Hello World component.\n\naws greengrassv2 describe-component \\\n    --arn arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld:versions:1.0.0\n\n\nOutput:\n\n{\n    \"arn\": \"arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld:versions:1.0.0\",\n    \"componentName\": \"com.example.HelloWorld\",\n    \"componentVersion\": \"1.0.0\",\n    \"creationTimestamp\": \"2021-01-07T17:12:11.133000-08:00\",\n    \"publisher\": \"Amazon\",\n    \"description\": \"My first AWS IoT Greengrass component.\",\n    \"status\": {\n        \"componentState\": \"DEPLOYABLE\",\n        \"message\": \"NONE\",\n        \"errors\": {}\n    },\n    \"platforms\": [\n        {\n            \"attributes\": {\n                \"os\": \"linux\"\n            }\n        }\n    ]\n}\n\n\nFor more information, see Manage components in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "get-component",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/get-component.html",
      "command_description": "Description\n\nGets the recipe for a version of a component. Core devices can call this operation to identify the artifacts and requirements to install a component.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-component\n[--recipe-output-format <value>]\n--arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--recipe-output-format <value>]",
        "--arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--recipe-output-format (string)\n\nThe format of the recipe.\n\nPossible values:\n\nJSON\n\nYAML\n\n--arn (string)\n\nThe ARN of the component version.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nrecipeOutputFormat -> (string)\n\nThe format of the recipe.\n\nrecipe -> (blob)\n\nThe recipe of the component version.\n\ntags -> (map)\n\nA list of key-value pairs that contain metadata for the resource. For more information, see Tag your resources in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)",
      "command_examples": "Examples\n\nExample 1: To download a component’s recipe in YAML format (Linux, macOS, or Unix)\n\nThe following get-component example downloads a Hello World component’s recipe to a file in YAML format. This command does the following:\n\nUses the --output and --query parameters to control the command’s output. These parameters extract the recipe blob from the command’s output. For more information about controlling output, see Controlling Command Output in the AWS Command Line Interface User Guide.\n\nUses the base64 utility. This utility decodes the extracted blob to the original text. The blob that is returned by a successful get-component command is base64-encoded text. You must decode this blob to obtain the original text.\n\nSaves the decoded text to a file. The final section of the command (> com.example.HelloWorld-1.0.0.json) saves the decoded text to a file.\n\naws greengrassv2 get-component \\\n    --arn arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld:versions:1.0.0 \\\n    --recipe-output-format YAML \\\n    --query recipe \\\n    --output text | base64 --decode > com.example.HelloWorld-1.0.0.json\n\n\nFor more information, see Manage components in the AWS IoT Greengrass V2 Developer Guide.\n\nExample 2: To download a component’s recipe in YAML format (Windows CMD)\n\nThe following get-component example downloads a Hello World component’s recipe to a file in YAML format. This command uses the certutil utility.\n\naws greengrassv2 get-component ^\n    --arn arn:aws:greengrass:us-west-2:675946970638:components:com.example.HelloWorld:versions:1.0.0 ^\n    --recipe-output-format YAML ^\n    --query recipe ^\n    --output text > com.example.HelloWorld-1.0.0.yaml.b64\n\ncertutil -decode com.example.HelloWorld-1.0.0.yaml.b64 com.example.HelloWorld-1.0.0.yaml\n\n\nFor more information, see Manage components in the AWS IoT Greengrass V2 Developer Guide.\n\nExample 3: To download a component’s recipe in YAML format (Windows PowerShell)\n\nThe following get-component example downloads a Hello World component’s recipe to a file in YAML format. This command uses the certutil utility.\n\naws greengrassv2 get-component `\n    --arn arn:aws:greengrass:us-west-2:675946970638:components:com.example.HelloWorld:versions:1.0.0 `\n    --recipe-output-format YAML `\n    --query recipe `\n    --output text > com.example.HelloWorld-1.0.0.yaml.b64\n\ncertutil -decode com.example.HelloWorld-1.0.0.yaml.b64 com.example.HelloWorld-1.0.0.yaml\n\n\nFor more information, see Manage components in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "get-component-version-artifact",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/get-component-version-artifact.html",
      "command_description": "Description\n\nGets the pre-signed URL to download a public component artifact. Core devices call this operation to identify the URL that they can use to download an artifact to install.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-component-version-artifact\n--arn <value>\n--artifact-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--arn <value>",
        "--artifact-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--arn (string)\n\nThe ARN of the component version. Specify the ARN of a public component version.\n\n--artifact-name (string)\n\nThe name of the artifact.\n\nYou can use the GetComponent operation to download the component recipe, which includes the URI of the artifact. The artifact name is the section of the URI after the scheme. For example, in the artifact URI greengrass:SomeArtifact.zip , the artifact name is SomeArtifact.zip .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npreSignedUrl -> (string)\n\nThe URL of the artifact.",
      "command_examples": "Examples\n\nTo get a URL to download a component artifact\n\nThe following get-component-version-artifact example gets a URL to download the local debug console component’s JAR file.\n\naws greengrassv2 get-component-version-artifact \\\n    --arn arn:aws:greengrass:us-west-2:aws:components:aws.greengrass.LocalDebugConsole:versions:2.0.3 \\\n    --artifact-name \"Uvt6ZEzQ9TKiAuLbfXBX_APdY0TWks3uc46tHFHTzBM=/aws.greengrass.LocalDebugConsole.jar\"\n\n\nOutput:\n\n{\n    \"preSignedUrl\": \"https://evergreencomponentmanageme-artifactbucket7410c9ef-g18n1iya8kwr.s3.us-west-2.amazonaws.com/public/aws.greengrass.LocalDebugConsole/2.0.3/s3/ggv2-component-releases-prod-pdx/EvergreenHttpDebugView/2ffc496ba41b39568968b22c582b4714a937193ee7687a45527238e696672521/aws.greengrass.LocalDebugConsole/aws.greengrass.LocalDebugConsole.jar?X-Amz-Security-Token=KwfLKSdEXAMPLE...\"\n}\n\n\nFor more information, see Manage components in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "get-core-device",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/get-core-device.html",
      "command_description": "Description\n\nRetrieves metadata for a Greengrass core device.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-core-device\n--core-device-thing-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--core-device-thing-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--core-device-thing-name (string)\n\nThe name of the core device. This is also the name of the IoT thing.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncoreDeviceThingName -> (string)\n\nThe name of the core device. This is also the name of the IoT thing.\n\ncoreVersion -> (string)\n\nThe version of the IoT Greengrass Core software that the core device runs. This version is equivalent to the version of the Greengrass nucleus component that runs on the core device. For more information, see the Greengrass nucleus component in the IoT Greengrass V2 Developer Guide .\n\nplatform -> (string)\n\nThe operating system platform that the core device runs.\n\narchitecture -> (string)\n\nThe computer architecture of the core device.\n\nstatus -> (string)\n\nThe status of the core device. The core device status can be:\n\nHEALTHY – The IoT Greengrass Core software and all components run on the core device without issue.\n\nUNHEALTHY – The IoT Greengrass Core software or a component is in a failed state on the core device.\n\nlastStatusUpdateTimestamp -> (timestamp)\n\nThe time at which the core device’s status last updated, expressed in ISO 8601 format.\n\ntags -> (map)\n\nA list of key-value pairs that contain metadata for the resource. For more information, see Tag your resources in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)",
      "command_examples": "Examples\n\nTo get a core device\n\nThe following get-core-device example gets information about an AWS IoT Greengrass core device.\n\naws greengrassv2 get-core-device \\\n    --core-device-thing-name MyGreengrassCore\n\n\nOutput:\n\n{\n    \"coreDeviceThingName\": \"MyGreengrassCore\",\n    \"coreVersion\": \"2.0.3\",\n    \"platform\": \"linux\",\n    \"architecture\": \"amd64\",\n    \"status\": \"HEALTHY\",\n    \"lastStatusUpdateTimestamp\": \"2021-01-08T04:57:58.838000-08:00\",\n    \"tags\": {}\n}\n\n\nFor more information, see Check core device status in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "get-deployment",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/get-deployment.html",
      "command_description": "Description\n\nGets a deployment. Deployments define the components that run on Greengrass core devices.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-deployment\n--deployment-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--deployment-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--deployment-id (string)\n\nThe ID of the deployment.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ntargetArn -> (string)\n\nThe ARN of the target IoT thing or thing group.\n\nrevisionId -> (string)\n\nThe revision number of the deployment.\n\ndeploymentId -> (string)\n\nThe ID of the deployment.\n\ndeploymentName -> (string)\n\nThe name of the deployment.\n\ndeploymentStatus -> (string)\n\nThe status of the deployment.\n\niotJobId -> (string)\n\nThe ID of the IoT job that applies the deployment to target devices.\n\niotJobArn -> (string)\n\nThe ARN of the IoT job that applies the deployment to target devices.\n\ncomponents -> (map)\n\nThe components to deploy. This is a dictionary, where each key is the name of a component, and each key’s value is the version and configuration to deploy for that component.\n\nkey -> (string)\n\nvalue -> (structure)\n\nContains information about a component to deploy.\n\ncomponentVersion -> (string)\n\nThe version of the component.\n\nconfigurationUpdate -> (structure)\n\nThe configuration updates to deploy for the component. You can define reset updates and merge updates. A reset updates the keys that you specify to the default configuration for the component. A merge updates the core device’s component configuration with the keys and values that you specify. The IoT Greengrass Core software applies reset updates before it applies merge updates. For more information, see Update component configurations in the IoT Greengrass V2 Developer Guide .\n\nmerge -> (string)\n\nA serialized JSON string that contains the configuration object to merge to target devices. The core device merges this configuration with the component’s existing configuration. If this is the first time a component deploys on a device, the core device merges this configuration with the component’s default configuration. This means that the core device keeps it’s existing configuration for keys and values that you don’t specify in this object. For more information, see Merge configuration updates in the IoT Greengrass V2 Developer Guide .\n\nreset -> (list)\n\nThe list of configuration nodes to reset to default values on target devices. Use JSON pointers to specify each node to reset. JSON pointers start with a forward slash (/ ) and use forward slashes to separate the key for each level in the object. For more information, see the JSON pointer specification and Reset configuration updates in the IoT Greengrass V2 Developer Guide .\n\n(string)\n\nrunWith -> (structure)\n\nThe system user and group that the IoT Greengrass Core software uses to run component processes on the core device. If you omit this parameter, the IoT Greengrass Core software uses the system user and group that you configure for the core device. For more information, see Configure the user and group that run components in the IoT Greengrass V2 Developer Guide .\n\nposixUser -> (string)\n\nThe POSIX system user and (optional) group to use to run this component. Specify the user and group separated by a colon (: ) in the following format: user:group . The group is optional. If you don’t specify a group, the IoT Greengrass Core software uses the primary user for the group.\n\nIf you omit this parameter, the IoT Greengrass Core software uses the default system user and group that you configure on the Greengrass nucleus component. For more information, see Configure the user and group that run components .\n\nsystemResourceLimits -> (structure)\n\nThe system resource limits to apply to this component’s process on the core device.\n\nIf you omit this parameter, the IoT Greengrass Core software uses the default system resource limits that you configure on the Greengrass nucleus component. For more information, see Configure system resource limits for components .\n\nmemory -> (long)\n\nThe maximum amount of RAM, expressed in kilobytes, that a component’s processes can use on the core device.\n\ncpus -> (double)\n\nThe maximum amount of CPU time that a component’s processes can use on the core device. A core device’s total CPU time is equivalent to the device’s number of CPU cores. For example, on a core device with 4 CPU cores, you can set this value to 2 to limit the component’s processes to 50 percent usage of each CPU core. On a device with 1 CPU core, you can set this value to 0.25 to limit the component’s processes to 25 percent usage of the CPU. If you set this value to a number greater than the number of CPU cores, the IoT Greengrass Core software doesn’t limit the component’s CPU usage.\n\ndeploymentPolicies -> (structure)\n\nThe deployment policies for the deployment. These policies define how the deployment updates components and handles failure.\n\nfailureHandlingPolicy -> (string)\n\nThe failure handling policy for the configuration deployment. This policy defines what to do if the deployment fails.\n\nDefault: ROLLBACK\n\ncomponentUpdatePolicy -> (structure)\n\nThe component update policy for the configuration deployment. This policy defines when it’s safe to deploy the configuration to devices.\n\ntimeoutInSeconds -> (integer)\n\nThe amount of time in seconds that each component on a device has to report that it’s safe to update. If the component waits for longer than this timeout, then the deployment proceeds on the device.\n\nDefault: 60\n\naction -> (string)\n\nWhether or not to notify components and wait for components to become safe to update. Choose from the following options:\n\nNOTIFY_COMPONENTS – The deployment notifies each component before it stops and updates that component. Components can use the SubscribeToComponentUpdates IPC operation to receive these notifications. Then, components can respond with the DeferComponentUpdate IPC operation. For more information, see Create deployments in the IoT Greengrass V2 Developer Guide .\n\nSKIP_NOTIFY_COMPONENTS – The deployment doesn’t notify components or wait for them to be safe to update.\n\nDefault: NOTIFY_COMPONENTS\n\nconfigurationValidationPolicy -> (structure)\n\nThe configuration validation policy for the configuration deployment. This policy defines how long each component has to validate its configure updates.\n\ntimeoutInSeconds -> (integer)\n\nThe amount of time in seconds that a component can validate its configuration updates. If the validation time exceeds this timeout, then the deployment proceeds for the device.\n\nDefault: 30\n\niotJobConfiguration -> (structure)\n\nThe job configuration for the deployment configuration. The job configuration specifies the rollout, timeout, and stop configurations for the deployment configuration.\n\njobExecutionsRolloutConfig -> (structure)\n\nThe rollout configuration for the job. This configuration defines the rate at which the job rolls out to the fleet of target devices.\n\nexponentialRate -> (structure)\n\nThe exponential rate to increase the job rollout rate.\n\nbaseRatePerMinute -> (integer)\n\nThe minimum number of devices that receive a pending job notification, per minute, when the job starts. This parameter defines the initial rollout rate of the job.\n\nincrementFactor -> (double)\n\nThe exponential factor to increase the rollout rate for the job.\n\nThis parameter supports up to one digit after the decimal (for example, you can specify 1.5 , but not 1.55 ).\n\nrateIncreaseCriteria -> (structure)\n\nThe criteria to increase the rollout rate for the job.\n\nnumberOfNotifiedThings -> (integer)\n\nThe number of devices to receive the job notification before the rollout rate increases.\n\nnumberOfSucceededThings -> (integer)\n\nThe number of devices to successfully run the configuration job before the rollout rate increases.\n\nmaximumPerMinute -> (integer)\n\nThe maximum number of devices that receive a pending job notification, per minute.\n\nabortConfig -> (structure)\n\nThe stop configuration for the job. This configuration defines when and how to stop a job rollout.\n\ncriteriaList -> (list)\n\nThe list of criteria that define when and how to cancel the configuration deployment.\n\n(structure)\n\nContains criteria that define when and how to cancel a job.\n\nThe deployment stops if the following conditions are true:\n\nThe number of things that receive the deployment exceeds the minNumberOfExecutedThings .\n\nThe percentage of failures with type failureType exceeds the thresholdPercentage .\n\nfailureType -> (string)\n\nThe type of job deployment failure that can cancel a job.\n\naction -> (string)\n\nThe action to perform when the criteria are met.\n\nthresholdPercentage -> (double)\n\nThe minimum percentage of failureType failures that occur before the job can cancel.\n\nThis parameter supports up to two digits after the decimal (for example, you can specify 10.9 or 10.99 , but not 10.999 ).\n\nminNumberOfExecutedThings -> (integer)\n\nThe minimum number of things that receive the configuration before the job can cancel.\n\ntimeoutConfig -> (structure)\n\nThe timeout configuration for the job. This configuration defines the amount of time each device has to complete the job.\n\ninProgressTimeoutInMinutes -> (long)\n\nThe amount of time, in minutes, that devices have to complete the job. The timer starts when the job status is set to IN_PROGRESS . If the job status doesn’t change to a terminal state before the time expires, then the job status is set to TIMED_OUT .\n\nThe timeout interval must be between 1 minute and 7 days (10080 minutes).\n\ncreationTimestamp -> (timestamp)\n\nThe time at which the deployment was created, expressed in ISO 8601 format.\n\nisLatestForTarget -> (boolean)\n\nWhether or not the deployment is the latest revision for its target.\n\ntags -> (map)\n\nA list of key-value pairs that contain metadata for the resource. For more information, see Tag your resources in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)",
      "command_examples": "Examples\n\nTo get a deployment\n\nThe following get-deployment example gets information about the deployment of the AWS IoT Greengrass nucleus component to a group of core devices.\n\naws greengrassv2 get-deployment \\\n    --deployment-id a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\n\n\nOutput:\n\n{\n    \"targetArn\": \"arn:aws:iot:us-west-2:123456789012:thinggroup/MyGreengrassCoreGroup\",\n    \"revisionId\": \"14\",\n    \"deploymentId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n    \"deploymentName\": \"Deployment for MyGreengrassCoreGroup\",\n    \"deploymentStatus\": \"ACTIVE\",\n    \"iotJobId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE22222\",\n    \"iotJobArn\": \"arn:aws:iot:us-west-2:123456789012:job/a1b2c3d4-5678-90ab-cdef-EXAMPLE22222\",\n    \"components\": {\n        \"aws.greengrass.Nucleus\": {\n            \"componentVersion\": \"2.0.3\",\n            \"configurationUpdate\": {\n                \"merge\": \"{\\\"jvmOptions\\\":\\\"-Xmx64m\\\",\\\"logging\\\":{\\\"level\\\":\\\"WARN\\\"}}\",\n                \"reset\": [\n                    \"/networkProxy\",\n                    \"/mqtt\"\n                ]\n            }\n        }\n    },\n    \"deploymentPolicies\": {\n        \"failureHandlingPolicy\": \"ROLLBACK\",\n        \"componentUpdatePolicy\": {\n            \"timeoutInSeconds\": 60,\n            \"action\": \"NOTIFY_COMPONENTS\"\n        },\n        \"configurationValidationPolicy\": {\n            \"timeoutInSeconds\": 60\n        }\n    },\n    \"iotJobConfiguration\": {},\n    \"creationTimestamp\": \"2021-01-07T17:21:20.691000-08:00\",\n    \"isLatestForTarget\": false,\n    \"tags\": {}\n}\n\n\nFor more information, see Deploy components to devices in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "list-client-devices-associated-with-core-device",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/list-client-devices-associated-with-core-device.html",
      "command_description": "Description\n\nRetrieves a paginated list of client devices that are associated with a core device.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-client-devices-associated-with-core-device is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: associatedClientDevices",
      "command_synopsis": "Synopsis\n  list-client-devices-associated-with-core-device\n--core-device-thing-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--core-device-thing-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--core-device-thing-name (string)\n\nThe name of the core device. This is also the name of the IoT thing.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nassociatedClientDevices -> (list)\n\nA list that describes the client devices that are associated with the core device.\n\n(structure)\n\nContains information about a client device that is associated to a core device for cloud discovery.\n\nthingName -> (string)\n\nThe name of the IoT thing that represents the associated client device.\n\nassociationTimestamp -> (timestamp)\n\nThe time that the client device was associated, expressed in ISO 8601 format.\n\nnextToken -> (string)\n\nThe token for the next set of results, or null if there are no additional results.",
      "command_examples": "Examples\n\nTo list the client devices associated with a core device\n\nThe following list-client-devices-associated-with-core-device example lists all client devices associated with a core device.\n\naws greengrassv2 list-client-devices-associated-with-core-device \\\n  --core-device-thing-name MyTestGreengrassCore\n\n\nOutput:\n\n{\n    \"associatedClientDevices\": [\n        {\n            \"thingName\": \"MyClientDevice2\",\n            \"associationTimestamp\": \"2021-07-12T16:33:55.843000-07:00\"\n        },\n        {\n            \"thingName\": \"MyClientDevice1\",\n            \"associationTimestamp\": \"2021-07-12T16:33:55.843000-07:00\"\n        }\n    ]\n}\n\n\nFor more information, see Interact with local IoT devices in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "list-component-versions",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/list-component-versions.html",
      "command_description": "Description\n\nRetrieves a paginated list of all versions for a component. Greater versions are listed first.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-component-versions is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: componentVersions",
      "command_synopsis": "Synopsis\n  list-component-versions\n--arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--arn (string)\n\nThe ARN of the component version.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncomponentVersions -> (list)\n\nA list of versions that exist for the component.\n\n(structure)\n\nContains information about a component version in a list.\n\ncomponentName -> (string)\n\nThe name of the component.\n\ncomponentVersion -> (string)\n\nThe version of the component.\n\narn -> (string)\n\nThe ARN of the component version.\n\nnextToken -> (string)\n\nThe token for the next set of results, or null if there are no additional results.",
      "command_examples": "Examples\n\nTo list the versions of a component\n\nThe following list-component-versions example lists all versions of a Hello World component.\n\naws greengrassv2 list-component-versions \\\n    --arn arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld\n\n\nOutput:\n\n{\n    \"componentVersions\": [\n        {\n            \"componentName\": \"com.example.HelloWorld\",\n            \"componentVersion\": \"1.0.1\",\n            \"arn\": \"arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld:versions:1.0.1\"\n        },\n        {\n            \"componentName\": \"com.example.HelloWorld\",\n            \"componentVersion\": \"1.0.0\",\n            \"arn\": \"arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld:versions:1.0.0\"\n        }\n    ]\n}\n\n\nFor more information, see Manage components in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "list-components",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/list-components.html",
      "command_description": "Description\n\nRetrieves a paginated list of component summaries. This list includes components that you have permission to view.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-components is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: components",
      "command_synopsis": "Synopsis\n  list-components\n[--scope <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--scope <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--scope (string)\n\nThe scope of the components to list.\n\nDefault: PRIVATE\n\nPossible values:\n\nPRIVATE\n\nPUBLIC\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncomponents -> (list)\n\nA list that summarizes each component.\n\n(structure)\n\nContains information about a component.\n\narn -> (string)\n\nThe ARN of the component version.\n\ncomponentName -> (string)\n\nThe name of the component.\n\nlatestVersion -> (structure)\n\nThe latest version of the component and its details.\n\narn -> (string)\n\nThe ARN of the component version.\n\ncomponentVersion -> (string)\n\nThe version of the component.\n\ncreationTimestamp -> (timestamp)\n\nThe time at which the component was created, expressed in ISO 8601 format.\n\ndescription -> (string)\n\nThe description of the component version.\n\npublisher -> (string)\n\nThe publisher of the component version.\n\nplatforms -> (list)\n\nThe platforms that the component version supports.\n\n(structure)\n\nContains information about a platform that a component supports.\n\nname -> (string)\n\nThe friendly name of the platform. This name helps you identify the platform.\n\nIf you omit this parameter, IoT Greengrass creates a friendly name from the os and architecture of the platform.\n\nattributes -> (map)\n\nA dictionary of attributes for the platform. The IoT Greengrass Core software defines the os and platform by default. You can specify additional platform attributes for a core device when you deploy the Greengrass nucleus component. For more information, see the Greengrass nucleus component in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nnextToken -> (string)\n\nThe token for the next set of results, or null if there are no additional results.",
      "command_examples": "Examples\n\nTo list components\n\nThe following list-components example lists each component and its latest version defined in your AWS account in the current Region.\n\naws greengrassv2 list-components\n\n\nOutput:\n\n{\n    \"components\": [\n        {\n            \"arn\": \"arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld\",\n            \"componentName\": \"com.example.HelloWorld\",\n            \"latestVersion\": {\n                \"arn\": \"arn:aws:greengrass:us-west-2:123456789012:components:com.example.HelloWorld:versions:1.0.1\",\n                \"componentVersion\": \"1.0.1\",\n                \"creationTimestamp\": \"2021-01-08T16:51:07.352000-08:00\",\n                \"description\": \"My first AWS IoT Greengrass component.\",\n                \"publisher\": \"Amazon\",\n                \"platforms\": [\n                    {\n                        \"attributes\": {\n                            \"os\": \"linux\"\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}\n\n\nFor more information, see Manage components in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "list-core-devices",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/list-core-devices.html",
      "command_description": "Description\n\nRetrieves a paginated list of Greengrass core devices.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-core-devices is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: coreDevices",
      "command_synopsis": "Synopsis\n  list-core-devices\n[--thing-group-arn <value>]\n[--status <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--thing-group-arn <value>]",
        "[--status <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--thing-group-arn (string)\n\nThe ARN of the IoT thing group by which to filter. If you specify this parameter, the list includes only core devices that are members of this thing group.\n\n--status (string)\n\nThe core device status by which to filter. If you specify this parameter, the list includes only core devices that have this status. Choose one of the following options:\n\nHEALTHY – The IoT Greengrass Core software and all components run on the core device without issue.\n\nUNHEALTHY – The IoT Greengrass Core software or a component is in a failed state on the core device.\n\nPossible values:\n\nHEALTHY\n\nUNHEALTHY\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncoreDevices -> (list)\n\nA list that summarizes each core device.\n\n(structure)\n\nContains information about a Greengrass core device, which is an IoT thing that runs the IoT Greengrass Core software.\n\ncoreDeviceThingName -> (string)\n\nThe name of the core device. This is also the name of the IoT thing.\n\nstatus -> (string)\n\nThe status of the core device. Core devices can have the following statuses:\n\nHEALTHY – The IoT Greengrass Core software and all components run on the core device without issue.\n\nUNHEALTHY – The IoT Greengrass Core software or a component is in a failed state on the core device.\n\nlastStatusUpdateTimestamp -> (timestamp)\n\nThe time at which the core device’s status last updated, expressed in ISO 8601 format.\n\nnextToken -> (string)\n\nThe token for the next set of results, or null if there are no additional results.",
      "command_examples": "Examples\n\nTo list core devices\n\nThe following list-core-devices example lists the AWS IoT Greengrass core devices in your AWS account in the current Region.\n\naws greengrassv2 list-core-devices\n\n\nOutput:\n\n{\n    \"coreDevices\": [\n        {\n            \"coreDeviceThingName\": \"MyGreengrassCore\",\n            \"status\": \"HEALTHY\",\n            \"lastStatusUpdateTimestamp\": \"2021-01-08T04:57:58.838000-08:00\"\n        }\n    ]\n}\n\n\nFor more information, see Check core device status in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "list-deployments",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/list-deployments.html",
      "command_description": "Description\n\nRetrieves a paginated list of deployments.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-deployments is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: deployments",
      "command_synopsis": "Synopsis\n  list-deployments\n[--target-arn <value>]\n[--history-filter <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--target-arn <value>]",
        "[--history-filter <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--target-arn (string)\n\nThe ARN of the target IoT thing or thing group.\n\n--history-filter (string)\n\nThe filter for the list of deployments. Choose one of the following options:\n\nALL – The list includes all deployments.\n\nLATEST_ONLY – The list includes only the latest revision of each deployment.\n\nDefault: LATEST_ONLY\n\nPossible values:\n\nALL\n\nLATEST_ONLY\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ndeployments -> (list)\n\nA list that summarizes each deployment.\n\n(structure)\n\nContains information about a deployment.\n\ntargetArn -> (string)\n\nThe ARN of the target IoT thing or thing group.\n\nrevisionId -> (string)\n\nThe revision number of the deployment.\n\ndeploymentId -> (string)\n\nThe ID of the deployment.\n\ndeploymentName -> (string)\n\nThe name of the deployment.\n\ncreationTimestamp -> (timestamp)\n\nThe time at which the deployment was created, expressed in ISO 8601 format.\n\ndeploymentStatus -> (string)\n\nThe status of the deployment.\n\nisLatestForTarget -> (boolean)\n\nWhether or not the deployment is the latest revision for its target.\n\nnextToken -> (string)\n\nThe token for the next set of results, or null if there are no additional results.",
      "command_examples": "Examples\n\nTo list deployments\n\nThe following list-deployments example lists the latest revision of each deployment defined in your AWS account in the current Region.\n\naws greengrassv2 list-deployments\n\n\nOutput:\n\n{\n    \"deployments\": [\n        {\n            \"targetArn\": \"arn:aws:iot:us-west-2:123456789012:thinggroup/MyGreengrassCoreGroup\",\n            \"revisionId\": \"14\",\n            \"deploymentId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n            \"deploymentName\": \"Deployment for MyGreengrassCoreGroup\",\n            \"creationTimestamp\": \"2021-01-07T17:21:20.691000-08:00\",\n            \"deploymentStatus\": \"ACTIVE\",\n            \"isLatestForTarget\": false\n        },\n        {\n            \"targetArn\": \"arn:aws:iot:us-west-2:123456789012:thing/MyGreengrassCore\",\n            \"revisionId\": \"1\",\n            \"deploymentId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE22222\",\n            \"deploymentName\": \"Deployment for MyGreengrassCore\",\n            \"creationTimestamp\": \"2021-01-06T16:10:42.407000-08:00\",\n            \"deploymentStatus\": \"COMPLETED\",\n            \"isLatestForTarget\": false\n        }\n    ]\n}\n\n\nFor more information, see Deploy components to devices in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "list-effective-deployments",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/list-effective-deployments.html",
      "command_description": "Description\n\nRetrieves a paginated list of deployment jobs that IoT Greengrass sends to Greengrass core devices.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-effective-deployments is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: effectiveDeployments",
      "command_synopsis": "Synopsis\n  list-effective-deployments\n--core-device-thing-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--core-device-thing-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--core-device-thing-name (string)\n\nThe name of the core device. This is also the name of the IoT thing.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\neffectiveDeployments -> (list)\n\nA list that summarizes each deployment on the core device.\n\n(structure)\n\nContains information about a deployment job that IoT Greengrass sends to a Greengrass core device.\n\ndeploymentId -> (string)\n\nThe ID of the deployment.\n\ndeploymentName -> (string)\n\nThe name of the deployment.\n\niotJobId -> (string)\n\nThe ID of the IoT job that applies the deployment to target devices.\n\niotJobArn -> (string)\n\nThe ARN of the IoT job that applies the deployment to target devices.\n\ndescription -> (string)\n\nThe description of the deployment job.\n\ntargetArn -> (string)\n\nThe ARN of the target IoT thing or thing group.\n\ncoreDeviceExecutionStatus -> (string)\n\nThe status of the deployment job on the Greengrass core device.\n\nreason -> (string)\n\nThe reason code for the update, if the job was updated.\n\ncreationTimestamp -> (timestamp)\n\nThe time at which the deployment was created, expressed in ISO 8601 format.\n\nmodifiedTimestamp -> (timestamp)\n\nThe time at which the deployment job was last modified, expressed in ISO 8601 format.\n\nnextToken -> (string)\n\nThe token for the next set of results, or null if there are no additional results.",
      "command_examples": "Examples\n\nTo list deployment jobs\n\nThe following list-effective-deployments example lists the deployments that apply to an AWS IoT Greengrass core device.\n\naws greengrassv2 list-effective-deployments \\\n    --core-device-thing-name MyGreengrassCore\n\n\nOutput:\n\n{\n    \"effectiveDeployments\": [\n        {\n            \"deploymentId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE11111\",\n            \"deploymentName\": \"Deployment for MyGreengrassCore\",\n            \"iotJobId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE33333\",\n            \"targetArn\": \"arn:aws:iot:us-west-2:123456789012:thing/MyGreengrassCore\",\n            \"coreDeviceExecutionStatus\": \"COMPLETED\",\n            \"reason\": \"SUCCESSFUL\",\n            \"creationTimestamp\": \"2021-01-06T16:10:42.442000-08:00\",\n            \"modifiedTimestamp\": \"2021-01-08T17:21:27.830000-08:00\"\n        },\n        {\n            \"deploymentId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE22222\",\n            \"deploymentName\": \"Deployment for MyGreengrassCoreGroup\",\n            \"iotJobId\": \"a1b2c3d4-5678-90ab-cdef-EXAMPLE44444\",\n            \"iotJobArn\": \"arn:aws:iot:us-west-2:123456789012:job/a1b2c3d4-5678-90ab-cdef-EXAMPLE44444\",\n            \"targetArn\": \"arn:aws:iot:us-west-2:123456789012:thinggroup/MyGreengrassCoreGroup\",\n            \"coreDeviceExecutionStatus\": \"SUCCEEDED\",\n            \"reason\": \"SUCCESSFUL\",\n            \"creationTimestamp\": \"2021-01-07T17:19:20.394000-08:00\",\n            \"modifiedTimestamp\": \"2021-01-07T17:21:20.721000-08:00\"\n        }\n    ]\n}\n\n\nFor more information, see Check core device status in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "list-installed-components",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/list-installed-components.html",
      "command_description": "Description\n\nRetrieves a paginated list of the components that a Greengrass core device runs.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-installed-components is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: installedComponents",
      "command_synopsis": "Synopsis\n  list-installed-components\n--core-device-thing-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--core-device-thing-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--core-device-thing-name (string)\n\nThe name of the core device. This is also the name of the IoT thing.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ninstalledComponents -> (list)\n\nA list that summarizes each component on the core device.\n\n(structure)\n\nContains information about a component on a Greengrass core device.\n\ncomponentName -> (string)\n\nThe name of the component.\n\ncomponentVersion -> (string)\n\nThe version of the component.\n\nlifecycleState -> (string)\n\nThe lifecycle state of the component.\n\nlifecycleStateDetails -> (string)\n\nThe details about the lifecycle state of the component.\n\nisRoot -> (boolean)\n\nWhether or not the component is a root component.\n\nnextToken -> (string)\n\nThe token for the next set of results, or null if there are no additional results.",
      "command_examples": "Examples\n\nTo list components installed on a core device\n\nThe following list-installed-components example lists the components that are installed on an AWS IoT Greengrass core device.\n\naws greengrassv2 list-installed-components \\\n    --core-device-thing-name MyGreengrassCore\n\n\nOutput:\n\n{\n    \"installedComponents\": [\n        {\n            \"componentName\": \"aws.greengrass.Cli\",\n            \"componentVersion\": \"2.0.3\",\n            \"lifecycleState\": \"RUNNING\",\n            \"isRoot\": true\n        },\n        {\n            \"componentName\": \"aws.greengrass.Nucleus\",\n            \"componentVersion\": \"2.0.3\",\n            \"lifecycleState\": \"FINISHED\",\n            \"isRoot\": true\n        }\n    ]\n}\n\n\nFor more information, see Check core device status in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "list-tags-for-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/list-tags-for-resource.html",
      "command_description": "Description\n\nRetrieves the list of tags for an IoT Greengrass resource.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-tags-for-resource\n--resource-arn <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe ARN of the resource.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ntags -> (map)\n\nA list of key-value pairs that contain metadata for the resource. For more information, see Tag your resources in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)",
      "command_examples": "Examples\n\nTo list tags for a resource\n\nThe following list-tags-for-resource example lists all tags for an AWS IoT Greengrass core device.\n\naws greengrassv2 list-tags-for-resource \\\n    --resource-arn arn:aws:greengrass:us-west-2:123456789012:coreDevices:MyGreengrassCore\n\n\nOutput:\n\n{\n    \"tags\": {\n        \"Owner\": \"richard-roe\"\n    }\n}\n\n\nFor more information, see Tag your resources in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "resolve-component-candidates",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/resolve-component-candidates.html",
      "command_description": "Description\n\nRetrieves a list of components that meet the component, version, and platform requirements of a deployment. Greengrass core devices call this operation when they receive a deployment to identify the components to install.\n\nThis operation identifies components that meet all dependency requirements for a deployment. If the requirements conflict, then this operation returns an error and the deployment fails. For example, this occurs if component A requires version >2.0.0 and component B requires version <2.0.0 of a component dependency.\n\nWhen you specify the component candidates to resolve, IoT Greengrass compares each component’s digest from the core device with the component’s digest in the Amazon Web Services Cloud. If the digests don’t match, then IoT Greengrass specifies to use the version from the Amazon Web Services Cloud.\n\nWarning\n\nTo use this operation, you must use the data plane API endpoint and authenticate with an IoT device certificate. For more information, see IoT Greengrass endpoints and quotas .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  resolve-component-candidates\n--platform <value>\n--component-candidates <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--platform <value>",
        "--component-candidates <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--platform (structure)\n\nThe platform to use to resolve compatible components.\n\nname -> (string)\n\nThe friendly name of the platform. This name helps you identify the platform.\n\nIf you omit this parameter, IoT Greengrass creates a friendly name from the os and architecture of the platform.\n\nattributes -> (map)\n\nA dictionary of attributes for the platform. The IoT Greengrass Core software defines the os and platform by default. You can specify additional platform attributes for a core device when you deploy the Greengrass nucleus component. For more information, see the Greengrass nucleus component in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nname=string,attributes={KeyName1=string,KeyName2=string}\n\n\nJSON Syntax:\n\n{\n  \"name\": \"string\",\n  \"attributes\": {\"string\": \"string\"\n    ...}\n}\n\n\n--component-candidates (list)\n\nThe list of components to resolve.\n\n(structure)\n\nContains information about a component that is a candidate to deploy to a Greengrass core device.\n\ncomponentName -> (string)\n\nThe name of the component.\n\ncomponentVersion -> (string)\n\nThe version of the component.\n\nversionRequirements -> (map)\n\nThe version requirements for the component’s dependencies. Greengrass core devices get the version requirements from component recipes.\n\nIoT Greengrass V2 uses semantic version constraints. For more information, see Semantic Versioning .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\ncomponentName=string,componentVersion=string,versionRequirements={KeyName1=string,KeyName2=string} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"componentName\": \"string\",\n    \"componentVersion\": \"string\",\n    \"versionRequirements\": {\"string\": \"string\"\n      ...}\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nresolvedComponentVersions -> (list)\n\nA list of components that meet the requirements that you specify in the request. This list includes each component’s recipe that you can use to install the component.\n\n(structure)\n\nContains information about a component version that is compatible to run on a Greengrass core device.\n\narn -> (string)\n\nThe ARN of the component version.\n\ncomponentName -> (string)\n\nThe name of the component.\n\ncomponentVersion -> (string)\n\nThe version of the component.\n\nrecipe -> (blob)\n\nThe recipe of the component version."
    },
    {
      "command_name": "tag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/tag-resource.html",
      "command_description": "Description\n\nAdds tags to an IoT Greengrass resource. If a tag already exists for the resource, this operation updates the tag’s value.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  tag-resource\n--resource-arn <value>\n--tags <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--tags <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe ARN of the resource to tag.\n\n--tags (map)\n\nA list of key-value pairs that contain metadata for the resource. For more information, see Tag your resources in the IoT Greengrass V2 Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo add a tag to a resource\n\nThe following tag-resource example adds an owner tag to an AWS IoT Greengrass core device. You can use this tag to control access to the core device based on who owns it.\n\naws greengrassv2 tag-resource \\\n    --resource-arn arn:aws:greengrass:us-west-2:123456789012:coreDevices:MyGreengrassCore \\\n    --tags Owner=richard-roe\n\n\nThis command produces no output.\n\nFor more information, see Tag your resources in the AWS IoT Greengrass V2 Developer Guide."
    },
    {
      "command_name": "untag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/greengrassv2/untag-resource.html",
      "command_description": "Description\n\nRemoves a tag from an IoT Greengrass resource.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  untag-resource\n--resource-arn <value>\n--tag-keys <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--tag-keys <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe ARN of the resource to untag.\n\n--tag-keys (list)\n\nA list of keys for tags to remove from the resource.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo remove a tag from a resource\n\nThe following untag-resource example removes an owner tag from an AWS IoT Greengrass core device.\n\naws iotsitewise untag-resource \\\n    --resource-arn arn:aws:greengrass:us-west-2:123456789012:coreDevices:MyGreengrassCore \\\n    --tag-keys Owner\n\n\nThis command produces no output.\n\nFor more information, see Tag your resources in the AWS IoT Greengrass V2 Developer Guide."
    }
  ],
  "service_description": "Description\n\nIoT Greengrass brings local compute, messaging, data management, sync, and ML inference capabilities to edge devices. This enables devices to collect and analyze data closer to the source of information, react autonomously to local events, and communicate securely with each other on local networks. Local devices can also communicate securely with Amazon Web Services IoT Core and export IoT data to the Amazon Web Services Cloud. IoT Greengrass developers can use Lambda functions and components to create and deploy applications to fleets of edge devices for local operation.\n\nIoT Greengrass Version 2 provides a new major version of the IoT Greengrass Core software, new APIs, and a new console. Use this API reference to learn how to use the IoT Greengrass V2 API operations to manage components, manage deployments, and core devices.\n\nFor more information, see What is IoT Greengrass? in the IoT Greengrass V2 Developer Guide ."
}