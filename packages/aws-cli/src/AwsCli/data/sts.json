{
  "service_name": "sts",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/index.html",
  "service_commands": [
    {
      "command_name": "assume-role",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/assume-role.html",
      "command_description": "Description\n\nReturns a set of temporary security credentials that you can use to access Amazon Web Services resources that you might not normally have access to. These temporary credentials consist of an access key ID, a secret access key, and a security token. Typically, you use AssumeRole within your account or for cross-account access. For a comparison of AssumeRole with other API operations that produce temporary credentials, see Requesting Temporary Security Credentials and Comparing the STS API operations in the IAM User Guide .\n\nPermissions\n\nThe temporary security credentials created by AssumeRole can be used to make API calls to any Amazon Web Services service with the following exception: You cannot call the STS GetFederationToken or GetSessionToken API operations.\n\n(Optional) You can pass inline or managed session policies to this operation. You can pass a single JSON policy document to use as an inline session policy. You can also specify up to 10 managed policies to use as managed session policies. The plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. Passing policies to this operation returns new temporary credentials. The resulting session’s permissions are the intersection of the role’s identity-based policy and the session policies. You can use the role’s temporary credentials in subsequent Amazon Web Services API calls to access resources in the account that owns the role. You cannot use session policies to grant more permissions than those allowed by the identity-based policy of the role that is being assumed. For more information, see Session Policies in the IAM User Guide .\n\nTo assume a role from a different account, your account must be trusted by the role. The trust relationship is defined in the role’s trust policy when the role is created. That trust policy states which accounts are allowed to delegate that access to users in the account.\n\nA user who wants to access a role in a different account must also have permissions that are delegated from the user account administrator. The administrator must attach a policy that allows the user to call AssumeRole for the ARN of the role in the other account. If the user is in the same account as the role, then you can do either of the following:\n\nAttach a policy to the user (identical to the previous user in a different account).\n\nAdd the user as a principal directly in the role’s trust policy.\n\nIn this case, the trust policy acts as an IAM resource-based policy. Users in the same account as the role do not need explicit permission to assume the role. For more information about trust policies and resource-based policies, see IAM Policies in the IAM User Guide .\n\nTags\n\n(Optional) You can pass tag key-value pairs to your session. These tags are called session tags. For more information about session tags, see Passing Session Tags in STS in the IAM User Guide .\n\nAn administrator must grant you the permissions necessary to pass session tags. The administrator can also create granular permissions to allow you to pass only specific session tags. For more information, see Tutorial: Using Tags for Attribute-Based Access Control in the IAM User Guide .\n\nYou can set the session tags as transitive. Transitive tags persist during role chaining. For more information, see Chaining Roles with Session Tags in the IAM User Guide .\n\nUsing MFA with AssumeRole\n\n(Optional) You can include multi-factor authentication (MFA) information when you call AssumeRole . This is useful for cross-account scenarios to ensure that the user that assumes the role has been authenticated with an Amazon Web Services MFA device. In that scenario, the trust policy of the role being assumed includes a condition that tests for MFA authentication. If the caller does not include valid MFA information, the request to assume the role is denied. The condition in a trust policy that tests for MFA authentication might look like the following example.\n\n\"Condition\": {\"Bool\": {\"aws:MultiFactorAuthPresent\": true}}\n\nFor more information, see Configuring MFA-Protected API Access in the IAM User Guide guide.\n\nTo use MFA with AssumeRole , you pass values for the SerialNumber and TokenCode parameters. The SerialNumber value identifies the user’s hardware or virtual MFA device. The TokenCode is the time-based one-time password (TOTP) that the MFA device produces.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  assume-role\n--role-arn <value>\n--role-session-name <value>\n[--policy-arns <value>]\n[--policy <value>]\n[--duration-seconds <value>]\n[--tags <value>]\n[--transitive-tag-keys <value>]\n[--external-id <value>]\n[--serial-number <value>]\n[--token-code <value>]\n[--source-identity <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--role-arn <value>",
        "--role-session-name <value>",
        "[--policy-arns <value>]",
        "[--policy <value>]",
        "[--duration-seconds <value>]",
        "[--tags <value>]",
        "[--transitive-tag-keys <value>]",
        "[--external-id <value>]",
        "[--serial-number <value>]",
        "[--token-code <value>]",
        "[--source-identity <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--role-arn (string)\n\nThe Amazon Resource Name (ARN) of the role to assume.\n\n--role-session-name (string)\n\nAn identifier for the assumed role session.\n\nUse the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. In cross-account scenarios, the role session name is visible to, and can be logged by the account that owns the role. The role session name is also used in the ARN of the assumed role principal. This means that subsequent cross-account API requests that use the temporary security credentials will expose the role session name to the external account in their CloudTrail logs.\n\nThe regex used to validate this parameter is a string of characters consisting of upper- and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@-\n\n--policy-arns (list)\n\nThe Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as managed session policies. The policies must exist in the same account as the role.\n\nThis parameter is optional. You can provide up to 10 managed policy ARNs. However, the plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference.\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\nPassing policies to this operation returns new temporary credentials. The resulting session’s permissions are the intersection of the role’s identity-based policy and the session policies. You can use the role’s temporary credentials in subsequent Amazon Web Services API calls to access resources in the account that owns the role. You cannot use session policies to grant more permissions than those allowed by the identity-based policy of the role that is being assumed. For more information, see Session Policies in the IAM User Guide .\n\n(structure)\n\nA reference to the IAM managed policy that is passed as a session policy for a role session or a federated user session.\n\narn -> (string)\n\nThe Amazon Resource Name (ARN) of the IAM managed policy to use as a session policy for the role. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference .\n\nShorthand Syntax:\n\narn=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"arn\": \"string\"\n  }\n  ...\n]\n\n\n--policy (string)\n\nAn IAM policy in JSON format that you want to use as an inline session policy.\n\nThis parameter is optional. Passing policies to this operation returns new temporary credentials. The resulting session’s permissions are the intersection of the role’s identity-based policy and the session policies. You can use the role’s temporary credentials in subsequent Amazon Web Services API calls to access resources in the account that owns the role. You cannot use session policies to grant more permissions than those allowed by the identity-based policy of the role that is being assumed. For more information, see Session Policies in the IAM User Guide .\n\nThe plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. The JSON policy characters can be any ASCII character from the space character to the end of the valid character list (u0020 through u00FF). It can also include the tab (u0009), linefeed (u000A), and carriage return (u000D) characters.\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\n--duration-seconds (integer)\n\nThe duration, in seconds, of the role session. The value specified can can range from 900 seconds (15 minutes) up to the maximum session duration that is set for the role. The maximum session duration setting can have a value from 1 hour to 12 hours. If you specify a value higher than this setting or the administrator setting (whichever is lower), the operation fails. For example, if you specify a session duration of 12 hours, but your administrator set the maximum session duration to 6 hours, your operation fails. To learn how to view the maximum value for your role, see View the Maximum Session Duration Setting for a Role in the IAM User Guide .\n\nBy default, the value is set to 3600 seconds.\n\nNote\n\nThe DurationSeconds parameter is separate from the duration of a console session that you might request using the returned credentials. The request to the federation endpoint for a console sign-in token takes a SessionDuration parameter that specifies the maximum length of the console session. For more information, see Creating a URL that Enables Federated Users to Access the Management Console in the IAM User Guide .\n\n--tags (list)\n\nA list of session tags that you want to pass. Each session tag consists of a key name and an associated value. For more information about session tags, see Tagging STS Sessions in the IAM User Guide .\n\nThis parameter is optional. You can pass up to 50 session tags. The plaintext session tag keys can’t exceed 128 characters, and the values can’t exceed 256 characters. For these and additional limits, see IAM and STS Character Limits in the IAM User Guide .\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\nYou can pass a session tag with the same key as a tag that is already attached to the role. When you do, session tags override a role tag with the same key.\n\nTag key–value pairs are not case sensitive, but case is preserved. This means that you cannot have separate Department and department tag keys. Assume that the role has the Department =``Marketing`` tag and you pass the department =``engineering`` session tag. Department and department are not saved as separate tags, and the session tag passed in the request takes precedence over the role tag.\n\nAdditionally, if you used temporary credentials to perform this operation, the new session inherits any transitive session tags from the calling session. If you pass a session tag with the same key as an inherited tag, the operation fails. To view the inherited tags for a session, see the CloudTrail logs. For more information, see Viewing Session Tags in CloudTrail in the IAM User Guide .\n\n(structure)\n\nYou can pass custom key-value pair attributes when you assume a role or federate a user. These are called session tags. You can then use the session tags to control access to resources. For more information, see Tagging STS Sessions in the IAM User Guide .\n\nKey -> (string)\n\nThe key for a session tag.\n\nYou can pass up to 50 session tags. The plain text session tag keys can’t exceed 128 characters. For these and additional limits, see IAM and STS Character Limits in the IAM User Guide .\n\nValue -> (string)\n\nThe value for a session tag.\n\nYou can pass up to 50 session tags. The plain text session tag values can’t exceed 256 characters. For these and additional limits, see IAM and STS Character Limits in the IAM User Guide .\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--transitive-tag-keys (list)\n\nA list of keys for session tags that you want to set as transitive. If you set a tag key as transitive, the corresponding key and value passes to subsequent sessions in a role chain. For more information, see Chaining Roles with Session Tags in the IAM User Guide .\n\nThis parameter is optional. When you set session tags as transitive, the session policy and session tags packed binary limit is not affected.\n\nIf you choose not to specify a transitive tag key, then no tags are passed from this session to any subsequent sessions.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--external-id (string)\n\nA unique identifier that might be required when you assume a role in another account. If the administrator of the account to which the role belongs provided you with an external ID, then provide that value in the ExternalId parameter. This value can be any string, such as a passphrase or account number. A cross-account role is usually set up to trust everyone in an account. Therefore, the administrator of the trusting account might send an external ID to the administrator of the trusted account. That way, only someone with the ID can assume the role, rather than everyone in the account. For more information about the external ID, see How to Use an External ID When Granting Access to Your Amazon Web Services Resources to a Third Party in the IAM User Guide .\n\nThe regex used to validate this parameter is a string of characters consisting of upper- and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-\n\n--serial-number (string)\n\nThe identification number of the MFA device that is associated with the user who is making the AssumeRole call. Specify this value if the trust policy of the role being assumed includes a condition that requires MFA authentication. The value is either the serial number for a hardware device (such as GAHT12345678 ) or an Amazon Resource Name (ARN) for a virtual device (such as arn:aws:iam::123456789012:mfa/user ).\n\nThe regex used to validate this parameter is a string of characters consisting of upper- and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@-\n\n--token-code (string)\n\nThe value provided by the MFA device, if the trust policy of the role being assumed requires MFA. (In other words, if the policy includes a condition that tests for MFA). If the role being assumed requires MFA and if the TokenCode value is missing or expired, the AssumeRole call returns an “access denied” error.\n\nThe format for this parameter, as described by its regex pattern, is a sequence of six numeric digits.\n\n--source-identity (string)\n\nThe source identity specified by the principal that is calling the AssumeRole operation.\n\nYou can require users to specify a source identity when they assume a role. You do this by using the sts:SourceIdentity condition key in a role trust policy. You can use source identity information in CloudTrail logs to determine who took actions with a role. You can use the aws:SourceIdentity condition key to further control access to Amazon Web Services resources based on the value of source identity. For more information about using source identity, see Monitor and control actions taken with assumed roles in the IAM User Guide .\n\nThe regex used to validate this parameter is a string of characters consisting of upper- and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@-. You cannot use a value that begins with the text aws: . This prefix is reserved for Amazon Web Services internal use.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCredentials -> (structure)\n\nThe temporary security credentials, which include an access key ID, a secret access key, and a security (or session) token.\n\nNote\n\nThe size of the security token that STS API operations return is not fixed. We strongly recommend that you make no assumptions about the maximum size.\n\nAccessKeyId -> (string)\n\nThe access key ID that identifies the temporary security credentials.\n\nSecretAccessKey -> (string)\n\nThe secret access key that can be used to sign requests.\n\nSessionToken -> (string)\n\nThe token that users must pass to the service API to use the temporary credentials.\n\nExpiration -> (timestamp)\n\nThe date on which the current credentials expire.\n\nAssumedRoleUser -> (structure)\n\nThe Amazon Resource Name (ARN) and the assumed role ID, which are identifiers that you can use to refer to the resulting temporary security credentials. For example, you can reference these credentials as a principal in a resource-based policy by using the ARN or assumed role ID. The ARN and ID include the RoleSessionName that you specified when you called AssumeRole .\n\nAssumedRoleId -> (string)\n\nA unique identifier that contains the role ID and the role session name of the role that is being assumed. The role ID is generated by Amazon Web Services when the role is created.\n\nArn -> (string)\n\nThe ARN of the temporary security credentials that are returned from the AssumeRole action. For more information about ARNs and how to use them in policies, see IAM Identifiers in the IAM User Guide .\n\nPackedPolicySize -> (integer)\n\nA percentage value that indicates the packed size of the session policies and session tags combined passed in the request. The request fails if the packed size is greater than 100 percent, which means the policies and tags exceeded the allowed space.\n\nSourceIdentity -> (string)\n\nThe source identity specified by the principal that is calling the AssumeRole operation.\n\nYou can require users to specify a source identity when they assume a role. You do this by using the sts:SourceIdentity condition key in a role trust policy. You can use source identity information in CloudTrail logs to determine who took actions with a role. You can use the aws:SourceIdentity condition key to further control access to Amazon Web Services resources based on the value of source identity. For more information about using source identity, see Monitor and control actions taken with assumed roles in the IAM User Guide .\n\nThe regex used to validate this parameter is a string of characters consisting of upper- and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@-",
      "command_examples": "Examples\n\nTo assume a role:\n\naws sts assume-role --role-arn arn:aws:iam::123456789012:role/xaccounts3access --role-session-name s3-access-example\n\n\nThe output of the command contains an access key, secret key, and session token that you can use to authenticate to AWS:\n\n{\n    \"AssumedRoleUser\": {\n        \"AssumedRoleId\": \"AROA3XFRBF535PLBIFPI4:s3-access-example\",\n        \"Arn\": \"arn:aws:sts::123456789012:assumed-role/xaccounts3access/s3-access-example\"\n    },\n    \"Credentials\": {\n        \"SecretAccessKey\": \"9drTJvcXLB89EXAMPLELB8923FB892xMFI\",\n        \"SessionToken\": \"AQoXdzELDDY//////////wEaoAK1wvxJY12r2IrDFT2IvAzTCn3zHoZ7YNtpiQLF0MqZye/qwjzP2iEXAMPLEbw/m3hsj8VBTkPORGvr9jM5sgP+w9IZWZnU+LWhmg+a5fDi2oTGUYcdg9uexQ4mtCHIHfi4citgqZTgco40Yqr4lIlo4V2b2Dyauk0eYFNebHtYlFVgAUj+7Indz3LU0aTWk1WKIjHmmMCIoTkyYp/k7kUG7moeEYKSitwQIi6Gjn+nyzM+PtoA3685ixzv0R7i5rjQi0YE0lf1oeie3bDiNHncmzosRM6SFiPzSvp6h/32xQuZsjcypmwsPSDtTPYcs0+YN/8BRi2/IcrxSpnWEXAMPLEXSDFTAQAM6Dl9zR0tXoybnlrZIwMLlMi1Kcgo5OytwU=\",\n        \"Expiration\": \"2016-03-15T00:05:07Z\",\n        \"AccessKeyId\": \"ASIAJEXAMPLEXEG2JICEA\"\n    }\n}\n\n\nFor AWS CLI use, you can set up a named profile associated with a role. When you use the profile, the AWS CLI will call assume-role and manage credentials for you. See Assuming a Role in the AWS CLI User Guide for instructions."
    },
    {
      "command_name": "assume-role-with-saml",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/assume-role-with-saml.html",
      "command_description": "Description\n\nReturns a set of temporary security credentials for users who have been authenticated via a SAML authentication response. This operation provides a mechanism for tying an enterprise identity store or directory to role-based Amazon Web Services access without user-specific credentials or configuration. For a comparison of AssumeRoleWithSAML with the other API operations that produce temporary credentials, see Requesting Temporary Security Credentials and Comparing the STS API operations in the IAM User Guide .\n\nThe temporary security credentials returned by this operation consist of an access key ID, a secret access key, and a security token. Applications can use these temporary security credentials to sign calls to Amazon Web Services services.\n\nSession Duration\n\nBy default, the temporary security credentials created by AssumeRoleWithSAML last for one hour. However, you can use the optional DurationSeconds parameter to specify the duration of your session. Your role session lasts for the duration that you specify, or until the time specified in the SAML authentication response’s SessionNotOnOrAfter value, whichever is shorter. You can provide a DurationSeconds value from 900 seconds (15 minutes) up to the maximum session duration setting for the role. This setting can have a value from 1 hour to 12 hours. To learn how to view the maximum value for your role, see View the Maximum Session Duration Setting for a Role in the IAM User Guide . The maximum session duration limit applies when you use the AssumeRole* API operations or the assume-role* CLI commands. However the limit does not apply when you use those operations to create a console URL. For more information, see Using IAM Roles in the IAM User Guide .\n\nNote\n\nRole chaining limits your CLI or Amazon Web Services API role session to a maximum of one hour. When you use the AssumeRole API operation to assume a role, you can specify the duration of your role session with the DurationSeconds parameter. You can specify a parameter value of up to 43200 seconds (12 hours), depending on the maximum session duration setting for your role. However, if you assume a role using role chaining and provide a DurationSeconds parameter value greater than one hour, the operation fails.\n\nPermissions\n\nThe temporary security credentials created by AssumeRoleWithSAML can be used to make API calls to any Amazon Web Services service with the following exception: you cannot call the STS GetFederationToken or GetSessionToken API operations.\n\n(Optional) You can pass inline or managed session policies to this operation. You can pass a single JSON policy document to use as an inline session policy. You can also specify up to 10 managed policies to use as managed session policies. The plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. Passing policies to this operation returns new temporary credentials. The resulting session’s permissions are the intersection of the role’s identity-based policy and the session policies. You can use the role’s temporary credentials in subsequent Amazon Web Services API calls to access resources in the account that owns the role. You cannot use session policies to grant more permissions than those allowed by the identity-based policy of the role that is being assumed. For more information, see Session Policies in the IAM User Guide .\n\nCalling AssumeRoleWithSAML does not require the use of Amazon Web Services security credentials. The identity of the caller is validated by using keys in the metadata document that is uploaded for the SAML provider entity for your identity provider.\n\nWarning\n\nCalling AssumeRoleWithSAML can result in an entry in your CloudTrail logs. The entry includes the value in the NameID element of the SAML assertion. We recommend that you use a NameIDType that is not associated with any personally identifiable information (PII). For example, you could instead use the persistent identifier (urn:oasis:names:tc:SAML:2.0:nameid-format:persistent ).\n\nTags\n\n(Optional) You can configure your IdP to pass attributes into your SAML assertion as session tags. Each session tag consists of a key name and an associated value. For more information about session tags, see Passing Session Tags in STS in the IAM User Guide .\n\nYou can pass up to 50 session tags. The plaintext session tag keys can’t exceed 128 characters and the values can’t exceed 256 characters. For these and additional limits, see IAM and STS Character Limits in the IAM User Guide .\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\nYou can pass a session tag with the same key as a tag that is attached to the role. When you do, session tags override the role’s tags with the same key.\n\nAn administrator must grant you the permissions necessary to pass session tags. The administrator can also create granular permissions to allow you to pass only specific session tags. For more information, see Tutorial: Using Tags for Attribute-Based Access Control in the IAM User Guide .\n\nYou can set the session tags as transitive. Transitive tags persist during role chaining. For more information, see Chaining Roles with Session Tags in the IAM User Guide .\n\nSAML Configuration\n\nBefore your application can call AssumeRoleWithSAML , you must configure your SAML identity provider (IdP) to issue the claims required by Amazon Web Services. Additionally, you must use Identity and Access Management (IAM) to create a SAML provider entity in your Amazon Web Services account that represents your identity provider. You must also create an IAM role that specifies this SAML provider in its trust policy.\n\nFor more information, see the following resources:\n\nAbout SAML 2.0-based Federation in the IAM User Guide .\n\nCreating SAML Identity Providers in the IAM User Guide .\n\nConfiguring a Relying Party and Claims in the IAM User Guide .\n\nCreating a Role for SAML 2.0 Federation in the IAM User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  assume-role-with-saml\n--role-arn <value>\n--principal-arn <value>\n--saml-assertion <value>\n[--policy-arns <value>]\n[--policy <value>]\n[--duration-seconds <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--role-arn <value>",
        "--principal-arn <value>",
        "--saml-assertion <value>",
        "[--policy-arns <value>]",
        "[--policy <value>]",
        "[--duration-seconds <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--role-arn (string)\n\nThe Amazon Resource Name (ARN) of the role that the caller is assuming.\n\n--principal-arn (string)\n\nThe Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.\n\n--saml-assertion (string)\n\nThe base64 encoded SAML authentication response provided by the IdP.\n\nFor more information, see Configuring a Relying Party and Adding Claims in the IAM User Guide .\n\n--policy-arns (list)\n\nThe Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as managed session policies. The policies must exist in the same account as the role.\n\nThis parameter is optional. You can provide up to 10 managed policy ARNs. However, the plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference.\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\nPassing policies to this operation returns new temporary credentials. The resulting session’s permissions are the intersection of the role’s identity-based policy and the session policies. You can use the role’s temporary credentials in subsequent Amazon Web Services API calls to access resources in the account that owns the role. You cannot use session policies to grant more permissions than those allowed by the identity-based policy of the role that is being assumed. For more information, see Session Policies in the IAM User Guide .\n\n(structure)\n\nA reference to the IAM managed policy that is passed as a session policy for a role session or a federated user session.\n\narn -> (string)\n\nThe Amazon Resource Name (ARN) of the IAM managed policy to use as a session policy for the role. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference .\n\nShorthand Syntax:\n\narn=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"arn\": \"string\"\n  }\n  ...\n]\n\n\n--policy (string)\n\nAn IAM policy in JSON format that you want to use as an inline session policy.\n\nThis parameter is optional. Passing policies to this operation returns new temporary credentials. The resulting session’s permissions are the intersection of the role’s identity-based policy and the session policies. You can use the role’s temporary credentials in subsequent Amazon Web Services API calls to access resources in the account that owns the role. You cannot use session policies to grant more permissions than those allowed by the identity-based policy of the role that is being assumed. For more information, see Session Policies in the IAM User Guide .\n\nThe plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. The JSON policy characters can be any ASCII character from the space character to the end of the valid character list (u0020 through u00FF). It can also include the tab (u0009), linefeed (u000A), and carriage return (u000D) characters.\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\n--duration-seconds (integer)\n\nThe duration, in seconds, of the role session. Your role session lasts for the duration that you specify for the DurationSeconds parameter, or until the time specified in the SAML authentication response’s SessionNotOnOrAfter value, whichever is shorter. You can provide a DurationSeconds value from 900 seconds (15 minutes) up to the maximum session duration setting for the role. This setting can have a value from 1 hour to 12 hours. If you specify a value higher than this setting, the operation fails. For example, if you specify a session duration of 12 hours, but your administrator set the maximum session duration to 6 hours, your operation fails. To learn how to view the maximum value for your role, see View the Maximum Session Duration Setting for a Role in the IAM User Guide .\n\nBy default, the value is set to 3600 seconds.\n\nNote\n\nThe DurationSeconds parameter is separate from the duration of a console session that you might request using the returned credentials. The request to the federation endpoint for a console sign-in token takes a SessionDuration parameter that specifies the maximum length of the console session. For more information, see Creating a URL that Enables Federated Users to Access the Management Console in the IAM User Guide .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCredentials -> (structure)\n\nThe temporary security credentials, which include an access key ID, a secret access key, and a security (or session) token.\n\nNote\n\nThe size of the security token that STS API operations return is not fixed. We strongly recommend that you make no assumptions about the maximum size.\n\nAccessKeyId -> (string)\n\nThe access key ID that identifies the temporary security credentials.\n\nSecretAccessKey -> (string)\n\nThe secret access key that can be used to sign requests.\n\nSessionToken -> (string)\n\nThe token that users must pass to the service API to use the temporary credentials.\n\nExpiration -> (timestamp)\n\nThe date on which the current credentials expire.\n\nAssumedRoleUser -> (structure)\n\nThe identifiers for the temporary security credentials that the operation returns.\n\nAssumedRoleId -> (string)\n\nA unique identifier that contains the role ID and the role session name of the role that is being assumed. The role ID is generated by Amazon Web Services when the role is created.\n\nArn -> (string)\n\nThe ARN of the temporary security credentials that are returned from the AssumeRole action. For more information about ARNs and how to use them in policies, see IAM Identifiers in the IAM User Guide .\n\nPackedPolicySize -> (integer)\n\nA percentage value that indicates the packed size of the session policies and session tags combined passed in the request. The request fails if the packed size is greater than 100 percent, which means the policies and tags exceeded the allowed space.\n\nSubject -> (string)\n\nThe value of the NameID element in the Subject element of the SAML assertion.\n\nSubjectType -> (string)\n\nThe format of the name ID, as defined by the Format attribute in the NameID element of the SAML assertion. Typical examples of the format are transient or persistent .\n\nIf the format includes the prefix urn:oasis:names:tc:SAML:2.0:nameid-format , that prefix is removed. For example, urn:oasis:names:tc:SAML:2.0:nameid-format:transient is returned as transient . If the format includes any other prefix, the format is returned with no modifications.\n\nIssuer -> (string)\n\nThe value of the Issuer element of the SAML assertion.\n\nAudience -> (string)\n\nThe value of the Recipient attribute of the SubjectConfirmationData element of the SAML assertion.\n\nNameQualifier -> (string)\n\nA hash value based on the concatenation of the following:\n\nThe Issuer response value.\n\nThe Amazon Web Services account ID.\n\nThe friendly name (the last part of the ARN) of the SAML provider in IAM.\n\nThe combination of NameQualifier and Subject can be used to uniquely identify a federated user.\n\nThe following pseudocode shows how the hash value is calculated:\n\nBASE64 ( SHA1 ( \"https://example.com/saml\" + \"123456789012\" + \"/MySAMLIdP\" ) )\n\nSourceIdentity -> (string)\n\nThe value in the SourceIdentity attribute in the SAML assertion.\n\nYou can require users to set a source identity value when they assume a role. You do this by using the sts:SourceIdentity condition key in a role trust policy. That way, actions that are taken with the role are associated with that user. After the source identity is set, the value cannot be changed. It is present in the request for all actions that are taken by the role and persists across chained role sessions. You can configure your SAML identity provider to use an attribute associated with your users, like user name or email, as the source identity when calling AssumeRoleWithSAML . You do this by adding an attribute to the SAML assertion. For more information about using source identity, see Monitor and control actions taken with assumed roles in the IAM User Guide .\n\nThe regex used to validate this parameter is a string of characters consisting of upper- and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@-",
      "command_examples": "Examples\n\nTo get short-term credentials for a role authenticated with SAML\n\nThe following assume-role-with-saml example retrieves a set of short-term credentials for the IAM role TestSaml. The request in this example is authenticated by using the SAML assertion supplied by your identity provider when you authenticate to it.\n\naws sts assume-role-with-saml \\\n    --role-arn arn:aws:iam::123456789012:role/TestSaml \\\n    --principal-arn arn:aws:iam::123456789012:saml-provider/SAML-test \\\n    --saml-assertion \"VERYLONGENCODEDASSERTIONEXAMPLExzYW1sOkF1ZGllbmNlPmJsYW5rPC9zYW1sOkF1ZGllbmNlPjwvc2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDpDb25kaXRpb25zPjxzYW1sOlN1YmplY3Q+PHNhbWw6TmFtZUlEIEZvcm1hdD0idXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOm5hbWVpZC1mb3JtYXQ6dHJhbnNpZW50Ij5TYW1sRXhhbXBsZTwvc2FtbDpOYW1lSUQ+PHNhbWw6U3ViamVjdENvbmZpcm1hdGlvbiBNZXRob2Q9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpjbTpiZWFyZXIiPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb25EYXRhIE5vdE9uT3JBZnRlcj0iMjAxOS0xMS0wMVQyMDoyNTowNS4xNDVaIiBSZWNpcGllbnQ9Imh0dHBzOi8vc2lnbmluLmF3cy5hbWF6b24uY29tL3NhbWwiLz48L3NhbWw6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWw6U3ViamVjdD48c2FtbDpBdXRoblN0YXRlbWVudCBBdXRoPD94bWwgdmpSZXNwb25zZT4=\"\n\n\nOutput:\n\n{\n    \"Issuer\": \"https://integ.example.com/idp/shibboleth</Issuer\",\n    \"AssumedRoleUser\": {\n        \"Arn\": \"arn:aws:sts::123456789012:assumed-role/TestSaml\",\n        \"AssumedRoleId\": \"ARO456EXAMPLE789:TestSaml\"\n    },\n    \"Credentials\": {\n        \"AccessKeyId\": \"ASIAV3ZUEFP6EXAMPLE\",\n        \"SecretAccessKey\": \"8P+SQvWIuLnKhh8d++jpw0nNmQRBZvNEXAMPLEKEY\",\n        \"SessionToken\": \"IQoJb3JpZ2luX2VjEOz////////////////////wEXAMPLEtMSJHMEUCIDoKK3JH9uGQE1z0sINr5M4jk+Na8KHDcCYRVjJCZEvOAiEA3OvJGtw1EcViOleS2vhs8VdCKFJQWPQrmGdeehM4IC1NtBmUpp2wUE8phUZampKsburEDy0KPkyQDYwT7WZ0wq5VSXDvp75YU9HFvlRd8Tx6q6fE8YQcHNVXAkiY9q6d+xo0rKwT38xVqr7ZD0u0iPPkUL64lIZbqBAz+scqKmlzm8FDrypNC9Yjc8fPOLn9FX9KSYvKTr4rvx3iSIlTJabIQwj2ICCR/oLxBA==\",\n        \"Expiration\": \"2019-11-01T20:26:47Z\"\n    },\n    \"Audience\": \"https://signin.aws.amazon.com/saml\",\n    \"SubjectType\": \"transient\",\n    \"PackedPolicySize\": \"6\",\n    \"NameQualifier\": \"SbdGOnUkh1i4+EXAMPLExL/jEvs=\",\n    \"Subject\": \"SamlExample\"\n}\n\n\nFor more information, see Requesting Temporary Security Credentials in the IAM User Guide."
    },
    {
      "command_name": "assume-role-with-web-identity",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/assume-role-with-web-identity.html",
      "command_description": "Description\n\nReturns a set of temporary security credentials for users who have been authenticated in a mobile or web application with a web identity provider. Example providers include Amazon Cognito, Login with Amazon, Facebook, Google, or any OpenID Connect-compatible identity provider.\n\nNote\n\nFor mobile applications, we recommend that you use Amazon Cognito. You can use Amazon Cognito with the Amazon Web Services SDK for iOS Developer Guide and the Amazon Web Services SDK for Android Developer Guide to uniquely identify a user. You can also supply the user with a consistent identity throughout the lifetime of an application.\n\nTo learn more about Amazon Cognito, see Amazon Cognito Overview in Amazon Web Services SDK for Android Developer Guide and Amazon Cognito Overview in the Amazon Web Services SDK for iOS Developer Guide .\n\nCalling AssumeRoleWithWebIdentity does not require the use of Amazon Web Services security credentials. Therefore, you can distribute an application (for example, on mobile devices) that requests temporary security credentials without including long-term Amazon Web Services credentials in the application. You also don’t need to deploy server-based proxy services that use long-term Amazon Web Services credentials. Instead, the identity of the caller is validated by using a token from the web identity provider. For a comparison of AssumeRoleWithWebIdentity with the other API operations that produce temporary credentials, see Requesting Temporary Security Credentials and Comparing the STS API operations in the IAM User Guide .\n\nThe temporary security credentials returned by this API consist of an access key ID, a secret access key, and a security token. Applications can use these temporary security credentials to sign calls to Amazon Web Services service API operations.\n\nSession Duration\n\nBy default, the temporary security credentials created by AssumeRoleWithWebIdentity last for one hour. However, you can use the optional DurationSeconds parameter to specify the duration of your session. You can provide a value from 900 seconds (15 minutes) up to the maximum session duration setting for the role. This setting can have a value from 1 hour to 12 hours. To learn how to view the maximum value for your role, see View the Maximum Session Duration Setting for a Role in the IAM User Guide . The maximum session duration limit applies when you use the AssumeRole* API operations or the assume-role* CLI commands. However the limit does not apply when you use those operations to create a console URL. For more information, see Using IAM Roles in the IAM User Guide .\n\nPermissions\n\nThe temporary security credentials created by AssumeRoleWithWebIdentity can be used to make API calls to any Amazon Web Services service with the following exception: you cannot call the STS GetFederationToken or GetSessionToken API operations.\n\n(Optional) You can pass inline or managed session policies to this operation. You can pass a single JSON policy document to use as an inline session policy. You can also specify up to 10 managed policies to use as managed session policies. The plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. Passing policies to this operation returns new temporary credentials. The resulting session’s permissions are the intersection of the role’s identity-based policy and the session policies. You can use the role’s temporary credentials in subsequent Amazon Web Services API calls to access resources in the account that owns the role. You cannot use session policies to grant more permissions than those allowed by the identity-based policy of the role that is being assumed. For more information, see Session Policies in the IAM User Guide .\n\nTags\n\n(Optional) You can configure your IdP to pass attributes into your web identity token as session tags. Each session tag consists of a key name and an associated value. For more information about session tags, see Passing Session Tags in STS in the IAM User Guide .\n\nYou can pass up to 50 session tags. The plaintext session tag keys can’t exceed 128 characters and the values can’t exceed 256 characters. For these and additional limits, see IAM and STS Character Limits in the IAM User Guide .\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\nYou can pass a session tag with the same key as a tag that is attached to the role. When you do, the session tag overrides the role tag with the same key.\n\nAn administrator must grant you the permissions necessary to pass session tags. The administrator can also create granular permissions to allow you to pass only specific session tags. For more information, see Tutorial: Using Tags for Attribute-Based Access Control in the IAM User Guide .\n\nYou can set the session tags as transitive. Transitive tags persist during role chaining. For more information, see Chaining Roles with Session Tags in the IAM User Guide .\n\nIdentities\n\nBefore your application can call AssumeRoleWithWebIdentity , you must have an identity token from a supported identity provider and create a role that the application can assume. The role that your application assumes must trust the identity provider that is associated with the identity token. In other words, the identity provider must be specified in the role’s trust policy.\n\nWarning\n\nCalling AssumeRoleWithWebIdentity can result in an entry in your CloudTrail logs. The entry includes the Subject of the provided web identity token. We recommend that you avoid using any personally identifiable information (PII) in this field. For example, you could instead use a GUID or a pairwise identifier, as suggested in the OIDC specification .\n\nFor more information about how to use web identity federation and the AssumeRoleWithWebIdentity API, see the following resources:\n\nUsing Web Identity Federation API Operations for Mobile Apps and Federation Through a Web-based Identity Provider .\n\nWeb Identity Federation Playground . Walk through the process of authenticating through Login with Amazon, Facebook, or Google, getting temporary security credentials, and then using those credentials to make a request to Amazon Web Services.\n\nAmazon Web Services SDK for iOS Developer Guide and Amazon Web Services SDK for Android Developer Guide . These toolkits contain sample apps that show how to invoke the identity providers. The toolkits then show how to use the information from these providers to get and use temporary security credentials.\n\nWeb Identity Federation with Mobile Applications . This article discusses web identity federation and shows an example of how to use web identity federation to get access to content in Amazon S3.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  assume-role-with-web-identity\n--role-arn <value>\n--role-session-name <value>\n--web-identity-token <value>\n[--provider-id <value>]\n[--policy-arns <value>]\n[--policy <value>]\n[--duration-seconds <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--role-arn <value>",
        "--role-session-name <value>",
        "--web-identity-token <value>",
        "[--provider-id <value>]",
        "[--policy-arns <value>]",
        "[--policy <value>]",
        "[--duration-seconds <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--role-arn (string)\n\nThe Amazon Resource Name (ARN) of the role that the caller is assuming.\n\n--role-session-name (string)\n\nAn identifier for the assumed role session. Typically, you pass the name or identifier that is associated with the user who is using your application. That way, the temporary security credentials that your application will use are associated with that user. This session name is included as part of the ARN and assumed role ID in the AssumedRoleUser response element.\n\nThe regex used to validate this parameter is a string of characters consisting of upper- and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@-\n\n--web-identity-token (string)\n\nThe OAuth 2.0 access token or OpenID Connect ID token that is provided by the identity provider. Your application must get this token by authenticating the user who is using your application with a web identity provider before the application makes an AssumeRoleWithWebIdentity call.\n\n--provider-id (string)\n\nThe fully qualified host component of the domain name of the identity provider.\n\nSpecify this value only for OAuth 2.0 access tokens. Currently www.amazon.com and graph.facebook.com are the only supported identity providers for OAuth 2.0 access tokens. Do not include URL schemes and port numbers.\n\nDo not specify this value for OpenID Connect ID tokens.\n\n--policy-arns (list)\n\nThe Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as managed session policies. The policies must exist in the same account as the role.\n\nThis parameter is optional. You can provide up to 10 managed policy ARNs. However, the plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference.\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\nPassing policies to this operation returns new temporary credentials. The resulting session’s permissions are the intersection of the role’s identity-based policy and the session policies. You can use the role’s temporary credentials in subsequent Amazon Web Services API calls to access resources in the account that owns the role. You cannot use session policies to grant more permissions than those allowed by the identity-based policy of the role that is being assumed. For more information, see Session Policies in the IAM User Guide .\n\n(structure)\n\nA reference to the IAM managed policy that is passed as a session policy for a role session or a federated user session.\n\narn -> (string)\n\nThe Amazon Resource Name (ARN) of the IAM managed policy to use as a session policy for the role. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference .\n\nShorthand Syntax:\n\narn=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"arn\": \"string\"\n  }\n  ...\n]\n\n\n--policy (string)\n\nAn IAM policy in JSON format that you want to use as an inline session policy.\n\nThis parameter is optional. Passing policies to this operation returns new temporary credentials. The resulting session’s permissions are the intersection of the role’s identity-based policy and the session policies. You can use the role’s temporary credentials in subsequent Amazon Web Services API calls to access resources in the account that owns the role. You cannot use session policies to grant more permissions than those allowed by the identity-based policy of the role that is being assumed. For more information, see Session Policies in the IAM User Guide .\n\nThe plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. The JSON policy characters can be any ASCII character from the space character to the end of the valid character list (u0020 through u00FF). It can also include the tab (u0009), linefeed (u000A), and carriage return (u000D) characters.\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\n--duration-seconds (integer)\n\nThe duration, in seconds, of the role session. The value can range from 900 seconds (15 minutes) up to the maximum session duration setting for the role. This setting can have a value from 1 hour to 12 hours. If you specify a value higher than this setting, the operation fails. For example, if you specify a session duration of 12 hours, but your administrator set the maximum session duration to 6 hours, your operation fails. To learn how to view the maximum value for your role, see View the Maximum Session Duration Setting for a Role in the IAM User Guide .\n\nBy default, the value is set to 3600 seconds.\n\nNote\n\nThe DurationSeconds parameter is separate from the duration of a console session that you might request using the returned credentials. The request to the federation endpoint for a console sign-in token takes a SessionDuration parameter that specifies the maximum length of the console session. For more information, see Creating a URL that Enables Federated Users to Access the Management Console in the IAM User Guide .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCredentials -> (structure)\n\nThe temporary security credentials, which include an access key ID, a secret access key, and a security token.\n\nNote\n\nThe size of the security token that STS API operations return is not fixed. We strongly recommend that you make no assumptions about the maximum size.\n\nAccessKeyId -> (string)\n\nThe access key ID that identifies the temporary security credentials.\n\nSecretAccessKey -> (string)\n\nThe secret access key that can be used to sign requests.\n\nSessionToken -> (string)\n\nThe token that users must pass to the service API to use the temporary credentials.\n\nExpiration -> (timestamp)\n\nThe date on which the current credentials expire.\n\nSubjectFromWebIdentityToken -> (string)\n\nThe unique user identifier that is returned by the identity provider. This identifier is associated with the WebIdentityToken that was submitted with the AssumeRoleWithWebIdentity call. The identifier is typically unique to the user and the application that acquired the WebIdentityToken (pairwise identifier). For OpenID Connect ID tokens, this field contains the value returned by the identity provider as the token’s sub (Subject) claim.\n\nAssumedRoleUser -> (structure)\n\nThe Amazon Resource Name (ARN) and the assumed role ID, which are identifiers that you can use to refer to the resulting temporary security credentials. For example, you can reference these credentials as a principal in a resource-based policy by using the ARN or assumed role ID. The ARN and ID include the RoleSessionName that you specified when you called AssumeRole .\n\nAssumedRoleId -> (string)\n\nA unique identifier that contains the role ID and the role session name of the role that is being assumed. The role ID is generated by Amazon Web Services when the role is created.\n\nArn -> (string)\n\nThe ARN of the temporary security credentials that are returned from the AssumeRole action. For more information about ARNs and how to use them in policies, see IAM Identifiers in the IAM User Guide .\n\nPackedPolicySize -> (integer)\n\nA percentage value that indicates the packed size of the session policies and session tags combined passed in the request. The request fails if the packed size is greater than 100 percent, which means the policies and tags exceeded the allowed space.\n\nProvider -> (string)\n\nThe issuing authority of the web identity token presented. For OpenID Connect ID tokens, this contains the value of the iss field. For OAuth 2.0 access tokens, this contains the value of the ProviderId parameter that was passed in the AssumeRoleWithWebIdentity request.\n\nAudience -> (string)\n\nThe intended audience (also known as client ID) of the web identity token. This is traditionally the client identifier issued to the application that requested the web identity token.\n\nSourceIdentity -> (string)\n\nThe value of the source identity that is returned in the JSON web token (JWT) from the identity provider.\n\nYou can require users to set a source identity value when they assume a role. You do this by using the sts:SourceIdentity condition key in a role trust policy. That way, actions that are taken with the role are associated with that user. After the source identity is set, the value cannot be changed. It is present in the request for all actions that are taken by the role and persists across chained role sessions. You can configure your identity provider to use an attribute associated with your users, like user name or email, as the source identity when calling AssumeRoleWithWebIdentity . You do this by adding a claim to the JSON web token. To learn more about OIDC tokens and claims, see Using Tokens with User Pools in the Amazon Cognito Developer Guide . For more information about using source identity, see Monitor and control actions taken with assumed roles in the IAM User Guide .\n\nThe regex used to validate this parameter is a string of characters consisting of upper- and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@-",
      "command_examples": "Examples\n\nTo get short-term credentials for a role authenticated with Web Identity (OAuth 2.”0)\n\nThe following assume-role-with-web-identity example retrieves a set of short-term credentials for the IAM role app1. The request is authenticated by using the web identity token supplied by the specified web identity provider. Two additional policies are applied to the session to further restrict what the user can do. The returned credentials expire one hour after they are generated.\n\naws sts assume-role-with-web-identity \\\n    --duration-seconds 3600 \\\n    --role-session-name \"app1\" \\\n    --provider-id \"www.amazon.com\" \\\n    --policy-arns \"arn:aws:iam::123456789012:policy/q=webidentitydemopolicy1\",\"arn:aws:iam::123456789012:policy/webidentitydemopolicy2\" \\\n    --role-arn arn:aws:iam::123456789012:role/FederatedWebIdentityRole \\\n    --web-identity-token \"Atza%7CIQEBLjAsAhRFiXuWpUXuRvQ9PZL3GMFcYevydwIUFAHZwXZXXXXXXXXJnrulxKDHwy87oGKPznh0D6bEQZTSCzyoCtL_8S07pLpr0zMbn6w1lfVZKNTBdDansFBmtGnIsIapjI6xKR02Yc_2bQ8LZbUXSGm6Ry6_BG7PrtLZtj_dfCTj92xNGed-CrKqjG7nPBjNIL016GGvuS5gSvPRUxWES3VYfm1wl7WTI7jn-Pcb6M-buCgHhFOzTQxod27L9CqnOLio7N3gZAGpsp6n1-AJBOCJckcyXe2c6uD0srOJeZlKUm2eTDVMf8IehDVI0r1QOnTV6KzzAI3OY87Vd_cVMQ\"\n\n\nOutput:\n\n{\n    \"SubjectFromWebIdentityToken\": \"amzn1.account.AF6RHO7KZU5XRVQJGXK6HB56KR2A\"\n    \"Audience\": \"client.5498841531868486423.1548@apps.example.com\",\n    \"AssumedRoleUser\": {\n        \"Arn\": \"arn:aws:sts::123456789012:assumed-role/FederatedWebIdentityRole/app1\",\n        \"AssumedRoleId\": \"AROACLKWSDQRAOEXAMPLE:app1\"\n    }\n    \"Credentials\": {\n        \"AccessKeyId\": \"AKIAIOSFODNN7EXAMPLE\",\n        \"SecretAccessKey\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY\",\n        \"SessionToken\": \"AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5TthT+FvwqnKwRcOIfrRh3c/LTo6UDdyJwOOvEVPvLXCrrrUtdnniCEXAMPLE/IvU1dYUg2RVAJBanLiHb4IgRmpRV3zrkuWJOgQs8IZZaIv2BXIa2R4OlgkBN9bkUDNCJiBeb/AXlzBBko7b15fjrBs2+cTQtpZ3CYWFXG8C5zqx37wnOE49mRl/+OtkIKGO7fAE\",\n        \"Expiration\": \"2020-05-19T18:06:10+00:00\"\n    },\n    \"Provider\": \"www.amazon.com\"\n}\n\n\nFor more information, see Requesting Temporary Security Credentials in the IAM User Guide."
    },
    {
      "command_name": "decode-authorization-message",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/decode-authorization-message.html",
      "command_description": "Description\n\nDecodes additional information about the authorization status of a request from an encoded message returned in response to an Amazon Web Services request.\n\nFor example, if a user is not authorized to perform an operation that he or she has requested, the request returns a Client.UnauthorizedOperation response (an HTTP 403 response). Some Amazon Web Services operations additionally return an encoded message that can provide details about this authorization failure.\n\nNote\n\nOnly certain Amazon Web Services operations return an encoded authorization message. The documentation for an individual operation indicates whether that operation returns an encoded message in addition to returning an HTTP code.\n\nThe message is encoded because the details of the authorization status can constitute privileged information that the user who requested the operation should not see. To decode an authorization status message, a user must be granted permissions via an IAM policy to request the DecodeAuthorizationMessage (sts:DecodeAuthorizationMessage ) action.\n\nThe decoded message includes the following type of information:\n\nWhether the request was denied due to an explicit deny or due to the absence of an explicit allow. For more information, see Determining Whether a Request is Allowed or Denied in the IAM User Guide .\n\nThe principal who made the request.\n\nThe requested action.\n\nThe requested resource.\n\nThe values of condition keys in the context of the user’s request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  decode-authorization-message\n--encoded-message <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--encoded-message <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--encoded-message (string)\n\nThe encoded message that was returned with the response.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nDecodedMessage -> (string)\n\nAn XML document that contains the decoded message."
    },
    {
      "command_name": "get-access-key-info",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/get-access-key-info.html",
      "command_description": "Description\n\nReturns the account identifier for the specified access key ID.\n\nAccess keys consist of two parts: an access key ID (for example, AKIAIOSFODNN7EXAMPLE ) and a secret access key (for example, wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY ). For more information about access keys, see Managing Access Keys for IAM Users in the IAM User Guide .\n\nWhen you pass an access key ID to this operation, it returns the ID of the Amazon Web Services account to which the keys belong. Access key IDs beginning with AKIA are long-term credentials for an IAM user or the Amazon Web Services account root user. Access key IDs beginning with ASIA are temporary credentials that are created using STS operations. If the account in the response belongs to you, you can sign in as the root user and review your root user access keys. Then, you can pull a credentials report to learn which IAM user owns the keys. To learn who requested the temporary credentials for an ASIA access key, view the STS events in your CloudTrail logs in the IAM User Guide .\n\nThis operation does not indicate the state of the access key. The key might be active, inactive, or deleted. Active keys might not have permissions to perform an operation. Providing a deleted access key might return an error that the key doesn’t exist.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-access-key-info\n--access-key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--access-key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--access-key-id (string)\n\nThe identifier of an access key.\n\nThis parameter allows (through its regex pattern) a string of characters that can consist of any upper- or lowercase letter or digit.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nAccount -> (string)\n\nThe number used to identify the Amazon Web Services account."
    },
    {
      "command_name": "get-caller-identity",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/get-caller-identity.html",
      "command_description": "Description\n\nReturns details about the IAM user or role whose credentials are used to call the operation.\n\nNote\n\nNo permissions are required to perform this operation. If an administrator adds a policy to your IAM user or role that explicitly denies access to the sts:GetCallerIdentity action, you can still perform this operation. Permissions are not required because the same information is returned when an IAM user or role is denied access. To view an example response, see I Am Not Authorized to Perform: iam:DeleteVirtualMFADevice in the IAM User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-caller-identity\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nUserId -> (string)\n\nThe unique identifier of the calling entity. The exact value depends on the type of entity that is making the call. The values returned are those listed in the aws:userid column in the Principal table found on the Policy Variables reference page in the IAM User Guide .\n\nAccount -> (string)\n\nThe Amazon Web Services account ID number of the account that owns or contains the calling entity.\n\nArn -> (string)\n\nThe Amazon Web Services ARN associated with the calling entity.",
      "command_examples": "Examples\n\nTo get details about the current IAM identity\n\nThe following get-caller-identity example displays information about the IAM identity used to authenticate the request. The caller is an IAM user.\n\naws sts get-caller-identity\n\n\nOutput:\n\n{\n    \"UserId\": \"AIDASAMPLEUSERID\",\n    \"Account\": \"123456789012\",\n    \"Arn\": \"arn:aws:iam::123456789012:user/DevAdmin\"\n}\n"
    },
    {
      "command_name": "get-federation-token",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/get-federation-token.html",
      "command_description": "Description\n\nReturns a set of temporary security credentials (consisting of an access key ID, a secret access key, and a security token) for a federated user. A typical use is in a proxy application that gets temporary security credentials on behalf of distributed applications inside a corporate network. You must call the GetFederationToken operation using the long-term security credentials of an IAM user. As a result, this call is appropriate in contexts where those credentials can be safely stored, usually in a server-based application. For a comparison of GetFederationToken with the other API operations that produce temporary credentials, see Requesting Temporary Security Credentials and Comparing the STS API operations in the IAM User Guide .\n\nNote\n\nYou can create a mobile-based or browser-based app that can authenticate users using a web identity provider like Login with Amazon, Facebook, Google, or an OpenID Connect-compatible identity provider. In this case, we recommend that you use Amazon Cognito or AssumeRoleWithWebIdentity . For more information, see Federation Through a Web-based Identity Provider in the IAM User Guide .\n\nYou can also call GetFederationToken using the security credentials of an Amazon Web Services account root user, but we do not recommend it. Instead, we recommend that you create an IAM user for the purpose of the proxy application. Then attach a policy to the IAM user that limits federated users to only the actions and resources that they need to access. For more information, see IAM Best Practices in the IAM User Guide .\n\nSession duration\n\nThe temporary credentials are valid for the specified duration, from 900 seconds (15 minutes) up to a maximum of 129,600 seconds (36 hours). The default session duration is 43,200 seconds (12 hours). Temporary credentials that are obtained by using Amazon Web Services account root user credentials have a maximum duration of 3,600 seconds (1 hour).\n\nPermissions\n\nYou can use the temporary credentials created by GetFederationToken in any Amazon Web Services service except the following:\n\nYou cannot call any IAM operations using the CLI or the Amazon Web Services API.\n\nYou cannot call any STS operations except GetCallerIdentity .\n\nYou must pass an inline or managed session policy to this operation. You can pass a single JSON policy document to use as an inline session policy. You can also specify up to 10 managed policies to use as managed session policies. The plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters.\n\nThough the session policy parameters are optional, if you do not pass a policy, then the resulting federated user session has no permissions. When you pass session policies, the session permissions are the intersection of the IAM user policies and the session policies that you pass. This gives you a way to further restrict the permissions for a federated user. You cannot use session policies to grant more permissions than those that are defined in the permissions policy of the IAM user. For more information, see Session Policies in the IAM User Guide . For information about using GetFederationToken to create temporary security credentials, see GetFederationToken—Federation Through a Custom Identity Broker .\n\nYou can use the credentials to access a resource that has a resource-based policy. If that policy specifically references the federated user session in the Principal element of the policy, the session has the permissions allowed by the policy. These permissions are granted in addition to the permissions granted by the session policies.\n\nTags\n\n(Optional) You can pass tag key-value pairs to your session. These are called session tags. For more information about session tags, see Passing Session Tags in STS in the IAM User Guide .\n\nNote\n\nYou can create a mobile-based or browser-based app that can authenticate users using a web identity provider like Login with Amazon, Facebook, Google, or an OpenID Connect-compatible identity provider. In this case, we recommend that you use Amazon Cognito or AssumeRoleWithWebIdentity . For more information, see Federation Through a Web-based Identity Provider in the IAM User Guide .\n\nYou can also call GetFederationToken using the security credentials of an Amazon Web Services account root user, but we do not recommend it. Instead, we recommend that you create an IAM user for the purpose of the proxy application. Then attach a policy to the IAM user that limits federated users to only the actions and resources that they need to access. For more information, see IAM Best Practices in the IAM User Guide .\n\nSession duration\n\nThe temporary credentials are valid for the specified duration, from 900 seconds (15 minutes) up to a maximum of 129,600 seconds (36 hours). The default session duration is 43,200 seconds (12 hours). Temporary credentials that are obtained by using Amazon Web Services account root user credentials have a maximum duration of 3,600 seconds (1 hour).\n\nPermissions\n\nYou can use the temporary credentials created by GetFederationToken in any Amazon Web Services service except the following:\n\nYou cannot call any IAM operations using the CLI or the Amazon Web Services API.\n\nYou cannot call any STS operations except GetCallerIdentity .\n\nYou must pass an inline or managed session policy to this operation. You can pass a single JSON policy document to use as an inline session policy. You can also specify up to 10 managed policies to use as managed session policies. The plain text that you use for both inline and managed session policies can’t exceed 2,048 characters.\n\nThough the session policy parameters are optional, if you do not pass a policy, then the resulting federated user session has no permissions. When you pass session policies, the session permissions are the intersection of the IAM user policies and the session policies that you pass. This gives you a way to further restrict the permissions for a federated user. You cannot use session policies to grant more permissions than those that are defined in the permissions policy of the IAM user. For more information, see Session Policies in the IAM User Guide . For information about using GetFederationToken to create temporary security credentials, see GetFederationToken—Federation Through a Custom Identity Broker .\n\nYou can use the credentials to access a resource that has a resource-based policy. If that policy specifically references the federated user session in the Principal element of the policy, the session has the permissions allowed by the policy. These permissions are granted in addition to the permissions granted by the session policies.\n\nTags\n\n(Optional) You can pass tag key-value pairs to your session. These are called session tags. For more information about session tags, see Passing Session Tags in STS in the IAM User Guide .\n\nAn administrator must grant you the permissions necessary to pass session tags. The administrator can also create granular permissions to allow you to pass only specific session tags. For more information, see Tutorial: Using Tags for Attribute-Based Access Control in the IAM User Guide .\n\nTag key–value pairs are not case sensitive, but case is preserved. This means that you cannot have separate Department and department tag keys. Assume that the user that you are federating has the Department =``Marketing`` tag and you pass the department =``engineering`` session tag. Department and department are not saved as separate tags, and the session tag passed in the request takes precedence over the user tag.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-federation-token\n--name <value>\n[--policy <value>]\n[--policy-arns <value>]\n[--duration-seconds <value>]\n[--tags <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--name <value>",
        "[--policy <value>]",
        "[--policy-arns <value>]",
        "[--duration-seconds <value>]",
        "[--tags <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--name (string)\n\nThe name of the federated user. The name is used as an identifier for the temporary security credentials (such as Bob ). For example, you can reference the federated user name in a resource-based policy, such as in an Amazon S3 bucket policy.\n\nThe regex used to validate this parameter is a string of characters consisting of upper- and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@-\n\n--policy (string)\n\nAn IAM policy in JSON format that you want to use as an inline session policy.\n\nYou must pass an inline or managed session policy to this operation. You can pass a single JSON policy document to use as an inline session policy. You can also specify up to 10 managed policies to use as managed session policies.\n\nThis parameter is optional. However, if you do not pass any session policies, then the resulting federated user session has no permissions.\n\nWhen you pass session policies, the session permissions are the intersection of the IAM user policies and the session policies that you pass. This gives you a way to further restrict the permissions for a federated user. You cannot use session policies to grant more permissions than those that are defined in the permissions policy of the IAM user. For more information, see Session Policies in the IAM User Guide .\n\nThe resulting credentials can be used to access a resource that has a resource-based policy. If that policy specifically references the federated user session in the Principal element of the policy, the session has the permissions allowed by the policy. These permissions are granted in addition to the permissions that are granted by the session policies.\n\nThe plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. The JSON policy characters can be any ASCII character from the space character to the end of the valid character list (u0020 through u00FF). It can also include the tab (u0009), linefeed (u000A), and carriage return (u000D) characters.\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\n--policy-arns (list)\n\nThe Amazon Resource Names (ARNs) of the IAM managed policies that you want to use as a managed session policy. The policies must exist in the same account as the IAM user that is requesting federated access.\n\nYou must pass an inline or managed session policy to this operation. You can pass a single JSON policy document to use as an inline session policy. You can also specify up to 10 managed policies to use as managed session policies. The plaintext that you use for both inline and managed session policies can’t exceed 2,048 characters. You can provide up to 10 managed policy ARNs. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference.\n\nThis parameter is optional. However, if you do not pass any session policies, then the resulting federated user session has no permissions.\n\nWhen you pass session policies, the session permissions are the intersection of the IAM user policies and the session policies that you pass. This gives you a way to further restrict the permissions for a federated user. You cannot use session policies to grant more permissions than those that are defined in the permissions policy of the IAM user. For more information, see Session Policies in the IAM User Guide .\n\nThe resulting credentials can be used to access a resource that has a resource-based policy. If that policy specifically references the federated user session in the Principal element of the policy, the session has the permissions allowed by the policy. These permissions are granted in addition to the permissions that are granted by the session policies.\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\n(structure)\n\nA reference to the IAM managed policy that is passed as a session policy for a role session or a federated user session.\n\narn -> (string)\n\nThe Amazon Resource Name (ARN) of the IAM managed policy to use as a session policy for the role. For more information about ARNs, see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces in the Amazon Web Services General Reference .\n\nShorthand Syntax:\n\narn=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"arn\": \"string\"\n  }\n  ...\n]\n\n\n--duration-seconds (integer)\n\nThe duration, in seconds, that the session should last. Acceptable durations for federation sessions range from 900 seconds (15 minutes) to 129,600 seconds (36 hours), with 43,200 seconds (12 hours) as the default. Sessions obtained using Amazon Web Services account root user credentials are restricted to a maximum of 3,600 seconds (one hour). If the specified duration is longer than one hour, the session obtained by using root user credentials defaults to one hour.\n\n--tags (list)\n\nA list of session tags. Each session tag consists of a key name and an associated value. For more information about session tags, see Passing Session Tags in STS in the IAM User Guide .\n\nThis parameter is optional. You can pass up to 50 session tags. The plaintext session tag keys can’t exceed 128 characters and the values can’t exceed 256 characters. For these and additional limits, see IAM and STS Character Limits in the IAM User Guide .\n\nNote\n\nAn Amazon Web Services conversion compresses the passed session policies and session tags into a packed binary format that has a separate limit. Your request can fail for this limit even if your plaintext meets the other requirements. The PackedPolicySize response element indicates by percentage how close the policies and tags for your request are to the upper size limit.\n\nYou can pass a session tag with the same key as a tag that is already attached to the user you are federating. When you do, session tags override a user tag with the same key.\n\nTag key–value pairs are not case sensitive, but case is preserved. This means that you cannot have separate Department and department tag keys. Assume that the role has the Department =``Marketing`` tag and you pass the department =``engineering`` session tag. Department and department are not saved as separate tags, and the session tag passed in the request takes precedence over the role tag.\n\n(structure)\n\nYou can pass custom key-value pair attributes when you assume a role or federate a user. These are called session tags. You can then use the session tags to control access to resources. For more information, see Tagging STS Sessions in the IAM User Guide .\n\nKey -> (string)\n\nThe key for a session tag.\n\nYou can pass up to 50 session tags. The plain text session tag keys can’t exceed 128 characters. For these and additional limits, see IAM and STS Character Limits in the IAM User Guide .\n\nValue -> (string)\n\nThe value for a session tag.\n\nYou can pass up to 50 session tags. The plain text session tag values can’t exceed 256 characters. For these and additional limits, see IAM and STS Character Limits in the IAM User Guide .\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCredentials -> (structure)\n\nThe temporary security credentials, which include an access key ID, a secret access key, and a security (or session) token.\n\nNote\n\nThe size of the security token that STS API operations return is not fixed. We strongly recommend that you make no assumptions about the maximum size.\n\nAccessKeyId -> (string)\n\nThe access key ID that identifies the temporary security credentials.\n\nSecretAccessKey -> (string)\n\nThe secret access key that can be used to sign requests.\n\nSessionToken -> (string)\n\nThe token that users must pass to the service API to use the temporary credentials.\n\nExpiration -> (timestamp)\n\nThe date on which the current credentials expire.\n\nFederatedUser -> (structure)\n\nIdentifiers for the federated user associated with the credentials (such as arn:aws:sts::123456789012:federated-user/Bob or 123456789012:Bob ). You can use the federated user’s ARN in your resource-based policies, such as an Amazon S3 bucket policy.\n\nFederatedUserId -> (string)\n\nThe string that identifies the federated user associated with the credentials, similar to the unique ID of an IAM user.\n\nArn -> (string)\n\nThe ARN that specifies the federated user that is associated with the credentials. For more information about ARNs and how to use them in policies, see IAM Identifiers in the IAM User Guide .\n\nPackedPolicySize -> (integer)\n\nA percentage value that indicates the packed size of the session policies and session tags combined passed in the request. The request fails if the packed size is greater than 100 percent, which means the policies and tags exceeded the allowed space."
    },
    {
      "command_name": "get-session-token",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/sts/get-session-token.html",
      "command_description": "Description\n\nReturns a set of temporary credentials for an Amazon Web Services account or IAM user. The credentials consist of an access key ID, a secret access key, and a security token. Typically, you use GetSessionToken if you want to use MFA to protect programmatic calls to specific Amazon Web Services API operations like Amazon EC2 StopInstances . MFA-enabled IAM users would need to call GetSessionToken and submit an MFA code that is associated with their MFA device. Using the temporary security credentials that are returned from the call, IAM users can then make programmatic calls to API operations that require MFA authentication. If you do not supply a correct MFA code, then the API returns an access denied error. For a comparison of GetSessionToken with the other API operations that produce temporary credentials, see Requesting Temporary Security Credentials and Comparing the STS API operations in the IAM User Guide .\n\nSession Duration\n\nThe GetSessionToken operation must be called by using the long-term Amazon Web Services security credentials of the Amazon Web Services account root user or an IAM user. Credentials that are created by IAM users are valid for the duration that you specify. This duration can range from 900 seconds (15 minutes) up to a maximum of 129,600 seconds (36 hours), with a default of 43,200 seconds (12 hours). Credentials based on account credentials can range from 900 seconds (15 minutes) up to 3,600 seconds (1 hour), with a default of 1 hour.\n\nPermissions\n\nThe temporary security credentials created by GetSessionToken can be used to make API calls to any Amazon Web Services service with the following exceptions:\n\nYou cannot call any IAM API operations unless MFA authentication information is included in the request.\n\nYou cannot call any STS API except AssumeRole or GetCallerIdentity .\n\nNote\n\nWe recommend that you do not call GetSessionToken with Amazon Web Services account root user credentials. Instead, follow our best practices by creating one or more IAM users, giving them the necessary permissions, and using IAM users for everyday interaction with Amazon Web Services.\n\nThe credentials that are returned by GetSessionToken are based on permissions associated with the user whose credentials were used to call the operation. If GetSessionToken is called using Amazon Web Services account root user credentials, the temporary credentials have root user permissions. Similarly, if GetSessionToken is called using the credentials of an IAM user, the temporary credentials have the same permissions as the IAM user.\n\nFor more information about using GetSessionToken to create temporary credentials, go to Temporary Credentials for Users in Untrusted Environments in the IAM User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-session-token\n[--duration-seconds <value>]\n[--serial-number <value>]\n[--token-code <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--duration-seconds <value>]",
        "[--serial-number <value>]",
        "[--token-code <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--duration-seconds (integer)\n\nThe duration, in seconds, that the credentials should remain valid. Acceptable durations for IAM user sessions range from 900 seconds (15 minutes) to 129,600 seconds (36 hours), with 43,200 seconds (12 hours) as the default. Sessions for Amazon Web Services account owners are restricted to a maximum of 3,600 seconds (one hour). If the duration is longer than one hour, the session for Amazon Web Services account owners defaults to one hour.\n\n--serial-number (string)\n\nThe identification number of the MFA device that is associated with the IAM user who is making the GetSessionToken call. Specify this value if the IAM user has a policy that requires MFA authentication. The value is either the serial number for a hardware device (such as GAHT12345678 ) or an Amazon Resource Name (ARN) for a virtual device (such as arn:aws:iam::123456789012:mfa/user ). You can find the device for an IAM user by going to the Management Console and viewing the user’s security credentials.\n\nThe regex used to validate this parameter is a string of characters consisting of upper- and lower-case alphanumeric characters with no spaces. You can also include underscores or any of the following characters: =,.@:/-\n\n--token-code (string)\n\nThe value provided by the MFA device, if MFA is required. If any policy requires the IAM user to submit an MFA code, specify this value. If MFA authentication is required, the user must provide a code when requesting a set of temporary security credentials. A user who fails to provide the code receives an “access denied” response when requesting resources that require MFA authentication.\n\nThe format for this parameter, as described by its regex pattern, is a sequence of six numeric digits.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCredentials -> (structure)\n\nThe temporary security credentials, which include an access key ID, a secret access key, and a security (or session) token.\n\nNote\n\nThe size of the security token that STS API operations return is not fixed. We strongly recommend that you make no assumptions about the maximum size.\n\nAccessKeyId -> (string)\n\nThe access key ID that identifies the temporary security credentials.\n\nSecretAccessKey -> (string)\n\nThe secret access key that can be used to sign requests.\n\nSessionToken -> (string)\n\nThe token that users must pass to the service API to use the temporary credentials.\n\nExpiration -> (timestamp)\n\nThe date on which the current credentials expire.",
      "command_examples": "Examples\n\nTo get a set of short term credentials for an IAM identity\n\nThe following get-session-token example retrieves a set of short-term credentials for the IAM identity making the call. The resulting credentials can be used for requests where multi-factor authentication (MFA) is required by policy. The credentials expire 15 minutes after they are generated.\n\naws sts get-session-token \\\n    --duration-seconds 900 \\\n    --serial-number \"YourMFADeviceSerialNumber\" \\\n    --token-code 123456\n\n\nOutput:\n\n{\n    \"Credentials\": {\n        \"AccessKeyId\": \"AKIAIOSFODNN7EXAMPLE\",\n        \"SecretAccessKey\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY\",\n        \"SessionToken\": \"AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5TthT+FvwqnKwRcOIfrRh3c/LTo6UDdyJwOOvEVPvLXCrrrUtdnniCEXAMPLE/IvU1dYUg2RVAJBanLiHb4IgRmpRV3zrkuWJOgQs8IZZaIv2BXIa2R4OlgkBN9bkUDNCJiBeb/AXlzBBko7b15fjrBs2+cTQtpZ3CYWFXG8C5zqx37wnOE49mRl/+OtkIKGO7fAE\",\n        \"Expiration\": \"2020-05-19T18:06:10+00:00\"\n    }\n}\n\n\nFor more information, see Requesting Temporary Security Credentials in the IAM User Guide."
    }
  ],
  "service_description": "Description\n\nSecurity Token Service (STS) enables you to request temporary, limited-privilege credentials for Identity and Access Management (IAM) users or for users that you authenticate (federated users). This guide provides descriptions of the STS API. For more information about using this service, see Temporary Security Credentials ."
}