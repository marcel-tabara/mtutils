{
  "service_name": "kms",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/index.html",
  "service_commands": [
    {
      "command_name": "cancel-key-deletion",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/cancel-key-deletion.html",
      "command_description": "Description\n\nCancels the deletion of a KMS key. When this operation succeeds, the key state of the KMS key is Disabled . To enable the KMS key, use EnableKey .\n\nFor more information about scheduling and canceling deletion of a KMS key, see Deleting KMS keys in the Key Management Service Developer Guide .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:CancelKeyDeletion (key policy)\n\nRelated operations : ScheduleKeyDeletion\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  cancel-key-deletion\n--key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the KMS key whose deletion is being canceled.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the KMS key whose deletion is canceled.",
      "command_examples": "Examples\n\nTo cancel the scheduled deletion of a customer managed CMK\n\nThe following cancel-key-deletion example cancels the scheduled deletion of a customer managed CMK and re-enables the CMK so you can use it in cryptographic operations.\n\nThe first command in the example uses the cancel-key-deletion command to cancel the scheduled deletion of the CMK. It uses the --key-id parameter to identify the CMK. This example uses a key ID value, but you can use either the key ID or the key ARN of the CMK.\n\nTo re-enable the CMK, use the enable-key command. To identify the CMK, use the --key-id parameter. This example uses a key ID value, but you can use either the key ID or the key ARN of the CMK.\n\naws kms cancel-key-deletion \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThe cancel-key-deletion response returns the key ARN of the CMK whose deletion was canceled.\n\n{\n    \"KeyId\": \"arn:aws:kms:us-west-2:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab\"\n}\n\n\nWhen the cancel-key-deletion command succeeds, the scheduled deletion is canceled. However, the key state of the CMK is Disabled, so you can’t use the CMK in cryptographic operations. To restore its functionality, you must re-enable the CMK.\n\naws kms enable-key \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThe enable-key operation does not return a response. To verify that the CMK is re-enabled and there is no deletion date associated with the CMK, use the describe-key operation.\n\nFor more information, see Scheduling and Canceling Key Deletion in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "connect-custom-key-store",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/connect-custom-key-store.html",
      "command_description": "Description\n\nConnects or reconnects a custom key store to its associated CloudHSM cluster.\n\nThe custom key store must be connected before you can create KMS keys in the key store or use the KMS keys it contains. You can disconnect and reconnect a custom key store at any time.\n\nTo connect a custom key store, its associated CloudHSM cluster must have at least one active HSM. To get the number of active HSMs in a cluster, use the DescribeClusters operation. To add HSMs to the cluster, use the CreateHsm operation. Also, the ` kmsuser crypto user <https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser>`__ (CU) must not be logged into the cluster. This prevents KMS from using this account to log in.\n\nThe connection process can take an extended amount of time to complete; up to 20 minutes. This operation starts the connection process, but it does not wait for it to complete. When it succeeds, this operation quickly returns an HTTP 200 response and a JSON object with no properties. However, this response does not indicate that the custom key store is connected. To get the connection state of the custom key store, use the DescribeCustomKeyStores operation.\n\nDuring the connection process, KMS finds the CloudHSM cluster that is associated with the custom key store, creates the connection infrastructure, connects to the cluster, logs into the CloudHSM client as the kmsuser CU, and rotates its password.\n\nThe ConnectCustomKeyStore operation might fail for various reasons. To find the reason, use the DescribeCustomKeyStores operation and see the ConnectionErrorCode in the response. For help interpreting the ConnectionErrorCode , see CustomKeyStoresListEntry .\n\nTo fix the failure, use the DisconnectCustomKeyStore operation to disconnect the custom key store, correct the error, use the UpdateCustomKeyStore operation if necessary, and then use ConnectCustomKeyStore again.\n\nIf you are having trouble connecting or disconnecting a custom key store, see Troubleshooting a Custom Key Store in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a custom key store in a different Amazon Web Services account.\n\nRequired permissions : kms:ConnectCustomKeyStore (IAM policy)\n\nRelated operations\n\nCreateCustomKeyStore\n\nDeleteCustomKeyStore\n\nDescribeCustomKeyStores\n\nDisconnectCustomKeyStore\n\nUpdateCustomKeyStore\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  connect-custom-key-store\n--custom-key-store-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--custom-key-store-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--custom-key-store-id (string)\n\nEnter the key store ID of the custom key store that you want to connect. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo connect a custom key store\n\nThe following connect-custom-key-store example reconnects the specified custom key store. You can use a command like this one to connect a custom key store for the first time or to reconnect a key store that was disconnected.\n\naws kms connect-custom-key-store \\\n    --custom-key-store-id cks-1234567890abcdef0\n\n\nThis command does not return any output. To verify that the command was effective, use the describe-custom-key-stores command.\n\nFor more information, see Connecting and Disconnecting a Custom Key Store in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "create-alias",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/create-alias.html",
      "command_description": "Description\n\nCreates a friendly name for a KMS key.\n\nNote\n\nAdding, deleting, or updating an alias can allow or deny permission to the KMS key. For details, see Using ABAC in KMS in the Key Management Service Developer Guide .\n\nYou can use an alias to identify a KMS key in the KMS console, in the DescribeKey operation and in cryptographic operations , such as Encrypt and GenerateDataKey . You can also change the KMS key that’s associated with the alias ( UpdateAlias ) or delete the alias ( DeleteAlias ) at any time. These operations don’t affect the underlying KMS key.\n\nYou can associate the alias with any customer managed key in the same Amazon Web Services Region. Each alias is associated with only one KMS key at a time, but a KMS key can have multiple aliases. A valid KMS key is required. You can’t create an alias without a KMS key.\n\nThe alias must be unique in the account and Region, but you can have aliases with the same name in different Regions. For detailed information about aliases, see Using aliases in the Key Management Service Developer Guide .\n\nThis operation does not return a response. To get the alias that you created, use the ListAliases operation.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on an alias in a different Amazon Web Services account.\n\nRequired permissions\n\nkms:CreateAlias on the alias (IAM policy).\n\nkms:CreateAlias on the KMS key (key policy).\n\nFor details, see Controlling access to aliases in the Key Management Service Developer Guide .\n\nRelated operations:\n\nDeleteAlias\n\nListAliases\n\nUpdateAlias\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-alias\n--alias-name <value>\n--target-key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--alias-name <value>",
        "--target-key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--alias-name (string)\n\nSpecifies the alias name. This value must begin with alias/ followed by a name, such as alias/ExampleAlias .\n\nThe AliasName value must be string of 1-256 characters. It can contain only alphanumeric characters, forward slashes (/), underscores (_), and dashes (-). The alias name cannot begin with alias/aws/ . The alias/aws/ prefix is reserved for Amazon Web Services managed keys .\n\n--target-key-id (string)\n\nAssociates the alias with the specified customer managed key . The KMS key must be in the same Amazon Web Services Region.\n\nA valid key ID is required. If you supply a null or empty string value, this operation returns an error.\n\nFor help finding the key ID and ARN, see Finding the Key ID and ARN in the * Key Management Service Developer Guide * .\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo create an alias for a CMK\n\nThe following create-alias command creates an alias named example-alias for the customer master key (CMK) identified by key ID 1234abcd-12ab-34cd-56ef-1234567890ab.\n\nAlias names must begin with alias/. Do not use alias names that begin with alias/aws; these are reserved for use by AWS.\n\naws kms create-alias \\\n    --alias-name alias/example-alias \\\n    --target-key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n"
    },
    {
      "command_name": "create-custom-key-store",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/create-custom-key-store.html",
      "command_description": "Description\n\nCreates a custom key store that is associated with an CloudHSM cluster that you own and manage.\n\nThis operation is part of the Custom Key Store feature feature in KMS, which combines the convenience and extensive integration of KMS with the isolation and control of a single-tenant key store.\n\nBefore you create the custom key store, you must assemble the required elements, including an CloudHSM cluster that fulfills the requirements for a custom key store. For details about the required elements, see Assemble the Prerequisites in the Key Management Service Developer Guide .\n\nWhen the operation completes successfully, it returns the ID of the new custom key store. Before you can use your new custom key store, you need to use the ConnectCustomKeyStore operation to connect the new key store to its CloudHSM cluster. Even if you are not going to use your custom key store immediately, you might want to connect it to verify that all settings are correct and then disconnect it until you are ready to use it.\n\nFor help with failures, see Troubleshooting a Custom Key Store in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a custom key store in a different Amazon Web Services account.\n\nRequired permissions : kms:CreateCustomKeyStore (IAM policy).\n\nRelated operations:\n\nConnectCustomKeyStore\n\nDeleteCustomKeyStore\n\nDescribeCustomKeyStores\n\nDisconnectCustomKeyStore\n\nUpdateCustomKeyStore\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-custom-key-store\n--custom-key-store-name <value>\n--cloud-hsm-cluster-id <value>\n--trust-anchor-certificate <value>\n--key-store-password <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--custom-key-store-name <value>",
        "--cloud-hsm-cluster-id <value>",
        "--trust-anchor-certificate <value>",
        "--key-store-password <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--custom-key-store-name (string)\n\nSpecifies a friendly name for the custom key store. The name must be unique in your Amazon Web Services account.\n\n--cloud-hsm-cluster-id (string)\n\nIdentifies the CloudHSM cluster for the custom key store. Enter the cluster ID of any active CloudHSM cluster that is not already associated with a custom key store. To find the cluster ID, use the DescribeClusters operation.\n\n--trust-anchor-certificate (string)\n\nEnter the content of the trust anchor certificate for the cluster. This is the content of the customerCA.crt file that you created when you initialized the cluster .\n\n--key-store-password (string)\n\nEnter the password of the ` kmsuser crypto user (CU) account <https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser>`__ in the specified CloudHSM cluster. KMS logs into the cluster as this user to manage key material on your behalf.\n\nThe password must be a string of 7 to 32 characters. Its value is case sensitive.\n\nThis parameter tells KMS the kmsuser account password; it does not change the password in the CloudHSM cluster.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCustomKeyStoreId -> (string)\n\nA unique identifier for the new custom key store.",
      "command_examples": "Examples\n\nTo create a custom key store\n\nThe following create-custom-key-store example creates a custom key store with an existing custom key store.\n\nThis example uses the custom-key-store-name parameter to assign ExampleKeyStore as a friendly name for the key store.\n\nIt uses the cloud-hsm-cluster-id parameter to identify the cluster-1a23b4cdefg cluster.\n\nIt uses the key-store-password parameter to provide the password of the kmsuser user in the cluster-1a23b4cdefg cluster. This gives AWS KMS permission to use the cluster on your behalf.\n\nIt uses the trust-anchor-certificate parameter to specify the customerCA.crt file. In the AWS CLI, the file:// prefix is required.\n\naws kms create-custom-key-store \\\n    --custom-key-store-name ExampleKeyStore \\\n    --cloud-hsm-cluster-id cluster-1a23b4cdefg \\\n    --key-store-password kmsPswd \\\n    --trust-anchor-certificate file://customerCA.crt\n\n\nThe output of this command includes the ID of the new custom key store. You can use this ID to identify the custom key store in other AWS KMS CLI commands.\n\n{\n    \"CustomKeyStoreId\": cks-1234567890abcdef0\n}\n\n\nFor more information, see Creating a Custom Key Store in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "create-grant",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/create-grant.html",
      "command_description": "Description\n\nAdds a grant to a KMS key.\n\nA grant is a policy instrument that allows Amazon Web Services principals to use KMS keys in cryptographic operations. It also can allow them to view a KMS key ( DescribeKey ) and create and manage grants. When authorizing access to a KMS key, grants are considered along with key policies and IAM policies. Grants are often used for temporary permissions because you can create one, use its permissions, and delete it without changing your key policies or IAM policies.\n\nFor detailed information about grants, including grant terminology, see Using grants in the * Key Management Service Developer Guide * . For examples of working with grants in several programming languages, see Programming grants .\n\nThe CreateGrant operation returns a GrantToken and a GrantId .\n\nWhen you create, retire, or revoke a grant, there might be a brief delay, usually less than five minutes, until the grant is available throughout KMS. This state is known as eventual consistency . Once the grant has achieved eventual consistency, the grantee principal can use the permissions in the grant without identifying the grant. However, to use the permissions in the grant immediately, use the GrantToken that CreateGrant returns. For details, see Using a grant token in the * Key Management Service Developer Guide * .\n\nThe CreateGrant operation also returns a GrantId . You can use the GrantId and a key identifier to identify the grant in the RetireGrant and RevokeGrant operations. To find the grant ID, use the ListGrants or ListRetirableGrants operations.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : Yes. To perform this operation on a KMS key in a different Amazon Web Services account, specify the key ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:CreateGrant (key policy)\n\nRelated operations:\n\nListGrants\n\nListRetirableGrants\n\nRetireGrant\n\nRevokeGrant\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-grant\n--key-id <value>\n--grantee-principal <value>\n[--retiring-principal <value>]\n--operations <value>\n[--constraints <value>]\n[--grant-tokens <value>]\n[--name <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--grantee-principal <value>",
        "[--retiring-principal <value>]",
        "--operations <value>",
        "[--constraints <value>]",
        "[--grant-tokens <value>]",
        "[--name <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the KMS key for the grant. The grant gives principals permission to use this KMS key.\n\nSpecify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--grantee-principal (string)\n\nThe identity that gets the permissions specified in the grant.\n\nTo specify the principal, use the Amazon Resource Name (ARN) of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, IAM roles, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see Amazon Web Services Identity and Access Management (IAM) in the Example ARNs section of the Amazon Web Services General Reference .\n\n--retiring-principal (string)\n\nThe principal that has permission to use the RetireGrant operation to retire the grant.\n\nTo specify the principal, use the Amazon Resource Name (ARN) of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax to use for specifying a principal, see Amazon Web Services Identity and Access Management (IAM) in the Example ARNs section of the Amazon Web Services General Reference .\n\nThe grant determines the retiring principal. Other principals might have permission to retire the grant or revoke the grant. For details, see RevokeGrant and Retiring and revoking grants in the Key Management Service Developer Guide .\n\n--operations (list)\n\nA list of operations that the grant permits.\n\nThe operation must be supported on the KMS key. For example, you cannot create a grant for a symmetric KMS key that allows the Sign operation, or a grant for an asymmetric KMS key that allows the GenerateDataKey operation. If you try, KMS returns a ValidationError exception. For details, see Grant operations in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\nWhere valid values are:\n  Decrypt\n  Encrypt\n  GenerateDataKey\n  GenerateDataKeyWithoutPlaintext\n  ReEncryptFrom\n  ReEncryptTo\n  Sign\n  Verify\n  GetPublicKey\n  CreateGrant\n  RetireGrant\n  DescribeKey\n  GenerateDataKeyPair\n  GenerateDataKeyPairWithoutPlaintext\n\n\n--constraints (structure)\n\nSpecifies a grant constraint.\n\nKMS supports the EncryptionContextEquals and EncryptionContextSubset grant constraints. Each constraint value can include up to 8 encryption context pairs. The encryption context value in each constraint cannot exceed 384 characters.\n\nThese grant constraints allow the permissions in the grant only when the encryption context in the request matches (EncryptionContextEquals ) or includes (EncryptionContextSubset ) the encryption context specified in this structure. For information about grant constraints, see Using grant constraints in the Key Management Service Developer Guide . For more information about encryption context, see Encryption Context in the * Key Management Service Developer Guide * .\n\nThe encryption context grant constraints are supported only on operations that include an encryption context. You cannot use an encryption context grant constraint for cryptographic operations with asymmetric KMS keys or for management operations, such as DescribeKey or RetireGrant .\n\nEncryptionContextSubset -> (map)\n\nA list of key-value pairs that must be included in the encryption context of the cryptographic operation request. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs.\n\nkey -> (string)\n\nvalue -> (string)\n\nEncryptionContextEquals -> (map)\n\nA list of key-value pairs that must match the encryption context in the cryptographic operation request. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint.\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nEncryptionContextSubset={KeyName1=string,KeyName2=string},EncryptionContextEquals={KeyName1=string,KeyName2=string}\n\n\nJSON Syntax:\n\n{\n  \"EncryptionContextSubset\": {\"string\": \"string\"\n    ...},\n  \"EncryptionContextEquals\": {\"string\": \"string\"\n    ...}\n}\n\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--name (string)\n\nA friendly name for the grant. Use this value to prevent the unintended creation of duplicate grants when retrying this request.\n\nWhen this value is absent, all CreateGrant requests result in a new grant with a unique GrantId even if all the supplied parameters are identical. This can result in unintended duplicates when you retry the CreateGrant request.\n\nWhen this value is present, you can retry a CreateGrant request with identical parameters; if the grant already exists, the original GrantId is returned without creating a new grant. Note that the returned grant token is unique with every CreateGrant request, even when a duplicate GrantId is returned. All grant tokens for the same grant ID can be used interchangeably.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nGrantToken -> (string)\n\nThe grant token.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\nGrantId -> (string)\n\nThe unique identifier for the grant.\n\nYou can use the GrantId in a ListGrants , RetireGrant , or RevokeGrant operation.",
      "command_examples": "Examples\n\nTo create a grant\n\nThe following create-grant example creates a grant that allows the exampleUser user to use the decrypt command on the 1234abcd-12ab-34cd-56ef-1234567890ab example CMK. The retiring principal is the adminRole role. The grant uses the EncryptionContextSubset grant constraint to allow this permission only when the encryption context in the decrypt request includes the “Department”: “IT” key-value pair.\n\naws kms create-grant \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --grantee-principal arn:aws:iam::123456789012:user/exampleUser \\\n    --operations Decrypt \\\n    --constraints EncryptionContextSubset={Department=IT} \\\n    --retiring-principal arn:aws:iam::123456789012:role/adminRole\n\n\nThe output of this command includes the ID of the new grant and a grant token. You can use the ID and token to identify the grant to other AWS KMS CLI commands, including retire-grant and revoke-grant.\n\n{\n    \"GrantId\": \"1a2b3c4d2f5e69f440bae30eaec9570bb1fb7358824f9ddfa1aa5a0dab1a59b2\",\n    \"GrantToken\": \"<grant token here>\"\n}\n\n\nTo view detailed information about the grant, use the list-grants command.\n\nFor more information, see Using Grants in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "create-key",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/create-key.html",
      "command_description": "Description\n\nCreates a unique customer managed KMS key in your Amazon Web Services account and Region.\n\nNote\n\nKMS is replacing the term customer master key (CMK) with KMS key and KMS key . The concept has not changed. To prevent breaking changes, KMS is keeping some variations of this term.\n\nYou can use the CreateKey operation to create symmetric or asymmetric KMS keys.\n\nSymmetric KMS keys contain a 256-bit symmetric key that never leaves KMS unencrypted. To use the KMS key, you must call KMS. You can use a symmetric KMS key to encrypt and decrypt small amounts of data, but they are typically used to generate data keys and data keys pairs . For details, see GenerateDataKey and GenerateDataKeyPair .\n\nAsymmetric KMS keys can contain an RSA key pair or an Elliptic Curve (ECC) key pair. The private key in an asymmetric KMS key never leaves KMS unencrypted. However, you can use the GetPublicKey operation to download the public key so it can be used outside of KMS. KMS keys with RSA key pairs can be used to encrypt or decrypt data or sign and verify messages (but not both). KMS keys with ECC key pairs can be used only to sign and verify messages.\n\nFor information about symmetric and asymmetric KMS keys, see Using Symmetric and Asymmetric KMS keys in the Key Management Service Developer Guide .\n\nTo create different types of KMS keys, use the following guidance:\n\nAsymmetric KMS keys\n\nTo create an asymmetric KMS key, use the KeySpec parameter to specify the type of key material in the KMS key. Then, use the KeyUsage parameter to determine whether the KMS key will be used to encrypt and decrypt or sign and verify. You can’t change these properties after the KMS key is created.\n\nSymmetric KMS keys\n\nWhen creating a symmetric KMS key, you don’t need to specify the KeySpec or KeyUsage parameters. The default value for KeySpec , SYMMETRIC_DEFAULT , and the default value for KeyUsage , ENCRYPT_DECRYPT , are the only valid values for symmetric KMS keys.\n\nMulti-Region primary keys Imported key material\n\nTo create a multi-Region primary key in the local Amazon Web Services Region, use the MultiRegion parameter with a value of True . To create a multi-Region replica key , that is, a KMS key with the same key ID and key material as a primary key, but in a different Amazon Web Services Region, use the ReplicateKey operation. To change a replica key to a primary key, and its primary key to a replica key, use the UpdatePrimaryRegion operation.\n\nThis operation supports multi-Region keys , an KMS feature that lets you create multiple interoperable KMS keys in different Amazon Web Services Regions. Because these KMS keys have the same key ID, key material, and other metadata, you can use them interchangeably to encrypt data in one Amazon Web Services Region and decrypt it in a different Amazon Web Services Region without re-encrypting the data or making a cross-Region call. For more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide .\n\nYou can create symmetric and asymmetric multi-Region keys and multi-Region keys with imported key material. You cannot create multi-Region keys in a custom key store.\n\nTo import your own key material, begin by creating a symmetric KMS key with no key material. To do this, use the Origin parameter of CreateKey with a value of EXTERNAL . Next, use GetParametersForImport operation to get a public key and import token, and use the public key to encrypt your key material. Then, use ImportKeyMaterial with your import token to import the key material. For step-by-step instructions, see Importing Key Material in the * Key Management Service Developer Guide * . You cannot import the key material into an asymmetric KMS key.\n\nTo create a multi-Region primary key with imported key material, use the Origin parameter of CreateKey with a value of EXTERNAL and the MultiRegion parameter with a value of True . To create replicas of the multi-Region primary key, use the ReplicateKey operation. For more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide .\n\nCustom key store\n\nTo create a symmetric KMS key in a custom key store , use the CustomKeyStoreId parameter to specify the custom key store. You must also use the Origin parameter with a value of AWS_CLOUDHSM . The CloudHSM cluster that is associated with the custom key store must have at least two active HSMs in different Availability Zones in the Amazon Web Services Region.\n\nYou cannot create an asymmetric KMS key in a custom key store. For information about custom key stores in KMS see Using Custom Key Stores in the * Key Management Service Developer Guide * .\n\nCross-account use : No. You cannot use this operation to create a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:CreateKey (IAM policy). To use the Tags parameter, kms:TagResource (IAM policy). For examples and information about related permissions, see Allow a user to create KMS keys in the Key Management Service Developer Guide .\n\nRelated operations:\n\nDescribeKey\n\nListKeys\n\nScheduleKeyDeletion\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-key\n[--policy <value>]\n[--description <value>]\n[--key-usage <value>]\n[--customer-master-key-spec <value>]\n[--key-spec <value>]\n[--origin <value>]\n[--custom-key-store-id <value>]\n[--bypass-policy-lockout-safety-check | --no-bypass-policy-lockout-safety-check]\n[--tags <value>]\n[--multi-region | --no-multi-region]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--policy <value>]",
        "[--description <value>]",
        "[--key-usage <value>]",
        "[--customer-master-key-spec <value>]",
        "[--key-spec <value>]",
        "[--origin <value>]",
        "[--custom-key-store-id <value>]",
        "[--bypass-policy-lockout-safety-check | --no-bypass-policy-lockout-safety-check]",
        "[--tags <value>]",
        "[--multi-region | --no-multi-region]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--policy (string)\n\nThe key policy to attach to the KMS key.\n\nIf you provide a key policy, it must meet the following criteria:\n\nIf you don’t set BypassPolicyLockoutSafetyCheck to true, the key policy must allow the principal that is making the CreateKey request to make a subsequent PutKeyPolicy request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, refer to the scenario in the Default Key Policy section of the * Key Management Service Developer Guide * .\n\nEach statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see Changes that I make are not always immediately visible in the Amazon Web Services Identity and Access Management User Guide .\n\nIf you do not provide a key policy, KMS attaches a default key policy to the KMS key. For more information, see Default Key Policy in the Key Management Service Developer Guide .\n\nThe key policy size quota is 32 kilobytes (32768 bytes).\n\nFor help writing and formatting a JSON policy document, see the IAM JSON Policy Reference in the * Identity and Access Management User Guide * .\n\n--description (string)\n\nA description of the KMS key.\n\nUse a description that helps you decide whether the KMS key is appropriate for a task. The default value is an empty string (no description).\n\nTo set or change the description after the key is created, use UpdateKeyDescription .\n\n--key-usage (string)\n\nDetermines the cryptographic operations for which you can use the KMS key. The default value is ENCRYPT_DECRYPT . This parameter is required only for asymmetric KMS keys. You can’t change the KeyUsage value after the KMS key is created.\n\nSelect only one valid value.\n\nFor symmetric KMS keys, omit the parameter or specify ENCRYPT_DECRYPT .\n\nFor asymmetric KMS keys with RSA key material, specify ENCRYPT_DECRYPT or SIGN_VERIFY .\n\nFor asymmetric KMS keys with ECC key material, specify SIGN_VERIFY .\n\nPossible values:\n\nSIGN_VERIFY\n\nENCRYPT_DECRYPT\n\n--customer-master-key-spec (string)\n\nInstead, use the KeySpec parameter.\n\nThe KeySpec and CustomerMasterKeySpec parameters work the same way. Only the names differ. We recommend that you use KeySpec parameter in your code. However, to avoid breaking changes, KMS will support both parameters.\n\nPossible values:\n\nRSA_2048\n\nRSA_3072\n\nRSA_4096\n\nECC_NIST_P256\n\nECC_NIST_P384\n\nECC_NIST_P521\n\nECC_SECG_P256K1\n\nSYMMETRIC_DEFAULT\n\n--key-spec (string)\n\nSpecifies the type of KMS key to create. The default value, SYMMETRIC_DEFAULT , creates a KMS key with a 256-bit symmetric key for encryption and decryption. For help choosing a key spec for your KMS key, see How to Choose Your KMS key Configuration in the * Key Management Service Developer Guide * .\n\nThe KeySpec determines whether the KMS key contains a symmetric key or an asymmetric key pair. It also determines the encryption algorithms or signing algorithms that the KMS key supports. You can’t change the KeySpec after the KMS key is created. To further restrict the algorithms that can be used with the KMS key, use a condition key in its key policy or IAM policy. For more information, see kms:EncryptionAlgorithm or kms:Signing Algorithm in the * Key Management Service Developer Guide * .\n\nWarning\n\nAmazon Web Services services that are integrated with KMS use symmetric KMS keys to protect your data. These services do not support asymmetric KMS keys. For help determining whether a KMS key is symmetric or asymmetric, see Identifying Symmetric and Asymmetric KMS keys in the Key Management Service Developer Guide .\n\nKMS supports the following key specs for KMS keys:\n\nSymmetric key (default)\n\nSYMMETRIC_DEFAULT (AES-256-GCM)\n\nAsymmetric RSA key pairs\n\nRSA_2048\n\nRSA_3072\n\nRSA_4096\n\nAsymmetric NIST-recommended elliptic curve key pairs\n\nECC_NIST_P256 (secp256r1)\n\nECC_NIST_P384 (secp384r1)\n\nECC_NIST_P521 (secp521r1)\n\nOther asymmetric elliptic curve key pairs\n\nECC_SECG_P256K1 (secp256k1), commonly used for cryptocurrencies.\n\nPossible values:\n\nRSA_2048\n\nRSA_3072\n\nRSA_4096\n\nECC_NIST_P256\n\nECC_NIST_P384\n\nECC_NIST_P521\n\nECC_SECG_P256K1\n\nSYMMETRIC_DEFAULT\n\n--origin (string)\n\nThe source of the key material for the KMS key. You cannot change the origin after you create the KMS key. The default is AWS_KMS , which means that KMS creates the key material.\n\nTo create a KMS key with no key material (for imported key material), set the value to EXTERNAL . For more information about importing key material into KMS, see Importing Key Material in the Key Management Service Developer Guide . This value is valid only for symmetric KMS keys.\n\nTo create a KMS key in an KMS custom key store and create its key material in the associated CloudHSM cluster, set this value to AWS_CLOUDHSM . You must also use the CustomKeyStoreId parameter to identify the custom key store. This value is valid only for symmetric KMS keys.\n\nPossible values:\n\nAWS_KMS\n\nEXTERNAL\n\nAWS_CLOUDHSM\n\n--custom-key-store-id (string)\n\nCreates the KMS key in the specified custom key store and the key material in its associated CloudHSM cluster. To create a KMS key in a custom key store, you must also specify the Origin parameter with a value of AWS_CLOUDHSM . The CloudHSM cluster that is associated with the custom key store must have at least two active HSMs, each in a different Availability Zone in the Region.\n\nThis parameter is valid only for symmetric KMS keys and regional KMS keys. You cannot create an asymmetric KMS key or a multi-Region key in a custom key store.\n\nTo find the ID of a custom key store, use the DescribeCustomKeyStores operation.\n\nThe response includes the custom key store ID and the ID of the CloudHSM cluster.\n\nThis operation is part of the Custom Key Store feature feature in KMS, which combines the convenience and extensive integration of KMS with the isolation and control of a single-tenant key store.\n\n--bypass-policy-lockout-safety-check | --no-bypass-policy-lockout-safety-check (boolean)\n\nA flag to indicate whether to bypass the key policy lockout safety check.\n\nWarning\n\nSetting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately.\n\nFor more information, refer to the scenario in the Default Key Policy section in the * Key Management Service Developer Guide * .\n\nUse this parameter only when you include a policy in the request and you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the KMS key.\n\nThe default value is false.\n\n--tags (list)\n\nAssigns one or more tags to the KMS key. Use this parameter to tag the KMS key when it is created. To tag an existing KMS key, use the TagResource operation.\n\nNote\n\nTagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see Using ABAC in KMS in the Key Management Service Developer Guide .\n\nTo use this parameter, you must have kms:TagResource permission in an IAM policy.\n\nEach tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one.\n\nWhen you add tags to an Amazon Web Services resource, Amazon Web Services generates a cost allocation report with usage and costs aggregated by tags. Tags can also be used to control access to a KMS key. For details, see Tagging Keys .\n\n(structure)\n\nA key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.\n\nFor information about the rules that apply to tag keys and tag values, see User-Defined Tag Restrictions in the Amazon Web Services Billing and Cost Management User Guide .\n\nTagKey -> (string)\n\nThe key of the tag.\n\nTagValue -> (string)\n\nThe value of the tag.\n\nShorthand Syntax:\n\nTagKey=string,TagValue=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"TagKey\": \"string\",\n    \"TagValue\": \"string\"\n  }\n  ...\n]\n\n\n--multi-region | --no-multi-region (boolean)\n\nCreates a multi-Region primary key that you can replicate into other Amazon Web Services Regions. You cannot change this value after you create the KMS key.\n\nFor a multi-Region key, set this parameter to True . For a single-Region KMS key, omit this parameter or set it to False . The default value is False .\n\nThis operation supports multi-Region keys , an KMS feature that lets you create multiple interoperable KMS keys in different Amazon Web Services Regions. Because these KMS keys have the same key ID, key material, and other metadata, you can use them interchangeably to encrypt data in one Amazon Web Services Region and decrypt it in a different Amazon Web Services Region without re-encrypting the data or making a cross-Region call. For more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide .\n\nThis value creates a primary key , not a replica. To create a replica key , use the ReplicateKey operation.\n\nYou can create a symmetric or asymmetric multi-Region key, and you can create a multi-Region key with imported key material. However, you cannot create a multi-Region key in a custom key store.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyMetadata -> (structure)\n\nMetadata associated with the KMS key.\n\nAWSAccountId -> (string)\n\nThe twelve-digit account ID of the Amazon Web Services account that owns the KMS key.\n\nKeyId -> (string)\n\nThe globally unique identifier for the KMS key.\n\nArn -> (string)\n\nThe Amazon Resource Name (ARN) of the KMS key. For examples, see Key Management Service (KMS) in the Example ARNs section of the Amazon Web Services General Reference .\n\nCreationDate -> (timestamp)\n\nThe date and time when the KMS key was created.\n\nEnabled -> (boolean)\n\nSpecifies whether the KMS key is enabled. When KeyState is Enabled this value is true, otherwise it is false.\n\nDescription -> (string)\n\nThe description of the KMS key.\n\nKeyUsage -> (string)\n\nThe cryptographic operations for which you can use the KMS key.\n\nKeyState -> (string)\n\nThe current status of the KMS key.\n\nFor more information about how key state affects the use of a KMS key, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nDeletionDate -> (timestamp)\n\nThe date and time after which KMS deletes this KMS key. This value is present only when the KMS key is scheduled for deletion, that is, when its KeyState is PendingDeletion .\n\nWhen the primary key in a multi-Region key is scheduled for deletion but still has replica keys, its key state is PendingReplicaDeletion and the length of its waiting period is displayed in the PendingDeletionWindowInDays field.\n\nValidTo -> (timestamp)\n\nThe time at which the imported key material expires. When the key material expires, KMS deletes the key material and the KMS key becomes unusable. This value is present only for KMS keys whose Origin is EXTERNAL and whose ExpirationModel is KEY_MATERIAL_EXPIRES , otherwise this value is omitted.\n\nOrigin -> (string)\n\nThe source of the key material for the KMS key. When this value is AWS_KMS , KMS created the key material. When this value is EXTERNAL , the key material was imported or the KMS key doesn’t have any key material. When this value is AWS_CLOUDHSM , the key material was created in the CloudHSM cluster associated with a custom key store.\n\nCustomKeyStoreId -> (string)\n\nA unique identifier for the custom key store that contains the KMS key. This value is present only when the KMS key is created in a custom key store.\n\nCloudHsmClusterId -> (string)\n\nThe cluster ID of the CloudHSM cluster that contains the key material for the KMS key. When you create a KMS key in a custom key store , KMS creates the key material for the KMS key in the associated CloudHSM cluster. This value is present only when the KMS key is created in a custom key store.\n\nExpirationModel -> (string)\n\nSpecifies whether the KMS key’s key material expires. This value is present only when Origin is EXTERNAL , otherwise this value is omitted.\n\nKeyManager -> (string)\n\nThe manager of the KMS key. KMS keys in your Amazon Web Services account are either customer managed or Amazon Web Services managed. For more information about the difference, see KMS keys in the Key Management Service Developer Guide .\n\nCustomerMasterKeySpec -> (string)\n\nInstead, use the KeySpec field.\n\nThe KeySpec and CustomerMasterKeySpec fields have the same value. We recommend that you use the KeySpec field in your code. However, to avoid breaking changes, KMS will support both fields.\n\nKeySpec -> (string)\n\nDescribes the type of key material in the KMS key.\n\nEncryptionAlgorithms -> (list)\n\nThe encryption algorithms that the KMS key supports. You cannot use the KMS key with other encryption algorithms within KMS.\n\nThis value is present only when the KeyUsage of the KMS key is ENCRYPT_DECRYPT .\n\n(string)\n\nSigningAlgorithms -> (list)\n\nThe signing algorithms that the KMS key supports. You cannot use the KMS key with other signing algorithms within KMS.\n\nThis field appears only when the KeyUsage of the KMS key is SIGN_VERIFY .\n\n(string)\n\nMultiRegion -> (boolean)\n\nIndicates whether the KMS key is a multi-Region (True ) or regional (False ) key. This value is True for multi-Region primary and replica keys and False for regional KMS keys.\n\nFor more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide .\n\nMultiRegionConfiguration -> (structure)\n\nLists the primary and replica keys in same multi-Region key. This field is present only when the value of the MultiRegion field is True .\n\nFor more information about any listed KMS key, use the DescribeKey operation.\n\nMultiRegionKeyType indicates whether the KMS key is a PRIMARY or REPLICA key.\n\nPrimaryKey displays the key ARN and Region of the primary key. This field displays the current KMS key if it is the primary key.\n\nReplicaKeys displays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.\n\nMultiRegionKeyType -> (string)\n\nIndicates whether the KMS key is a PRIMARY or REPLICA key.\n\nPrimaryKey -> (structure)\n\nDisplays the key ARN and Region of the primary key. This field includes the current KMS key if it is the primary key.\n\nArn -> (string)\n\nDisplays the key ARN of a primary or replica key of a multi-Region key.\n\nRegion -> (string)\n\nDisplays the Amazon Web Services Region of a primary or replica key in a multi-Region key.\n\nReplicaKeys -> (list)\n\ndisplays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.\n\n(structure)\n\nDescribes the primary or replica key in a multi-Region key.\n\nArn -> (string)\n\nDisplays the key ARN of a primary or replica key of a multi-Region key.\n\nRegion -> (string)\n\nDisplays the Amazon Web Services Region of a primary or replica key in a multi-Region key.\n\nPendingDeletionWindowInDays -> (integer)\n\nThe waiting period before the primary key in a multi-Region key is deleted. This waiting period begins when the last of its replica keys is deleted. This value is present only when the KeyState of the KMS key is PendingReplicaDeletion . That indicates that the KMS key is the primary key in a multi-Region key, it is scheduled for deletion, and it still has existing replica keys.\n\nWhen a single-Region KMS key or a multi-Region replica key is scheduled for deletion, its deletion date is displayed in the DeletionDate field. However, when the primary key in a multi-Region key is scheduled for deletion, its waiting period doesn’t begin until all of its replica keys are deleted. This value displays that waiting period. When the last replica key in the multi-Region key is deleted, the KeyState of the scheduled primary key changes from PendingReplicaDeletion to PendingDeletion and the deletion date appears in the DeletionDate field.",
      "command_examples": "Examples\n\nTo create a customer managed CMK in AWS KMS\n\nThe following create-key example creates a customer managed CMK.\n\nThe --tags parameter uses shorthand syntax to add a tag with a key name Purpose and value of Test. For information about using shorthand syntax, see Using Shorthand Syntax with the AWS Command Line Interface in the AWS CLI User Guide.\n\nThe --description parameter adds an optional description.\n\nBecause this doesn’t specify a policy, the CMK gets the default key policy <https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default>__. To view the key policy, use the ``get-key-policy` command. To change the key policy, use the put-key-policy command.\n\naws kms create-key \\\n    --tags TagKey=Purpose,TagValue=Test \\\n    --description \"Development test key\"\n\n\nThe create-key command returns the key metadata, including the key ID and ARN of the new CMK. You can use these values to identify the CMK to other AWS KMS operations. The output does not include the tags. To view the tags for a CMK, use the list-resource-tags command.\n\n{\n    \"KeyMetadata\": {\n        \"AWSAccountId\": \"123456789012\",\n        \"KeyId\": \"1234abcd-12ab-34cd-56ef-1234567890ab\",\n        \"Arn\": \"arn:aws:kms:us-west-2:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\n        \"CreationDate\": 1566160362.664,\n        \"Enabled\": true,\n        \"Description\": \"Development test key\",\n        \"KeyUsage\": \"ENCRYPT_DECRYPT\",\n        \"KeyState\": \"Enabled\",\n        \"Origin\": \"AWS_KMS\",\n        \"KeyManager\": \"CUSTOMER\"\n    }\n}\n\n\nNote: The create-key command does not let you specify an alias, To create an alias that points to the new CMK, use the create-alias command.\n\nFor more information, see Creating Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "decrypt",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/decrypt.html",
      "command_description": "Description\n\nDecrypts ciphertext that was encrypted by a KMS key using any of the following operations:\n\nEncrypt\n\nGenerateDataKey\n\nGenerateDataKeyPair\n\nGenerateDataKeyWithoutPlaintext\n\nGenerateDataKeyPairWithoutPlaintext\n\nYou can use this operation to decrypt ciphertext that was encrypted under a symmetric or asymmetric KMS key. When the KMS key is asymmetric, you must specify the KMS key and the encryption algorithm that was used to encrypt the ciphertext. For information about symmetric and asymmetric KMS keys, see Using Symmetric and Asymmetric KMS keys in the Key Management Service Developer Guide .\n\nThe Decrypt operation also decrypts ciphertext that was encrypted outside of KMS by the public key in an KMS asymmetric KMS key. However, it cannot decrypt ciphertext produced by other libraries, such as the Amazon Web Services Encryption SDK or Amazon S3 client-side encryption . These libraries return a ciphertext format that is incompatible with KMS.\n\nIf the ciphertext was encrypted under a symmetric KMS key, the KeyId parameter is optional. KMS can get this information from metadata that it adds to the symmetric ciphertext blob. This feature adds durability to your implementation by ensuring that authorized users can decrypt ciphertext decades after it was encrypted, even if they’ve lost track of the key ID. However, specifying the KMS key is always recommended as a best practice. When you use the KeyId parameter to specify a KMS key, KMS only uses the KMS key you specify. If the ciphertext was encrypted under a different KMS key, the Decrypt operation fails. This practice ensures that you use the KMS key that you intend.\n\nWhenever possible, use key policies to give users permission to call the Decrypt operation on a particular KMS key, instead of using IAM policies. Otherwise, you might create an IAM user policy that gives the user Decrypt permission on all KMS keys. This user could decrypt ciphertext that was encrypted by KMS keys in other accounts if the key policy for the cross-account KMS key permits it. If you must use an IAM policy for Decrypt permissions, limit the user to particular KMS keys or particular trusted accounts. For details, see Best practices for IAM policies in the Key Management Service Developer Guide .\n\nApplications in Amazon Web Services Nitro Enclaves can call this operation by using the Amazon Web Services Nitro Enclaves Development Kit . For information about the supporting parameters, see How Amazon Web Services Nitro Enclaves use KMS in the Key Management Service Developer Guide .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:Decrypt (key policy)\n\nRelated operations:\n\nEncrypt\n\nGenerateDataKey\n\nGenerateDataKeyPair\n\nReEncrypt\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  decrypt\n--ciphertext-blob <value>\n[--encryption-context <value>]\n[--grant-tokens <value>]\n[--key-id <value>]\n[--encryption-algorithm <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--ciphertext-blob <value>",
        "[--encryption-context <value>]",
        "[--grant-tokens <value>]",
        "[--key-id <value>]",
        "[--encryption-algorithm <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--ciphertext-blob (blob)\n\nCiphertext to be decrypted. The blob includes metadata.\n\n--encryption-context (map)\n\nSpecifies the encryption context to use when decrypting the data. An encryption context is valid only for cryptographic operations with a symmetric KMS key. The standard asymmetric encryption algorithms that KMS uses do not support an encryption context.\n\nAn encryption context is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric KMS key, but it is highly recommended.\n\nFor more information, see Encryption Context in the Key Management Service Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--key-id (string)\n\nSpecifies the KMS key that KMS uses to decrypt the ciphertext. Enter a key ID of the KMS key that was used to encrypt the ciphertext.\n\nThis parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. If you used a symmetric KMS key, KMS can get the KMS key from metadata that it adds to the symmetric ciphertext blob. However, it is always recommended as a best practice. This practice ensures that you use the KMS key that you intend.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--encryption-algorithm (string)\n\nSpecifies the encryption algorithm that will be used to decrypt the ciphertext. Specify the same algorithm that was used to encrypt the data. If you specify a different algorithm, the Decrypt operation fails.\n\nThis parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. The default value, SYMMETRIC_DEFAULT , represents the only supported algorithm that is valid for symmetric KMS keys.\n\nPossible values:\n\nSYMMETRIC_DEFAULT\n\nRSAES_OAEP_SHA_1\n\nRSAES_OAEP_SHA_256\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the KMS key that was used to decrypt the ciphertext.\n\nPlaintext -> (blob)\n\nDecrypted plaintext data. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.\n\nEncryptionAlgorithm -> (string)\n\nThe encryption algorithm that was used to decrypt the ciphertext.",
      "command_examples": "Examples\n\nExample 1: To decrypt an encrypted message with a symmetric CMK (Linux and macOS)\n\nThe following decrypt command example demonstrates the recommended way to decrypt data with the AWS CLI. This version shows how to decrypt data under a symmetric customer master key (CMK).\n\nProvide the ciphertext in a file.\n\nIn the value of the --ciphertext-blob parameter, use the fileb:// prefix, which tells the CLI to read the data from a binary file. If the file is not in the current directory, type the full path to file. For more information about reading AWS CLI parameter values from a file, see Loading AWS CLI parameters from a file <https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-file.html> in the AWS Command Line Interface User Guide and Best Practices for Local File Parameters<https://aws.amazon.com/blogs/developer/best-practices-for-local-file-parameters/> in the AWS Command Line Tool Blog.\n\nSpecify the CMK to decrypt the ciphertext.\n\nThe --key-id parameter is not required when decrypting with symmetric CMKs. AWS KMS can get the CMK that was used to encrypt the data from the metadata in the ciphertext blob. But it’s always a best practice to specify the CMK you are using. This practice ensures that you use the CMK that you intend, and prevents you from inadvertently decrypting a ciphertext using a CMK you do not trust.\n\nRequest the plaintext output as a text value.\n\nThe --query parameter tells the CLI to get only the value of the Plaintext field from the output. The --output parameter returns the output as text.\n\nBase64-decode the plaintext and save it in a file.\n\nThe following example pipes (|) the value of the Plaintext parameter to the Base64 utility, which decodes it. Then, it redirects (>) the decoded output to the ExamplePlaintext file.\n\nBefore running this command, replace the example key ID with a valid key ID from your AWS account.\n\naws kms decrypt \\\n    --ciphertext-blob fileb://ExampleEncryptedFile \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --output text \\\n    --query Plaintext | base64 \\\n    --decode > ExamplePlaintextFile\n\n\nThis command produces no output. The output from the decrypt command is base64-decoded and saved in a file.\n\nFor more information, see Decrypt in the AWS Key Management Service API Reference.\n\nExample 2: To decrypt an encrypted message with a symmetric CMK (Windows command prompt)\n\nThe following example is the same as the previous one except that it uses the certutil utility to Base64-decode the plaintext data. This procedure requires two commands, as shown in the following examples.\n\nBefore running this command, replace the example key ID with a valid key ID from your AWS account.\n\naws kms decrypt ^\n    --ciphertext-blob fileb://ExampleEncryptedFile ^\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab ^\n    --output text ^\n    --query Plaintext > ExamplePlaintextFile.base64\n\n\nRun the certutil command.\n\ncertutil -decode ExamplePlaintextFile.base64 ExamplePlaintextFile\n\n\nOutput:\n\nInput Length = 18\nOutput Length = 12\nCertUtil: -decode command completed successfully.\n\n\nFor more information, see Decrypt in the AWS Key Management Service API Reference."
    },
    {
      "command_name": "delete-alias",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/delete-alias.html",
      "command_description": "Description\n\nDeletes the specified alias.\n\nNote\n\nAdding, deleting, or updating an alias can allow or deny permission to the KMS key. For details, see Using ABAC in KMS in the Key Management Service Developer Guide .\n\nBecause an alias is not a property of a KMS key, you can delete and change the aliases of a KMS key without affecting the KMS key. Also, aliases do not appear in the response from the DescribeKey operation. To get the aliases of all KMS keys, use the ListAliases operation.\n\nEach KMS key can have multiple aliases. To change the alias of a KMS key, use DeleteAlias to delete the current alias and CreateAlias to create a new alias. To associate an existing alias with a different KMS key, call UpdateAlias .\n\nCross-account use : No. You cannot perform this operation on an alias in a different Amazon Web Services account.\n\nRequired permissions\n\nkms:DeleteAlias on the alias (IAM policy).\n\nkms:DeleteAlias on the KMS key (key policy).\n\nFor details, see Controlling access to aliases in the Key Management Service Developer Guide .\n\nRelated operations:\n\nCreateAlias\n\nListAliases\n\nUpdateAlias\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-alias\n--alias-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--alias-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--alias-name (string)\n\nThe alias to be deleted. The alias name must begin with alias/ followed by the alias name, such as alias/ExampleAlias .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete an AWS KMS alias\n\nThe following delete-alias example deletes the alias alias/example-alias.\n\nThe --alias-name parameter specifies the alias to delete. The alias name must begin with alias/.\n\naws kms delete-alias \\\n    --alias-name alias/example-alias\n\n\nThis command produces no output. To find the alias, use the list-aliases command.\n\nFor more information, see Working with Aliases in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "delete-custom-key-store",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/delete-custom-key-store.html",
      "command_description": "Description\n\nDeletes a custom key store . This operation does not delete the CloudHSM cluster that is associated with the custom key store, or affect any users or keys in the cluster.\n\nThe custom key store that you delete cannot contain any KMS KMS keys . Before deleting the key store, verify that you will never need to use any of the KMS keys in the key store for any cryptographic operations . Then, use ScheduleKeyDeletion to delete the KMS keys from the key store. When the scheduled waiting period expires, the ScheduleKeyDeletion operation deletes the KMS keys. Then it makes a best effort to delete the key material from the associated cluster. However, you might need to manually delete the orphaned key material from the cluster and its backups.\n\nAfter all KMS keys are deleted from KMS, use DisconnectCustomKeyStore to disconnect the key store from KMS. Then, you can delete the custom key store.\n\nInstead of deleting the custom key store, consider using DisconnectCustomKeyStore to disconnect it from KMS. While the key store is disconnected, you cannot create or use the KMS keys in the key store. But, you do not need to delete KMS keys and you can reconnect a disconnected custom key store at any time.\n\nIf the operation succeeds, it returns a JSON object with no properties.\n\nThis operation is part of the Custom Key Store feature feature in KMS, which combines the convenience and extensive integration of KMS with the isolation and control of a single-tenant key store.\n\nCross-account use : No. You cannot perform this operation on a custom key store in a different Amazon Web Services account.\n\nRequired permissions : kms:DeleteCustomKeyStore (IAM policy)\n\nRelated operations:\n\nConnectCustomKeyStore\n\nCreateCustomKeyStore\n\nDescribeCustomKeyStores\n\nDisconnectCustomKeyStore\n\nUpdateCustomKeyStore\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-custom-key-store\n--custom-key-store-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--custom-key-store-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--custom-key-store-id (string)\n\nEnter the ID of the custom key store you want to delete. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete a custom key store\n\nThe following delete-custom-key-store example deletes the specified custom key store. This command doesn’t have any effect on the associated CloudHSM cluster.\n\nNOTE: Before you can delete a custom key store, you must schedule the deletion of all CMKs in the custom key store and then wait for those CMKs to be deleted. Then, you must disconnect the custom key store.\n\ndelete-custom-key-store \\\n    --custom-key-store-id cks-1234567890abcdef0\n\n\nThis command does not return any output. To verify that the custom key store is deleted, use the describe-custom-key-stores command.\n\nFor more information, see Deleting a Custom Key Store in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "delete-imported-key-material",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/delete-imported-key-material.html",
      "command_description": "Description\n\nDeletes key material that you previously imported. This operation makes the specified KMS key unusable. For more information about importing key material into KMS, see Importing Key Material in the Key Management Service Developer Guide .\n\nWhen the specified KMS key is in the PendingDeletion state, this operation does not change the KMS key’s state. Otherwise, it changes the KMS key’s state to PendingImport .\n\nAfter you delete key material, you can use ImportKeyMaterial to reimport the same key material into the KMS key.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:DeleteImportedKeyMaterial (key policy)\n\nRelated operations:\n\nGetParametersForImport\n\nImportKeyMaterial\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-imported-key-material\n--key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the KMS key from which you are deleting imported key material. The Origin of the KMS key must be EXTERNAL .\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete imported key material from a customer master key (CMK)\n\nThe following delete-imported-key-material example deletes key material that had been imported into a CMK. To specify the CMK, use the key-id parameter. This example uses an key ID value, but you can use a key ID or key ARN value in this command.\n\nBefore running this command, replace the example key ID with a valid one.\n\naws kms delete-imported-key-material \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThis command produces no output. To verify that the key material is deleted, use the describe-key command to look for a key state of PendingImport or PendingDeletion.\n\nFor more information, see `Deleting imported key material<https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys-delete-key-material.html>`__ in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "describe-custom-key-stores",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/describe-custom-key-stores.html",
      "command_description": "Description\n\nGets information about custom key stores in the account and Region.\n\nThis operation is part of the Custom Key Store feature feature in KMS, which combines the convenience and extensive integration of KMS with the isolation and control of a single-tenant key store.\n\nBy default, this operation returns information about all custom key stores in the account and Region. To get only information about a particular custom key store, use either the CustomKeyStoreName or CustomKeyStoreId parameter (but not both).\n\nTo determine whether the custom key store is connected to its CloudHSM cluster, use the ConnectionState element in the response. If an attempt to connect the custom key store failed, the ConnectionState value is FAILED and the ConnectionErrorCode element in the response indicates the cause of the failure. For help interpreting the ConnectionErrorCode , see CustomKeyStoresListEntry .\n\nCustom key stores have a DISCONNECTED connection state if the key store has never been connected or you use the DisconnectCustomKeyStore operation to disconnect it. If your custom key store state is CONNECTED but you are having trouble using it, make sure that its associated CloudHSM cluster is active and contains the minimum number of HSMs required for the operation, if any.\n\nFor help repairing your custom key store, see the Troubleshooting Custom Key Stores topic in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a custom key store in a different Amazon Web Services account.\n\nRequired permissions : kms:DescribeCustomKeyStores (IAM policy)\n\nRelated operations:\n\nConnectCustomKeyStore\n\nCreateCustomKeyStore\n\nDeleteCustomKeyStore\n\nDisconnectCustomKeyStore\n\nUpdateCustomKeyStore\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-custom-key-stores\n[--custom-key-store-id <value>]\n[--custom-key-store-name <value>]\n[--limit <value>]\n[--marker <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--custom-key-store-id <value>]",
        "[--custom-key-store-name <value>]",
        "[--limit <value>]",
        "[--marker <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--custom-key-store-id (string)\n\nGets only information about the specified custom key store. Enter the key store ID.\n\nBy default, this operation gets information about all custom key stores in the account and Region. To limit the output to a particular custom key store, you can use either the CustomKeyStoreId or CustomKeyStoreName parameter, but not both.\n\n--custom-key-store-name (string)\n\nGets only information about the specified custom key store. Enter the friendly name of the custom key store.\n\nBy default, this operation gets information about all custom key stores in the account and Region. To limit the output to a particular custom key store, you can use either the CustomKeyStoreId or CustomKeyStoreName parameter, but not both.\n\n--limit (integer)\n\nUse this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.\n\n--marker (string)\n\nUse this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCustomKeyStores -> (list)\n\nContains metadata about each custom key store.\n\n(structure)\n\nContains information about each custom key store in the custom key store list.\n\nCustomKeyStoreId -> (string)\n\nA unique identifier for the custom key store.\n\nCustomKeyStoreName -> (string)\n\nThe user-specified friendly name for the custom key store.\n\nCloudHsmClusterId -> (string)\n\nA unique identifier for the CloudHSM cluster that is associated with the custom key store.\n\nTrustAnchorCertificate -> (string)\n\nThe trust anchor certificate of the associated CloudHSM cluster. When you initialize the cluster , you create this certificate and save it in the customerCA.crt file.\n\nConnectionState -> (string)\n\nIndicates whether the custom key store is connected to its CloudHSM cluster.\n\nYou can create and use KMS keys in your custom key stores only when its connection state is CONNECTED .\n\nThe value is DISCONNECTED if the key store has never been connected or you use the DisconnectCustomKeyStore operation to disconnect it. If the value is CONNECTED but you are having trouble using the custom key store, make sure that its associated CloudHSM cluster is active and contains at least one active HSM.\n\nA value of FAILED indicates that an attempt to connect was unsuccessful. The ConnectionErrorCode field in the response indicates the cause of the failure. For help resolving a connection failure, see Troubleshooting a Custom Key Store in the Key Management Service Developer Guide .\n\nConnectionErrorCode -> (string)\n\nDescribes the connection error. This field appears in the response only when the ConnectionState is FAILED . For help resolving these errors, see How to Fix a Connection Failure in Key Management Service Developer Guide .\n\nValid values are:\n\nCLUSTER_NOT_FOUND - KMS cannot find the CloudHSM cluster with the specified cluster ID.\n\nINSUFFICIENT_CLOUDHSM_HSMS - The associated CloudHSM cluster does not contain any active HSMs. To connect a custom key store to its CloudHSM cluster, the cluster must contain at least one active HSM.\n\nINTERNAL_ERROR - KMS could not complete the request due to an internal error. Retry the request. For ConnectCustomKeyStore requests, disconnect the custom key store before trying to connect again.\n\nINVALID_CREDENTIALS - KMS does not have the correct password for the kmsuser crypto user in the CloudHSM cluster. Before you can connect your custom key store to its CloudHSM cluster, you must change the kmsuser account password and update the key store password value for the custom key store.\n\nNETWORK_ERRORS - Network errors are preventing KMS from connecting to the custom key store.\n\nSUBNET_NOT_FOUND - A subnet in the CloudHSM cluster configuration was deleted. If KMS cannot find all of the subnets in the cluster configuration, attempts to connect the custom key store to the CloudHSM cluster fail. To fix this error, create a cluster from a recent backup and associate it with your custom key store. (This process creates a new cluster configuration with a VPC and private subnets.) For details, see How to Fix a Connection Failure in the Key Management Service Developer Guide .\n\nUSER_LOCKED_OUT - The kmsuser CU account is locked out of the associated CloudHSM cluster due to too many failed password attempts. Before you can connect your custom key store to its CloudHSM cluster, you must change the kmsuser account password and update the key store password value for the custom key store.\n\nUSER_LOGGED_IN - The kmsuser CU account is logged into the the associated CloudHSM cluster. This prevents KMS from rotating the kmsuser account password and logging into the cluster. Before you can connect your custom key store to its CloudHSM cluster, you must log the kmsuser CU out of the cluster. If you changed the kmsuser password to log into the cluster, you must also and update the key store password value for the custom key store. For help, see How to Log Out and Reconnect in the Key Management Service Developer Guide .\n\nUSER_NOT_FOUND - KMS cannot find a kmsuser CU account in the associated CloudHSM cluster. Before you can connect your custom key store to its CloudHSM cluster, you must create a kmsuser CU account in the cluster, and then update the key store password value for the custom key store.\n\nCreationDate -> (timestamp)\n\nThe date and time when the custom key store was created.\n\nNextMarker -> (string)\n\nWhen Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.\n\nTruncated -> (boolean)\n\nA flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.",
      "command_examples": "Examples\n\nTo get details about a custom key store\n\nThe following describe-custom-key-store example displays details for the specified custom key store. You can use this command to get details about a particular custom key store or all custom key stores in an AWS account and Region.\n\nTo identify a particular custom key store, this example uses the custom-key-store-name parameter with the key store name. If you prefer, you can use the custom-key-store-id parameter with the key store ID. To get all custom key stores in the account and Region, omit all parameters.\n\naws kms describe-custom-key-stores \\\n    --custom-key-store-name ExampleKeyStore\n\n\nThe output of this command includes useful details about the custom key store including its connection state (ConnectionState). If the connection state is FAILED, the output includes a ConnectionErrorCode field that describes the problem.\n\n{\n    \"CustomKeyStores\": [\n        {\n            \"CloudHsmClusterId\": \"cluster-1a23b4cdefg\",\n            \"ConnectionState\": \"CONNECTED\",\n            \"CreationDate\": \"1.599288695918E9\",\n            \"CustomKeyStoreId\": \"cks-1234567890abcdef0\",\n            \"CustomKeyStoreName\": \"ExampleKeyStore\",\n            \"TrustAnchorCertificate\": \"<certificate appears here>\"\n        }\n    ]\n}\n\n\nFor more information, see Viewing a Custom Key Store in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "describe-key",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/describe-key.html",
      "command_description": "Description\n\nProvides detailed information about a KMS key. You can run DescribeKey on a customer managed key or an Amazon Web Services managed key .\n\nThis detailed information includes the key ARN, creation date (and deletion date, if applicable), the key state, and the origin and expiration date (if any) of the key material. It includes fields, like KeySpec , that help you distinguish symmetric from asymmetric KMS keys. It also provides information that is particularly important to asymmetric keys, such as the key usage (encryption or signing) and the encryption algorithms or signing algorithms that the KMS key supports. For KMS keys in custom key stores, it includes information about the custom key store, such as the key store ID and the CloudHSM cluster ID. For multi-Region keys, it displays the primary key and all related replica keys.\n\nDescribeKey does not return the following information:\n\nAliases associated with the KMS key. To get this information, use ListAliases .\n\nWhether automatic key rotation is enabled on the KMS key. To get this information, use GetKeyRotationStatus . Also, some key states prevent a KMS key from being automatically rotated. For details, see How Automatic Key Rotation Works in Key Management Service Developer Guide .\n\nTags on the KMS key. To get this information, use ListResourceTags .\n\nKey policies and grants on the KMS key. To get this information, use GetKeyPolicy and ListGrants .\n\nIf you call the DescribeKey operation on a predefined Amazon Web Services alias , that is, an Amazon Web Services alias with no key ID, KMS creates an Amazon Web Services managed key . Then, it associates the alias with the new KMS key, and returns the KeyId and Arn of the new KMS key in the response.\n\nCross-account use : Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:DescribeKey (key policy)\n\nRelated operations:\n\nGetKeyPolicy\n\nGetKeyRotationStatus\n\nListAliases\n\nListGrants\n\nListKeys\n\nListResourceTags\n\nListRetirableGrants\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-key\n--key-id <value>\n[--grant-tokens <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--grant-tokens <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nDescribes the specified KMS key.\n\nIf you specify a predefined Amazon Web Services alias (an Amazon Web Services alias with no key ID), KMS associates the alias with an Amazon Web Services managed key and returns its KeyId and Arn in the response.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyMetadata -> (structure)\n\nMetadata associated with the key.\n\nAWSAccountId -> (string)\n\nThe twelve-digit account ID of the Amazon Web Services account that owns the KMS key.\n\nKeyId -> (string)\n\nThe globally unique identifier for the KMS key.\n\nArn -> (string)\n\nThe Amazon Resource Name (ARN) of the KMS key. For examples, see Key Management Service (KMS) in the Example ARNs section of the Amazon Web Services General Reference .\n\nCreationDate -> (timestamp)\n\nThe date and time when the KMS key was created.\n\nEnabled -> (boolean)\n\nSpecifies whether the KMS key is enabled. When KeyState is Enabled this value is true, otherwise it is false.\n\nDescription -> (string)\n\nThe description of the KMS key.\n\nKeyUsage -> (string)\n\nThe cryptographic operations for which you can use the KMS key.\n\nKeyState -> (string)\n\nThe current status of the KMS key.\n\nFor more information about how key state affects the use of a KMS key, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nDeletionDate -> (timestamp)\n\nThe date and time after which KMS deletes this KMS key. This value is present only when the KMS key is scheduled for deletion, that is, when its KeyState is PendingDeletion .\n\nWhen the primary key in a multi-Region key is scheduled for deletion but still has replica keys, its key state is PendingReplicaDeletion and the length of its waiting period is displayed in the PendingDeletionWindowInDays field.\n\nValidTo -> (timestamp)\n\nThe time at which the imported key material expires. When the key material expires, KMS deletes the key material and the KMS key becomes unusable. This value is present only for KMS keys whose Origin is EXTERNAL and whose ExpirationModel is KEY_MATERIAL_EXPIRES , otherwise this value is omitted.\n\nOrigin -> (string)\n\nThe source of the key material for the KMS key. When this value is AWS_KMS , KMS created the key material. When this value is EXTERNAL , the key material was imported or the KMS key doesn’t have any key material. When this value is AWS_CLOUDHSM , the key material was created in the CloudHSM cluster associated with a custom key store.\n\nCustomKeyStoreId -> (string)\n\nA unique identifier for the custom key store that contains the KMS key. This value is present only when the KMS key is created in a custom key store.\n\nCloudHsmClusterId -> (string)\n\nThe cluster ID of the CloudHSM cluster that contains the key material for the KMS key. When you create a KMS key in a custom key store , KMS creates the key material for the KMS key in the associated CloudHSM cluster. This value is present only when the KMS key is created in a custom key store.\n\nExpirationModel -> (string)\n\nSpecifies whether the KMS key’s key material expires. This value is present only when Origin is EXTERNAL , otherwise this value is omitted.\n\nKeyManager -> (string)\n\nThe manager of the KMS key. KMS keys in your Amazon Web Services account are either customer managed or Amazon Web Services managed. For more information about the difference, see KMS keys in the Key Management Service Developer Guide .\n\nCustomerMasterKeySpec -> (string)\n\nInstead, use the KeySpec field.\n\nThe KeySpec and CustomerMasterKeySpec fields have the same value. We recommend that you use the KeySpec field in your code. However, to avoid breaking changes, KMS will support both fields.\n\nKeySpec -> (string)\n\nDescribes the type of key material in the KMS key.\n\nEncryptionAlgorithms -> (list)\n\nThe encryption algorithms that the KMS key supports. You cannot use the KMS key with other encryption algorithms within KMS.\n\nThis value is present only when the KeyUsage of the KMS key is ENCRYPT_DECRYPT .\n\n(string)\n\nSigningAlgorithms -> (list)\n\nThe signing algorithms that the KMS key supports. You cannot use the KMS key with other signing algorithms within KMS.\n\nThis field appears only when the KeyUsage of the KMS key is SIGN_VERIFY .\n\n(string)\n\nMultiRegion -> (boolean)\n\nIndicates whether the KMS key is a multi-Region (True ) or regional (False ) key. This value is True for multi-Region primary and replica keys and False for regional KMS keys.\n\nFor more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide .\n\nMultiRegionConfiguration -> (structure)\n\nLists the primary and replica keys in same multi-Region key. This field is present only when the value of the MultiRegion field is True .\n\nFor more information about any listed KMS key, use the DescribeKey operation.\n\nMultiRegionKeyType indicates whether the KMS key is a PRIMARY or REPLICA key.\n\nPrimaryKey displays the key ARN and Region of the primary key. This field displays the current KMS key if it is the primary key.\n\nReplicaKeys displays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.\n\nMultiRegionKeyType -> (string)\n\nIndicates whether the KMS key is a PRIMARY or REPLICA key.\n\nPrimaryKey -> (structure)\n\nDisplays the key ARN and Region of the primary key. This field includes the current KMS key if it is the primary key.\n\nArn -> (string)\n\nDisplays the key ARN of a primary or replica key of a multi-Region key.\n\nRegion -> (string)\n\nDisplays the Amazon Web Services Region of a primary or replica key in a multi-Region key.\n\nReplicaKeys -> (list)\n\ndisplays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.\n\n(structure)\n\nDescribes the primary or replica key in a multi-Region key.\n\nArn -> (string)\n\nDisplays the key ARN of a primary or replica key of a multi-Region key.\n\nRegion -> (string)\n\nDisplays the Amazon Web Services Region of a primary or replica key in a multi-Region key.\n\nPendingDeletionWindowInDays -> (integer)\n\nThe waiting period before the primary key in a multi-Region key is deleted. This waiting period begins when the last of its replica keys is deleted. This value is present only when the KeyState of the KMS key is PendingReplicaDeletion . That indicates that the KMS key is the primary key in a multi-Region key, it is scheduled for deletion, and it still has existing replica keys.\n\nWhen a single-Region KMS key or a multi-Region replica key is scheduled for deletion, its deletion date is displayed in the DeletionDate field. However, when the primary key in a multi-Region key is scheduled for deletion, its waiting period doesn’t begin until all of its replica keys are deleted. This value displays that waiting period. When the last replica key in the multi-Region key is deleted, the KeyState of the scheduled primary key changes from PendingReplicaDeletion to PendingDeletion and the deletion date appears in the DeletionDate field.",
      "command_examples": "Examples\n\nTo find detailed information about a customer master key (CMK)\n\nThe following describe-key example gets detailed information about the AWS managed CMK for Amazon S3 in the example account and Region. You can use this command to find details about AWS managed CMKs and customer managed CMKs.\n\nTo specify the CMK, use the key-id parameter. This example uses an alias name value, but you can use a key ID, key ARN, alias name, or alias ARN in this command.\n\naws kms describe-key \\\n    --key-id alias/aws/s3\n\n\nOutput:\n\n{\n    \"KeyMetadata\": {\n        \"AWSAccountId\": \"846764612917\",\n        \"KeyId\": \"b8a9477d-836c-491f-857e-07937918959b\",\n        \"Arn\": \"arn:aws:kms:us-west-2:846764612917:key/b8a9477d-836c-491f-857e-07937918959b\",\n        \"CreationDate\": 1566518783.394,\n        \"Enabled\": true,\n        \"Description\": \"Default master key that protects my S3 objects when no other key is defined\",\n        \"KeyUsage\": \"ENCRYPT_DECRYPT\",\n        \"KeyState\": \"Enabled\",\n        \"Origin\": \"AWS_KMS\",\n        \"KeyManager\": \"AWS\",\n        \"CustomerMasterKeySpec\": \"SYMMETRIC_DEFAULT\",\n        \"EncryptionAlgorithms\": [\n            \"SYMMETRIC_DEFAULT\"\n        ]\n    }\n}\n\n\nFor more information, see Viewing Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "disable-key",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/disable-key.html",
      "command_description": "Description\n\nSets the state of a KMS key to disabled. This change temporarily prevents use of the KMS key for cryptographic operations .\n\nFor more information about how key state affects the use of a KMS key, see Key state: Effect on your KMS key in the * Key Management Service Developer Guide * .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:DisableKey (key policy)\n\nRelated operations : EnableKey\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  disable-key\n--key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the KMS key to disable.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo temporarily disable a customer master key (CMK)\n\nThe following example uses the disable-key command to disable a customer managed CMK. You can use a command like this one to prevent the CMK from being used in cryptographic operations. Disabling is always temporary. To re-enable the CMK, use the enable-key command.\n\nTo specify the CMK, use the key-id parameter. This example uses an key ID value, but you can use a key ID or key ARN value in this command. Before running this command, replace the example key ID with a valid one.\n\naws kms enable-key \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThis command produces no output.\n\nFor more information, see Enabling and Disabling Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "disable-key-rotation",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/disable-key-rotation.html",
      "command_description": "Description\n\nDisables automatic rotation of the key material for the specified symmetric KMS key.\n\nYou cannot enable automatic rotation of asymmetric KMS keys , KMS keys with imported key material , or KMS keys in a custom key store . To enable or disable automatic rotation of a set of related multi-Region keys , set the property on the primary key.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:DisableKeyRotation (key policy)\n\nRelated operations:\n\nEnableKeyRotation\n\nGetKeyRotationStatus\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  disable-key-rotation\n--key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies a symmetric KMS key. You cannot enable or disable automatic rotation of asymmetric KMS keys , KMS keys with imported key material , or KMS keys in a custom key store .\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo disable automatic rotation of a customer master key (CMK)\n\nThe following disable-key-rotation example disables automatic rotation of a customer managed CMK. To reenable automatic rotation, use the enable-key-rotation command.\n\nTo specify the CMK, use the key-id parameter. This example uses an key ARN value, but you can use a key ID or key ARN in this command. Before running this command, replace the example key ARN with a valid one.\n\naws kms disable-key-rotation \\\n    --key-id arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThis command produces no output. To verify that automatic rotation is disable for the CMK, use the get-key-rotation-status command.\n\nFor more information, see Rotating Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "disconnect-custom-key-store",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/disconnect-custom-key-store.html",
      "command_description": "Description\n\nDisconnects the custom key store from its associated CloudHSM cluster. While a custom key store is disconnected, you can manage the custom key store and its KMS keys, but you cannot create or use KMS keys in the custom key store. You can reconnect the custom key store at any time.\n\nNote\n\nWhile a custom key store is disconnected, all attempts to create KMS keys in the custom key store or to use existing KMS keys in cryptographic operations will fail. This action can prevent users from storing and accessing sensitive data.\n\nTo find the connection state of a custom key store, use the DescribeCustomKeyStores operation. To reconnect a custom key store, use the ConnectCustomKeyStore operation.\n\nIf the operation succeeds, it returns a JSON object with no properties.\n\nThis operation is part of the Custom Key Store feature feature in KMS, which combines the convenience and extensive integration of KMS with the isolation and control of a single-tenant key store.\n\nCross-account use : No. You cannot perform this operation on a custom key store in a different Amazon Web Services account.\n\nRequired permissions : kms:DisconnectCustomKeyStore (IAM policy)\n\nRelated operations:\n\nConnectCustomKeyStore\n\nCreateCustomKeyStore\n\nDeleteCustomKeyStore\n\nDescribeCustomKeyStores\n\nUpdateCustomKeyStore\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  disconnect-custom-key-store\n--custom-key-store-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--custom-key-store-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--custom-key-store-id (string)\n\nEnter the ID of the custom key store you want to disconnect. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo disconnect a custom key store\n\nThe following disconnect-custom-key-store example disconnects a custom key store from its AWS CloudHSM cluster. You might disconnect a key store to troubleshoot a problem, to update its settings, or to prevent CMKs in the keystore from being used in cryptographic operations.\n\nBefore running this command, replace the example custom key store ID with a valid one.\n\n$ aws kms disconnect-custom-key-store \\\n    --custom-key-store-id cks-1234567890abcdef0\n\n\nThis command produces no output. verify that the command was effective, use the describe-custom-key-stores command.\n\nFor more information, see Connecting and Disconnecting a Custom Key Store in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "enable-key",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/enable-key.html",
      "command_description": "Description\n\nSets the key state of a KMS key to enabled. This allows you to use the KMS key for cryptographic operations .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:EnableKey (key policy)\n\nRelated operations : DisableKey\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  enable-key\n--key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the KMS key to enable.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo enable a customer master key (CMK)\n\nThe following enable-key example enables a customer managed customer master key (CMK). You can use a command like this one to enable a CMK that you temporarily disabled by using the disable-key command. You can also use it to enable a CMK that is disabled because it was scheduled for deletion and the deletion was canceled.\n\nTo specify the CMK, use the key-id parameter. This example uses an key ID value, but you can use a key ID or key ARN value in this command.\n\nBefore running this command, replace the example key ID with a valid one.\n\naws kms enable-key \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThis command produces no output. To verify that the CMK is enabled, use the describe-key command. See the values of the KeyState and Enabled fields in the describe-key output.\n\nFor more information, see Enabling and Disabling Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "enable-key-rotation",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/enable-key-rotation.html",
      "command_description": "Description\n\nEnables automatic rotation of the key material for the specified symmetric KMS key.\n\nYou cannot enable automatic rotation of asymmetric KMS keys , KMS keys with imported key material , or KMS keys in a custom key store . To enable or disable automatic rotation of a set of related multi-Region keys , set the property on the primary key.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:EnableKeyRotation (key policy)\n\nRelated operations:\n\nDisableKeyRotation\n\nGetKeyRotationStatus\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  enable-key-rotation\n--key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies a symmetric KMS key. You cannot enable automatic rotation of asymmetric KMS keys , KMS keys with imported key material , or KMS keys in a custom key store . To enable or disable automatic rotation of a set of related multi-Region keys , set the property on the primary key.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo enable automatic rotation of a customer master key (CMK)\n\nThe following enable-key-rotation example enables automatic rotation of a customer managed customer master key (CMK). The CMK will be rotated one year (365 days) from the date that this command completes and every year thereafter.\n\nTo specify the CMK, use the key-id parameter. This example uses a key ARN value, but you can use a key ID or key ARN in this command.\n\nBefore running this command, replace the example key ARN with a valid one.\n\naws kms enable-key-rotation \\\n    --key-id arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThis command produces no output. To verify that the CMK is enabled, use the get-key-rotation-status command.\n\nFor more information, see Rotating Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "encrypt",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/encrypt.html",
      "command_description": "Description\n\nEncrypts plaintext into ciphertext by using a KMS key. The Encrypt operation has two primary use cases:\n\nYou can encrypt small amounts of arbitrary data, such as a personal identifier or database password, or other sensitive information.\n\nYou can use the Encrypt operation to move encrypted data from one Amazon Web Services Region to another. For example, in Region A, generate a data key and use the plaintext key to encrypt your data. Then, in Region A, use the Encrypt operation to encrypt the plaintext data key under a KMS key in Region B. Now, you can move the encrypted data and the encrypted data key to Region B. When necessary, you can decrypt the encrypted data key and the encrypted data entirely within in Region B.\n\nYou don’t need to use the Encrypt operation to encrypt a data key. The GenerateDataKey and GenerateDataKeyPair operations return a plaintext data key and an encrypted copy of that data key.\n\nWhen you encrypt data, you must specify a symmetric or asymmetric KMS key to use in the encryption operation. The KMS key must have a KeyUsage value of ENCRYPT_DECRYPT. To find the KeyUsage of a KMS key, use the DescribeKey operation.\n\nIf you use a symmetric KMS key, you can use an encryption context to add additional security to your encryption operation. If you specify an EncryptionContext when encrypting data, you must specify the same encryption context (a case-sensitive exact match) when decrypting the data. Otherwise, the request to decrypt fails with an InvalidCiphertextException . For more information, see Encryption Context in the Key Management Service Developer Guide .\n\nIf you specify an asymmetric KMS key, you must also specify the encryption algorithm. The algorithm must be compatible with the KMS key type.\n\nWarning\n\nWhen you use an asymmetric KMS key to encrypt or reencrypt data, be sure to record the KMS key and encryption algorithm that you choose. You will be required to provide the same KMS key and encryption algorithm when you decrypt the data. If the KMS key and algorithm do not match the values used to encrypt the data, the decrypt operation fails.\n\nYou are not required to supply the key ID and encryption algorithm when you decrypt with symmetric KMS keys because KMS stores this information in the ciphertext blob. KMS cannot store metadata in ciphertext generated with asymmetric keys. The standard format for asymmetric key ciphertext does not include configurable fields.\n\nThe maximum size of the data that you can encrypt varies with the type of KMS key and the encryption algorithm that you choose.\n\nSymmetric KMS keys\n\nSYMMETRIC_DEFAULT : 4096 bytes\n\nRSA_2048\n\nRSAES_OAEP_SHA_1 : 214 bytes\n\nRSAES_OAEP_SHA_256 : 190 bytes\n\nRSA_3072\n\nRSAES_OAEP_SHA_1 : 342 bytes\n\nRSAES_OAEP_SHA_256 : 318 bytes\n\nRSA_4096\n\nRSAES_OAEP_SHA_1 : 470 bytes\n\nRSAES_OAEP_SHA_256 : 446 bytes\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:Encrypt (key policy)\n\nRelated operations:\n\nDecrypt\n\nGenerateDataKey\n\nGenerateDataKeyPair\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  encrypt\n--key-id <value>\n--plaintext <value>\n[--encryption-context <value>]\n[--grant-tokens <value>]\n[--encryption-algorithm <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--plaintext <value>",
        "[--encryption-context <value>]",
        "[--grant-tokens <value>]",
        "[--encryption-algorithm <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the KMS key to use in the encryption operation.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--plaintext (blob)\n\nData to be encrypted.\n\n--encryption-context (map)\n\nSpecifies the encryption context that will be used to encrypt the data. An encryption context is valid only for cryptographic operations with a symmetric KMS key. The standard asymmetric encryption algorithms that KMS uses do not support an encryption context.\n\nAn encryption context is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric KMS key, but it is highly recommended.\n\nFor more information, see Encryption Context in the Key Management Service Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--encryption-algorithm (string)\n\nSpecifies the encryption algorithm that KMS will use to encrypt the plaintext message. The algorithm must be compatible with the KMS key that you specify.\n\nThis parameter is required only for asymmetric KMS keys. The default value, SYMMETRIC_DEFAULT , is the algorithm used for symmetric KMS keys. If you are using an asymmetric KMS key, we recommend RSAES_OAEP_SHA_256.\n\nPossible values:\n\nSYMMETRIC_DEFAULT\n\nRSAES_OAEP_SHA_1\n\nRSAES_OAEP_SHA_256\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCiphertextBlob -> (blob)\n\nThe encrypted plaintext. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the KMS key that was used to encrypt the plaintext.\n\nEncryptionAlgorithm -> (string)\n\nThe encryption algorithm that was used to encrypt the plaintext.",
      "command_examples": "Examples\n\nExample 1: To encrypt the contents of a file on Linux or MacOS\n\nThe following encrypt command demonstrates the recommended way to encrypt data with the AWS CLI.\n\naws kms encrypt \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --plaintext fileb://ExamplePlaintextFile \\\n    --output text \\\n    --query CiphertextBlob | base64 \\\n    --decode > ExampleEncryptedFile\n\n\nThe command does several things:\n\nUses the fileb:// prefix to specify the --plaintext parameter.\n\nThe fileb:// prefix instructs the CLI to read the data to encrypt, called the plaintext, from a file and pass the file’s contents to the command’s --plaintext parameter. If the file is not in the current directory, type the full path to file. For example: fileb:///var/tmp/ExamplePlaintextFile or fileb://C:\\Temp\\ExamplePlaintextFile.\n\nFor more information about reading AWS CLI parameter values from a file, see Loading Parameters from a File in the AWS Command Line Interface User Guide and Best Practices for Local File Parameters on the AWS Command Line Tool Blog\n\nUses the --output and --query parameters to control the command’s output.\n\nThese parameters extract the encrypted data, called the ciphertext, from the command’s output.\n\nFor more information about controlling output, see Controlling Command Output in the AWS Command Line Interface User Guide.\n\nUses the base64 utility to decode the extracted output.\n\nThis utility decodes the extracted ciphertext to binary data. The ciphertext that is returned by a successful encrypt command is base64-encoded text. You must decode this text before you can use the AWS CLI to decrypt it.\n\nSaves the binary ciphertext to a file.\n\nThe final part of the command (> ExampleEncryptedFile) saves the binary ciphertext to a file to make decryption easier. For an example command that uses the AWS CLI to decrypt data, see the decrypt examples.\n\nExample 2: Using the AWS CLI to encrypt data on Windows\n\nThe preceding example assumes the base64 utility is available, which is commonly the case on Linux and MacOS. For the Windows command prompt, use certutil instead of base64. This requires two commands, as shown in the following examples.\n\naws kms encrypt \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --plaintext fileb://ExamplePlaintextFile \\\n    --output text \\\n    --query CiphertextBlob > C:\\Temp\\ExampleEncryptedFile.base64\n\ncertutil -decode C:\\Temp\\ExampleEncryptedFile.base64 C:\\Temp\\ExampleEncryptedFile\n"
    },
    {
      "command_name": "generate-data-key",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/generate-data-key.html",
      "command_description": "Description\n\nGenerates a unique symmetric data key for client-side encryption. This operation returns a plaintext copy of the data key and a copy that is encrypted under a KMS key that you specify. You can use the plaintext key to encrypt your data outside of KMS and store the encrypted data key with the encrypted data.\n\nGenerateDataKey returns a unique data key for each request. The bytes in the plaintext key are not related to the caller or the KMS key.\n\nTo generate a data key, specify the symmetric KMS key that will be used to encrypt the data key. You cannot use an asymmetric KMS key to generate data keys. To get the type of your KMS key, use the DescribeKey operation. You must also specify the length of the data key. Use either the KeySpec or NumberOfBytes parameters (but not both). For 128-bit and 256-bit data keys, use the KeySpec parameter.\n\nTo get only an encrypted copy of the data key, use GenerateDataKeyWithoutPlaintext . To generate an asymmetric data key pair, use the GenerateDataKeyPair or GenerateDataKeyPairWithoutPlaintext operation. To get a cryptographically secure random byte string, use GenerateRandom .\n\nYou can use the optional encryption context to add additional security to the encryption operation. If you specify an EncryptionContext , you must specify the same encryption context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise, the request to decrypt fails with an InvalidCiphertextException . For more information, see Encryption Context in the Key Management Service Developer Guide .\n\nApplications in Amazon Web Services Nitro Enclaves can call this operation by using the Amazon Web Services Nitro Enclaves Development Kit . For information about the supporting parameters, see How Amazon Web Services Nitro Enclaves use KMS in the Key Management Service Developer Guide .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nHow to use your data key\n\nWe recommend that you use the following pattern to encrypt data locally in your application. You can write your own code or use a client-side encryption library, such as the Amazon Web Services Encryption SDK , the Amazon DynamoDB Encryption Client , or Amazon S3 client-side encryption to do these tasks for you.\n\nTo encrypt data outside of KMS:\n\nUse the GenerateDataKey operation to get a data key.\n\nUse the plaintext data key (in the Plaintext field of the response) to encrypt your data outside of KMS. Then erase the plaintext data key from memory.\n\nStore the encrypted data key (in the CiphertextBlob field of the response) with the encrypted data.\n\nTo decrypt data outside of KMS:\n\nUse the Decrypt operation to decrypt the encrypted data key. The operation returns a plaintext copy of the data key.\n\nUse the plaintext data key to decrypt data outside of KMS, then erase the plaintext data key from memory.\n\nCross-account use : Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:GenerateDataKey (key policy)\n\nRelated operations:\n\nDecrypt\n\nEncrypt\n\nGenerateDataKeyPair\n\nGenerateDataKeyPairWithoutPlaintext\n\nGenerateDataKeyWithoutPlaintext\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  generate-data-key\n--key-id <value>\n[--encryption-context <value>]\n[--number-of-bytes <value>]\n[--key-spec <value>]\n[--grant-tokens <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--encryption-context <value>]",
        "[--number-of-bytes <value>]",
        "[--key-spec <value>]",
        "[--grant-tokens <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the symmetric KMS key that encrypts the data key.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--encryption-context (map)\n\nSpecifies the encryption context that will be used when encrypting the data key.\n\nAn encryption context is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric KMS key, but it is highly recommended.\n\nFor more information, see Encryption Context in the Key Management Service Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--number-of-bytes (integer)\n\nSpecifies the length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For 128-bit (16-byte) and 256-bit (32-byte) data keys, use the KeySpec parameter.\n\nYou must specify either the KeySpec or the NumberOfBytes parameter (but not both) in every GenerateDataKey request.\n\n--key-spec (string)\n\nSpecifies the length of the data key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key.\n\nYou must specify either the KeySpec or the NumberOfBytes parameter (but not both) in every GenerateDataKey request.\n\nPossible values:\n\nAES_256\n\nAES_128\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCiphertextBlob -> (blob)\n\nThe encrypted copy of the data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.\n\nPlaintext -> (blob)\n\nThe plaintext data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded. Use this data key to encrypt your data outside of KMS. Then, remove it from memory as soon as possible.\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the KMS key that encrypted the data key."
    },
    {
      "command_name": "generate-data-key-pair",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/generate-data-key-pair.html",
      "command_description": "Description\n\nGenerates a unique asymmetric data key pair. The GenerateDataKeyPair operation returns a plaintext public key, a plaintext private key, and a copy of the private key that is encrypted under the symmetric KMS key you specify. You can use the data key pair to perform asymmetric cryptography and implement digital signatures outside of KMS.\n\nYou can use the public key that GenerateDataKeyPair returns to encrypt data or verify a signature outside of KMS. Then, store the encrypted private key with the data. When you are ready to decrypt data or sign a message, you can use the Decrypt operation to decrypt the encrypted private key.\n\nTo generate a data key pair, you must specify a symmetric KMS key to encrypt the private key in a data key pair. You cannot use an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the DescribeKey operation.\n\nUse the KeyPairSpec parameter to choose an RSA or Elliptic Curve (ECC) data key pair. KMS recommends that your use ECC key pairs for signing, and use RSA key pairs for either encryption or signing, but not both. However, KMS cannot enforce any restrictions on the use of data key pairs outside of KMS.\n\nIf you are using the data key pair to encrypt data, or for any operation where you don’t immediately need a private key, consider using the GenerateDataKeyPairWithoutPlaintext operation. GenerateDataKeyPairWithoutPlaintext returns a plaintext public key and an encrypted private key, but omits the plaintext private key that you need only to decrypt ciphertext or sign a message. Later, when you need to decrypt the data or sign a message, use the Decrypt operation to decrypt the encrypted private key in the data key pair.\n\nGenerateDataKeyPair returns a unique data key pair for each request. The bytes in the keys are not related to the caller or the KMS key that is used to encrypt the private key. The public key is a DER-encoded X.509 SubjectPublicKeyInfo, as specified in RFC 5280 . The private key is a DER-encoded PKCS8 PrivateKeyInfo, as specified in RFC 5958 .\n\nYou can use the optional encryption context to add additional security to the encryption operation. If you specify an EncryptionContext , you must specify the same encryption context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise, the request to decrypt fails with an InvalidCiphertextException . For more information, see Encryption Context in the Key Management Service Developer Guide .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:GenerateDataKeyPair (key policy)\n\nRelated operations:\n\nDecrypt\n\nEncrypt\n\nGenerateDataKey\n\nGenerateDataKeyPairWithoutPlaintext\n\nGenerateDataKeyWithoutPlaintext\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  generate-data-key-pair\n[--encryption-context <value>]\n--key-id <value>\n--key-pair-spec <value>\n[--grant-tokens <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--encryption-context <value>]",
        "--key-id <value>",
        "--key-pair-spec <value>",
        "[--grant-tokens <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--encryption-context (map)\n\nSpecifies the encryption context that will be used when encrypting the private key in the data key pair.\n\nAn encryption context is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric KMS key, but it is highly recommended.\n\nFor more information, see Encryption Context in the Key Management Service Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--key-id (string)\n\nSpecifies the symmetric KMS key that encrypts the private key in the data key pair. You cannot specify an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the DescribeKey operation.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--key-pair-spec (string)\n\nDetermines the type of data key pair that is generated.\n\nThe KMS rule that restricts the use of asymmetric RSA KMS keys to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC KMS keys only to sign and verify, are not effective on data key pairs, which are used outside of KMS.\n\nPossible values:\n\nRSA_2048\n\nRSA_3072\n\nRSA_4096\n\nECC_NIST_P256\n\nECC_NIST_P384\n\nECC_NIST_P521\n\nECC_SECG_P256K1\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nPrivateKeyCiphertextBlob -> (blob)\n\nThe encrypted copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.\n\nPrivateKeyPlaintext -> (blob)\n\nThe plaintext copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.\n\nPublicKey -> (blob)\n\nThe public key (in plaintext).\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the KMS key that encrypted the private key.\n\nKeyPairSpec -> (string)\n\nThe type of data key pair that was generated."
    },
    {
      "command_name": "generate-data-key-pair-without-plaintext",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/generate-data-key-pair-without-plaintext.html",
      "command_description": "Description\n\nGenerates a unique asymmetric data key pair. The GenerateDataKeyPairWithoutPlaintext operation returns a plaintext public key and a copy of the private key that is encrypted under the symmetric KMS key you specify. Unlike GenerateDataKeyPair , this operation does not return a plaintext private key.\n\nYou can use the public key that GenerateDataKeyPairWithoutPlaintext returns to encrypt data or verify a signature outside of KMS. Then, store the encrypted private key with the data. When you are ready to decrypt data or sign a message, you can use the Decrypt operation to decrypt the encrypted private key.\n\nTo generate a data key pair, you must specify a symmetric KMS key to encrypt the private key in a data key pair. You cannot use an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the DescribeKey operation.\n\nUse the KeyPairSpec parameter to choose an RSA or Elliptic Curve (ECC) data key pair. KMS recommends that your use ECC key pairs for signing, and use RSA key pairs for either encryption or signing, but not both. However, KMS cannot enforce any restrictions on the use of data key pairs outside of KMS.\n\nGenerateDataKeyPairWithoutPlaintext returns a unique data key pair for each request. The bytes in the key are not related to the caller or KMS key that is used to encrypt the private key. The public key is a DER-encoded X.509 SubjectPublicKeyInfo, as specified in RFC 5280 .\n\nYou can use the optional encryption context to add additional security to the encryption operation. If you specify an EncryptionContext , you must specify the same encryption context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise, the request to decrypt fails with an InvalidCiphertextException . For more information, see Encryption Context in the Key Management Service Developer Guide .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:GenerateDataKeyPairWithoutPlaintext (key policy)\n\nRelated operations:\n\nDecrypt\n\nEncrypt\n\nGenerateDataKey\n\nGenerateDataKeyPair\n\nGenerateDataKeyWithoutPlaintext\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  generate-data-key-pair-without-plaintext\n[--encryption-context <value>]\n--key-id <value>\n--key-pair-spec <value>\n[--grant-tokens <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--encryption-context <value>]",
        "--key-id <value>",
        "--key-pair-spec <value>",
        "[--grant-tokens <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--encryption-context (map)\n\nSpecifies the encryption context that will be used when encrypting the private key in the data key pair.\n\nAn encryption context is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric KMS key, but it is highly recommended.\n\nFor more information, see Encryption Context in the Key Management Service Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--key-id (string)\n\nSpecifies the KMS key that encrypts the private key in the data key pair. You must specify a symmetric KMS key. You cannot use an asymmetric KMS key or a KMS key in a custom key store. To get the type and origin of your KMS key, use the DescribeKey operation.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--key-pair-spec (string)\n\nDetermines the type of data key pair that is generated.\n\nThe KMS rule that restricts the use of asymmetric RSA KMS keys to encrypt and decrypt or to sign and verify (but not both), and the rule that permits you to use ECC KMS keys only to sign and verify, are not effective on data key pairs, which are used outside of KMS.\n\nPossible values:\n\nRSA_2048\n\nRSA_3072\n\nRSA_4096\n\nECC_NIST_P256\n\nECC_NIST_P384\n\nECC_NIST_P521\n\nECC_SECG_P256K1\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nPrivateKeyCiphertextBlob -> (blob)\n\nThe encrypted copy of the private key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.\n\nPublicKey -> (blob)\n\nThe public key (in plaintext).\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the KMS key that encrypted the private key.\n\nKeyPairSpec -> (string)\n\nThe type of data key pair that was generated."
    },
    {
      "command_name": "generate-data-key-without-plaintext",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/generate-data-key-without-plaintext.html",
      "command_description": "Description\n\nGenerates a unique symmetric data key. This operation returns a data key that is encrypted under a KMS key that you specify. To request an asymmetric data key pair, use the GenerateDataKeyPair or GenerateDataKeyPairWithoutPlaintext operations.\n\nGenerateDataKeyWithoutPlaintext is identical to the GenerateDataKey operation except that returns only the encrypted copy of the data key. This operation is useful for systems that need to encrypt data at some point, but not immediately. When you need to encrypt the data, you call the Decrypt operation on the encrypted copy of the key.\n\nIt’s also useful in distributed systems with different levels of trust. For example, you might store encrypted data in containers. One component of your system creates new containers and stores an encrypted data key with each container. Then, a different component puts the data into the containers. That component first decrypts the data key, uses the plaintext data key to encrypt data, puts the encrypted data into the container, and then destroys the plaintext data key. In this system, the component that creates the containers never sees the plaintext data key.\n\nGenerateDataKeyWithoutPlaintext returns a unique data key for each request. The bytes in the keys are not related to the caller or KMS key that is used to encrypt the private key.\n\nTo generate a data key, you must specify the symmetric KMS key that is used to encrypt the data key. You cannot use an asymmetric KMS key to generate a data key. To get the type of your KMS key, use the DescribeKey operation.\n\nIf the operation succeeds, you will find the encrypted copy of the data key in the CiphertextBlob field.\n\nYou can use the optional encryption context to add additional security to the encryption operation. If you specify an EncryptionContext , you must specify the same encryption context (a case-sensitive exact match) when decrypting the encrypted data key. Otherwise, the request to decrypt fails with an InvalidCiphertextException . For more information, see Encryption Context in the Key Management Service Developer Guide .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:GenerateDataKeyWithoutPlaintext (key policy)\n\nRelated operations:\n\nDecrypt\n\nEncrypt\n\nGenerateDataKey\n\nGenerateDataKeyPair\n\nGenerateDataKeyPairWithoutPlaintext\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  generate-data-key-without-plaintext\n--key-id <value>\n[--encryption-context <value>]\n[--key-spec <value>]\n[--number-of-bytes <value>]\n[--grant-tokens <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--encryption-context <value>]",
        "[--key-spec <value>]",
        "[--number-of-bytes <value>]",
        "[--grant-tokens <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nThe identifier of the symmetric KMS key that encrypts the data key.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--encryption-context (map)\n\nSpecifies the encryption context that will be used when encrypting the data key.\n\nAn encryption context is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric KMS key, but it is highly recommended.\n\nFor more information, see Encryption Context in the Key Management Service Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--key-spec (string)\n\nThe length of the data key. Use AES_128 to generate a 128-bit symmetric key, or AES_256 to generate a 256-bit symmetric key.\n\nPossible values:\n\nAES_256\n\nAES_128\n\n--number-of-bytes (integer)\n\nThe length of the data key in bytes. For example, use the value 64 to generate a 512-bit data key (64 bytes is 512 bits). For common key lengths (128-bit and 256-bit symmetric keys), we recommend that you use the KeySpec field instead of this one.\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCiphertextBlob -> (blob)\n\nThe encrypted data key. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the KMS key that encrypted the data key."
    },
    {
      "command_name": "generate-random",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/generate-random.html",
      "command_description": "Description\n\nReturns a random byte string that is cryptographically secure.\n\nBy default, the random byte string is generated in KMS. To generate the byte string in the CloudHSM cluster that is associated with a custom key store , specify the custom key store ID.\n\nApplications in Amazon Web Services Nitro Enclaves can call this operation by using the Amazon Web Services Nitro Enclaves Development Kit . For information about the supporting parameters, see How Amazon Web Services Nitro Enclaves use KMS in the Key Management Service Developer Guide .\n\nFor more information about entropy and random number generation, see Key Management Service Cryptographic Details .\n\nRequired permissions : kms:GenerateRandom (IAM policy)\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  generate-random\n[--number-of-bytes <value>]\n[--custom-key-store-id <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--number-of-bytes <value>]",
        "[--custom-key-store-id <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--number-of-bytes (integer)\n\nThe length of the byte string.\n\n--custom-key-store-id (string)\n\nGenerates the random byte string in the CloudHSM cluster that is associated with the specified custom key store . To find the ID of a custom key store, use the DescribeCustomKeyStores operation.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nPlaintext -> (blob)\n\nThe random byte string. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.",
      "command_examples": "Examples\n\nExample 1: To generate a 256-bit random number (Linux or macOs)\n\nThe following generate-random example generates a 256-bit (32-byte), base64-encoded random byte string. The example decodes the byte string and saves it in the random file.\n\nWhen you run this command, you must use the number-of-bytes parameter to specify the length of the random number in bytes.\n\nYou don’t specify a CMK when you run this command. Unless you specify a `custom key store<https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html>`__, AWS KMS generates the random number. It is not associated with any particular CMK.\n\nThis example uses the following parameters and values:\n\nIt uses the required --number-of-bytes parameter with a value of 32 to request a 32-byte (256-bit) string.\n\nIt uses the --output parameter with a value of text to direct the AWS CLI to return the output as text, instead of JSON.\n\nIt uses the --query parameter to extract the value of the Plaintext property from the response.\n\nIt pipes ( | ) the output of the command to the base64 utility, which decodes the extracted output.\n\nIt uses the redirection operator ( > ) to save decoded byte string to the ExampleRandom file.\n\nIt uses the redirection operator ( > ) to save the binary ciphertext to a file.\n\naws kms generate-random \\\n    --number-of-bytes 32 \\\n    --output text \\\n    --query Plaintext | base64 --decode > ExampleRandom\n\n\nThis command produces no output.\n\nFor more information, see GenerateRandom in the AWS Key Management Service API Reference.\n\nExample 2: To generate a 256-bit random number (Windows Command Prompt)\n\nThe following example uses the generate-random command to generate a 256-bit (32-byte), base64-encoded random byte string. The example decodes the byte string and saves it in the random file. This example is the same as the previous example, except that it uses the certutil utility in Windows to base64-decode the random byte string before saving it in a file.\n\nFirst, generate a base64-encoded random byte string and saves it in a temporary file, ExampleRandom.base64.\n\naws kms generate-random \\\n    --number-of-bytes 32 \\\n    --output text \\\n    --query Plaintext > ExampleRandom.base64\n\n\nBecause the output of the generate-random command is saved in a file, this example produces no output.\n\nNow use the certutil -decode command to decode the base64-encoded byte string in the ExampleRandom.base64 file. Then, it saves the decoded byte string in the ExampleRandom file.\n\ncertutil -decode ExampleRandom.base64 ExampleRandom\n\n\nOutput:\n\nInput Length = 18\nOutput Length = 12\nCertUtil: -decode command completed successfully.\n\n\nFor more information, see GenerateRandom in the AWS Key Management Service API Reference."
    },
    {
      "command_name": "get-key-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/get-key-policy.html",
      "command_description": "Description\n\nGets a key policy attached to the specified KMS key.\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:GetKeyPolicy (key policy)\n\nRelated operations : PutKeyPolicy\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-key-policy\n--key-id <value>\n--policy-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--policy-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nGets the key policy for the specified KMS key.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--policy-name (string)\n\nSpecifies the name of the key policy. The only valid name is default . To get the names of key policies, use ListKeyPolicies .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nPolicy -> (string)\n\nA key policy document in JSON format.",
      "command_examples": "Examples\n\nTo copy a key policy from one CMK to another CMK\n\nThe following get-key-policy example gets the key policy from one CMK and saves it in a text file. Then, it replaces the policy of a different CMK using the text file as the policy input.\n\nBecause the --policy parameter of put-key-policy requires a string, you must use the --output text option to return the output as a text string instead of JSON.\n\naws kms get-key-policy \\\n    --policy-name default \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --query Policy \\\n    --output text > policy.txt\n\naws kms put-key-policy \\\n    --policy-name default \\\n    --key-id 0987dcba-09fe-87dc-65ba-ab0987654321 \\\n    --policy file://policy.txt\n\n\nThis command produces no output.\n\nFor more information, see PutKeyPolicy in the AWS KMS API Reference."
    },
    {
      "command_name": "get-key-rotation-status",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/get-key-rotation-status.html",
      "command_description": "Description\n\nGets a Boolean value that indicates whether automatic rotation of the key material is enabled for the specified KMS key.\n\nYou cannot enable automatic rotation of asymmetric KMS keys , KMS keys with imported key material , or KMS keys in a custom key store . To enable or disable automatic rotation of a set of related multi-Region keys , set the property on the primary key. The key rotation status for these KMS keys is always false .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nDisabled: The key rotation status does not change when you disable a KMS key. However, while the KMS key is disabled, KMS does not rotate the key material.\n\nPending deletion: While a KMS key is pending deletion, its key rotation status is false and KMS does not rotate the key material. If you cancel the deletion, the original key rotation status is restored.\n\nCross-account use : Yes. To perform this operation on a KMS key in a different Amazon Web Services account, specify the key ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:GetKeyRotationStatus (key policy)\n\nRelated operations:\n\nDisableKeyRotation\n\nEnableKeyRotation\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-key-rotation-status\n--key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nGets the rotation status for the specified KMS key.\n\nSpecify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyRotationEnabled -> (boolean)\n\nA Boolean value that specifies whether key rotation is enabled.",
      "command_examples": "Examples\n\nTo determine whether a customer master key (CMK) is automatically rotated.\n\nThe following get-key-rotation-status example determines whether a CMK is automatically rotated. You can use this command on customer managed CMKs and AWS managed CMKs. However, all AWS managed CMKs are automatically rotated every three years.\n\nTo specify the CMK, use the key-id parameter. This example uses a key ARN value, but you can use a key ID or key ARN in this command.\n\nBefore running this command, replace the example key ARN with a valid one.\n\naws kms get-key-rotation-status \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nOutput:\n\n{\n    \"KeyRotationEnabled\": true\n}\n\n\nFor more information, see Rotating Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "get-parameters-for-import",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/get-parameters-for-import.html",
      "command_description": "Description\n\nReturns the items you need to import key material into a symmetric, customer managed KMS key. For more information about importing key material into KMS, see Importing Key Material in the Key Management Service Developer Guide .\n\nThis operation returns a public key and an import token. Use the public key to encrypt the symmetric key material. Store the import token to send with a subsequent ImportKeyMaterial request.\n\nYou must specify the key ID of the symmetric KMS key into which you will import key material. This KMS key’s Origin must be EXTERNAL . You must also specify the wrapping algorithm and type of wrapping key (public key) that you will use to encrypt the key material. You cannot perform this operation on an asymmetric KMS key or on any KMS key in a different Amazon Web Services account.\n\nTo import key material, you must use the public key and import token from the same response. These items are valid for 24 hours. The expiration date and time appear in the GetParametersForImport response. You cannot use an expired token in an ImportKeyMaterial request. If your key and token expire, send another GetParametersForImport request.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:GetParametersForImport (key policy)\n\nRelated operations:\n\nImportKeyMaterial\n\nDeleteImportedKeyMaterial\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-parameters-for-import\n--key-id <value>\n--wrapping-algorithm <value>\n--wrapping-key-spec <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--wrapping-algorithm <value>",
        "--wrapping-key-spec <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nThe identifier of the symmetric KMS key into which you will import key material. The Origin of the KMS key must be EXTERNAL .\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--wrapping-algorithm (string)\n\nThe algorithm you will use to encrypt the key material before importing it with ImportKeyMaterial . For more information, see Encrypt the Key Material in the Key Management Service Developer Guide .\n\nPossible values:\n\nRSAES_PKCS1_V1_5\n\nRSAES_OAEP_SHA_1\n\nRSAES_OAEP_SHA_256\n\n--wrapping-key-spec (string)\n\nThe type of wrapping key (public key) to return in the response. Only 2048-bit RSA public keys are supported.\n\nPossible values:\n\nRSA_2048\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the KMS key to use in a subsequent ImportKeyMaterial request. This is the same KMS key specified in the GetParametersForImport request.\n\nImportToken -> (blob)\n\nThe import token to send in a subsequent ImportKeyMaterial request.\n\nPublicKey -> (blob)\n\nThe public key to use to encrypt the key material before importing it with ImportKeyMaterial .\n\nParametersValidTo -> (timestamp)\n\nThe time at which the import token and public key are no longer valid. After this time, you cannot use them to make an ImportKeyMaterial request and you must send another GetParametersForImport request to get new ones.",
      "command_examples": "Examples\n\nTo get the items required to import key material into a CMK\n\nThe following get-parameters-for-import example gets the public key and import token that you need to import key material into a CMK. When you use the import-key-material command, be sure to use the import token and key material encrypted by the public key that were returned in the same get-parameters-for-import command. Also, the wrapping algorithm that you specify in this command must be one that you use to encrypt the key material with the public key.\n\nTo specify the CMK, use the key-id parameter. This example uses an key ID, but you can use a key ID or key ARN in this command.\n\naws kms get-parameters-for-import \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --wrapping-algorithm RSAES_OAEP_SHA_256 \\\n    --wrapping-key-spec RSA_2048\n\n\nOutput:\n\n{\n    \"KeyId\": \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\n    \"PublicKey\": \"<public key base64 encoded data>\",\n    \"ImportToken\": \"<import token base64 encoded data>\",\n    \"ParametersValidTo\": 1593893322.32\n}\n\n\nFor more information, see Download the public key and import token in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "get-public-key",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/get-public-key.html",
      "command_description": "Description\n\nReturns the public key of an asymmetric KMS key. Unlike the private key of a asymmetric KMS key, which never leaves KMS unencrypted, callers with kms:GetPublicKey permission can download the public key of an asymmetric KMS key. You can share the public key to allow others to encrypt messages and verify signatures outside of KMS. For information about symmetric and asymmetric KMS keys, see Using Symmetric and Asymmetric KMS keys in the Key Management Service Developer Guide .\n\nYou do not need to download the public key. Instead, you can use the public key within KMS by calling the Encrypt , ReEncrypt , or Verify operations with the identifier of an asymmetric KMS key. When you use the public key within KMS, you benefit from the authentication, authorization, and logging that are part of every KMS operation. You also reduce of risk of encrypting data that cannot be decrypted. These features are not effective outside of KMS. For details, see Special Considerations for Downloading Public Keys .\n\nTo help you use the public key safely outside of KMS, GetPublicKey returns important information about the public key in the response, including:\n\nKeySpec : The type of key material in the public key, such as RSA_4096 or ECC_NIST_P521 .\n\nKeyUsage : Whether the key is used for encryption or signing.\n\nEncryptionAlgorithms or SigningAlgorithms : A list of the encryption algorithms or the signing algorithms for the key.\n\nAlthough KMS cannot enforce these restrictions on external operations, it is crucial that you use this information to prevent the public key from being used improperly. For example, you can prevent a public signing key from being used encrypt data, or prevent a public key from being used with an encryption algorithm that is not supported by KMS. You can also avoid errors, such as using the wrong signing algorithm in a verification operation.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:GetPublicKey (key policy)\n\nRelated operations : CreateKey\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-public-key\n--key-id <value>\n[--grant-tokens <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--grant-tokens <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the asymmetric KMS key that includes the public key.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the asymmetric KMS key from which the public key was downloaded.\n\nPublicKey -> (blob)\n\nThe exported public key.\n\nThe value is a DER-encoded X.509 public key, also known as SubjectPublicKeyInfo (SPKI), as defined in RFC 5280 . When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.\n\nCustomerMasterKeySpec -> (string)\n\nInstead, use the KeySpec field in the GetPublicKey response.\n\nThe KeySpec and CustomerMasterKeySpec fields have the same value. We recommend that you use the KeySpec field in your code. However, to avoid breaking changes, KMS will support both fields.\n\nKeySpec -> (string)\n\nThe type of the of the public key that was downloaded.\n\nKeyUsage -> (string)\n\nThe permitted use of the public key. Valid values are ENCRYPT_DECRYPT or SIGN_VERIFY .\n\nThis information is critical. If a public key with SIGN_VERIFY key usage encrypts data outside of KMS, the ciphertext cannot be decrypted.\n\nEncryptionAlgorithms -> (list)\n\nThe encryption algorithms that KMS supports for this key.\n\nThis information is critical. If a public key encrypts data outside of KMS by using an unsupported encryption algorithm, the ciphertext cannot be decrypted.\n\nThis field appears in the response only when the KeyUsage of the public key is ENCRYPT_DECRYPT .\n\n(string)\n\nSigningAlgorithms -> (list)\n\nThe signing algorithms that KMS supports for this key.\n\nThis field appears in the response only when the KeyUsage of the public key is SIGN_VERIFY .\n\n(string)",
      "command_examples": "Examples\n\nExample 1: To download the public key of an asymmetric CMK\n\nThe following get-public-key example downloads the public key of an asymmetric CMK.\n\nIn addition to returning the public key, the output includes information that you need to use the public key safely outside of AWS KMS, including the key usage and supported encryption algorithms.\n\nBefore running this command, replace the example key ID with a valid key ID from your AWS account.\n\naws kms get-public-key \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nOutput:\n\n{\n    \"KeyId\": \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\n    \"PublicKey\": \"jANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAl5epvg1/QtJhxSi2g9SDEVg8QV/...\",\n    \"CustomerMasterKeySpec\": \"RSA_4096\",\n    \"KeyUsage\": \"ENCRYPT_DECRYPT\",\n    \"EncryptionAlgorithms\": [\n        \"RSAES_OAEP_SHA_1\",\n        \"RSAES_OAEP_SHA_256\"\n    ]\n}\n\n\nFor more information about using asymmetric CMKs in AWS KMS, see Using Symmetric and Asymmetric Keys in the AWS Key Management Service API Reference.\n\nExample 2: To convert a public key to DER format (Linux and macOS)\n\nThe following get-public-key example downloads the public key of an asymmetric CMK and saves it in a DER file.\n\nWhen you use the get-public-key command in the AWS CLI, it returns a DER-encoded X.509 public key that is Base64-encoded. This example gets the value of the PublicKey property as text. It Base64-decodes the PublicKey and saves it in the public_key.der file. The output parameter returns the output as text, instead of JSON. The --query parameter gets only the PublicKey property, not the properties that you need to use the public key safely outside of AWS KMS.\n\nBefore running this command, replace the example key ID with a valid key ID from your AWS account.\n\naws kms get-public-key \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --output text \\\n    --query PublicKey | base64 --decode > public_key.der\n\n\nThis command produces no output.\n\nFor more information about using asymmetric CMKs in AWS KMS, see Using Symmetric and Asymmetric Keys in the AWS Key Management Service API Reference."
    },
    {
      "command_name": "import-key-material",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/import-key-material.html",
      "command_description": "Description\n\nImports key material into an existing symmetric KMS KMS key that was created without key material. After you successfully import key material into a KMS key, you can reimport the same key material into that KMS key, but you cannot import different key material.\n\nYou cannot perform this operation on an asymmetric KMS key or on any KMS key in a different Amazon Web Services account. For more information about creating KMS keys with no key material and then importing key material, see Importing Key Material in the Key Management Service Developer Guide .\n\nBefore using this operation, call GetParametersForImport . Its response includes a public key and an import token. Use the public key to encrypt the key material. Then, submit the import token from the same GetParametersForImport response.\n\nWhen calling this operation, you must specify the following values:\n\nThe key ID or key ARN of a KMS key with no key material. Its Origin must be EXTERNAL . To create a KMS key with no key material, call CreateKey and set the value of its Origin parameter to EXTERNAL . To get the Origin of a KMS key, call DescribeKey .)\n\nThe encrypted key material. To get the public key to encrypt the key material, call GetParametersForImport .\n\nThe import token that GetParametersForImport returned. You must use a public key and token from the same GetParametersForImport response.\n\nWhether the key material expires and if so, when. If you set an expiration date, KMS deletes the key material from the KMS key on the specified date, and the KMS key becomes unusable. To use the KMS key again, you must reimport the same key material. The only way to change an expiration date is by reimporting the same key material and specifying a new expiration date.\n\nWhen this operation is successful, the key state of the KMS key changes from PendingImport to Enabled , and you can use the KMS key.\n\nIf this operation fails, use the exception to help determine the problem. If the error is related to the key material, the import token, or wrapping key, use GetParametersForImport to get a new public key and import token for the KMS key and repeat the import procedure. For help, see How To Import Key Material in the Key Management Service Developer Guide .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:ImportKeyMaterial (key policy)\n\nRelated operations:\n\nDeleteImportedKeyMaterial\n\nGetParametersForImport\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  import-key-material\n--key-id <value>\n--import-token <value>\n--encrypted-key-material <value>\n[--valid-to <value>]\n[--expiration-model <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--import-token <value>",
        "--encrypted-key-material <value>",
        "[--valid-to <value>]",
        "[--expiration-model <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nThe identifier of the symmetric KMS key that receives the imported key material. The KMS key’s Origin must be EXTERNAL . This must be the same KMS key specified in the KeyID parameter of the corresponding GetParametersForImport request.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--import-token (blob)\n\nThe import token that you received in the response to a previous GetParametersForImport request. It must be from the same response that contained the public key that you used to encrypt the key material.\n\n--encrypted-key-material (blob)\n\nThe encrypted key material to import. The key material must be encrypted with the public wrapping key that GetParametersForImport returned, using the wrapping algorithm that you specified in the same GetParametersForImport request.\n\n--valid-to (timestamp)\n\nThe time at which the imported key material expires. When the key material expires, KMS deletes the key material and the KMS key becomes unusable. You must omit this parameter when the ExpirationModel parameter is set to KEY_MATERIAL_DOES_NOT_EXPIRE . Otherwise it is required.\n\n--expiration-model (string)\n\nSpecifies whether the key material expires. The default is KEY_MATERIAL_EXPIRES , in which case you must include the ValidTo parameter. When this parameter is set to KEY_MATERIAL_DOES_NOT_EXPIRE , you must omit the ValidTo parameter.\n\nPossible values:\n\nKEY_MATERIAL_EXPIRES\n\nKEY_MATERIAL_DOES_NOT_EXPIRE\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo import key material into a KMS customer master key\n\nThe following import-key-material example uploads key material into a CMK that was created with no key material. The key state of the CMK must be PendingImport.\n\nThis command uses key material that you encrypted with the public key that the get-parameters-for-import command returned. It also uses the import token from the same get-parameters-for-import command.\n\nThe expiration-model parameter indicates that the key material automatically expires on the date and time specified by the valid-to parameter. When the key material expires, AWS KMS deletes the key material, the key state of the CMK changes to Pending import and the CMK becomes unusable. To restore the CMK, you must reimport the same key material. To use different key material, you must create a new CMK.\n\nBefore running this command, replace the example key ID with a valid key ID or key ARN from your AWS account.\n\naws kms import-key-material \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --encrypted-key-material fileb://EncryptedKeyMaterial.bin \\\n    --import-token fileb://ImportToken.bin \\\n    --expiration-model KEY_MATERIAL_EXPIRES \\\n    --valid-to 2021-09-21T19:00:00Z\n\n\nThis command produces no output.\n\nFor more information about importing key material, see Importing Key Material in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "list-aliases",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/list-aliases.html",
      "command_description": "Description\n\nGets a list of aliases in the caller’s Amazon Web Services account and region. For more information about aliases, see CreateAlias .\n\nBy default, the ListAliases operation returns all aliases in the account and region. To get only the aliases associated with a particular KMS key, use the KeyId parameter.\n\nThe ListAliases response can include aliases that you created and associated with your customer managed keys, and aliases that Amazon Web Services created and associated with Amazon Web Services managed keys in your account. You can recognize Amazon Web Services aliases because their names have the format aws/<service-name> , such as aws/dynamodb .\n\nThe response might also include aliases that have no TargetKeyId field. These are predefined aliases that Amazon Web Services has created but has not yet associated with a KMS key. Aliases that Amazon Web Services creates in your account, including predefined aliases, do not count against your KMS aliases quota .\n\nCross-account use : No. ListAliases does not return aliases in other Amazon Web Services accounts.\n\nRequired permissions : kms:ListAliases (IAM policy)\n\nFor details, see Controlling access to aliases in the Key Management Service Developer Guide .\n\nRelated operations:\n\nCreateAlias\n\nDeleteAlias\n\nUpdateAlias\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-aliases is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: Aliases",
      "command_synopsis": "Synopsis\n  list-aliases\n[--key-id <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--key-id <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nLists only aliases that are associated with the specified KMS key. Enter a KMS key in your Amazon Web Services account.\n\nThis parameter is optional. If you omit it, ListAliases returns all aliases in the account and Region.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nAliases -> (list)\n\nA list of aliases.\n\n(structure)\n\nContains information about an alias.\n\nAliasName -> (string)\n\nString that contains the alias. This value begins with alias/ .\n\nAliasArn -> (string)\n\nString that contains the key ARN.\n\nTargetKeyId -> (string)\n\nString that contains the key identifier of the KMS key associated with the alias.\n\nCreationDate -> (timestamp)\n\nDate and time that the alias was most recently created in the account and Region. Formatted as Unix time.\n\nLastUpdatedDate -> (timestamp)\n\nDate and time that the alias was most recently associated with a KMS key in the account and Region. Formatted as Unix time.\n\nNextMarker -> (string)\n\nWhen Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.\n\nTruncated -> (boolean)\n\nA flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.",
      "command_examples": "Examples\n\nExample 1: To list all aliases in an AWS account and Region\n\nThe following example uses the list-aliases command to list all aliases in the default Region of the AWS account. The output includes aliases associated with AWS managed CMKs and customer managed CMKs.\n\naws kms list-aliases\n\n\nOutput:\n\n{\n    \"Aliases\": [\n        {\n            \"AliasArn\": \"arn:aws:kms:us-west-2:111122223333:alias/testKey\",\n            \"AliasName\": \"alias/testKey\",\n            \"TargetKeyId\": \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        },\n        {\n            \"AliasArn\": \"arn:aws:kms:us-west-2:111122223333:alias/FinanceDept\",\n            \"AliasName\": \"alias/FinanceDept\",\n            \"TargetKeyId\": \"0987dcba-09fe-87dc-65ba-ab0987654321\"\n        },\n        {\n            \"AliasArn\": \"arn:aws:kms:us-west-2:111122223333:alias/aws/dynamodb\",\n            \"AliasName\": \"alias/aws/dynamodb\",\n            \"TargetKeyId\": \"1a2b3c4d-5e6f-1a2b-3c4d-5e6f1a2b3c4d\"\n        },\n        {\n            \"AliasArn\": \"arn:aws:kms:us-west-2:111122223333:alias/aws/ebs\",\n            \"AliasName\": \"alias/aws/ebs\",\n            \"TargetKeyId\": \"0987ab65-43cd-21ef-09ab-87654321cdef\"\n        },\n        ...\n    ]\n}\n\n\nExample 2: To list all aliases for a particular CMK\n\nThe following example uses the list-aliases command and its key-id parameter to list all aliases that are associated with a particular CMK.\n\nEach alias is associated with only one CMK, but a CMK can have multiple aliases. This command is very useful because the AWS KMS console lists only one alias for each CMK. To find all aliases for a CMK, you must use the list-aliases command.\n\nThis example uses the key ID of the CMK for the --key-id parameter, but you can use a key ID, key ARN, alias name, or alias ARN in this command.\n\naws kms list-aliases --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nOutput:\n\n{\n    \"Aliases\": [\n        {\n            \"TargetKeyId\": \"1234abcd-12ab-34cd-56ef-1234567890ab\",\n            \"AliasArn\": \"arn:aws:kms:us-west-2:111122223333:alias/oregon-test-key\",\n            \"AliasName\": \"alias/oregon-test-key\"\n        },\n        {\n            \"TargetKeyId\": \"1234abcd-12ab-34cd-56ef-1234567890ab\",\n            \"AliasArn\": \"arn:aws:kms:us-west-2:111122223333:alias/project121-test\",\n            \"AliasName\": \"alias/project121-test\"\n        }\n    ]\n}\n\n\nFor more information, see Working with Aliases in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "list-grants",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/list-grants.html",
      "command_description": "Description\n\nGets a list of all grants for the specified KMS key.\n\nYou must specify the KMS key in all requests. You can filter the grant list by grant ID or grantee principal.\n\nFor detailed information about grants, including grant terminology, see Using grants in the * Key Management Service Developer Guide * . For examples of working with grants in several programming languages, see Programming grants .\n\nNote\n\nThe GranteePrincipal field in the ListGrants response usually contains the user or role designated as the grantee principal in the grant. However, when the grantee principal in the grant is an Amazon Web Services service, the GranteePrincipal field contains the service principal , which might represent several different grantee principals.\n\nCross-account use : Yes. To perform this operation on a KMS key in a different Amazon Web Services account, specify the key ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:ListGrants (key policy)\n\nRelated operations:\n\nCreateGrant\n\nListRetirableGrants\n\nRetireGrant\n\nRevokeGrant\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-grants is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: Grants",
      "command_synopsis": "Synopsis\n  list-grants\n--key-id <value>\n[--grant-id <value>]\n[--grantee-principal <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--grant-id <value>]",
        "[--grantee-principal <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nReturns only grants for the specified KMS key. This parameter is required.\n\nSpecify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--grant-id (string)\n\nReturns only the grant with the specified grant ID. The grant ID uniquely identifies the grant.\n\n--grantee-principal (string)\n\nReturns only grants where the specified principal is the grantee principal for the grant.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nGrants -> (list)\n\nA list of grants.\n\n(structure)\n\nContains information about a grant.\n\nKeyId -> (string)\n\nThe unique identifier for the KMS key to which the grant applies.\n\nGrantId -> (string)\n\nThe unique identifier for the grant.\n\nName -> (string)\n\nThe friendly name that identifies the grant. If a name was provided in the CreateGrant request, that name is returned. Otherwise this value is null.\n\nCreationDate -> (timestamp)\n\nThe date and time when the grant was created.\n\nGranteePrincipal -> (string)\n\nThe identity that gets the permissions in the grant.\n\nThe GranteePrincipal field in the ListGrants response usually contains the user or role designated as the grantee principal in the grant. However, when the grantee principal in the grant is an Amazon Web Services service, the GranteePrincipal field contains the service principal , which might represent several different grantee principals.\n\nRetiringPrincipal -> (string)\n\nThe principal that can retire the grant.\n\nIssuingAccount -> (string)\n\nThe Amazon Web Services account under which the grant was issued.\n\nOperations -> (list)\n\nThe list of operations permitted by the grant.\n\n(string)\n\nConstraints -> (structure)\n\nA list of key-value pairs that must be present in the encryption context of certain subsequent operations that the grant allows.\n\nEncryptionContextSubset -> (map)\n\nA list of key-value pairs that must be included in the encryption context of the cryptographic operation request. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs.\n\nkey -> (string)\n\nvalue -> (string)\n\nEncryptionContextEquals -> (map)\n\nA list of key-value pairs that must match the encryption context in the cryptographic operation request. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint.\n\nkey -> (string)\n\nvalue -> (string)\n\nNextMarker -> (string)\n\nWhen Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.\n\nTruncated -> (boolean)\n\nA flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.",
      "command_examples": "Examples\n\nTo view the grants on an AWS CMK\n\nThe following list-grants example displays all of the grants on the specified AWS managed CMK for Amazon DynamoDB in your account. This grant allows DynamoDB to use the CMK on your behalf to encrypt a DynamoDB table before writing it to disk. You can use a command like this one to view the grants on the AWS managed CMKs and customer managed CMKs in the AWS account and Region.\n\nThis command uses the key-id parameter with a key ID to identify the CMK. You can use a key ID or key ARN to identify the CMK. To get the key ID or key ARN of an AWS managed CMK, use the list-keys or list-aliases command.\n\naws kms list-grants \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThe output shows that the grant gives Amazon DynamoDB permission to use the CMK for cryptographic operations, and gives it permission to view details about the CMK (DescribeKey) and to retire grants (RetireGrant). The EncryptionContextSubset constraint limits these permission to requests that include the specified encryption context pairs. As a result, the permissions in the grant are effective only on specified account and DynamoDB table.\n\n{\n    \"Grants\": [\n        {\n            \"Constraints\": {\n                \"EncryptionContextSubset\": {\n                    \"aws:dynamodb:subscriberId\": \"123456789012\",\n                    \"aws:dynamodb:tableName\": \"Services\"\n                }\n            },\n            \"IssuingAccount\": \"arn:aws:iam::123456789012:root\",\n            \"Name\": \"8276b9a6-6cf0-46f1-b2f0-7993a7f8c89a\",\n            \"Operations\": [\n                \"Decrypt\",\n                \"Encrypt\",\n                \"GenerateDataKey\",\n                \"ReEncryptFrom\",\n                \"ReEncryptTo\",\n                \"RetireGrant\",\n                \"DescribeKey\"\n            ],\n            \"GrantId\": \"1667b97d27cf748cf05b487217dd4179526c949d14fb3903858e25193253fe59\",\n            \"KeyId\": \"arn:aws:kms:us-west-2:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\n            \"RetiringPrincipal\": \"dynamodb.us-west-2.amazonaws.com\",\n            \"GranteePrincipal\": \"dynamodb.us-west-2.amazonaws.com\",\n            \"CreationDate\": 1518567315.0\n        }\n    ]\n}\n\n\nFor more information, see Using Grants in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "list-key-policies",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/list-key-policies.html",
      "command_description": "Description\n\nGets the names of the key policies that are attached to a KMS key. This operation is designed to get policy names that you can use in a GetKeyPolicy operation. However, the only valid policy name is default .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:ListKeyPolicies (key policy)\n\nRelated operations:\n\nGetKeyPolicy\n\nPutKeyPolicy\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-key-policies is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: PolicyNames",
      "command_synopsis": "Synopsis\n  list-key-policies\n--key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nGets the names of key policies for the specified KMS key.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nPolicyNames -> (list)\n\nA list of key policy names. The only valid value is default .\n\n(string)\n\nNextMarker -> (string)\n\nWhen Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.\n\nTruncated -> (boolean)\n\nA flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.",
      "command_examples": "Examples\n\nTo get the names of key policies for a CMK\n\nThe following list-key-policies example gets the names of the key policies for a customer managed CMK in the example account and Region. You can use this command to find the names of key policies for AWS managed CMKs and customer managed CMKs.\n\nBecause the only valid key policy name is default, this command is not useful.\n\nTo specify the CMK, use the key-id parameter. This example uses a key ID value, but you can use a key ID or key ARN in this command.\n\naws kms list-key-policies \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nOutput:\n\n{\n    \"PolicyNames\": [\n    \"default\"\n    ]\n}\n\n\nFor more information about AWS KMS key policies, see Using Key Policies in AWS KMS in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "list-keys",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/list-keys.html",
      "command_description": "Description\n\nGets a list of all KMS keys in the caller’s Amazon Web Services account and Region.\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:ListKeys (IAM policy)\n\nRelated operations:\n\nCreateKey\n\nDescribeKey\n\nListAliases\n\nListResourceTags\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-keys is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: Keys",
      "command_synopsis": "Synopsis\n  list-keys\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeys -> (list)\n\nA list of KMS keys.\n\n(structure)\n\nContains information about each entry in the key list.\n\nKeyId -> (string)\n\nUnique identifier of the key.\n\nKeyArn -> (string)\n\nARN of the key.\n\nNextMarker -> (string)\n\nWhen Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.\n\nTruncated -> (boolean)\n\nA flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.",
      "command_examples": "Examples\n\nTo get the customer master keys (CMKs) in an account and Region\n\nThe following list-keys example gets the CMKs in an account and Region. This command returns both AWS managed CMKs and customer managed CMKs.\n\naws kms list-keys\n\n\nOutput:\n\n{\n    \"Keys\": [\n        {\n            \"KeyArn\": \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\n            \"KeyId\": \"1234abcd-12ab-34cd-56ef-1234567890ab\"\n        },\n        {\n            \"KeyArn\": \"arn:aws:kms:us-west-2:111122223333:key/0987dcba-09fe-87dc-65ba-ab0987654321\",\n            \"KeyId\": \"0987dcba-09fe-87dc-65ba-ab0987654321\"\n        },\n        {\n            \"KeyArn\": \"arn:aws:kms:us-east-2:111122223333:key/1a2b3c4d-5e6f-1a2b-3c4d-5e6f1a2b3c4d\",\n            \"KeyId\": \"1a2b3c4d-5e6f-1a2b-3c4d-5e6f1a2b3c4d\"\n        }\n    ]\n}\n\n\nFor more information, see Viewing Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "list-resource-tags",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/list-resource-tags.html",
      "command_description": "Description\n\nReturns all tags on the specified KMS key.\n\nFor general information about tags, including the format and syntax, see Tagging Amazon Web Services resources in the Amazon Web Services General Reference . For information about using tags in KMS, see Tagging keys .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:ListResourceTags (key policy)\n\nRelated operations:\n\nCreateKey\n\nReplicateKey\n\nTagResource\n\nUntagResource\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-resource-tags\n--key-id <value>\n[--limit <value>]\n[--marker <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--limit <value>]",
        "[--marker <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nGets tags on the specified KMS key.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--limit (integer)\n\nUse this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.\n\nThis value is optional. If you include a value, it must be between 1 and 50, inclusive. If you do not include a value, it defaults to 50.\n\n--marker (string)\n\nUse this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.\n\nDo not attempt to construct this value. Use only the value of NextMarker from the truncated response you just received.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTags -> (list)\n\nA list of tags. Each tag consists of a tag key and a tag value.\n\nNote\n\nTagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see Using ABAC in KMS in the Key Management Service Developer Guide .\n\n(structure)\n\nA key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.\n\nFor information about the rules that apply to tag keys and tag values, see User-Defined Tag Restrictions in the Amazon Web Services Billing and Cost Management User Guide .\n\nTagKey -> (string)\n\nThe key of the tag.\n\nTagValue -> (string)\n\nThe value of the tag.\n\nNextMarker -> (string)\n\nWhen Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.\n\nDo not assume or infer any information from this value.\n\nTruncated -> (boolean)\n\nA flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.",
      "command_examples": "Examples\n\nTo get the tags on an AWS KMS CMK\n\nThe following list-resource-tags example gets the tags for a CMK. To add or replace resource tags on CMKs, use the tag-resource command. The output shows that this CMK has two resource tags, each of which is comprised of a key and value.\n\nTo specify the CMK, use the key-id parameter. This example uses a key ID value, but you can use a key ID or key ARN in this command.\n\naws kms list-resource-tags \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nOutput:\n\n{\n    \"Tags\": [\n    {\n        \"TagKey\": \"Dept\",\n        \"TagValue\": \"IT\"\n    },\n    {\n        \"TagKey\": \"Purpose\",\n        \"TagValue\": \"Test\"\n    }\n    ],\n    \"Truncated\": false\n}\n\n\nFor more information about using tags in AWS KMS, see Tagging Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "list-retirable-grants",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/list-retirable-grants.html",
      "command_description": "Description\n\nReturns information about all grants in the Amazon Web Services account and Region that have the specified retiring principal.\n\nYou can specify any principal in your Amazon Web Services account. The grants that are returned include grants for KMS keys in your Amazon Web Services account and other Amazon Web Services accounts. You might use this operation to determine which grants you may retire. To retire a grant, use the RetireGrant operation.\n\nFor detailed information about grants, including grant terminology, see Using grants in the * Key Management Service Developer Guide * . For examples of working with grants in several programming languages, see Programming grants .\n\nCross-account use : You must specify a principal in your Amazon Web Services account. However, this operation can return grants in any Amazon Web Services account. You do not need kms:ListRetirableGrants permission (or any other additional permission) in any Amazon Web Services account other than your own.\n\nRequired permissions : kms:ListRetirableGrants (IAM policy) in your Amazon Web Services account.\n\nRelated operations:\n\nCreateGrant\n\nListGrants\n\nRetireGrant\n\nRevokeGrant\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-retirable-grants\n[--limit <value>]\n[--marker <value>]\n--retiring-principal <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--limit <value>]",
        "[--marker <value>]",
        "--retiring-principal <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--limit (integer)\n\nUse this parameter to specify the maximum number of items to return. When this value is present, KMS does not return more than the specified number of items, but it might return fewer.\n\nThis value is optional. If you include a value, it must be between 1 and 100, inclusive. If you do not include a value, it defaults to 50.\n\n--marker (string)\n\nUse this parameter in a subsequent request after you receive a response with truncated results. Set it to the value of NextMarker from the truncated response you just received.\n\n--retiring-principal (string)\n\nThe retiring principal for which to list grants. Enter a principal in your Amazon Web Services account.\n\nTo specify the retiring principal, use the Amazon Resource Name (ARN) of an Amazon Web Services principal. Valid Amazon Web Services principals include Amazon Web Services accounts (root), IAM users, federated users, and assumed role users. For examples of the ARN syntax for specifying a principal, see Amazon Web Services Identity and Access Management (IAM) in the Example ARNs section of the Amazon Web Services General Reference .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nGrants -> (list)\n\nA list of grants.\n\n(structure)\n\nContains information about a grant.\n\nKeyId -> (string)\n\nThe unique identifier for the KMS key to which the grant applies.\n\nGrantId -> (string)\n\nThe unique identifier for the grant.\n\nName -> (string)\n\nThe friendly name that identifies the grant. If a name was provided in the CreateGrant request, that name is returned. Otherwise this value is null.\n\nCreationDate -> (timestamp)\n\nThe date and time when the grant was created.\n\nGranteePrincipal -> (string)\n\nThe identity that gets the permissions in the grant.\n\nThe GranteePrincipal field in the ListGrants response usually contains the user or role designated as the grantee principal in the grant. However, when the grantee principal in the grant is an Amazon Web Services service, the GranteePrincipal field contains the service principal , which might represent several different grantee principals.\n\nRetiringPrincipal -> (string)\n\nThe principal that can retire the grant.\n\nIssuingAccount -> (string)\n\nThe Amazon Web Services account under which the grant was issued.\n\nOperations -> (list)\n\nThe list of operations permitted by the grant.\n\n(string)\n\nConstraints -> (structure)\n\nA list of key-value pairs that must be present in the encryption context of certain subsequent operations that the grant allows.\n\nEncryptionContextSubset -> (map)\n\nA list of key-value pairs that must be included in the encryption context of the cryptographic operation request. The grant allows the cryptographic operation only when the encryption context in the request includes the key-value pairs specified in this constraint, although it can include additional key-value pairs.\n\nkey -> (string)\n\nvalue -> (string)\n\nEncryptionContextEquals -> (map)\n\nA list of key-value pairs that must match the encryption context in the cryptographic operation request. The grant allows the operation only when the encryption context in the request is the same as the encryption context specified in this constraint.\n\nkey -> (string)\n\nvalue -> (string)\n\nNextMarker -> (string)\n\nWhen Truncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent request.\n\nTruncated -> (boolean)\n\nA flag that indicates whether there are more items in the list. When this value is true, the list in this response is truncated. To get more items, pass the value of the NextMarker element in thisresponse to the Marker parameter in a subsequent request.",
      "command_examples": "Examples\n\nTo view the grants that a principal can retire\n\nThe following list-retirable-grants example displays all of the grants that the ExampleAdmin user can retire on the customer master keys (CMKs) in an AWS account and Region. You can use a command like this one to view the grants that any account principal can retire on CMKs in the AWS account and Region.\n\nThe value of the required retiring-principal parameter must be the Amazon Resource Name (ARN) of an account, user, or role.\n\nYou cannot specify a service for the value of retiring-principal in this command, even though a service can be the retiring principal. To find the grants in which a particular service is the retiring principal, use the list-grants command.\n\nThe output shows that ExampleAdmin user has permission to retire grants on two different CMKs in the account and region. In addition to the retiring principal, the account (root) has permission to retire any grant in the account.\n\naws kms list-retirable-grants \\\n    --retiring-principal arn:aws:iam::111122223333:user/ExampleAdmin\n\n\nOutput:\n\n{\n    \"Grants\": [\n        {\n            \"KeyId\": \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\n            \"GrantId\": \"156b69c63cb154aa21f59929ff19760717be8d9d82b99df53e18b94a15a5e88e\",\n            \"Name\": \"\",\n            \"CreationDate\": 1576800734.0,\n            \"GranteePrincipal\": \"arn:aws:iam::111122223333:user/ExampleUser\",\n            \"RetiringPrincipal\": \"arn:aws:iam::111122223333:user/ExampleAdmin\",\n            \"IssuingAccount\": \"arn:aws:iam::111122223333:root\",\n            \"Operations\": [\n                \"Encrypt\"\n            ],\n            \"Constraints\": {\n                \"EncryptionContextSubset\": {\n                    \"Department\": \"IT\"\n                }\n            }\n        },\n        {\n            \"KeyId\": \"arn:aws:kms:us-west-2:111122223333:key/0987dcba-09fe-87dc-65ba-ab0987654321\",\n            \"GrantId\": \"8c94d1f12f5e69f440bae30eaec9570bb1fb7358824f9ddfa1aa5a0dab1a59b2\",\n            \"Name\": \"\",\n            \"CreationDate\": 1568565290.0,\n            \"GranteePrincipal\": \"arn:aws:iam::111122223333:role/ExampleRole\",\n            \"RetiringPrincipal\": \"arn:aws:iam::111122223333:user/ExampleAdmin\",\n            \"IssuingAccount\": \"arn:aws:iam::111122223333:root\",\n            \"Operations\": [\n                \"Decrypt\"\n            ],\n            \"Constraints\": {\n                \"EncryptionContextSubset\": {\n                    \"Department\": \"IT\"\n                }\n            }\n        }\n    ],\n    \"Truncated\": false\n}\n\n\nFor more information, see Using Grants in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "put-key-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/put-key-policy.html",
      "command_description": "Description\n\nAttaches a key policy to the specified KMS key.\n\nFor more information about key policies, see Key Policies in the Key Management Service Developer Guide . For help writing and formatting a JSON policy document, see the IAM JSON Policy Reference in the * Identity and Access Management User Guide * . For examples of adding a key policy in multiple programming languages, see Setting a key policy in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:PutKeyPolicy (key policy)\n\nRelated operations : GetKeyPolicy\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-key-policy\n--key-id <value>\n--policy-name <value>\n--policy <value>\n[--bypass-policy-lockout-safety-check | --no-bypass-policy-lockout-safety-check]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--policy-name <value>",
        "--policy <value>",
        "[--bypass-policy-lockout-safety-check | --no-bypass-policy-lockout-safety-check]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nSets the key policy on the specified KMS key.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--policy-name (string)\n\nThe name of the key policy. The only valid value is default .\n\n--policy (string)\n\nThe key policy to attach to the KMS key.\n\nThe key policy must meet the following criteria:\n\nIf you don’t set BypassPolicyLockoutSafetyCheck to true, the key policy must allow the principal that is making the PutKeyPolicy request to make a subsequent PutKeyPolicy request on the KMS key. This reduces the risk that the KMS key becomes unmanageable. For more information, refer to the scenario in the Default Key Policy section of the Key Management Service Developer Guide .\n\nEach statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see Changes that I make are not always immediately visible in the Amazon Web Services Identity and Access Management User Guide .\n\nThe key policy cannot exceed 32 kilobytes (32768 bytes). For more information, see Resource Quotas in the Key Management Service Developer Guide .\n\n--bypass-policy-lockout-safety-check | --no-bypass-policy-lockout-safety-check (boolean)\n\nA flag to indicate whether to bypass the key policy lockout safety check.\n\nWarning\n\nSetting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately.\n\nFor more information, refer to the scenario in the Default Key Policy section in the Key Management Service Developer Guide .\n\nUse this parameter only when you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the KMS key.\n\nThe default value is false.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo change the key policy for a customer master key (CMK)\n\nThe following put-key-policy example changes the key policy for a customer managed CMK.\n\nTo begin, create a key policy and save it in a local JSON file. In this example, the file is key_policy.json. You can also specify the key policy as a string value of the policy parameter.\n\nThe first statement in this key policy gives the AWS account permission to use IAM policies to control access to the CMK. The second statement gives the test-user user permission to run the describe-key and list-keys commands on the CMK.\n\nContents of key_policy.json:\n\n{\n    \"Version\" : \"2012-10-17\",\n    \"Id\" : \"key-default-1\",\n    \"Statement\" : [\n        {\n            \"Sid\" : \"Enable IAM User Permissions\",\n            \"Effect\" : \"Allow\",\n            \"Principal\" : {\n                \"AWS\" : \"arn:aws:iam::111122223333:root\"\n            },\n            \"Action\" : \"kms:\",\n            \"Resource\" : \"*\"\n        },\n        {\n            \"Sid\" : \"Allow Use of Key\",\n            \"Effect\" : \"Allow\",\n            \"Principal\" : {\n                \"AWS\" : \"arn:aws:iam::111122223333:user/test-user\"\n            },\n            \"Action\" : [\n                \"kms:DescribeKey\",\n                \"kms:ListKeys\"\n            ],\n            \"Resource\" : \"*\"\n        }\n    ]\n}\n\n\nTo identify the CMK, this example uses the key ID, but you can also usa key ARN. To specify the key policy, the command uses the policy parameter. To indicate that the policy is in a file, it uses the required file:// prefix. This prefix is required to identify files on all supported operating systems. Finally, the command uses the policy-name parameter with a value of default. This parameter is required, even though default is the only valid value.\n\naws kms put-key-policy \\\n    --policy-name default \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --policy file://key_policy.json\n\n\nThis command does not produce any output. To verify that the command was effective, use the get-key-policy command. The following example command gets the key policy for the same CMK. The output parameter with a value of text returns a text format that is easy to read.\n\naws kms get-key-policy \\\n    --policy-name default \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --output text\n\n\nOutput:\n\n{\n    \"Version\" : \"2012-10-17\",\n    \"Id\" : \"key-default-1\",\n    \"Statement\" : [\n        {\n            \"Sid\" : \"Enable IAM User Permissions\",\n            \"Effect\" : \"Allow\",\n            \"Principal\" : {\n                \"AWS\" : \"arn:aws:iam::111122223333:root\"\n            },\n            \"Action\" : \"kms:\",\n            \"Resource\" : \"*\"\n            },\n            {\n            \"Sid\" : \"Allow Use of Key\",\n            \"Effect\" : \"Allow\",\n            \"Principal\" : {\n                \"AWS\" : \"arn:aws:iam::111122223333:user/test-user\"\n            },\n            \"Action\" : [ \"kms:Describe\", \"kms:List\" ],\n            \"Resource\" : \"*\"\n        }\n    ]\n}\n\n\nFor more information, see Changing a Key Policy in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "re-encrypt",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/re-encrypt.html",
      "command_description": "Description\n\nDecrypts ciphertext and then reencrypts it entirely within KMS. You can use this operation to change the KMS key under which data is encrypted, such as when you manually rotate a KMS key or change the KMS key that protects a ciphertext. You can also use it to reencrypt ciphertext under the same KMS key, such as to change the encryption context of a ciphertext.\n\nThe ReEncrypt operation can decrypt ciphertext that was encrypted by using an KMS KMS key in an KMS operation, such as Encrypt or GenerateDataKey . It can also decrypt ciphertext that was encrypted by using the public key of an asymmetric KMS key outside of KMS. However, it cannot decrypt ciphertext produced by other libraries, such as the Amazon Web Services Encryption SDK or Amazon S3 client-side encryption . These libraries return a ciphertext format that is incompatible with KMS.\n\nWhen you use the ReEncrypt operation, you need to provide information for the decrypt operation and the subsequent encrypt operation.\n\nIf your ciphertext was encrypted under an asymmetric KMS key, you must use the SourceKeyId parameter to identify the KMS key that encrypted the ciphertext. You must also supply the encryption algorithm that was used. This information is required to decrypt the data.\n\nIf your ciphertext was encrypted under a symmetric KMS key, the SourceKeyId parameter is optional. KMS can get this information from metadata that it adds to the symmetric ciphertext blob. This feature adds durability to your implementation by ensuring that authorized users can decrypt ciphertext decades after it was encrypted, even if they’ve lost track of the key ID. However, specifying the source KMS key is always recommended as a best practice. When you use the SourceKeyId parameter to specify a KMS key, KMS uses only the KMS key you specify. If the ciphertext was encrypted under a different KMS key, the ReEncrypt operation fails. This practice ensures that you use the KMS key that you intend.\n\nTo reencrypt the data, you must use the DestinationKeyId parameter specify the KMS key that re-encrypts the data after it is decrypted. You can select a symmetric or asymmetric KMS key. If the destination KMS key is an asymmetric KMS key, you must also provide the encryption algorithm. The algorithm that you choose must be compatible with the KMS key.\n\nWarning\n\nWhen you use an asymmetric KMS key to encrypt or reencrypt data, be sure to record the KMS key and encryption algorithm that you choose. You will be required to provide the same KMS key and encryption algorithm when you decrypt the data. If the KMS key and algorithm do not match the values used to encrypt the data, the decrypt operation fails. You are not required to supply the key ID and encryption algorithm when you decrypt with symmetric KMS keys because KMS stores this information in the ciphertext blob. KMS cannot store metadata in ciphertext generated with asymmetric keys. The standard format for asymmetric key ciphertext does not include configurable fields.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : Yes. The source KMS key and destination KMS key can be in different Amazon Web Services accounts. Either or both KMS keys can be in a different account than the caller. To specify a KMS key in a different account, you must use its key ARN or alias ARN.\n\nRequired permissions :\n\nkms:ReEncryptFrom permission on the source KMS key (key policy)\n\nkms:ReEncryptTo permission on the destination KMS key (key policy)\n\nTo permit reencryption from or to a KMS key, include the \"kms:ReEncrypt*\" permission in your key policy . This permission is automatically included in the key policy when you use the console to create a KMS key. But you must include it manually when you create a KMS key programmatically or when you use the PutKeyPolicy operation to set a key policy.\n\nRelated operations:\n\nDecrypt\n\nEncrypt\n\nGenerateDataKey\n\nGenerateDataKeyPair\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  re-encrypt\n--ciphertext-blob <value>\n[--source-encryption-context <value>]\n[--source-key-id <value>]\n--destination-key-id <value>\n[--destination-encryption-context <value>]\n[--source-encryption-algorithm <value>]\n[--destination-encryption-algorithm <value>]\n[--grant-tokens <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--ciphertext-blob <value>",
        "[--source-encryption-context <value>]",
        "[--source-key-id <value>]",
        "--destination-key-id <value>",
        "[--destination-encryption-context <value>]",
        "[--source-encryption-algorithm <value>]",
        "[--destination-encryption-algorithm <value>]",
        "[--grant-tokens <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--ciphertext-blob (blob)\n\nCiphertext of the data to reencrypt.\n\n--source-encryption-context (map)\n\nSpecifies the encryption context to use to decrypt the ciphertext. Enter the same encryption context that was used to encrypt the ciphertext.\n\nAn encryption context is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric KMS key, but it is highly recommended.\n\nFor more information, see Encryption Context in the Key Management Service Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--source-key-id (string)\n\nSpecifies the KMS key that KMS will use to decrypt the ciphertext before it is re-encrypted. Enter a key ID of the KMS key that was used to encrypt the ciphertext.\n\nThis parameter is required only when the ciphertext was encrypted under an asymmetric KMS key. If you used a symmetric KMS key, KMS can get the KMS key from metadata that it adds to the symmetric ciphertext blob. However, it is always recommended as a best practice. This practice ensures that you use the KMS key that you intend.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--destination-key-id (string)\n\nA unique identifier for the KMS key that is used to reencrypt the data. Specify a symmetric or asymmetric KMS key with a KeyUsage value of ENCRYPT_DECRYPT . To find the KeyUsage value of a KMS key, use the DescribeKey operation.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--destination-encryption-context (map)\n\nSpecifies that encryption context to use when the reencrypting the data.\n\nA destination encryption context is valid only when the destination KMS key is a symmetric KMS key. The standard ciphertext format for asymmetric KMS keys does not include fields for metadata.\n\nAn encryption context is a collection of non-secret key-value pairs that represents additional authenticated data. When you use an encryption context to encrypt data, you must specify the same (an exact case-sensitive match) encryption context to decrypt the data. An encryption context is optional when encrypting with a symmetric KMS key, but it is highly recommended.\n\nFor more information, see Encryption Context in the Key Management Service Developer Guide .\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--source-encryption-algorithm (string)\n\nSpecifies the encryption algorithm that KMS will use to decrypt the ciphertext before it is reencrypted. The default value, SYMMETRIC_DEFAULT , represents the algorithm used for symmetric KMS keys.\n\nSpecify the same algorithm that was used to encrypt the ciphertext. If you specify a different algorithm, the decrypt attempt fails.\n\nThis parameter is required only when the ciphertext was encrypted under an asymmetric KMS key.\n\nPossible values:\n\nSYMMETRIC_DEFAULT\n\nRSAES_OAEP_SHA_1\n\nRSAES_OAEP_SHA_256\n\n--destination-encryption-algorithm (string)\n\nSpecifies the encryption algorithm that KMS will use to reecrypt the data after it has decrypted it. The default value, SYMMETRIC_DEFAULT , represents the encryption algorithm used for symmetric KMS keys.\n\nThis parameter is required only when the destination KMS key is an asymmetric KMS key.\n\nPossible values:\n\nSYMMETRIC_DEFAULT\n\nRSAES_OAEP_SHA_1\n\nRSAES_OAEP_SHA_256\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCiphertextBlob -> (blob)\n\nThe reencrypted data. When you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.\n\nSourceKeyId -> (string)\n\nUnique identifier of the KMS key used to originally encrypt the data.\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the KMS key that was used to reencrypt the data.\n\nSourceEncryptionAlgorithm -> (string)\n\nThe encryption algorithm that was used to decrypt the ciphertext before it was reencrypted.\n\nDestinationEncryptionAlgorithm -> (string)\n\nThe encryption algorithm that was used to reencrypt the data.",
      "command_examples": "Examples\n\nExample 1: To re-encrypt an encrypted message under a different symmetric CMK (Linux and macOS).\n\nThe following re-encrypt command example demonstrates the recommended way to re-encrypt data with the AWS CLI.\n\nProvide the ciphertext in a file.\n\nIn the value of the --ciphertext-blob parameter, use the fileb:// prefix, which tells the CLI to read the data from a binary file. If the file is not in the current directory, type the full path to file. For more information about reading AWS CLI parameter values from a file, see Loading AWS CLI parameters from a file <https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-file.html> in the AWS Command Line Interface User Guide and Best Practices for Local File Parameters<https://aws.amazon.com/blogs/developer/best-practices-for-local-file-parameters/> in the AWS Command Line Tool Blog.\n\nSpecify the source CMK, which decrypts the ciphertext.\n\nThe --source-key-id parameter is not required when decrypting with symmetric CMKs. AWS KMS can get the CMK that was used to encrypt the data from the metadata in the ciphertext blob. But it’s always a best practice to specify the CMK you are using. This practice ensures that you use the CMK that you intend, and prevents you from inadvertently decrypting a ciphertext using a CMK you do not trust.\n\nSpecify the destination CMK, which re-encrypts the data.\n\nThe --destination-key-id parameter is always required. This example uses a key ARN, but you can use any valid key identifier.\n\nRequest the plaintext output as a text value.\n\nThe --query parameter tells the CLI to get only the value of the Plaintext field from the output. The --output parameter returns the output as text.\n\nBase64-decode the plaintext and save it in a file.\n\nThe following example pipes (|) the value of the Plaintext parameter to the Base64 utility, which decodes it. Then, it redirects (>) the decoded output to the ExamplePlaintext file.\n\nBefore running this command, replace the example key IDs with valid key identifiers from your AWS account.\n\naws kms re-encrypt \\\n    --ciphertext-blob fileb://ExampleEncryptedFile \\\n    --source-key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --destination-key-id 0987dcba-09fe-87dc-65ba-ab0987654321 \\\n    --query CiphertextBlob \\\n    --output text | base64 --decode > ExampleReEncryptedFile\n\n\nThis command produces no output. The output from the decrypt command is base64-decoded and saved in a file.\n\nFor more information, see `Using symmetric and asymmetric keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html`__ in the AWS KMS Developer Guide.\n\nExample 2: To re-encrypt an encrypted message under a different symmetric CMK (Windows command prompt).\n\nThe following re-encrypt command example is the same as the previous one except that it uses the certutil utility to Base64-decode the plaintext data. This procedure requires two commands, as shown in the following examples.\n\nBefore running this command, replace the example key ID with a valid key ID from your AWS account.\n\naws kms re-encrypt ^\n    --ciphertext-blob fileb://ExampleEncryptedFile ^\n    --source-key-id 1234abcd-12ab-34cd-56ef-1234567890ab ^\n    --destination-key-id 0987dcba-09fe-87dc-65ba-ab0987654321 ^\n    --query CiphertextBlob ^\n    --output text > ExampleReEncryptedFile.base64\n\n\nThen use the certutil utility\n\ncertutil -decode ExamplePlaintextFile.base64 ExamplePlaintextFile\n\n\nOutput:\n\nInput Length = 18\nOutput Length = 12\nCertUtil: -decode command completed successfully.\n\n\nFor more information, see `Using symmetric and asymmetric keys <https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html`__ in the AWS KMS Developer Guide."
    },
    {
      "command_name": "replicate-key",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/replicate-key.html",
      "command_description": "Description\n\nReplicates a multi-Region key into the specified Region. This operation creates a multi-Region replica key based on a multi-Region primary key in a different Region of the same Amazon Web Services partition. You can create multiple replicas of a primary key, but each must be in a different Region. To create a multi-Region primary key, use the CreateKey operation.\n\nThis operation supports multi-Region keys , an KMS feature that lets you create multiple interoperable KMS keys in different Amazon Web Services Regions. Because these KMS keys have the same key ID, key material, and other metadata, you can use them interchangeably to encrypt data in one Amazon Web Services Region and decrypt it in a different Amazon Web Services Region without re-encrypting the data or making a cross-Region call. For more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide .\n\nA replica key is a fully-functional KMS key that can be used independently of its primary and peer replica keys. A primary key and its replica keys share properties that make them interoperable. They have the same key ID and key material. They also have the same key spec , key usage , key material origin , and automatic key rotation status . KMS automatically synchronizes these shared properties among related multi-Region keys. All other properties of a replica key can differ, including its key policy , tags , aliases , and key state . KMS pricing and quotas for KMS keys apply to each primary key and replica key.\n\nWhen this operation completes, the new replica key has a transient key state of Creating . This key state changes to Enabled (or PendingImport ) after a few seconds when the process of creating the new replica key is complete. While the key state is Creating , you can manage key, but you cannot yet use it in cryptographic operations. If you are creating and using the replica key programmatically, retry on KMSInvalidStateException or call DescribeKey to check its KeyState value before using it. For details about the Creating key state, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nThe CloudTrail log of a ReplicateKey operation records a ReplicateKey operation in the primary key’s Region and a CreateKey operation in the replica key’s Region.\n\nIf you replicate a multi-Region primary key with imported key material, the replica key is created with no key material. You must import the same key material that you imported into the primary key. For details, see Importing key material into multi-Region keys in the Key Management Service Developer Guide .\n\nTo convert a replica key to a primary key, use the UpdatePrimaryRegion operation.\n\nNote\n\nReplicateKey uses different default values for the KeyPolicy and Tags parameters than those used in the KMS console. For details, see the parameter descriptions.\n\nCross-account use : No. You cannot use this operation to create a replica key in a different Amazon Web Services account.\n\nRequired permissions :\n\nkms:ReplicateKey on the primary key (in the primary key’s Region). Include this permission in the primary key’s key policy.\n\nkms:CreateKey in an IAM policy in the replica Region.\n\nTo use the Tags parameter, kms:TagResource in an IAM policy in the replica Region.\n\nRelated operations\n\nCreateKey\n\nUpdatePrimaryRegion\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  replicate-key\n--key-id <value>\n--replica-region <value>\n[--policy <value>]\n[--bypass-policy-lockout-safety-check | --no-bypass-policy-lockout-safety-check]\n[--description <value>]\n[--tags <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--replica-region <value>",
        "[--policy <value>]",
        "[--bypass-policy-lockout-safety-check | --no-bypass-policy-lockout-safety-check]",
        "[--description <value>]",
        "[--tags <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the multi-Region primary key that is being replicated. To determine whether a KMS key is a multi-Region primary key, use the DescribeKey operation to check the value of the MultiRegionKeyType property.\n\nSpecify the key ID or key ARN of a multi-Region primary key.\n\nFor example:\n\nKey ID: mrk-1234abcd12ab34cd56ef1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--replica-region (string)\n\nThe Region ID of the Amazon Web Services Region for this replica key.\n\nEnter the Region ID, such as us-east-1 or ap-southeast-2 . For a list of Amazon Web Services Regions in which KMS is supported, see KMS service endpoints in the Amazon Web Services General Reference .\n\nThe replica must be in a different Amazon Web Services Region than its primary key and other replicas of that primary key, but in the same Amazon Web Services partition. KMS must be available in the replica Region. If the Region is not enabled by default, the Amazon Web Services account must be enabled in the Region.\n\nFor information about Amazon Web Services partitions, see Amazon Resource Names (ARNs) in the *Amazon Web Services General Reference* . For information about enabling and disabling Regions, see Enabling a Region and Disabling a Region in the Amazon Web Services General Reference .\n\n--policy (string)\n\nThe key policy to attach to the KMS key. This parameter is optional. If you do not provide a key policy, KMS attaches the default key policy to the KMS key.\n\nThe key policy is not a shared property of multi-Region keys. You can specify the same key policy or a different key policy for each key in a set of related multi-Region keys. KMS does not synchronize this property.\n\nIf you provide a key policy, it must meet the following criteria:\n\nIf you don’t set BypassPolicyLockoutSafetyCheck to true, the key policy must give the caller kms:PutKeyPolicy permission on the replica key. This reduces the risk that the KMS key becomes unmanageable. For more information, refer to the scenario in the Default Key Policy section of the * Key Management Service Developer Guide * .\n\nEach statement in the key policy must contain one or more principals. The principals in the key policy must exist and be visible to KMS. When you create a new Amazon Web Services principal (for example, an IAM user or role), you might need to enforce a delay before including the new principal in a key policy because the new principal might not be immediately visible to KMS. For more information, see Changes that I make are not always immediately visible in the * Identity and Access Management User Guide * .\n\nThe key policy size quota is 32 kilobytes (32768 bytes).\n\n--bypass-policy-lockout-safety-check | --no-bypass-policy-lockout-safety-check (boolean)\n\nA flag to indicate whether to bypass the key policy lockout safety check.\n\nWarning\n\nSetting this value to true increases the risk that the KMS key becomes unmanageable. Do not set this value to true indiscriminately.\n\nFor more information, refer to the scenario in the Default Key Policy section in the Key Management Service Developer Guide .\n\nUse this parameter only when you intend to prevent the principal that is making the request from making a subsequent PutKeyPolicy request on the KMS key.\n\nThe default value is false.\n\n--description (string)\n\nA description of the KMS key. The default value is an empty string (no description).\n\nThe description is not a shared property of multi-Region keys. You can specify the same description or a different description for each key in a set of related multi-Region keys. KMS does not synchronize this property.\n\n--tags (list)\n\nAssigns one or more tags to the replica key. Use this parameter to tag the KMS key when it is created. To tag an existing KMS key, use the TagResource operation.\n\nNote\n\nTagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see Using ABAC in KMS in the Key Management Service Developer Guide .\n\nTo use this parameter, you must have kms:TagResource permission in an IAM policy.\n\nTags are not a shared property of multi-Region keys. You can specify the same tags or different tags for each key in a set of related multi-Region keys. KMS does not synchronize this property.\n\nEach tag consists of a tag key and a tag value. Both the tag key and the tag value are required, but the tag value can be an empty (null) string. You cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one.\n\nWhen you add tags to an Amazon Web Services resource, Amazon Web Services generates a cost allocation report with usage and costs aggregated by tags. Tags can also be used to control access to a KMS key. For details, see Tagging Keys .\n\n(structure)\n\nA key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.\n\nFor information about the rules that apply to tag keys and tag values, see User-Defined Tag Restrictions in the Amazon Web Services Billing and Cost Management User Guide .\n\nTagKey -> (string)\n\nThe key of the tag.\n\nTagValue -> (string)\n\nThe value of the tag.\n\nShorthand Syntax:\n\nTagKey=string,TagValue=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"TagKey\": \"string\",\n    \"TagValue\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nReplicaKeyMetadata -> (structure)\n\nDisplays details about the new replica key, including its Amazon Resource Name (key ARN ) and key state . It also includes the ARN and Amazon Web Services Region of its primary key and other replica keys.\n\nAWSAccountId -> (string)\n\nThe twelve-digit account ID of the Amazon Web Services account that owns the KMS key.\n\nKeyId -> (string)\n\nThe globally unique identifier for the KMS key.\n\nArn -> (string)\n\nThe Amazon Resource Name (ARN) of the KMS key. For examples, see Key Management Service (KMS) in the Example ARNs section of the Amazon Web Services General Reference .\n\nCreationDate -> (timestamp)\n\nThe date and time when the KMS key was created.\n\nEnabled -> (boolean)\n\nSpecifies whether the KMS key is enabled. When KeyState is Enabled this value is true, otherwise it is false.\n\nDescription -> (string)\n\nThe description of the KMS key.\n\nKeyUsage -> (string)\n\nThe cryptographic operations for which you can use the KMS key.\n\nKeyState -> (string)\n\nThe current status of the KMS key.\n\nFor more information about how key state affects the use of a KMS key, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nDeletionDate -> (timestamp)\n\nThe date and time after which KMS deletes this KMS key. This value is present only when the KMS key is scheduled for deletion, that is, when its KeyState is PendingDeletion .\n\nWhen the primary key in a multi-Region key is scheduled for deletion but still has replica keys, its key state is PendingReplicaDeletion and the length of its waiting period is displayed in the PendingDeletionWindowInDays field.\n\nValidTo -> (timestamp)\n\nThe time at which the imported key material expires. When the key material expires, KMS deletes the key material and the KMS key becomes unusable. This value is present only for KMS keys whose Origin is EXTERNAL and whose ExpirationModel is KEY_MATERIAL_EXPIRES , otherwise this value is omitted.\n\nOrigin -> (string)\n\nThe source of the key material for the KMS key. When this value is AWS_KMS , KMS created the key material. When this value is EXTERNAL , the key material was imported or the KMS key doesn’t have any key material. When this value is AWS_CLOUDHSM , the key material was created in the CloudHSM cluster associated with a custom key store.\n\nCustomKeyStoreId -> (string)\n\nA unique identifier for the custom key store that contains the KMS key. This value is present only when the KMS key is created in a custom key store.\n\nCloudHsmClusterId -> (string)\n\nThe cluster ID of the CloudHSM cluster that contains the key material for the KMS key. When you create a KMS key in a custom key store , KMS creates the key material for the KMS key in the associated CloudHSM cluster. This value is present only when the KMS key is created in a custom key store.\n\nExpirationModel -> (string)\n\nSpecifies whether the KMS key’s key material expires. This value is present only when Origin is EXTERNAL , otherwise this value is omitted.\n\nKeyManager -> (string)\n\nThe manager of the KMS key. KMS keys in your Amazon Web Services account are either customer managed or Amazon Web Services managed. For more information about the difference, see KMS keys in the Key Management Service Developer Guide .\n\nCustomerMasterKeySpec -> (string)\n\nInstead, use the KeySpec field.\n\nThe KeySpec and CustomerMasterKeySpec fields have the same value. We recommend that you use the KeySpec field in your code. However, to avoid breaking changes, KMS will support both fields.\n\nKeySpec -> (string)\n\nDescribes the type of key material in the KMS key.\n\nEncryptionAlgorithms -> (list)\n\nThe encryption algorithms that the KMS key supports. You cannot use the KMS key with other encryption algorithms within KMS.\n\nThis value is present only when the KeyUsage of the KMS key is ENCRYPT_DECRYPT .\n\n(string)\n\nSigningAlgorithms -> (list)\n\nThe signing algorithms that the KMS key supports. You cannot use the KMS key with other signing algorithms within KMS.\n\nThis field appears only when the KeyUsage of the KMS key is SIGN_VERIFY .\n\n(string)\n\nMultiRegion -> (boolean)\n\nIndicates whether the KMS key is a multi-Region (True ) or regional (False ) key. This value is True for multi-Region primary and replica keys and False for regional KMS keys.\n\nFor more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide .\n\nMultiRegionConfiguration -> (structure)\n\nLists the primary and replica keys in same multi-Region key. This field is present only when the value of the MultiRegion field is True .\n\nFor more information about any listed KMS key, use the DescribeKey operation.\n\nMultiRegionKeyType indicates whether the KMS key is a PRIMARY or REPLICA key.\n\nPrimaryKey displays the key ARN and Region of the primary key. This field displays the current KMS key if it is the primary key.\n\nReplicaKeys displays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.\n\nMultiRegionKeyType -> (string)\n\nIndicates whether the KMS key is a PRIMARY or REPLICA key.\n\nPrimaryKey -> (structure)\n\nDisplays the key ARN and Region of the primary key. This field includes the current KMS key if it is the primary key.\n\nArn -> (string)\n\nDisplays the key ARN of a primary or replica key of a multi-Region key.\n\nRegion -> (string)\n\nDisplays the Amazon Web Services Region of a primary or replica key in a multi-Region key.\n\nReplicaKeys -> (list)\n\ndisplays the key ARNs and Regions of all replica keys. This field includes the current KMS key if it is a replica key.\n\n(structure)\n\nDescribes the primary or replica key in a multi-Region key.\n\nArn -> (string)\n\nDisplays the key ARN of a primary or replica key of a multi-Region key.\n\nRegion -> (string)\n\nDisplays the Amazon Web Services Region of a primary or replica key in a multi-Region key.\n\nPendingDeletionWindowInDays -> (integer)\n\nThe waiting period before the primary key in a multi-Region key is deleted. This waiting period begins when the last of its replica keys is deleted. This value is present only when the KeyState of the KMS key is PendingReplicaDeletion . That indicates that the KMS key is the primary key in a multi-Region key, it is scheduled for deletion, and it still has existing replica keys.\n\nWhen a single-Region KMS key or a multi-Region replica key is scheduled for deletion, its deletion date is displayed in the DeletionDate field. However, when the primary key in a multi-Region key is scheduled for deletion, its waiting period doesn’t begin until all of its replica keys are deleted. This value displays that waiting period. When the last replica key in the multi-Region key is deleted, the KeyState of the scheduled primary key changes from PendingReplicaDeletion to PendingDeletion and the deletion date appears in the DeletionDate field.\n\nReplicaPolicy -> (string)\n\nThe key policy of the new replica key. The value is a key policy document in JSON format.\n\nReplicaTags -> (list)\n\nThe tags on the new replica key. The value is a list of tag key and tag value pairs.\n\n(structure)\n\nA key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.\n\nFor information about the rules that apply to tag keys and tag values, see User-Defined Tag Restrictions in the Amazon Web Services Billing and Cost Management User Guide .\n\nTagKey -> (string)\n\nThe key of the tag.\n\nTagValue -> (string)\n\nThe value of the tag."
    },
    {
      "command_name": "retire-grant",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/retire-grant.html",
      "command_description": "Description\n\nDeletes a grant. Typically, you retire a grant when you no longer need its permissions. To identify the grant to retire, use a grant token , or both the grant ID and a key identifier (key ID or key ARN) of the KMS key. The CreateGrant operation returns both values.\n\nThis operation can be called by the retiring principal for a grant, by the grantee principal if the grant allows the RetireGrant operation, and by the Amazon Web Services account (root user) in which the grant is created. It can also be called by principals to whom permission for retiring a grant is delegated. For details, see Retiring and revoking grants in the Key Management Service Developer Guide .\n\nFor detailed information about grants, including grant terminology, see Using grants in the * Key Management Service Developer Guide * . For examples of working with grants in several programming languages, see Programming grants .\n\nCross-account use : Yes. You can retire a grant on a KMS key in a different Amazon Web Services account.\n\nRequired permissions: :Permission to retire a grant is determined primarily by the grant. For details, see Retiring and revoking grants in the Key Management Service Developer Guide .\n\nRelated operations:\n\nCreateGrant\n\nListGrants\n\nListRetirableGrants\n\nRevokeGrant\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  retire-grant\n[--grant-token <value>]\n[--key-id <value>]\n[--grant-id <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--grant-token <value>]",
        "[--key-id <value>]",
        "[--grant-id <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--grant-token (string)\n\nIdentifies the grant to be retired. You can use a grant token to identify a new grant even before it has achieved eventual consistency.\n\nOnly the CreateGrant operation returns a grant token. For details, see Grant token and Eventual consistency in the Key Management Service Developer Guide .\n\n--key-id (string)\n\nThe key ARN KMS key associated with the grant. To find the key ARN, use the ListKeys operation.\n\nFor example: arn:aws:kms:us-east-2:444455556666:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\n--grant-id (string)\n\nIdentifies the grant to retire. To get the grant ID, use CreateGrant , ListGrants , or ListRetirableGrants .\n\nGrant ID Example - 0123456789012345678901234567890123456789012345678901234567890123\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo retire a grant on a customer master key\n\nThe following retire-grant example deletes a grant from a CMK.\n\nThe following example command specifies the grant-id and the key-id parameters. The value of the key-id parameter must be the Amazon Resource Name (ARN) of the CMK.\n\naws kms retire-grant \\\n    --grant-id 1234a2345b8a4e350500d432bccf8ecd6506710e1391880c4f7f7140160c9af3 \\\n    --key-id arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThis command produces no output. To confirm that the grant was retired, use the list-grants command.\n\nFor more information, see Using Grants in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "revoke-grant",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/revoke-grant.html",
      "command_description": "Description\n\nDeletes the specified grant. You revoke a grant to terminate the permissions that the grant allows. For more information, see Retiring and revoking grants in the * Key Management Service Developer Guide * .\n\nWhen you create, retire, or revoke a grant, there might be a brief delay, usually less than five minutes, until the grant is available throughout KMS. This state is known as eventual consistency . For details, see Eventual consistency in the * Key Management Service Developer Guide * .\n\nFor detailed information about grants, including grant terminology, see Using grants in the * Key Management Service Developer Guide * . For examples of working with grants in several programming languages, see Programming grants .\n\nCross-account use : Yes. To perform this operation on a KMS key in a different Amazon Web Services account, specify the key ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:RevokeGrant (key policy).\n\nRelated operations:\n\nCreateGrant\n\nListGrants\n\nListRetirableGrants\n\nRetireGrant\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  revoke-grant\n--key-id <value>\n--grant-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--grant-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nA unique identifier for the KMS key associated with the grant. To get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\nSpecify the key ID or key ARN of the KMS key. To specify a KMS key in a different Amazon Web Services account, you must use the key ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--grant-id (string)\n\nIdentifies the grant to revoke. To get the grant ID, use CreateGrant , ListGrants , or ListRetirableGrants .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo revoke a grant on a customer master key\n\nThe following revoke-grant example deletes a grant from a CMK. The following example command specifies the grant-id and the key-id parameters. The value of the key-id parameter can be the key ID or the Amazon Resource Name (ARN) of the CMK.\n\naws kms revoke-grant \\\n    --grant-id 1234a2345b8a4e350500d432bccf8ecd6506710e1391880c4f7f7140160c9af3 \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThis command produces no output. To confirm that the grant was revoked, use the list-grants command.\n\nFor more information, see Using Grants in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "schedule-key-deletion",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/schedule-key-deletion.html",
      "command_description": "Description\n\nSchedules the deletion of a KMS key. By default, KMS applies a waiting period of 30 days, but you can specify a waiting period of 7-30 days. When this operation is successful, the key state of the KMS key changes to PendingDeletion and the key can’t be used in any cryptographic operations. It remains in this state for the duration of the waiting period. Before the waiting period ends, you can use CancelKeyDeletion to cancel the deletion of the KMS key. After the waiting period ends, KMS deletes the KMS key, its key material, and all KMS data associated with it, including all aliases that refer to it.\n\nWarning\n\nDeleting a KMS key is a destructive and potentially dangerous operation. When a KMS key is deleted, all data that was encrypted under the KMS key is unrecoverable. (The only exception is a multi-Region replica key.) To prevent the use of a KMS key without deleting it, use DisableKey .\n\nIf you schedule deletion of a KMS key from a custom key store , when the waiting period expires, ScheduleKeyDeletion deletes the KMS key from KMS. Then KMS makes a best effort to delete the key material from the associated CloudHSM cluster. However, you might need to manually delete the orphaned key material from the cluster and its backups.\n\nYou can schedule the deletion of a multi-Region primary key and its replica keys at any time. However, KMS will not delete a multi-Region primary key with existing replica keys. If you schedule the deletion of a primary key with replicas, its key state changes to PendingReplicaDeletion and it cannot be replicated or used in cryptographic operations. This status can continue indefinitely. When the last of its replicas keys is deleted (not just scheduled), the key state of the primary key changes to PendingDeletion and its waiting period (PendingWindowInDays ) begins. For details, see Deleting multi-Region keys in the Key Management Service Developer Guide .\n\nFor more information about scheduling a KMS key for deletion, see Deleting KMS keys in the Key Management Service Developer Guide .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:ScheduleKeyDeletion (key policy)\n\nRelated operations\n\nCancelKeyDeletion\n\nDisableKey\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  schedule-key-deletion\n--key-id <value>\n[--pending-window-in-days <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "[--pending-window-in-days <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nThe unique identifier of the KMS key to delete.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--pending-window-in-days (integer)\n\nThe waiting period, specified in number of days. After the waiting period ends, KMS deletes the KMS key.\n\nIf the KMS key is a multi-Region primary key with replicas, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately.\n\nThis value is optional. If you include a value, it must be between 7 and 30, inclusive. If you do not include a value, it defaults to 30.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the KMS key whose deletion is scheduled.\n\nDeletionDate -> (timestamp)\n\nThe date and time after which KMS deletes the KMS key.\n\nIf the KMS key is a multi-Region primary key with replica keys, this field does not appear. The deletion date for the primary key isn’t known until its last replica key is deleted.\n\nKeyState -> (string)\n\nThe current status of the KMS key.\n\nFor more information about how key state affects the use of a KMS key, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nPendingWindowInDays -> (integer)\n\nThe waiting period before the KMS key is deleted.\n\nIf the KMS key is a multi-Region primary key with replicas, the waiting period begins when the last of its replica keys is deleted. Otherwise, the waiting period begins immediately.",
      "command_examples": "Examples\n\nTo schedule the deletion of a customer managed CMK.\n\nThe following schedule-key-deletion example schedules the specified customer managed CMK to be deleted in 15 days.\n\nThe --key-id parameter identifies the CMK. This example uses a key ARN value, but you can use either the key ID or the ARN of the CMK.\n\nThe --pending-window-in-days parameter specifies the length of the waiting period. By default, the waiting period is 30 days. This example specifies a value of 15, which tells AWS to permanently delete the CMK 15 days after the command completes.\n\naws kms schedule-key-deletion \\\n    --key-id arn:aws:kms:us-west-2:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --pending-window-in-days 15\n\n\nThe response returns the key ARN and the deletion date in Unix time. To view the deletion date in local time, use the AWS KMS console.\n\n{\n    \"KeyId\": \"arn:aws:kms:us-west-2:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\n    \"DeletionDate\": 1567382400.0\n}\n\n\nFor more information, see Deleting Customer Master Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "sign",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/sign.html",
      "command_description": "Description\n\nCreates a digital signature for a message or message digest by using the private key in an asymmetric KMS key. To verify the signature, use the Verify operation, or use the public key in the same asymmetric KMS key outside of KMS. For information about symmetric and asymmetric KMS keys, see Using Symmetric and Asymmetric KMS keys in the Key Management Service Developer Guide .\n\nDigital signatures are generated and verified by using asymmetric key pair, such as an RSA or ECC pair that is represented by an asymmetric KMS key. The key owner (or an authorized user) uses their private key to sign a message. Anyone with the public key can verify that the message was signed with that particular private key and that the message hasn’t changed since it was signed.\n\nTo use the Sign operation, provide the following information:\n\nUse the KeyId parameter to identify an asymmetric KMS key with a KeyUsage value of SIGN_VERIFY . To get the KeyUsage value of a KMS key, use the DescribeKey operation. The caller must have kms:Sign permission on the KMS key.\n\nUse the Message parameter to specify the message or message digest to sign. You can submit messages of up to 4096 bytes. To sign a larger message, generate a hash digest of the message, and then provide the hash digest in the Message parameter. To indicate whether the message is a full message or a digest, use the MessageType parameter.\n\nChoose a signing algorithm that is compatible with the KMS key.\n\nWarning\n\nWhen signing a message, be sure to record the KMS key and the signing algorithm. This information is required to verify the signature.\n\nTo verify the signature that this operation generates, use the Verify operation. Or use the GetPublicKey operation to download the public key and then use the public key to verify the signature outside of KMS.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:Sign (key policy)\n\nRelated operations : Verify\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  sign\n--key-id <value>\n--message <value>\n[--message-type <value>]\n[--grant-tokens <value>]\n--signing-algorithm <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--message <value>",
        "[--message-type <value>]",
        "[--grant-tokens <value>]",
        "--signing-algorithm <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies an asymmetric KMS key. KMS uses the private key in the asymmetric KMS key to sign the message. The KeyUsage type of the KMS key must be SIGN_VERIFY . To find the KeyUsage of a KMS key, use the DescribeKey operation.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--message (blob)\n\nSpecifies the message or message digest to sign. Messages can be 0-4096 bytes. To sign a larger message, provide the message digest.\n\nIf you provide a message, KMS generates a hash digest of the message and then signs it.\n\n--message-type (string)\n\nTells KMS whether the value of the Message parameter is a message or message digest. The default value, RAW, indicates a message. To indicate a message digest, enter DIGEST .\n\nPossible values:\n\nRAW\n\nDIGEST\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--signing-algorithm (string)\n\nSpecifies the signing algorithm to use when signing the message.\n\nChoose an algorithm that is compatible with the type and size of the specified asymmetric KMS key.\n\nPossible values:\n\nRSASSA_PSS_SHA_256\n\nRSASSA_PSS_SHA_384\n\nRSASSA_PSS_SHA_512\n\nRSASSA_PKCS1_V1_5_SHA_256\n\nRSASSA_PKCS1_V1_5_SHA_384\n\nRSASSA_PKCS1_V1_5_SHA_512\n\nECDSA_SHA_256\n\nECDSA_SHA_384\n\nECDSA_SHA_512\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the asymmetric KMS key that was used to sign the message.\n\nSignature -> (blob)\n\nThe cryptographic signature that was generated for the message.\n\nWhen used with the supported RSA signing algorithms, the encoding of this value is defined by PKCS #1 in RFC 8017 .\n\nWhen used with the ECDSA_SHA_256 , ECDSA_SHA_384 , or ECDSA_SHA_512 signing algorithms, this value is a DER-encoded object as defined by ANS X9.62–2005 and RFC 3279 Section 2.2.3 . This is the most commonly used signature format and is appropriate for most uses.\n\nWhen you use the HTTP API or the Amazon Web Services CLI, the value is Base64-encoded. Otherwise, it is not Base64-encoded.\n\nSigningAlgorithm -> (string)\n\nThe signing algorithm that was used to sign the message.",
      "command_examples": "Examples\n\nExample 1: To generate a digital signature for a message\n\nThe following sign example generates a cryptographic signature for a short message. The output of the command includes a base-64 encoded Signature field that you can verify by using the verify command.\n\nYou must also specify a signing algorithm that your CMK supports. To get the signing algorithms for your CMK, use the describe-key command.\n\nBefore running this command, replace the example key ID with a valid key ID from your AWS account. The key ID must represent an asymmetric CMK with a key usage of SIGN_VERIFY.\n\naws kms sign \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --message 'hello world' \\\n    --message-type RAW \\\n    --signing-algorithm RSASSA_PKCS1_V1_5_SHA_256\n\n\nOutput:\n\n{\n    \"KeyId\": \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\n    \"Signature\": \"ABCDEFhpyVYyTxbafE74ccSvEJLJr3zuoV1Hfymz4qv+/fxmxNLA7SE1SiF8lHw80fKZZ3bJ...\",\n    \"SigningAlgorithm\": \"RSASSA_PKCS1_V1_5_SHA_256\"\n}\n\n\nFor more information about using asymmetric CMKs in AWS KMS, see `Using Symmetric and Asymmetric Keys<https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html>`__ in the AWS Key Management Service API Reference.\n\nExample 2: To save a digital signature in a file (Linux and macOs)\n\nThe following sign example generates a cryptographic signature for a short message stored in a local file. The command also gets the Signature property from the response, Base64-decodes it and saves it in the ExampleSignature file. You can use the signature file in a verify command that verifies the signature.\n\nThe sign command requires a signing algorithm. To get the signing algorithms that your CMK supports, use the describe-key command.\n\nBefore running this command, replace the example key ID with a valid key ID from your AWS account. The key ID must represent an asymmetric CMK with a key usage of SIGN_VERIFY.\n\naws kms sign \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --message fileb://originalString \\\n    --message-type RAW \\\n    --signing-algorithm RSASSA_PKCS1_V1_5_SHA_256 \\\n    --output text \\\n    --query Signature | base64 --decode > ExampleSignature\n\n\nThis command produces no output. This example extracts the Signature property of the output and saves it in a file.\n\nFor more information about using asymmetric CMKs in AWS KMS, see Using Symmetric and Asymmetric Keys in the AWS Key Management Service API Reference."
    },
    {
      "command_name": "tag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/tag-resource.html",
      "command_description": "Description\n\nAdds or edits tags on a customer managed key .\n\nNote\n\nTagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see Using ABAC in KMS in the Key Management Service Developer Guide .\n\nEach tag consists of a tag key and a tag value, both of which are case-sensitive strings. The tag value can be an empty (null) string. To add a tag, specify a new tag key and a tag value. To edit a tag, specify an existing tag key and a new tag value.\n\nYou can use this operation to tag a customer managed key , but you cannot tag an Amazon Web Services managed key , an Amazon Web Services owned key , a custom key store , or an alias .\n\nYou can also add tags to a KMS key while creating it ( CreateKey ) or replicating it ( ReplicateKey ).\n\nFor information about using tags in KMS, see Tagging keys . For general information about tags, including the format and syntax, see Tagging Amazon Web Services resources in the Amazon Web Services General Reference .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:TagResource (key policy)\n\nRelated operations\n\nCreateKey\n\nListResourceTags\n\nReplicateKey\n\nUntagResource\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  tag-resource\n--key-id <value>\n--tags <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--tags <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies a customer managed key in the account and Region.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--tags (list)\n\nOne or more tags.\n\nEach tag consists of a tag key and a tag value. The tag value can be an empty (null) string.\n\nYou cannot have more than one tag on a KMS key with the same tag key. If you specify an existing tag key with a different tag value, KMS replaces the current tag value with the specified one.\n\n(structure)\n\nA key-value pair. A tag consists of a tag key and a tag value. Tag keys and tag values are both required, but tag values can be empty (null) strings.\n\nFor information about the rules that apply to tag keys and tag values, see User-Defined Tag Restrictions in the Amazon Web Services Billing and Cost Management User Guide .\n\nTagKey -> (string)\n\nThe key of the tag.\n\nTagValue -> (string)\n\nThe value of the tag.\n\nShorthand Syntax:\n\nTagKey=string,TagValue=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"TagKey\": \"string\",\n    \"TagValue\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo add a tag to an AWS KMS CMK\n\nThe following tag-resource example adds \"Purpose\":\"Test\" and \"Dept\":\"IT\" tags to a customer managed CMK. You can use tags like these to label CMKs and create categories of CMKs.\n\nTo specify the CMK, use the key-id parameter. This example uses a key ID value, but you can use a key ID or key ARN in this command.\n\nBefore running this command, replace the example key ID with a valid key ID from your AWS account.\n\naws kms tag-resource \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --tags TagKey='Purpose',TagValue='Test' TagKey='Dept',TagValue='IT'\n\n\nThis command produces no output. To view the tags on an AWS KMS CMK, use the list-resource-tags command.\n\nFor more information about using tags in AWS KMS, see Tagging Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "untag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/untag-resource.html",
      "command_description": "Description\n\nDeletes tags from a customer managed key . To delete a tag, specify the tag key and the KMS key.\n\nNote\n\nTagging or untagging a KMS key can allow or deny permission to the KMS key. For details, see Using ABAC in KMS in the Key Management Service Developer Guide .\n\nWhen it succeeds, the UntagResource operation doesn’t return any output. Also, if the specified tag key isn’t found on the KMS key, it doesn’t throw an exception or return a response. To confirm that the operation worked, use the ListResourceTags operation.\n\nFor information about using tags in KMS, see Tagging keys . For general information about tags, including the format and syntax, see Tagging Amazon Web Services resources in the Amazon Web Services General Reference .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:UntagResource (key policy)\n\nRelated operations\n\nCreateKey\n\nListResourceTags\n\nReplicateKey\n\nTagResource\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  untag-resource\n--key-id <value>\n--tag-keys <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--tag-keys <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the KMS key from which you are removing tags.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--tag-keys (list)\n\nOne or more tag keys. Specify only the tag keys, not the tag values.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete a tag from an AWS KMS CMK\n\nThe following untag-resource example deletes the tag with the \"Purpose\" key from a customer managed CMK.\n\nTo specify the CMK, use the key-id parameter. This example uses a key ID value, but you can use a key ID or key ARN in this command. Before running this command, replace the example key ID with a valid key ID from your AWS account.\n\naws kms untag-resource \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --tag-key 'Purpose'\n\n\nThis command produces no output. To view the tags on an AWS KMS CMK, use the list-resource-tags command.\n\nFor more information about using tags in AWS KMS, see Tagging Keys in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "update-alias",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/update-alias.html",
      "command_description": "Description\n\nAssociates an existing KMS alias with a different KMS key. Each alias is associated with only one KMS key at a time, although a KMS key can have multiple aliases. The alias and the KMS key must be in the same Amazon Web Services account and Region.\n\nNote\n\nAdding, deleting, or updating an alias can allow or deny permission to the KMS key. For details, see Using ABAC in KMS in the Key Management Service Developer Guide .\n\nThe current and new KMS key must be the same type (both symmetric or both asymmetric), and they must have the same key usage (ENCRYPT_DECRYPT or SIGN_VERIFY ). This restriction prevents errors in code that uses aliases. If you must assign an alias to a different type of KMS key, use DeleteAlias to delete the old alias and CreateAlias to create a new alias.\n\nYou cannot use UpdateAlias to change an alias name. To change an alias name, use DeleteAlias to delete the old alias and CreateAlias to create a new alias.\n\nBecause an alias is not a property of a KMS key, you can create, update, and delete the aliases of a KMS key without affecting the KMS key. Also, aliases do not appear in the response from the DescribeKey operation. To get the aliases of all KMS keys in the account, use the ListAliases operation.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions\n\nkms:UpdateAlias on the alias (IAM policy).\n\nkms:UpdateAlias on the current KMS key (key policy).\n\nkms:UpdateAlias on the new KMS key (key policy).\n\nFor details, see Controlling access to aliases in the Key Management Service Developer Guide .\n\nRelated operations:\n\nCreateAlias\n\nDeleteAlias\n\nListAliases\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-alias\n--alias-name <value>\n--target-key-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--alias-name <value>",
        "--target-key-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--alias-name (string)\n\nIdentifies the alias that is changing its KMS key. This value must begin with alias/ followed by the alias name, such as alias/ExampleAlias . You cannot use UpdateAlias to change the alias name.\n\n--target-key-id (string)\n\nIdentifies the customer managed key to associate with the alias. You don’t have permission to associate an alias with an Amazon Web Services managed key .\n\nThe KMS key must be in the same Amazon Web Services account and Region as the alias. Also, the new target KMS key must be the same type as the current target KMS key (both symmetric or both asymmetric) and they must have the same key usage.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\nTo verify that the alias is mapped to the correct KMS key, use ListAliases .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo associate an alias with a different CMK\n\nThe following update-alias example associates the alias alias/test-key with a different CMK.\n\nThe --alias-name parameter specifies the alias. The alias name value must begin with alias/.\n\nThe --target-key-id parameter specifies the CMK to associate with the alias. You don’t need to specify the current CMK for the alias.\n\naws kms update-alias \\\n    --alias-name alias/test-key \\\n    --target-key-id 1234abcd-12ab-34cd-56ef-1234567890ab\n\n\nThis command produces no output. To find the alias, use the list-aliases command.\n\nFor more information, see Working with Aliases in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "update-custom-key-store",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/update-custom-key-store.html",
      "command_description": "Description\n\nChanges the properties of a custom key store. Use the CustomKeyStoreId parameter to identify the custom key store you want to edit. Use the remaining parameters to change the properties of the custom key store.\n\nYou can only update a custom key store that is disconnected. To disconnect the custom key store, use DisconnectCustomKeyStore . To reconnect the custom key store after the update completes, use ConnectCustomKeyStore . To find the connection state of a custom key store, use the DescribeCustomKeyStores operation.\n\nThe CustomKeyStoreId parameter is required in all commands. Use the other parameters of UpdateCustomKeyStore to edit your key store settings.\n\nUse the NewCustomKeyStoreName parameter to change the friendly name of the custom key store to the value that you specify.\n\nUse the KeyStorePassword parameter tell KMS the current password of the ` kmsuser crypto user (CU) <https://docs.aws.amazon.com/kms/latest/developerguide/key-store-concepts.html#concept-kmsuser>`__ in the associated CloudHSM cluster. You can use this parameter to fix connection failures that occur when KMS cannot log into the associated cluster because the kmsuser password has changed. This value does not change the password in the CloudHSM cluster.\n\nUse the CloudHsmClusterId parameter to associate the custom key store with a different, but related, CloudHSM cluster. You can use this parameter to repair a custom key store if its CloudHSM cluster becomes corrupted or is deleted, or when you need to create or restore a cluster from a backup.\n\nIf the operation succeeds, it returns a JSON object with no properties.\n\nThis operation is part of the Custom Key Store feature feature in KMS, which combines the convenience and extensive integration of KMS with the isolation and control of a single-tenant key store.\n\nCross-account use : No. You cannot perform this operation on a custom key store in a different Amazon Web Services account.\n\nRequired permissions : kms:UpdateCustomKeyStore (IAM policy)\n\nRelated operations:\n\nConnectCustomKeyStore\n\nCreateCustomKeyStore\n\nDeleteCustomKeyStore\n\nDescribeCustomKeyStores\n\nDisconnectCustomKeyStore\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-custom-key-store\n--custom-key-store-id <value>\n[--new-custom-key-store-name <value>]\n[--key-store-password <value>]\n[--cloud-hsm-cluster-id <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--custom-key-store-id <value>",
        "[--new-custom-key-store-name <value>]",
        "[--key-store-password <value>]",
        "[--cloud-hsm-cluster-id <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--custom-key-store-id (string)\n\nIdentifies the custom key store that you want to update. Enter the ID of the custom key store. To find the ID of a custom key store, use the DescribeCustomKeyStores operation.\n\n--new-custom-key-store-name (string)\n\nChanges the friendly name of the custom key store to the value that you specify. The custom key store name must be unique in the Amazon Web Services account.\n\n--key-store-password (string)\n\nEnter the current password of the kmsuser crypto user (CU) in the CloudHSM cluster that is associated with the custom key store.\n\nThis parameter tells KMS the current password of the kmsuser crypto user (CU). It does not set or change the password of any users in the CloudHSM cluster.\n\n--cloud-hsm-cluster-id (string)\n\nAssociates the custom key store with a related CloudHSM cluster.\n\nEnter the cluster ID of the cluster that you used to create the custom key store or a cluster that shares a backup history and has the same cluster certificate as the original cluster. You cannot use this parameter to associate a custom key store with an unrelated cluster. In addition, the replacement cluster must fulfill the requirements for a cluster associated with a custom key store. To view the cluster certificate of a cluster, use the DescribeClusters operation.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo edit custom key store settings\n\nThe following update-custom-key-store example provides the current password for the kmsuser in the CloudHSM cluster that is associated with the specified key store. This command doesn’t change the kmsuser password. It just tells AWS KMS the current password. If KMS doesn’t have the current kmsuser password, it cannot connect to the custom key store.\n\nNOTE: Before updating the custom key store, you must disconnect it. Use the disconnect-custom-key-store command. After the command completes, you can reconnect the custom key store. Use the connect-custom-key-store command.\n\naws kms update-custom-key-store \\\n    --custom-key-store-id cks-1234567890abcdef0 \\\n    --key-store-password ExamplePassword\n\n\nThis command does not return any output. To verify that the password change was effective, connect the custom key store.\n\nFor more information, see Editing Custom Key Store Settings in the AWS Key Management Service Developer Guide."
    },
    {
      "command_name": "update-key-description",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/update-key-description.html",
      "command_description": "Description\n\nUpdates the description of a KMS key. To see the description of a KMS key, use DescribeKey .\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : No. You cannot perform this operation on a KMS key in a different Amazon Web Services account.\n\nRequired permissions : kms:UpdateKeyDescription (key policy)\n\nRelated operations\n\nCreateKey\n\nDescribeKey\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-key-description\n--key-id <value>\n--description <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--description <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nUpdates the description of the specified KMS key.\n\nSpecify the key ID or key ARN of the KMS key.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--description (string)\n\nNew description for the KMS key.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nExample 1: To delete the description of a customer managed CMK\n\nThe following update-key-description example deletes the description to a customer managed CMK.\n\nThe --key-id parameter identifies the CMK in the command. This example uses a key ID value, but you can use either the key ID or the key ARN of the CMK.\n\nThe --description parameter with an empty string value (‘’) deletes the existing description.\n\naws kms update-key-description \\\n    --key-id 0987dcba-09fe-87dc-65ba-ab0987654321 \\\n    --description ''\n\n\nThis command produces no output. To view the description of a CMK, use the the describe-key command.\n\nFor more information, see UpdateKeyDescription in the AWS Key Management Service API Reference.\n\nExample 2: To add or change a description to a customer managed CMK\n\nThe following update-key-description example adds a description to a customer managed CMK. You can use the same command to change an existing description.\n\nThe --key-id parameter identifies the CMK in the command. This example uses a key ARN value, but you can use either the key ID or the key ARN of the CMK.\n\nThe --description parameter specifies the new description. The value of this parameter replaces the current description of the CMK, if any.\n\naws kms update-key-description \\\n    --key-id arn:aws:kms:us-west-2:123456789012:key/1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --description \"IT Department test key\"\n\n\nThis command produces no output. To view the description of a CMK, use the describe-key command.\n\nFor more information, see UpdateKeyDescription in the AWS Key Management Service API Reference."
    },
    {
      "command_name": "update-primary-region",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/update-primary-region.html",
      "command_description": "Description\n\nChanges the primary key of a multi-Region key.\n\nThis operation changes the replica key in the specified Region to a primary key and changes the former primary key to a replica key. For example, suppose you have a primary key in us-east-1 and a replica key in eu-west-2 . If you run UpdatePrimaryRegion with a PrimaryRegion value of eu-west-2 , the primary key is now the key in eu-west-2 , and the key in us-east-1 becomes a replica key. For details, see Updating the primary Region in the Key Management Service Developer Guide .\n\nThis operation supports multi-Region keys , an KMS feature that lets you create multiple interoperable KMS keys in different Amazon Web Services Regions. Because these KMS keys have the same key ID, key material, and other metadata, you can use them interchangeably to encrypt data in one Amazon Web Services Region and decrypt it in a different Amazon Web Services Region without re-encrypting the data or making a cross-Region call. For more information about multi-Region keys, see Using multi-Region keys in the Key Management Service Developer Guide .\n\nThe primary key of a multi-Region key is the source for properties that are always shared by primary and replica keys, including the key material, key ID , key spec , key usage , key material origin , and automatic key rotation . It’s the only key that can be replicated. You cannot delete the primary key until all replica keys are deleted.\n\nThe key ID and primary Region that you specify uniquely identify the replica key that will become the primary key. The primary Region must already have a replica key. This operation does not create a KMS key in the specified Region. To find the replica keys, use the DescribeKey operation on the primary key or any replica key. To create a replica key, use the ReplicateKey operation.\n\nYou can run this operation while using the affected multi-Region keys in cryptographic operations. This operation should not delay, interrupt, or cause failures in cryptographic operations.\n\nEven after this operation completes, the process of updating the primary Region might still be in progress for a few more seconds. Operations such as DescribeKey might display both the old and new primary keys as replicas. The old and new primary keys have a transient key state of Updating . The original key state is restored when the update is complete. While the key state is Updating , you can use the keys in cryptographic operations, but you cannot replicate the new primary key or perform certain management operations, such as enabling or disabling these keys. For details about the Updating key state, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nThis operation does not return any output. To verify that primary key is changed, use the DescribeKey operation.\n\nCross-account use : No. You cannot use this operation in a different Amazon Web Services account.\n\nRequired permissions :\n\nkms:UpdatePrimaryRegion on the current primary key (in the primary key’s Region). Include this permission primary key’s key policy.\n\nkms:UpdatePrimaryRegion on the current replica key (in the replica key’s Region). Include this permission in the replica key’s key policy.\n\nRelated operations\n\nCreateKey\n\nReplicateKey\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-primary-region\n--key-id <value>\n--primary-region <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--primary-region <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the current primary key. When the operation completes, this KMS key will be a replica key.\n\nSpecify the key ID or key ARN of a multi-Region primary key.\n\nFor example:\n\nKey ID: mrk-1234abcd12ab34cd56ef1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/mrk-1234abcd12ab34cd56ef1234567890ab\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey .\n\n--primary-region (string)\n\nThe Amazon Web Services Region of the new primary key. Enter the Region ID, such as us-east-1 or ap-southeast-2 . There must be an existing replica key in this Region.\n\nWhen the operation completes, the multi-Region key in this Region will be the primary key.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "verify",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/kms/verify.html",
      "command_description": "Description\n\nVerifies a digital signature that was generated by the Sign operation.\n\nVerification confirms that an authorized user signed the message with the specified KMS key and signing algorithm, and the message hasn’t changed since it was signed. If the signature is verified, the value of the SignatureValid field in the response is True . If the signature verification fails, the Verify operation fails with an KMSInvalidSignatureException exception.\n\nA digital signature is generated by using the private key in an asymmetric KMS key. The signature is verified by using the public key in the same asymmetric KMS key. For information about symmetric and asymmetric KMS keys, see Using Symmetric and Asymmetric KMS keys in the Key Management Service Developer Guide .\n\nTo verify a digital signature, you can use the Verify operation. Specify the same asymmetric KMS key, message, and signing algorithm that were used to produce the signature.\n\nYou can also verify the digital signature by using the public key of the KMS key outside of KMS. Use the GetPublicKey operation to download the public key in the asymmetric KMS key and then use the public key to verify the signature outside of KMS. The advantage of using the Verify operation is that it is performed within KMS. As a result, it’s easy to call, the operation is performed within the FIPS boundary, it is logged in CloudTrail, and you can use key policy and IAM policy to determine who is authorized to use the KMS key to verify signatures.\n\nThe KMS key that you use for this operation must be in a compatible key state. For details, see Key state: Effect on your KMS key in the Key Management Service Developer Guide .\n\nCross-account use : Yes. To perform this operation with a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN in the value of the KeyId parameter.\n\nRequired permissions : kms:Verify (key policy)\n\nRelated operations : Sign\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  verify\n--key-id <value>\n--message <value>\n[--message-type <value>]\n--signature <value>\n--signing-algorithm <value>\n[--grant-tokens <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--key-id <value>",
        "--message <value>",
        "[--message-type <value>]",
        "--signature <value>",
        "--signing-algorithm <value>",
        "[--grant-tokens <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--key-id (string)\n\nIdentifies the asymmetric KMS key that will be used to verify the signature. This must be the same KMS key that was used to generate the signature. If you specify a different KMS key, the signature verification fails.\n\nTo specify a KMS key, use its key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix it with \"alias/\" . To specify a KMS key in a different Amazon Web Services account, you must use the key ARN or alias ARN.\n\nFor example:\n\nKey ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n\nKey ARN: arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\n\nAlias name: alias/ExampleAlias\n\nAlias ARN: arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias\n\nTo get the key ID and key ARN for a KMS key, use ListKeys or DescribeKey . To get the alias name and alias ARN, use ListAliases .\n\n--message (blob)\n\nSpecifies the message that was signed. You can submit a raw message of up to 4096 bytes, or a hash digest of the message. If you submit a digest, use the MessageType parameter with a value of DIGEST .\n\nIf the message specified here is different from the message that was signed, the signature verification fails. A message and its hash digest are considered to be the same message.\n\n--message-type (string)\n\nTells KMS whether the value of the Message parameter is a message or message digest. The default value, RAW, indicates a message. To indicate a message digest, enter DIGEST .\n\nWarning\n\nUse the DIGEST value only when the value of the Message parameter is a message digest. If you use the DIGEST value with a raw message, the security of the verification operation can be compromised.\n\nPossible values:\n\nRAW\n\nDIGEST\n\n--signature (blob)\n\nThe signature that the Sign operation generated.\n\n--signing-algorithm (string)\n\nThe signing algorithm that was used to sign the message. If you submit a different algorithm, the signature verification fails.\n\nPossible values:\n\nRSASSA_PSS_SHA_256\n\nRSASSA_PSS_SHA_384\n\nRSASSA_PSS_SHA_512\n\nRSASSA_PKCS1_V1_5_SHA_256\n\nRSASSA_PKCS1_V1_5_SHA_384\n\nRSASSA_PKCS1_V1_5_SHA_512\n\nECDSA_SHA_256\n\nECDSA_SHA_384\n\nECDSA_SHA_512\n\n--grant-tokens (list)\n\nA list of grant tokens.\n\nUse a grant token when your permission to call this operation comes from a new grant that has not yet achieved eventual consistency . For more information, see Grant token and Using a grant token in the Key Management Service Developer Guide .\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nKeyId -> (string)\n\nThe Amazon Resource Name (key ARN ) of the asymmetric KMS key that was used to verify the signature.\n\nSignatureValid -> (boolean)\n\nA Boolean value that indicates whether the signature was verified. A value of True indicates that the Signature was produced by signing the Message with the specified KeyID and SigningAlgorithm. If the signature is not verified, the Verify operation fails with a KMSInvalidSignatureException exception.\n\nSigningAlgorithm -> (string)\n\nThe signing algorithm that was used to verify the signature.",
      "command_examples": "Examples\n\nTo verify a digital signature\n\nThe following verify example verifies a cryptographic signature for a short message. The key ID, message, message type, and signing algorithm must be same ones that were used to sign the message. The signature that you specify cannot be base64-encoded. For help decoding the signature that the sign command returns, see the sign command examples.\n\nThe output of the command includes a Boolean SignatureValid field that indicates that the signature was verified. If the signature validation fails, the verify command fails, too.\n\nBefore running this command, replace the example key ID with a valid key ID from your AWS account.\n\naws kms verify \\\n    --key-id 1234abcd-12ab-34cd-56ef-1234567890ab \\\n    --message fileb://originalString \\\n    --message-type RAW \\\n    --signing-algorithm RSASSA_PKCS1_V1_5_SHA_256 \\\n    --signature fileb://ExampleSignature\n\n\nOutput:\n\n{\n    \"KeyId\": \"arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab\",\n    \"SignatureValid\": true,\n    \"SigningAlgorithm\": \"RSASSA_PKCS1_V1_5_SHA_256\"\n}\n\n\nFor more information about using asymmetric CMKs in AWS KMS, see Using Symmetric and Asymmetric Keys in the AWS Key Management Service API Reference."
    }
  ],
  "service_description": "Description\n\nKey Management Service (KMS) is an encryption and key management web service. This guide describes the KMS operations that you can call programmatically. For general information about KMS, see the ` Key Management Service Developer Guide https://docs.aws.amazon.com/kms/latest/developerguide/`__ .\n\nNote\n\nKMS is replacing the term customer master key (CMK) with KMS key and KMS key . The concept has not changed. To prevent breaking changes, KMS is keeping some variations of this term.\n\nAmazon Web Services provides SDKs that consist of libraries and sample code for various programming languages and platforms (Java, Ruby, .Net, macOS, Android, etc.). The SDKs provide a convenient way to create programmatic access to KMS and other Amazon Web Services services. For example, the SDKs take care of tasks such as signing requests (see below), managing errors, and retrying requests automatically. For more information about the Amazon Web Services SDKs, including how to download and install them, see Tools for Amazon Web Services .\n\nWe recommend that you use the Amazon Web Services SDKs to make programmatic API calls to KMS.\n\nClients must support TLS (Transport Layer Security) 1.0. We recommend TLS 1.2. Clients must also support cipher suites with Perfect Forward Secrecy (PFS) such as Ephemeral Diffie-Hellman (DHE) or Elliptic Curve Ephemeral Diffie-Hellman (ECDHE). Most modern systems such as Java 7 and later support these modes.\n\nSigning Requests\n\nRequests must be signed by using an access key ID and a secret access key. We strongly recommend that you do not use your Amazon Web Services account (root) access key ID and secret key for everyday work with KMS. Instead, use the access key ID and secret access key for an IAM user. You can also use the Amazon Web Services Security Token Service to generate temporary security credentials that you can use to sign requests.\n\nAll KMS operations require Signature Version 4 .\n\nLogging API Requests\n\nKMS supports CloudTrail, a service that logs Amazon Web Services API calls and related events for your Amazon Web Services account and delivers them to an Amazon S3 bucket that you specify. By using the information collected by CloudTrail, you can determine what requests were made to KMS, who made the request, when it was made, and so on. To learn more about CloudTrail, including how to turn it on and find your log files, see the CloudTrail User Guide .\n\nAdditional Resources\n\nFor more information about credentials and request signing, see the following:\n\nAmazon Web Services Security Credentials - This topic provides general information about the types of credentials used to access Amazon Web Services.\n\nTemporary Security Credentials - This section of the IAM User Guide describes how to create and use temporary security credentials.\n\nSignature Version 4 Signing Process - This set of topics walks you through the process of signing a request using an access key ID and a secret access key.\n\nCommonly Used API Operations\n\nOf the API operations discussed in this guide, the following will prove the most useful for most applications. You will likely perform operations other than these, such as creating keys and assigning policies, by using the console.\n\nEncrypt\n\nDecrypt\n\nGenerateDataKey\n\nGenerateDataKeyWithoutPlaintext"
}