{
  "service_name": "mediastore",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/index.html",
  "service_commands": [
    {
      "command_name": "create-container",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/create-container.html",
      "command_description": "Description\n\nCreates a storage container to hold objects. A container is similar to a bucket in the Amazon S3 service.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-container\n--container-name <value>\n[--tags <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--tags <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name for the container. The name must be from 1 to 255 characters. Container names must be unique to your AWS account within a specific region. As an example, you could create a container named movies in every region, as long as you don’t have an existing container with that name.\n\n--tags (list)\n\nAn array of key:value pairs that you define. These values can be anything that you want. Typically, the tag key represents a category (such as “environment”) and the tag value represents a specific value within that category (such as “test,” “development,” or “production”). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see Tagging Resources in MediaStore .\n\n(structure)\n\nA collection of tags associated with a container. Each tag consists of a key:value pair, which can be anything you define. Typically, the tag key represents a category (such as “environment”) and the tag value represents a specific value within that category (such as “test,” “development,” or “production”). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see Tagging Resources in MediaStore .\n\nKey -> (string)\n\nPart of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as “customer.” Tag keys are case-sensitive.\n\nValue -> (string)\n\nPart of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as “companyA” or “companyB.” Tag values are case-sensitive.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nContainer -> (structure)\n\nContainerARN: The Amazon Resource Name (ARN) of the newly created container. The ARN has the following format: arn:aws:<region>:<account that owns this container>:container/<name of container>. For example: arn:aws:mediastore:us-west-2:111122223333:container/movies\n\nContainerName: The container name as specified in the request.\n\nCreationTime: Unix time stamp.\n\nStatus: The status of container creation or deletion. The status is one of the following: CREATING , ACTIVE , or DELETING . While the service is creating the container, the status is CREATING . When an endpoint is available, the status changes to ACTIVE .\n\nThe return value does not include the container’s endpoint. To make downstream requests, you must obtain this value by using DescribeContainer or ListContainers .\n\nEndpoint -> (string)\n\nThe DNS endpoint of the container. Use the endpoint to identify the specific container when sending requests to the data plane. The service assigns this value when the container is created. Once the value has been assigned, it does not change.\n\nCreationTime -> (timestamp)\n\nUnix timestamp.\n\nARN -> (string)\n\nThe Amazon Resource Name (ARN) of the container. The ARN has the following format:\n\narn:aws:<region>:<account that owns this container>:container/<name of container>\n\nFor example: arn:aws:mediastore:us-west-2:111122223333:container/movies\n\nName -> (string)\n\nThe name of the container.\n\nStatus -> (string)\n\nThe status of container creation or deletion. The status is one of the following: CREATING , ACTIVE , or DELETING . While the service is creating the container, the status is CREATING . When the endpoint is available, the status changes to ACTIVE .\n\nAccessLoggingEnabled -> (boolean)\n\nThe state of access logging on the container. This value is false by default, indicating that AWS Elemental MediaStore does not send access logs to Amazon CloudWatch Logs. When you enable access logging on the container, MediaStore changes this value to true , indicating that the service delivers access logs for objects stored in that container to CloudWatch Logs.",
      "command_examples": "Examples\n\nTo create a container\n\nThe following create-container example creates a new, empty container.\n\naws mediastore create-container --container-name ExampleContainer\n\n\nOutput:\n\n{\n    \"Container\": {\n        \"AccessLoggingEnabled\": false,\n        \"CreationTime\": 1563557265,\n        \"Name\": \"ExampleContainer\",\n        \"Status\": \"CREATING\",\n        \"ARN\": \"arn:aws:mediastore:us-west-2:111122223333:container/ExampleContainer\"\n    }\n}\n\n\nFor more information, see Creating a Container in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "delete-container",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/delete-container.html",
      "command_description": "Description\n\nDeletes the specified container. Before you make a DeleteContainer request, delete any objects in the container or in any folders in the container. You can delete only empty containers.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-container\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container to delete.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete a container\n\nThe following delete-container example deletes the specified container. You can delete a container only if it has no objects.\n\naws mediastore delete-container \\\n    --container-name=ExampleLiveDemo\n\n\nThis command produces no output.\n\nFor more information, see Deleting a Container in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "delete-container-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/delete-container-policy.html",
      "command_description": "Description\n\nDeletes the access policy that is associated with the specified container.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-container-policy\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that holds the policy.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete a container policy\n\nThe following delete-container-policy example deletes the policy that is assigned to the specified container. When the policy is deleted, AWS Elemental MediaStore automatically assigns the default policy to the container.\n\naws mediastore delete-container-policy \\\n    --container-name LiveEvents\n\n\nThis command produces no output.\n\nFor more information, see DeleteContainerPolicy in the AWS Elemental MediaStore API reference."
    },
    {
      "command_name": "delete-cors-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/delete-cors-policy.html",
      "command_description": "Description\n\nDeletes the cross-origin resource sharing (CORS) configuration information that is set for the container.\n\nTo use this operation, you must have permission to perform the MediaStore:DeleteCorsPolicy action. The container owner has this permission by default and can grant this permission to others.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-cors-policy\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container to remove the policy from.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete a CORS policy\n\nThe following delete-cors-policy example deletes the cross-origin resource sharing (CORS) policy that is assigned to the specified container.\n\naws mediastore delete-cors-policy \\\n    --container-name ExampleContainer\n\n\nThis command produces no output.\n\nFor more information, see Deleting a CORS Policy in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "delete-lifecycle-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/delete-lifecycle-policy.html",
      "command_description": "Description\n\nRemoves an object lifecycle policy from a container. It takes up to 20 minutes for the change to take effect.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-lifecycle-policy\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that holds the object lifecycle policy.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo delete an object lifecycle policy\n\nThe following delete-lifecycle-policy example deletes the object lifecycle policy attached to the specified container. This change can take up to 20 minutes to take effect.\n\naws mediastore delete-lifecycle-policy \\\n    --container-name LiveEvents\n\n\nThis command produces no output.\n\nFor more information, see Deleting an Object Lifecycle Policy in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "delete-metric-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/delete-metric-policy.html",
      "command_description": "Description\n\nDeletes the metric policy that is associated with the specified container. If there is no metric policy associated with the container, MediaStore doesn’t send metrics to CloudWatch.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-metric-policy\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that is associated with the metric policy that you want to delete.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "describe-container",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/describe-container.html",
      "command_description": "Description\n\nRetrieves the properties of the requested container. This request is commonly used to retrieve the endpoint of a container. An endpoint is a value assigned by the service when a new container is created. A container’s endpoint does not change after it has been assigned. The DescribeContainer request returns a single Container object based on ContainerName . To return all Container objects that are associated with a specified AWS account, use ListContainers .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-container\n[--container-name <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--container-name <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container to query.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nContainer -> (structure)\n\nThe name of the queried container.\n\nEndpoint -> (string)\n\nThe DNS endpoint of the container. Use the endpoint to identify the specific container when sending requests to the data plane. The service assigns this value when the container is created. Once the value has been assigned, it does not change.\n\nCreationTime -> (timestamp)\n\nUnix timestamp.\n\nARN -> (string)\n\nThe Amazon Resource Name (ARN) of the container. The ARN has the following format:\n\narn:aws:<region>:<account that owns this container>:container/<name of container>\n\nFor example: arn:aws:mediastore:us-west-2:111122223333:container/movies\n\nName -> (string)\n\nThe name of the container.\n\nStatus -> (string)\n\nThe status of container creation or deletion. The status is one of the following: CREATING , ACTIVE , or DELETING . While the service is creating the container, the status is CREATING . When the endpoint is available, the status changes to ACTIVE .\n\nAccessLoggingEnabled -> (boolean)\n\nThe state of access logging on the container. This value is false by default, indicating that AWS Elemental MediaStore does not send access logs to Amazon CloudWatch Logs. When you enable access logging on the container, MediaStore changes this value to true , indicating that the service delivers access logs for objects stored in that container to CloudWatch Logs.",
      "command_examples": "Examples\n\nTo view the details of a container\n\nThe following describe-container example displays the details of the specified container.\n\naws mediastore describe-container \\\n    --container-name ExampleContainer\n\n\nOutput:\n\n{\n    \"Container\": {\n        \"CreationTime\": 1563558086,\n        \"AccessLoggingEnabled\": false,\n        \"ARN\": \"arn:aws:mediastore:us-west-2:111122223333:container/ExampleContainer\",\n        \"Status\": \"ACTIVE\",\n        \"Name\": \"ExampleContainer\",\n        \"Endpoint\": \"https://aaabbbcccdddee.data.mediastore.us-west-2.amazonaws.com\"\n    }\n}\n\n\nFor more information, see Viewing the Details for a Container in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "get-container-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/get-container-policy.html",
      "command_description": "Description\n\nRetrieves the access policy for the specified container. For information about the data that is included in an access policy, see the AWS Identity and Access Management User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-container-policy\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nPolicy -> (string)\n\nThe contents of the access policy.",
      "command_examples": "Examples\n\nTo view a container policy\n\nThe following get-container-policy example displays the resource-based policy of the specified container.\n\naws mediastore get-container-policy \\\n    --container-name ExampleLiveDemo\n\n\nOutput:\n\n{\n    \"Policy\": {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Sid\": \"PublicReadOverHttps\",\n                \"Effect\": \"Allow\",\n                \"Principal\": {\n                    \"AWS\": \"arn:aws:iam::111122223333:root\"\n                },\n                \"Action\": [\n                    \"mediastore:GetObject\",\n                    \"mediastore:DescribeObject\"\n                ],\n                \"Resource\": \"arn:aws:mediastore:us-west-2:111122223333:container/ExampleLiveDemo/\",\n                \"Condition\": {\n                    \"Bool\": {\n                        \"aws:SecureTransport\": \"true\"\n                    }\n                }\n            }\n        ]\n    }\n}\n\n\nFor more information, see Viewing a Container Policy in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "get-cors-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/get-cors-policy.html",
      "command_description": "Description\n\nReturns the cross-origin resource sharing (CORS) configuration information that is set for the container.\n\nTo use this operation, you must have permission to perform the MediaStore:GetCorsPolicy action. By default, the container owner has this permission and can grant it to others.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-cors-policy\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that the policy is assigned to.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nCorsPolicy -> (list)\n\nThe CORS policy assigned to the container.\n\n(structure)\n\nA rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.\n\nAllowedOrigins -> (list)\n\nOne or more response headers that you want users to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).\n\nEach CORS rule must have at least one AllowedOrigins element. The string value can include only one wildcard character (*), for example, http://*.example.com. Additionally, you can specify only one wildcard character to allow cross-origin access for all origins.\n\n(string)\n\nAllowedMethods -> (list)\n\nIdentifies an HTTP method that the origin that is specified in the rule is allowed to execute.\n\nEach CORS rule must contain at least one AllowedMethods and one AllowedOrigins element.\n\n(string)\n\nAllowedHeaders -> (list)\n\nSpecifies which headers are allowed in a preflight OPTIONS request through the Access-Control-Request-Headers header. Each header name that is specified in Access-Control-Request-Headers must have a corresponding entry in the rule. Only the headers that were requested are sent back.\n\nThis element can contain only one wildcard character (*).\n\n(string)\n\nMaxAgeSeconds -> (integer)\n\nThe time in seconds that your browser caches the preflight response for the specified resource.\n\nA CORS rule can have only one MaxAgeSeconds element.\n\nExposeHeaders -> (list)\n\nOne or more headers in the response that you want users to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).\n\nThis element is optional for each rule.\n\n(string)",
      "command_examples": "Examples\n\nTo view a CORS policy\n\nThe following get-cors-policy example displays the cross-origin resource sharing (CORS) policy that is assigned to the specified container.\n\naws mediastore get-cors-policy \\\n    --container-name ExampleContainer \\\n    --region us-west-2\n\n\nOutput:\n\n{\n    \"CorsPolicy\": [\n        {\n            \"AllowedMethods\": [\n                \"GET\",\n                \"HEAD\"\n            ],\n            \"MaxAgeSeconds\": 3000,\n            \"AllowedOrigins\": [\n                \"\"\n            ],\n            \"AllowedHeaders\": [\n                \"\"\n            ]\n        }\n    ]\n}\n\n\nFor more information, see Viewing a CORS Policy in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "get-lifecycle-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/get-lifecycle-policy.html",
      "command_description": "Description\n\nRetrieves the object lifecycle policy that is assigned to a container.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-lifecycle-policy\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that the object lifecycle policy is assigned to.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nLifecyclePolicy -> (string)\n\nThe object lifecycle policy that is assigned to the container.",
      "command_examples": "Examples\n\nTo view an object lifecycle policy\n\nThe following get-lifecycle-policy example displays the object lifecycle policy attached to the specified container.\n\naws mediastore get-lifecycle-policy \\\n    --container-name LiveEvents\n\n\nOutput:\n\n{\n    \"LifecyclePolicy\": {\n        \"rules\": [\n            {\n                \"definition\": {\n                    \"path\": [\n                        {\n                            \"prefix\": \"Football/\"\n                        },\n                        {\n                            \"prefix\": \"Baseball/\"\n                        }\n                    ],\n                    \"days_since_create\": [\n                        {\n                            \"numeric\": [\n                                \">\",\n                                28\n                            ]\n                        }\n                    ]\n                },\n                \"action\": \"EXPIRE\"\n            }\n        ]\n    }\n}\n\n\nFor more information, see Viewing an Object Lifecycle Policy in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "get-metric-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/get-metric-policy.html",
      "command_description": "Description\n\nReturns the metric policy for the specified container.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-metric-policy\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that is associated with the metric policy.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nMetricPolicy -> (structure)\n\nThe metric policy that is associated with the specific container.\n\nContainerLevelMetrics -> (string)\n\nA setting to enable or disable metrics at the container level.\n\nMetricPolicyRules -> (list)\n\nA parameter that holds an array of rules that enable metrics at the object level. This parameter is optional, but if you choose to include it, you must also include at least one rule. By default, you can include up to five rules. You can also request a quota increase to allow up to 300 rules per policy.\n\n(structure)\n\nA setting that enables metrics at the object level. Each rule contains an object group and an object group name. If the policy includes the MetricPolicyRules parameter, you must include at least one rule. Each metric policy can include up to five rules by default. You can also request a quota increase to allow up to 300 rules per policy.\n\nObjectGroup -> (string)\n\nA path or file name that defines which objects to include in the group. Wildcards (*) are acceptable.\n\nObjectGroupName -> (string)\n\nA name that allows you to refer to the object group."
    },
    {
      "command_name": "list-containers",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/list-containers.html",
      "command_description": "Description\n\nLists the properties of all containers in AWS Elemental MediaStore.\n\nYou can query to receive all the containers in one response. Or you can include the MaxResults parameter to receive a limited number of containers in each response. In this case, the response includes a token. To get the next set of containers, send the command again, this time with the NextToken parameter (with the returned token as its value). The next set of responses appears, with a token if there are still more containers to receive.\n\nSee also DescribeContainer , which gets the properties of one container.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-containers is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: Containers",
      "command_synopsis": "Synopsis\n  list-containers\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nContainers -> (list)\n\nThe names of the containers.\n\n(structure)\n\nThis section describes operations that you can perform on an AWS Elemental MediaStore container.\n\nEndpoint -> (string)\n\nThe DNS endpoint of the container. Use the endpoint to identify the specific container when sending requests to the data plane. The service assigns this value when the container is created. Once the value has been assigned, it does not change.\n\nCreationTime -> (timestamp)\n\nUnix timestamp.\n\nARN -> (string)\n\nThe Amazon Resource Name (ARN) of the container. The ARN has the following format:\n\narn:aws:<region>:<account that owns this container>:container/<name of container>\n\nFor example: arn:aws:mediastore:us-west-2:111122223333:container/movies\n\nName -> (string)\n\nThe name of the container.\n\nStatus -> (string)\n\nThe status of container creation or deletion. The status is one of the following: CREATING , ACTIVE , or DELETING . While the service is creating the container, the status is CREATING . When the endpoint is available, the status changes to ACTIVE .\n\nAccessLoggingEnabled -> (boolean)\n\nThe state of access logging on the container. This value is false by default, indicating that AWS Elemental MediaStore does not send access logs to Amazon CloudWatch Logs. When you enable access logging on the container, MediaStore changes this value to true , indicating that the service delivers access logs for objects stored in that container to CloudWatch Logs.\n\nNextToken -> (string)\n\nNextToken is the token to use in the next call to ListContainers . This token is returned only if you included the MaxResults tag in the original command, and only if there are still containers to return.",
      "command_examples": "Examples\n\nTo view a list of containers\n\nThe following list-containers example displays a list of all containers that are associated with your account.\n\naws mediastore list-containers\n\n\nOutput:\n\n{\n    \"Containers\": [\n        {\n            \"CreationTime\": 1505317931,\n            \"Endpoint\": \"https://aaabbbcccdddee.data.mediastore.us-west-2.amazonaws.com\",\n            \"Status\": \"ACTIVE\",\n            \"ARN\": \"arn:aws:mediastore:us-west-2:111122223333:container/ExampleLiveDemo\",\n            \"AccessLoggingEnabled\": false,\n            \"Name\": \"ExampleLiveDemo\"\n        },\n        {\n            \"CreationTime\": 1506528818,\n            \"Endpoint\": \"https://fffggghhhiiijj.data.mediastore.us-west-2.amazonaws.com\",\n            \"Status\": \"ACTIVE\",\n            \"ARN\": \"arn:aws:mediastore:us-west-2:111122223333:container/ExampleContainer\",\n            \"AccessLoggingEnabled\": false,\n            \"Name\": \"ExampleContainer\"\n        }\n    ]\n}\n\n\nFor more information, see Viewing a List of Containers in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "list-tags-for-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/list-tags-for-resource.html",
      "command_description": "Description\n\nReturns a list of the tags assigned to the specified container.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-tags-for-resource\n--resource <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource (string)\n\nThe Amazon Resource Name (ARN) for the container.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nTags -> (list)\n\nAn array of key:value pairs that are assigned to the container.\n\n(structure)\n\nA collection of tags associated with a container. Each tag consists of a key:value pair, which can be anything you define. Typically, the tag key represents a category (such as “environment”) and the tag value represents a specific value within that category (such as “test,” “development,” or “production”). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see Tagging Resources in MediaStore .\n\nKey -> (string)\n\nPart of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as “customer.” Tag keys are case-sensitive.\n\nValue -> (string)\n\nPart of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as “companyA” or “companyB.” Tag values are case-sensitive.",
      "command_examples": "Examples\n\nTo list tags for a container\n\nThe following list-tags-for-resource example displays the tag keys and values assigned to the specified container.\n\naws mediastore list-tags-for-resource \\\n    --resource arn:aws:mediastore:us-west-2:1213456789012:container/ExampleContainer\n\n\nOutput:\n\n{\n    \"Tags\": [\n        {\n            \"Value\": \"Test\",\n            \"Key\": \"Environment\"\n        },\n        {\n            \"Value\": \"West\",\n            \"Key\": \"Region\"\n        }\n    ]\n}\n\n\nFor more information, see ListTagsForResource in the AWS Elemental MediaStore API Reference."
    },
    {
      "command_name": "put-container-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/put-container-policy.html",
      "command_description": "Description\n\nCreates an access policy for the specified container to restrict the users and clients that can access it. For information about the data that is included in an access policy, see the AWS Identity and Access Management User Guide .\n\nFor this release of the REST API, you can create only one policy for a container. If you enter PutContainerPolicy twice, the second command modifies the existing policy.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-container-policy\n--container-name <value>\n--policy <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "--policy <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container.\n\n--policy (string)\n\nThe contents of the policy, which includes the following:\n\nOne Version tag\n\nOne Statement tag that contains the standard tags for the policy.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo edit a container policy\n\nThe following put-container-policy example assigns a different policy to the specified container. In this example, the updated policy is defined in a file named LiveEventsContainerPolicy.json.\n\naws mediastore put-container-policy \\\n    --container-name LiveEvents \\\n    --policy file://LiveEventsContainerPolicy.json\n\n\nThis command produces no output.\n\nFor more information, see Editing a Container Policy in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "put-cors-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/put-cors-policy.html",
      "command_description": "Description\n\nSets the cross-origin resource sharing (CORS) configuration on a container so that the container can service cross-origin requests. For example, you might want to enable a request whose origin is http://www.example.com to access your AWS Elemental MediaStore container at my.example.container.com by using the browser’s XMLHttpRequest capability.\n\nTo enable CORS on a container, you attach a CORS policy to the container. In the CORS policy, you configure rules that identify origins and the HTTP methods that can be executed on your container. The policy can contain up to 398,000 characters. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.\n\nTo learn more about CORS, see Cross-Origin Resource Sharing (CORS) in AWS Elemental MediaStore .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-cors-policy\n--container-name <value>\n--cors-policy <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "--cors-policy <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that you want to assign the CORS policy to.\n\n--cors-policy (list)\n\nThe CORS policy to apply to the container.\n\n(structure)\n\nA rule for a CORS policy. You can add up to 100 rules to a CORS policy. If more than one rule applies, the service uses the first applicable rule listed.\n\nAllowedOrigins -> (list)\n\nOne or more response headers that you want users to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).\n\nEach CORS rule must have at least one AllowedOrigins element. The string value can include only one wildcard character (*), for example, http://*.example.com. Additionally, you can specify only one wildcard character to allow cross-origin access for all origins.\n\n(string)\n\nAllowedMethods -> (list)\n\nIdentifies an HTTP method that the origin that is specified in the rule is allowed to execute.\n\nEach CORS rule must contain at least one AllowedMethods and one AllowedOrigins element.\n\n(string)\n\nAllowedHeaders -> (list)\n\nSpecifies which headers are allowed in a preflight OPTIONS request through the Access-Control-Request-Headers header. Each header name that is specified in Access-Control-Request-Headers must have a corresponding entry in the rule. Only the headers that were requested are sent back.\n\nThis element can contain only one wildcard character (*).\n\n(string)\n\nMaxAgeSeconds -> (integer)\n\nThe time in seconds that your browser caches the preflight response for the specified resource.\n\nA CORS rule can have only one MaxAgeSeconds element.\n\nExposeHeaders -> (list)\n\nOne or more headers in the response that you want users to be able to access from their applications (for example, from a JavaScript XMLHttpRequest object).\n\nThis element is optional for each rule.\n\n(string)\n\nShorthand Syntax:\n\nAllowedOrigins=string,string,AllowedMethods=string,string,AllowedHeaders=string,string,MaxAgeSeconds=integer,ExposeHeaders=string,string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"AllowedOrigins\": [\"string\", ...],\n    \"AllowedMethods\": [\"PUT\"|\"GET\"|\"DELETE\"|\"HEAD\", ...],\n    \"AllowedHeaders\": [\"string\", ...],\n    \"MaxAgeSeconds\": integer,\n    \"ExposeHeaders\": [\"string\", ...]\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nExample 1: To add a CORS policy\n\nThe following put-cors-policy example adds a cross-origin resource sharing (CORS) policy to the specified container. The contents of the CORS policy are in the file named corsPolicy.json.\n\naws mediastore put-cors-policy \\\n    --container-name ExampleContainer \\\n    --cors-policy file://corsPolicy.json\n\n\nThis command produces no output.\n\nFor more information, see Adding a CORS Policy to a Container in the AWS Elemental MediaStore User Guide.\n\nExample 2: To edit a CORS policy\n\nThe following put-cors-policy example updates the cross-origin resource sharing (CORS) policy that is assigned to the specified container. The contents of the updated CORS policy are in the file named corsPolicy2.json.\n\nFor more information, see Editing a CORS Policy in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "put-lifecycle-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/put-lifecycle-policy.html",
      "command_description": "Description\n\nWrites an object lifecycle policy to a container. If the container already has an object lifecycle policy, the service replaces the existing policy with the new policy. It takes up to 20 minutes for the change to take effect.\n\nFor information about how to construct an object lifecycle policy, see Components of an Object Lifecycle Policy .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-lifecycle-policy\n--container-name <value>\n--lifecycle-policy <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "--lifecycle-policy <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that you want to assign the object lifecycle policy to.\n\n--lifecycle-policy (string)\n\nThe object lifecycle policy to apply to the container.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo create an object lifecycle policy\n\nThe following put-lifecycle-policy example attaches an object lifecycle policy to the specified container. This enables you to specify how long the service should store objects in your container. MediaStore deletes objects in the container once they reach their expiration date, as indicated in the policy, which is in the file named LiveEventsLifecyclePolicy.json.\n\naws mediastore put-lifecycle-policy \\\n    --container-name ExampleContainer \\\n    --lifecycle-policy file://ExampleLifecyclePolicy.json\n\n\nThis command produces no output.\n\nFor more information, see Adding an Object Lifecycle Policy to a Container in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "put-metric-policy",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/put-metric-policy.html",
      "command_description": "Description\n\nThe metric policy that you want to add to the container. A metric policy allows AWS Elemental MediaStore to send metrics to Amazon CloudWatch. It takes up to 20 minutes for the new policy to take effect.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-metric-policy\n--container-name <value>\n--metric-policy <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "--metric-policy <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that you want to add the metric policy to.\n\n--metric-policy (structure)\n\nThe metric policy that you want to associate with the container. In the policy, you must indicate whether you want MediaStore to send container-level metrics. You can also include up to five rules to define groups of objects that you want MediaStore to send object-level metrics for. If you include rules in the policy, construct each rule with both of the following:\n\nAn object group that defines which objects to include in the group. The definition can be a path or a file name, but it can’t have more than 900 characters. Valid characters are: a-z, A-Z, 0-9, _ (underscore), = (equal), : (colon), . (period), - (hyphen), ~ (tilde), / (forward slash), and * (asterisk). Wildcards (*) are acceptable.\n\nAn object group name that allows you to refer to the object group. The name can’t have more than 30 characters. Valid characters are: a-z, A-Z, 0-9, and _ (underscore).\n\nContainerLevelMetrics -> (string)\n\nA setting to enable or disable metrics at the container level.\n\nMetricPolicyRules -> (list)\n\nA parameter that holds an array of rules that enable metrics at the object level. This parameter is optional, but if you choose to include it, you must also include at least one rule. By default, you can include up to five rules. You can also request a quota increase to allow up to 300 rules per policy.\n\n(structure)\n\nA setting that enables metrics at the object level. Each rule contains an object group and an object group name. If the policy includes the MetricPolicyRules parameter, you must include at least one rule. Each metric policy can include up to five rules by default. You can also request a quota increase to allow up to 300 rules per policy.\n\nObjectGroup -> (string)\n\nA path or file name that defines which objects to include in the group. Wildcards (*) are acceptable.\n\nObjectGroupName -> (string)\n\nA name that allows you to refer to the object group.\n\nShorthand Syntax:\n\nContainerLevelMetrics=string,MetricPolicyRules=[{ObjectGroup=string,ObjectGroupName=string},{ObjectGroup=string,ObjectGroupName=string}]\n\n\nJSON Syntax:\n\n{\n  \"ContainerLevelMetrics\": \"ENABLED\"|\"DISABLED\",\n  \"MetricPolicyRules\": [\n    {\n      \"ObjectGroup\": \"string\",\n      \"ObjectGroupName\": \"string\"\n    }\n    ...\n  ]\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone"
    },
    {
      "command_name": "start-access-logging",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/start-access-logging.html",
      "command_description": "Description\n\nStarts access logging on the specified container. When you enable access logging on a container, MediaStore delivers access logs for objects stored in that container to Amazon CloudWatch Logs.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  start-access-logging\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that you want to start access logging on.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo enable access logging on a container\n\nThe following start-access-logging example enable access logging on the specified container.\n\naws mediastore start-access-logging \\\n    --container-name LiveEvents\n\n\nThis command produces no output.\n\nFor more information, see Enabling Access Logging for a Container in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "stop-access-logging",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/stop-access-logging.html",
      "command_description": "Description\n\nStops access logging on the specified container. When you stop access logging on a container, MediaStore stops sending access logs to Amazon CloudWatch Logs. These access logs are not saved and are not retrievable.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  stop-access-logging\n--container-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--container-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--container-name (string)\n\nThe name of the container that you want to stop access logging on.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo disable access logging on a container\n\nThe following stop-access-logging example disables access logging on the specified container.\n\naws mediastore stop-access-logging \\\n    --container-name LiveEvents\n\n\nThis command produces no output.\n\nFor more information, see Disabling Access Logging for a Container in the AWS Elemental MediaStore User Guide."
    },
    {
      "command_name": "tag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/tag-resource.html",
      "command_description": "Description\n\nAdds tags to the specified AWS Elemental MediaStore container. Tags are key:value pairs that you can associate with AWS resources. For example, the tag key might be “customer” and the tag value might be “companyA.” You can specify one or more tags to add to each container. You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see Tagging Resources in MediaStore .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  tag-resource\n--resource <value>\n--tags <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource <value>",
        "--tags <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource (string)\n\nThe Amazon Resource Name (ARN) for the container.\n\n--tags (list)\n\nAn array of key:value pairs that you want to add to the container. You need to specify only the tags that you want to add or update. For example, suppose a container already has two tags (customer:CompanyA and priority:High). You want to change the priority tag and also add a third tag (type:Contract). For TagResource, you specify the following tags: priority:Medium, type:Contract. The result is that your container has three tags: customer:CompanyA, priority:Medium, and type:Contract.\n\n(structure)\n\nA collection of tags associated with a container. Each tag consists of a key:value pair, which can be anything you define. Typically, the tag key represents a category (such as “environment”) and the tag value represents a specific value within that category (such as “test,” “development,” or “production”). You can add up to 50 tags to each container. For more information about tagging, including naming and usage conventions, see Tagging Resources in MediaStore .\n\nKey -> (string)\n\nPart of the key:value pair that defines a tag. You can use a tag key to describe a category of information, such as “customer.” Tag keys are case-sensitive.\n\nValue -> (string)\n\nPart of the key:value pair that defines a tag. You can use a tag value to describe a specific value within a category, such as “companyA” or “companyB.” Tag values are case-sensitive.\n\nShorthand Syntax:\n\nKey=string,Value=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"Key\": \"string\",\n    \"Value\": \"string\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo add tags to a container\n\nThe following tag-resource example adds tag keys and values to the specified container.\n\naws mediastore tag-resource \\\n    --resource arn:aws:mediastore:us-west-2:123456789012:container/ExampleContainer \\\n    --tags '[{\"Key\": \"Region\", \"Value\": \"West\"}, {\"Key\": \"Environment\", \"Value\": \"Test\"}]'\n\n\nThis command produces no output.\n\nFor more information, see TagResource in the AWS Elemental MediaStore API Reference."
    },
    {
      "command_name": "untag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/mediastore/untag-resource.html",
      "command_description": "Description\n\nRemoves tags from the specified container. You can specify one or more tags to remove.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  untag-resource\n--resource <value>\n--tag-keys <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource <value>",
        "--tag-keys <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource (string)\n\nThe Amazon Resource Name (ARN) for the container.\n\n--tag-keys (list)\n\nA comma-separated list of keys for tags that you want to remove from the container. For example, if your container has two tags (customer:CompanyA and priority:High) and you want to remove one of the tags (priority:High), you specify the key for the tag that you want to remove (priority).\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo remove tags from a container\n\nThe following untag-resource example removes the specified tag key and its associated value from a container.\n\naws mediastore untag-resource \\\n    --resource arn:aws:mediastore:us-west-2:123456789012:container/ExampleContainer \\\n    --tag-keys Region\n\n\nThis command produces no output.\n\nFor more information, see UntagResource in the AWS Elemental MediaStore API Reference.."
    }
  ],
  "service_description": "Description\n\nAn AWS Elemental MediaStore container is a namespace that holds folders and objects. You use a container endpoint to create, read, and delete objects."
}