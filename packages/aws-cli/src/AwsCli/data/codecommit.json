{
  "service_name": "codecommit",
  "service_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/index.html",
  "service_commands": [
    {
      "command_name": "associate-approval-rule-template-with-repository",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/associate-approval-rule-template-with-repository.html",
      "command_description": "Description\n\nCreates an association between an approval rule template and a specified repository. Then, the next time a pull request is created in the repository where the destination reference (if specified) matches the destination reference (branch) for the pull request, an approval rule that matches the template conditions is automatically created for that pull request. If no destination references are specified in the template, an approval rule that matches the template contents is created for all pull requests in that repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  associate-approval-rule-template-with-repository\n--approval-rule-template-name <value>\n--repository-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--approval-rule-template-name <value>",
        "--repository-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--approval-rule-template-name (string)\n\nThe name for the approval rule template.\n\n--repository-name (string)\n\nThe name of the repository that you want to associate with the template.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo associate an approval rule template with a repository\n\nThe following associate-approval-rule-template-with-repository example associates the specified approval rule template with a repository named MyDemoRepo.\n\naws codecommit associate-approval-rule-template-with-repository \\\n    --repository-name MyDemoRepo  \\\n    --approval-rule-template-name 2-approver-rule-for-main\n\n\nThis command produces no output.\n\nFor more information, see Associate an Approval Rule Template with a Repository in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "batch-associate-approval-rule-template-with-repositories",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/batch-associate-approval-rule-template-with-repositories.html",
      "command_description": "Description\n\nCreates an association between an approval rule template and one or more specified repositories.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-associate-approval-rule-template-with-repositories\n--approval-rule-template-name <value>\n--repository-names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--approval-rule-template-name <value>",
        "--repository-names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--approval-rule-template-name (string)\n\nThe name of the template you want to associate with one or more repositories.\n\n--repository-names (list)\n\nThe names of the repositories you want to associate with the template.\n\nNote\n\nThe length constraint limit is for each string in the array. The array itself can be empty.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nassociatedRepositoryNames -> (list)\n\nA list of names of the repositories that have been associated with the template.\n\n(string)\n\nerrors -> (list)\n\nA list of any errors that might have occurred while attempting to create the association between the template and the repositories.\n\n(structure)\n\nReturns information about errors in a BatchAssociateApprovalRuleTemplateWithRepositories operation.\n\nrepositoryName -> (string)\n\nThe name of the repository where the association was not made.\n\nerrorCode -> (string)\n\nAn error code that specifies whether the repository name was not valid or not found.\n\nerrorMessage -> (string)\n\nAn error message that provides details about why the repository name was not found or not valid.",
      "command_examples": "Examples\n\nTo associate an approval rule template with multiple repositories in a single operation\n\nThe following batch-associate-approval-rule-template-with-repositories example associates the specified approval rule template with repositories named MyDemoRepo and MyOtherDemoRepo.\n\nNote: Approval rule templates are specific to the AWS Region where they are created. They can only be associated with repositories in that AWS Region.\n\naws codecommit batch-associate-approval-rule-template-with-repositories \\\n    --repository-names MyDemoRepo, MyOtherDemoRepo  \\\n    --approval-rule-template-name 2-approver-rule-for-main\n\n\nOutput:\n\n{\n    \"associatedRepositoryNames\": [\n        \"MyDemoRepo\",\n        \"MyOtherDemoRepo\"\n    ],\n    \"errors\": []\n}\n\n\nFor more information, see Associate an Approval Rule Template with a Repository in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "batch-describe-merge-conflicts",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/batch-describe-merge-conflicts.html",
      "command_description": "Description\n\nReturns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-describe-merge-conflicts\n--repository-name <value>\n--destination-commit-specifier <value>\n--source-commit-specifier <value>\n--merge-option <value>\n[--max-merge-hunks <value>]\n[--max-conflict-files <value>]\n[--file-paths <value>]\n[--conflict-detail-level <value>]\n[--conflict-resolution-strategy <value>]\n[--next-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--destination-commit-specifier <value>",
        "--source-commit-specifier <value>",
        "--merge-option <value>",
        "[--max-merge-hunks <value>]",
        "[--max-conflict-files <value>]",
        "[--file-paths <value>]",
        "[--conflict-detail-level <value>]",
        "[--conflict-resolution-strategy <value>]",
        "[--next-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository that contains the merge conflicts you want to review.\n\n--destination-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--source-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--merge-option (string)\n\nThe merge option or strategy you want to use to merge the code.\n\nPossible values:\n\nFAST_FORWARD_MERGE\n\nSQUASH_MERGE\n\nTHREE_WAY_MERGE\n\n--max-merge-hunks (integer)\n\nThe maximum number of merge hunks to include in the output.\n\n--max-conflict-files (integer)\n\nThe maximum number of files to include in the output.\n\n--file-paths (list)\n\nThe path of the target files used to describe the conflicts. If not specified, the default is all conflict files.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--conflict-detail-level (string)\n\nThe level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.\n\nPossible values:\n\nFILE_LEVEL\n\nLINE_LEVEL\n\n--conflict-resolution-strategy (string)\n\nSpecifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.\n\nPossible values:\n\nNONE\n\nACCEPT_SOURCE\n\nACCEPT_DESTINATION\n\nAUTOMERGE\n\n--next-token (string)\n\nAn enumeration token that, when provided in a request, returns the next batch of the results.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nconflicts -> (list)\n\nA list of conflicts for each file, including the conflict metadata and the hunks of the differences between the files.\n\n(structure)\n\nInformation about conflicts in a merge operation.\n\nconflictMetadata -> (structure)\n\nMetadata about a conflict in a merge operation.\n\nfilePath -> (string)\n\nThe path of the file that contains conflicts.\n\nfileSizes -> (structure)\n\nThe file sizes of the file in the source, destination, and base of the merge.\n\nsource -> (long)\n\nThe size of a file in the source of a merge or pull request.\n\ndestination -> (long)\n\nThe size of a file in the destination of a merge or pull request.\n\nbase -> (long)\n\nThe size of a file in the base of a merge or pull request.\n\nfileModes -> (structure)\n\nThe file modes of the file in the source, destination, and base of the merge.\n\nsource -> (string)\n\nThe file mode of a file in the source of a merge or pull request.\n\ndestination -> (string)\n\nThe file mode of a file in the destination of a merge or pull request.\n\nbase -> (string)\n\nThe file mode of a file in the base of a merge or pull request.\n\nobjectTypes -> (structure)\n\nInformation about any object type conflicts in a merge operation.\n\nsource -> (string)\n\nThe type of the object in the source branch.\n\ndestination -> (string)\n\nThe type of the object in the destination branch.\n\nbase -> (string)\n\nThe type of the object in the base commit of the merge.\n\nnumberOfConflicts -> (integer)\n\nThe number of conflicts, including both hunk conflicts and metadata conflicts.\n\nisBinaryFile -> (structure)\n\nA boolean value (true or false) indicating whether the file is binary or textual in the source, destination, and base of the merge.\n\nsource -> (boolean)\n\nThe binary or non-binary status of file in the source of a merge or pull request.\n\ndestination -> (boolean)\n\nThe binary or non-binary status of a file in the destination of a merge or pull request.\n\nbase -> (boolean)\n\nThe binary or non-binary status of a file in the base of a merge or pull request.\n\ncontentConflict -> (boolean)\n\nA boolean value indicating whether there are conflicts in the content of a file.\n\nfileModeConflict -> (boolean)\n\nA boolean value indicating whether there are conflicts in the file mode of a file.\n\nobjectTypeConflict -> (boolean)\n\nA boolean value (true or false) indicating whether there are conflicts between the branches in the object type of a file, folder, or submodule.\n\nmergeOperations -> (structure)\n\nWhether an add, modify, or delete operation caused the conflict between the source and destination of the merge.\n\nsource -> (string)\n\nThe operation (add, modify, or delete) on a file in the source of a merge or pull request.\n\ndestination -> (string)\n\nThe operation on a file in the destination of a merge or pull request.\n\nmergeHunks -> (list)\n\nA list of hunks that contain the differences between files or lines causing the conflict.\n\n(structure)\n\nInformation about merge hunks in a merge or pull request operation.\n\nisConflict -> (boolean)\n\nA Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. True when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge do not set this to true.\n\nsource -> (structure)\n\nInformation about the merge hunk in the source of a merge or pull request.\n\nstartLine -> (integer)\n\nThe start position of the hunk in the merge result.\n\nendLine -> (integer)\n\nThe end position of the hunk in the merge result.\n\nhunkContent -> (string)\n\nThe base-64 encoded content of the hunk merged region that might contain a conflict.\n\ndestination -> (structure)\n\nInformation about the merge hunk in the destination of a merge or pull request.\n\nstartLine -> (integer)\n\nThe start position of the hunk in the merge result.\n\nendLine -> (integer)\n\nThe end position of the hunk in the merge result.\n\nhunkContent -> (string)\n\nThe base-64 encoded content of the hunk merged region that might contain a conflict.\n\nbase -> (structure)\n\nInformation about the merge hunk in the base of a merge or pull request.\n\nstartLine -> (integer)\n\nThe start position of the hunk in the merge result.\n\nendLine -> (integer)\n\nThe end position of the hunk in the merge result.\n\nhunkContent -> (string)\n\nThe base-64 encoded content of the hunk merged region that might contain a conflict.\n\nnextToken -> (string)\n\nAn enumeration token that can be used in a request to return the next batch of the results.\n\nerrors -> (list)\n\nA list of any errors returned while describing the merge conflicts for each file.\n\n(structure)\n\nReturns information about errors in a BatchDescribeMergeConflicts operation.\n\nfilePath -> (string)\n\nThe path to the file.\n\nexceptionName -> (string)\n\nThe name of the exception.\n\nmessage -> (string)\n\nThe message provided by the exception.\n\ndestinationCommitId -> (string)\n\nThe commit ID of the destination commit specifier that was used in the merge evaluation.\n\nsourceCommitId -> (string)\n\nThe commit ID of the source commit specifier that was used in the merge evaluation.\n\nbaseCommitId -> (string)\n\nThe commit ID of the merge base.",
      "command_examples": "Examples\n\nTo get information about merge conflicts in all files or a subset of files in a merge between two commit specifiers\n\nThe following batch-describe-merge-conflicts example determines the merge conflicts for merging a source branch named feature-randomizationfeature with a destination branch named main using the THREE_WAY_MERGE strategy in a repository named MyDemoRepo.\n\naws codecommit batch-describe-merge-conflicts \\\n    --source-commit-specifier feature-randomizationfeature \\\n    --destination-commit-specifier main \\\n    --merge-option THREE_WAY_MERGE \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"conflicts\": [\n        {\n            \"conflictMetadata\": {\n                \"filePath\": \"readme.md\",\n                \"fileSizes\": {\n                    \"source\": 139,\n                    \"destination\": 230,\n                    \"base\": 85\n                },\n                \"fileModes\": {\n                    \"source\": \"NORMAL\",\n                    \"destination\": \"NORMAL\",\n                    \"base\": \"NORMAL\"\n                },\n                \"objectTypes\": {\n                    \"source\": \"FILE\",\n                    \"destination\": \"FILE\",\n                    \"base\": \"FILE\"\n                },\n                \"numberOfConflicts\": 1,\n                \"isBinaryFile\": {\n                    \"source\": false,\n                    \"destination\": false,\n                    \"base\": false\n                },\n                \"contentConflict\": true,\n                \"fileModeConflict\": false,\n                \"objectTypeConflict\": false,\n                \"mergeOperations\": {\n                    \"source\": \"M\",\n                    \"destination\": \"M\"\n                }\n            },\n            \"mergeHunks\": [\n                {\n                    \"isConflict\": true,\n                    \"source\": {\n                        \"startLine\": 0,\n                        \"endLine\": 3,\n                        \"hunkContent\": \"VGhpcyBpEXAMPLE==\"\n                    },\n                    \"destination\": {\n                        \"startLine\": 0,\n                        \"endLine\": 1,\n                        \"hunkContent\": \"VXNlIHRoEXAMPLE=\"\n                    }\n                }\n            ]\n        }\n    ],\n    \"errors\": [],\n    \"destinationCommitId\": \"86958e0aEXAMPLE\",\n    \"sourceCommitId\": \"6ccd57fdEXAMPLE\",\n    \"baseCommitId\": \"767b6958EXAMPLE\"\n}\n\n\nFor more information, see Resolve Conflicts in a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "batch-disassociate-approval-rule-template-from-repositories",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/batch-disassociate-approval-rule-template-from-repositories.html",
      "command_description": "Description\n\nRemoves the association between an approval rule template and one or more specified repositories.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-disassociate-approval-rule-template-from-repositories\n--approval-rule-template-name <value>\n--repository-names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--approval-rule-template-name <value>",
        "--repository-names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--approval-rule-template-name (string)\n\nThe name of the template that you want to disassociate from one or more repositories.\n\n--repository-names (list)\n\nThe repository names that you want to disassociate from the approval rule template.\n\nNote\n\nThe length constraint limit is for each string in the array. The array itself can be empty.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ndisassociatedRepositoryNames -> (list)\n\nA list of repository names that have had their association with the template removed.\n\n(string)\n\nerrors -> (list)\n\nA list of any errors that might have occurred while attempting to remove the association between the template and the repositories.\n\n(structure)\n\nReturns information about errors in a BatchDisassociateApprovalRuleTemplateFromRepositories operation.\n\nrepositoryName -> (string)\n\nThe name of the repository where the association with the template was not able to be removed.\n\nerrorCode -> (string)\n\nAn error code that specifies whether the repository name was not valid or not found.\n\nerrorMessage -> (string)\n\nAn error message that provides details about why the repository name was either not found or not valid.",
      "command_examples": "Examples\n\nTo disassociate an approval rule template from multiple repositories in a single operation\n\nThe following batch-disassociate-approval-rule-template-from-repositories example disassociates the specified approval rule template from repositories named MyDemoRepo and MyOtherDemoRepo.\n\naws codecommit batch-disassociate-approval-rule-template-from-repositories \\\n    --repository-names MyDemoRepo, MyOtherDemoRepo  \\\n    --approval-rule-template-name 1-approval-rule-for-all pull requests\n\n\nOutput:\n\n{\n    \"disassociatedRepositoryNames\": [\n        \"MyDemoRepo\",\n        \"MyOtherDemoRepo\"\n    ],\n    \"errors\": []\n}\n\n\nFor more information, see Disassociate an Approval Rule Template in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "batch-get-commits",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/batch-get-commits.html",
      "command_description": "Description\n\nReturns information about the contents of one or more commits in a repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-get-commits\n--commit-ids <value>\n--repository-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--commit-ids <value>",
        "--repository-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--commit-ids (list)\n\nThe full commit IDs of the commits to get information about.\n\nNote\n\nYou must supply the full SHA IDs of each commit. You cannot use shortened SHA IDs.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--repository-name (string)\n\nThe name of the repository that contains the commits.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommits -> (list)\n\nAn array of commit data type objects, each of which contains information about a specified commit.\n\n(structure)\n\nReturns information about a specific commit.\n\ncommitId -> (string)\n\nThe full SHA ID of the specified commit.\n\ntreeId -> (string)\n\nTree information for the specified commit.\n\nparents -> (list)\n\nA list of parent commits for the specified commit. Each parent commit ID is the full commit ID.\n\n(string)\n\nmessage -> (string)\n\nThe commit message associated with the specified commit.\n\nauthor -> (structure)\n\nInformation about the author of the specified commit. Information includes the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured in Git.\n\nname -> (string)\n\nThe name of the user who made the specified commit.\n\nemail -> (string)\n\nThe email address associated with the user who made the commit, if any.\n\ndate -> (string)\n\nThe date when the specified commit was commited, in timestamp format with GMT offset.\n\ncommitter -> (structure)\n\nInformation about the person who committed the specified commit, also known as the committer. Information includes the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured in Git.\n\nFor more information about the difference between an author and a committer in Git, see Viewing the Commit History in Pro Git by Scott Chacon and Ben Straub.\n\nname -> (string)\n\nThe name of the user who made the specified commit.\n\nemail -> (string)\n\nThe email address associated with the user who made the commit, if any.\n\ndate -> (string)\n\nThe date when the specified commit was commited, in timestamp format with GMT offset.\n\nadditionalData -> (string)\n\nAny other data associated with the specified commit.\n\nerrors -> (list)\n\nReturns any commit IDs for which information could not be found. For example, if one of the commit IDs was a shortened SHA ID or that commit was not found in the specified repository, the ID returns an error object with more information.\n\n(structure)\n\nReturns information about errors in a BatchGetCommits operation.\n\ncommitId -> (string)\n\nA commit ID that either could not be found or was not in a valid format.\n\nerrorCode -> (string)\n\nAn error code that specifies whether the commit ID was not valid or not found.\n\nerrorMessage -> (string)\n\nAn error message that provides detail about why the commit ID either was not found or was not valid.",
      "command_examples": "Examples\n\nTo view information about multiple commits\n\nThe following batch-get-commits example displays details about the specified commits.\n\naws codecommit batch-get-commits  \\\n    --repository-name MyDemoRepo  \\\n    --commit-ids 317f8570EXAMPLE 4c925148EXAMPLE\n\n\nOutput:\n\n{\n    \"commits\": [\n      {\n        \"additionalData\": \"\",\n        \"committer\": {\n            \"date\": \"1508280564 -0800\",\n            \"name\": \"Mary Major\",\n            \"email\": \"mary_major@example.com\"\n        },\n        \"author\": {\n            \"date\": \"1508280564 -0800\",\n            \"name\": \"Mary Major\",\n            \"email\": \"mary_major@example.com\"\n        },\n        \"commitId\": \"317f8570EXAMPLE\",\n        \"treeId\": \"1f330709EXAMPLE\",\n        \"parents\": [\n            \"6e147360EXAMPLE\"\n        ],\n        \"message\": \"Change variable name and add new response element\"\n    },\n    {\n        \"additionalData\": \"\",\n        \"committer\": {\n            \"date\": \"1508280542 -0800\",\n            \"name\": \"Li Juan\",\n            \"email\": \"li_juan@example.com\"\n        },\n        \"author\": {\n            \"date\": \"1508280542 -0800\",\n            \"name\": \"Li Juan\",\n            \"email\": \"li_juan@example.com\"\n        },\n        \"commitId\": \"4c925148EXAMPLE\",\n        \"treeId\": \"1f330709EXAMPLE\",\n        \"parents\": [\n            \"317f8570EXAMPLE\"\n        ],\n        \"message\": \"Added new class\"\n    }\n}\n\n\nFor more information, see View Commit Details in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "batch-get-repositories",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/batch-get-repositories.html",
      "command_description": "Description\n\nReturns information about one or more repositories.\n\nNote\n\nThe description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  batch-get-repositories\n--repository-names <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-names <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-names (list)\n\nThe names of the repositories to get information about.\n\nNote\n\nThe length constraint limit is for each string in the array. The array itself can be empty.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nrepositories -> (list)\n\nA list of repositories returned by the batch get repositories operation.\n\n(structure)\n\nInformation about a repository.\n\naccountId -> (string)\n\nThe ID of the AWS account associated with the repository.\n\nrepositoryId -> (string)\n\nThe ID of the repository.\n\nrepositoryName -> (string)\n\nThe repository’s name.\n\nrepositoryDescription -> (string)\n\nA comment or description about the repository.\n\ndefaultBranch -> (string)\n\nThe repository’s default branch name.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the repository was last modified, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the repository was created, in timestamp format.\n\ncloneUrlHttp -> (string)\n\nThe URL to use for cloning the repository over HTTPS.\n\ncloneUrlSsh -> (string)\n\nThe URL to use for cloning the repository over SSH.\n\nArn -> (string)\n\nThe Amazon Resource Name (ARN) of the repository.\n\nrepositoriesNotFound -> (list)\n\nReturns a list of repository names for which information could not be found.\n\n(string)",
      "command_examples": "Examples\n\nTo view details about multiple repositories\n\nThis example shows details about multiple AWS CodeCommit repositories.\n\naws codecommit batch-get-repositories \\\n    --repository-names MyDemoRepo MyOtherDemoRepo\n\n\nOutput:\n\n{\n    \"repositoriesNotFound\": [],\n    \"repositories\": [\n         {\n            \"creationDate\": 1429203623.625,\n            \"defaultBranch\": \"main\",\n            \"repositoryName\": \"MyDemoRepo\",\n            \"cloneUrlSsh\": \"ssh://git-codecommit.us-east-2.amazonaws.com/v1/repos/MyDemoRepo\",\n            \"lastModifiedDate\": 1430783812.0869999,\n            \"repositoryDescription\": \"My demonstration repository\",\n            \"cloneUrlHttp\": \"https://codecommit.us-east-2.amazonaws.com/v1/repos/MyDemoRepo\",\n            \"repositoryId\": \"f7579e13-b83e-4027-aaef-650c0EXAMPLE\",\n            \"Arn\": \"arn:aws:codecommit:us-east-2:111111111111:MyDemoRepo\"\n            \"accountId\": \"111111111111\"\n        },\n        {\n            \"creationDate\": 1429203623.627,\n            \"defaultBranch\": \"main\",\n            \"repositoryName\": \"MyOtherDemoRepo\",\n            \"cloneUrlSsh\": \"ssh://git-codecommit.us-east-2.amazonaws.com/v1/repos/MyOtherDemoRepo\",\n            \"lastModifiedDate\": 1430783812.0889999,\n            \"repositoryDescription\": \"My other demonstration repository\",\n            \"cloneUrlHttp\": \"https://codecommit.us-east-2.amazonaws.com/v1/repos/MyOtherDemoRepo\",\n            \"repositoryId\": \"cfc29ac4-b0cb-44dc-9990-f6f51EXAMPLE\",\n            \"Arn\": \"arn:aws:codecommit:us-east-2:111111111111:MyOtherDemoRepo\"\n            \"accountId\": \"111111111111\"\n        }\n    ],\n    \"repositoriesNotFound\": []\n}\n"
    },
    {
      "command_name": "create-approval-rule-template",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/create-approval-rule-template.html",
      "command_description": "Description\n\nCreates a template for approval rules that can then be associated with one or more repositories in your AWS account. When you associate a template with a repository, AWS CodeCommit creates an approval rule that matches the conditions of the template for all pull requests that meet the conditions of the template. For more information, see AssociateApprovalRuleTemplateWithRepository .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-approval-rule-template\n--approval-rule-template-name <value>\n--approval-rule-template-content <value>\n[--approval-rule-template-description <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--approval-rule-template-name <value>",
        "--approval-rule-template-content <value>",
        "[--approval-rule-template-description <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--approval-rule-template-name (string)\n\nThe name of the approval rule template. Provide descriptive names, because this name is applied to the approval rules created automatically in associated repositories.\n\n--approval-rule-template-content (string)\n\nThe content of the approval rule that is created on pull requests in associated repositories. If you specify one or more destination references (branches), approval rules are created in an associated repository only if their destination references (branches) match those specified in the template.\n\nNote\n\nWhen you create the content of the approval rule template, you can specify approvers in an approval pool in one of two ways:\n\nCodeCommitApprovers : This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account 123456789012 and Mary_Major , all of the following are counted as approvals coming from that user:\n\nAn IAM user in the account (arn:aws:iam::123456789012 :user/Mary_Major )\n\nA federated user identified in IAM as Mary_Major (arn:aws:sts::123456789012 :federated-user/Mary_Major )\n\nThis option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of Mary_Major (arn:aws:sts::123456789012 :assumed-role/CodeCommitReview/Mary_Major ) unless you include a wildcard (*Mary_Major).\n\nFully qualified ARN : This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role.\n\nFor more information about IAM ARNs, wildcards, and formats, see IAM Identifiers in the IAM User Guide .\n\n--approval-rule-template-description (string)\n\nThe description of the approval rule template. Consider providing a description that explains what this template does and when it might be appropriate to associate it with repositories.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRuleTemplate -> (structure)\n\nThe content and structure of the created approval rule template.\n\napprovalRuleTemplateId -> (string)\n\nThe system-generated ID of the approval rule template.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the approval rule template.\n\napprovalRuleTemplateDescription -> (string)\n\nThe description of the approval rule template.\n\napprovalRuleTemplateContent -> (string)\n\nThe content of the approval rule template.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule template.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule template was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule template was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule template.",
      "command_examples": "Examples\n\nTo create an approval rule template\n\nThe following create-approval-rule-template example creates an approval rule template named 2-approver-rule-for-main ``. The template requires two users who assume the role of ``CodeCommitReview to approve any pull request before it can be merged to the main branch.\n\naws codecommit create-approval-rule-template \\\n    --approval-rule-template-name 2-approver-rule-for-main \\\n    --approval-rule-template-description  \"Requires two developers from the team to approve the pull request if the destination branch is main\" \\\n    --approval-rule-template-content \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"DestinationReferences\\\": [\\\"refs/heads/main\\\"],\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\"\n\n\nOutput:\n\n{\n    \"approvalRuleTemplate\": {\n        \"approvalRuleTemplateName\": \"2-approver-rule-for-main\",\n        \"creationDate\": 1571356106.936,\n        \"approvalRuleTemplateId\": \"dd8b17fe-EXAMPLE\",\n        \"approvalRuleTemplateContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"DestinationReferences\\\": [\\\"refs/heads/main\\\"],\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n        \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n        \"approvalRuleTemplateDescription\": \"Requires two developers from the team to approve the pull request if the destination branch is main\",\n        \"lastModifiedDate\": 1571356106.936,\n        \"ruleContentSha256\": \"4711b576EXAMPLE\"\n    }\n}\n\n\nFor more information, see Create an Approval Rule Template in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "create-branch",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/create-branch.html",
      "command_description": "Description\n\nCreates a branch in a repository and points the branch to a commit.\n\nNote\n\nCalling the create branch operation does not set a repository’s default branch. To do this, call the update default branch operation.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-branch\n--repository-name <value>\n--branch-name <value>\n--commit-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--branch-name <value>",
        "--commit-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository in which you want to create the new branch.\n\n--branch-name (string)\n\nThe name of the new branch to create.\n\n--commit-id (string)\n\nThe ID of the commit to point the new branch to.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo create a branch\n\nThis example creates a branch in an AWS CodeCommit repository. This command produces output only if there are errors.\n\nCommand:\n\naws codecommit create-branch --repository-name MyDemoRepo --branch-name MyNewBranch --commit-id 317f8570EXAMPLE\n\n\nOutput:\n\nNone.\n"
    },
    {
      "command_name": "create-commit",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/create-commit.html",
      "command_description": "Description\n\nCreates a commit for a repository on the tip of a specified branch.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-commit\n--repository-name <value>\n--branch-name <value>\n[--parent-commit-id <value>]\n[--author-name <value>]\n[--email <value>]\n[--commit-message <value>]\n[--keep-empty-folders | --no-keep-empty-folders]\n[--put-files <value>]\n[--delete-files <value>]\n[--set-file-modes <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--branch-name <value>",
        "[--parent-commit-id <value>]",
        "[--author-name <value>]",
        "[--email <value>]",
        "[--commit-message <value>]",
        "[--keep-empty-folders | --no-keep-empty-folders]",
        "[--put-files <value>]",
        "[--delete-files <value>]",
        "[--set-file-modes <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you create the commit.\n\n--branch-name (string)\n\nThe name of the branch where you create the commit.\n\n--parent-commit-id (string)\n\nThe ID of the commit that is the parent of the commit you create. Not required if this is an empty repository.\n\n--author-name (string)\n\nThe name of the author who created the commit. This information is used as both the author and committer for the commit.\n\n--email (string)\n\nThe email address of the person who created the commit.\n\n--commit-message (string)\n\nThe commit message you want to include in the commit. Commit messages are limited to 256 KB. If no message is specified, a default message is used.\n\n--keep-empty-folders | --no-keep-empty-folders (boolean)\n\nIf the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a ..gitkeep file is created for empty folders. The default is false.\n\n--put-files (list)\n\nThe files to add or update in this commit.\n\n(structure)\n\nInformation about a file added or updated as part of a commit.\n\nfilePath -> (string)\n\nThe full path to the file in the repository, including the name of the file.\n\nfileMode -> (string)\n\nThe extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.\n\nfileContent -> (blob)\n\nThe content of the file, if a source file is not specified.\n\nsourceFile -> (structure)\n\nThe name and full path of the file that contains the changes you want to make as part of the commit, if you are not providing the file content directly.\n\nfilePath -> (string)\n\nThe full path to the file, including the name of the file.\n\nisMove -> (boolean)\n\nWhether to remove the source file from the parent commit.\n\nShorthand Syntax:\n\nfilePath=string,fileMode=string,fileContent=blob,sourceFile={filePath=string,isMove=boolean} ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"filePath\": \"string\",\n    \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\",\n    \"fileContent\": blob,\n    \"sourceFile\": {\n      \"filePath\": \"string\",\n      \"isMove\": true|false\n    }\n  }\n  ...\n]\n\n\n--delete-files (list)\n\nThe files to delete in this commit. These files still exist in earlier commits.\n\n(structure)\n\nA file that is deleted as part of a commit.\n\nfilePath -> (string)\n\nThe full path of the file to be deleted, including the name of the file.\n\nShorthand Syntax:\n\nfilePath=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"filePath\": \"string\"\n  }\n  ...\n]\n\n\n--set-file-modes (list)\n\nThe file modes to update for files in this commit.\n\n(structure)\n\nInformation about the file mode changes.\n\nfilePath -> (string)\n\nThe full path to the file, including the name of the file.\n\nfileMode -> (string)\n\nThe file mode for the file.\n\nShorthand Syntax:\n\nfilePath=string,fileMode=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"filePath\": \"string\",\n    \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommitId -> (string)\n\nThe full commit ID of the commit that contains your committed file changes.\n\ntreeId -> (string)\n\nThe full SHA-1 pointer of the tree information for the commit that contains the commited file changes.\n\nfilesAdded -> (list)\n\nThe files added as part of the committed file changes.\n\n(structure)\n\nA file to be added, updated, or deleted as part of a commit.\n\nabsolutePath -> (string)\n\nThe full path to the file to be added or updated, including the name of the file.\n\nblobId -> (string)\n\nThe blob ID that contains the file information.\n\nfileMode -> (string)\n\nThe extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.\n\nfilesUpdated -> (list)\n\nThe files updated as part of the commited file changes.\n\n(structure)\n\nA file to be added, updated, or deleted as part of a commit.\n\nabsolutePath -> (string)\n\nThe full path to the file to be added or updated, including the name of the file.\n\nblobId -> (string)\n\nThe blob ID that contains the file information.\n\nfileMode -> (string)\n\nThe extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.\n\nfilesDeleted -> (list)\n\nThe files deleted as part of the committed file changes.\n\n(structure)\n\nA file to be added, updated, or deleted as part of a commit.\n\nabsolutePath -> (string)\n\nThe full path to the file to be added or updated, including the name of the file.\n\nblobId -> (string)\n\nThe blob ID that contains the file information.\n\nfileMode -> (string)\n\nThe extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.",
      "command_examples": "Examples\n\nTo create a commit\n\nThe following create-commit example demonstrates how to create an initial commit for a repository that adds a readme.md file to a repository named MyDemoRepo in the main branch.\n\naws codecommit create-commit \\\n    --repository-name MyDemoRepo \\\n    --branch-name main \\\n    --put-files \"filePath=readme.md,fileContent='Welcome to our team repository.'\"\n\n\nOutput:\n\n{\n    \"filesAdded\": [\n        {\n            \"blobId\": \"5e1c309d-EXAMPLE\",\n            \"absolutePath\": \"readme.md\",\n            \"fileMode\": \"NORMAL\"\n        }\n    ],\n    \"commitId\": \"4df8b524-EXAMPLE\",\n    \"treeId\": \"55b57003-EXAMPLE\",\n    \"filesDeleted\": [],\n    \"filesUpdated\": []\n}\n\n\nFor more information, see Create a Commit in AWS CodeCommit in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "create-pull-request",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/create-pull-request.html",
      "command_description": "Description\n\nCreates a pull request in the specified repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-pull-request\n--title <value>\n[--description <value>]\n--targets <value>\n[--client-request-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--title <value>",
        "[--description <value>]",
        "--targets <value>",
        "[--client-request-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--title (string)\n\nThe title of the pull request. This title is used to identify the pull request to other users in the repository.\n\n--description (string)\n\nA description of the pull request.\n\n--targets (list)\n\nThe targets for the pull request, including the source of the code to be reviewed (the source branch) and the destination where the creator of the pull request intends the code to be merged after the pull request is closed (the destination branch).\n\n(structure)\n\nReturns information about a target for a pull request.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the pull request.\n\nsourceReference -> (string)\n\nThe branch of the repository that contains the changes for the pull request. Also known as the source branch.\n\ndestinationReference -> (string)\n\nThe branch of the repository where the pull request changes are merged. Also known as the destination branch.\n\nShorthand Syntax:\n\nrepositoryName=string,sourceReference=string,destinationReference=string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"repositoryName\": \"string\",\n    \"sourceReference\": \"string\",\n    \"destinationReference\": \"string\"\n  }\n  ...\n]\n\n\n--client-request-token (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\nNote\n\nThe AWS SDKs prepopulate client request tokens. If you are using an AWS SDK, an idempotency token is created for you.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npullRequest -> (structure)\n\nInformation about the newly created pull request.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\ntitle -> (string)\n\nThe user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users.\n\ndescription -> (string)\n\nThe user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.\n\nlastActivityDate -> (timestamp)\n\nThe day and time of the last user or system activity on the pull request, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the pull request was originally created, in timestamp format.\n\npullRequestStatus -> (string)\n\nThe status of the pull request. Pull request status can only change from OPEN to CLOSED .\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the user who created the pull request.\n\npullRequestTargets -> (list)\n\nThe targets of the pull request, including the source branch and destination branch for the pull request.\n\n(structure)\n\nReturns information about a pull request target.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the pull request source and destination branches.\n\nsourceReference -> (string)\n\nThe branch of the repository that contains the changes for the pull request. Also known as the source branch.\n\ndestinationReference -> (string)\n\nThe branch of the repository where the pull request changes are merged. Also known as the destination branch.\n\ndestinationCommit -> (string)\n\nThe full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.\n\nsourceCommit -> (string)\n\nThe full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.\n\nmergeBase -> (string)\n\nThe commit ID of the most recent commit that the source branch and the destination branch have in common.\n\nmergeMetadata -> (structure)\n\nReturns metadata about the state of the merge, including whether the merge has been made.\n\nisMerged -> (boolean)\n\nA Boolean value indicating whether the merge has been made.\n\nmergedBy -> (string)\n\nThe Amazon Resource Name (ARN) of the user who merged the branches.\n\nmergeCommitId -> (string)\n\nThe commit ID for the merge commit, if any.\n\nmergeOption -> (string)\n\nThe merge strategy used in the merge.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\nrevisionId -> (string)\n\nThe system-generated revision ID for the pull request.\n\napprovalRules -> (list)\n\nThe approval rules applied to the pull request.\n\n(structure)\n\nReturns information about an approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.\n\noriginApprovalRuleTemplate -> (structure)\n\nThe approval rule template used to create the rule.\n\napprovalRuleTemplateId -> (string)\n\nThe ID of the template that created the approval rule.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the template that created the approval rule.",
      "command_examples": "Examples\n\nTo create a pull request\n\nThe following create-pull-request example creates a pull request named ‘Pronunciation difficulty analyzer’ with a description of ‘Please review these changes by Tuesday’ that targets the ‘jane-branch’ source branch and is to be merged to the default branch ‘main’ in an AWS CodeCommit repository named ‘MyDemoRepo’.\n\naws codecommit create-pull-request \\\n    --title \"My Pull Request\" \\\n    --description \"Please review these changes by Tuesday\" \\\n    --client-request-token 123Example \\\n    --targets repositoryName=MyDemoRepo,sourceReference=MyNewBranch\n\n\nOutput:\n\n{\n    \"pullRequest\": {\n        \"approvalRules\": [\n            {\n                \"approvalRuleContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"DestinationReferences\\\": [\\\"refs/heads/main\\\"],\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n                \"approvalRuleId\": \"dd8b17fe-EXAMPLE\",\n                \"approvalRuleName\": \"2-approver-rule-for-main\",\n                \"creationDate\": 1571356106.936,\n                \"lastModifiedDate\": 571356106.936,\n                \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n                \"originApprovalRuleTemplate\": {\n                    \"approvalRuleTemplateId\": \"dd3d22fe-EXAMPLE\",\n                    \"approvalRuleTemplateName\": \"2-approver-rule-for-main\"\n                },\n                \"ruleContentSha256\": \"4711b576EXAMPLE\"\n            }\n        ],\n        \"authorArn\": \"arn:aws:iam::111111111111:user/Jane_Doe\",\n        \"description\": \"Please review these changes by Tuesday\",\n        \"title\": \"Pronunciation difficulty analyzer\",\n        \"pullRequestTargets\": [\n            {\n                \"destinationCommit\": \"5d036259EXAMPLE\",\n                \"destinationReference\": \"refs/heads/main\",\n                \"repositoryName\": \"MyDemoRepo\",\n                \"sourceCommit\": \"317f8570EXAMPLE\",\n                \"sourceReference\": \"refs/heads/jane-branch\",\n                \"mergeMetadata\": {\n                    \"isMerged\": false\n                }\n            }\n        ],\n        \"lastActivityDate\": 1508962823.285,\n        \"pullRequestId\": \"42\",\n        \"clientRequestToken\": \"123Example\",\n        \"pullRequestStatus\": \"OPEN\",\n        \"creationDate\": 1508962823.285\n    }\n}\n"
    },
    {
      "command_name": "create-pull-request-approval-rule",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/create-pull-request-approval-rule.html",
      "command_description": "Description\n\nCreates an approval rule for a pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-pull-request-approval-rule\n--pull-request-id <value>\n--approval-rule-name <value>\n--approval-rule-content <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--approval-rule-name <value>",
        "--approval-rule-content <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request for which you want to create the approval rule.\n\n--approval-rule-name (string)\n\nThe name for the approval rule.\n\n--approval-rule-content (string)\n\nThe content of the approval rule, including the number of approvals needed and the structure of an approval pool defined for approvals, if any. For more information about approval pools, see the AWS CodeCommit User Guide.\n\nNote\n\nWhen you create the content of the approval rule, you can specify approvers in an approval pool in one of two ways:\n\nCodeCommitApprovers : This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account 123456789012 and Mary_Major , all of the following would be counted as approvals coming from that user:\n\nAn IAM user in the account (arn:aws:iam::123456789012 :user/Mary_Major )\n\nA federated user identified in IAM as Mary_Major (arn:aws:sts::123456789012 :federated-user/Mary_Major )\n\nThis option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of Mary_Major (arn:aws:sts::123456789012 :assumed-role/CodeCommitReview/Mary_Major ) unless you include a wildcard (*Mary_Major).\n\nFully qualified ARN : This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role.\n\nFor more information about IAM ARNs, wildcards, and formats, see IAM Identifiers in the IAM User Guide .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRule -> (structure)\n\nInformation about the created approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.\n\noriginApprovalRuleTemplate -> (structure)\n\nThe approval rule template used to create the rule.\n\napprovalRuleTemplateId -> (string)\n\nThe ID of the template that created the approval rule.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the template that created the approval rule.",
      "command_examples": "Examples\n\nTo create an approval rule for a pull request\n\nThe following create-pull-request-approval-rule example creates an approval rule named Require two approved approvers for the specified pull request. The rule specifies that two approvals are required from an approval pool. The pool includes all users who access CodeCommit by assuming the role of CodeCommitReview in the 123456789012 AWS account. It also includes either an IAM user or federated user named Nikhil_Jayashankar from the same AWS account.\n\naws codecommit create-pull-request-approval-rule  \\\n    --approval-rule-name \"Require two approved approvers\"  \\\n    --approval-rule-content \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"CodeCommitApprovers:123456789012:Nikhil_Jayashankar\\\", \\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\"\n\n\nOutput:\n\n{\n    \"approvalRule\": {\n        \"approvalRuleName\": \"Require two approved approvers\",\n        \"lastModifiedDate\": 1570752871.932,\n        \"ruleContentSha256\": \"7c44e6ebEXAMPLE\",\n        \"creationDate\": 1570752871.932,\n        \"approvalRuleId\": \"aac33506-EXAMPLE\",\n        \"approvalRuleContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"CodeCommitApprovers:123456789012:Nikhil_Jayashankar\\\", \\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n        \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\"\n    }\n}\n\n\nFor more information, see Create an Approval Rule in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "create-repository",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/create-repository.html",
      "command_description": "Description\n\nCreates a new, empty repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-repository\n--repository-name <value>\n[--repository-description <value>]\n[--tags <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--repository-description <value>]",
        "[--tags <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the new repository to be created.\n\nNote\n\nThe repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. For more information about the limits on repository names, see Limits in the AWS CodeCommit User Guide . The suffix .git is prohibited.\n\n--repository-description (string)\n\nA comment or description about the new repository.\n\nNote\n\nThe description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.\n\n--tags (map)\n\nOne or more tag key-value pairs to use when tagging this repository.\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nrepositoryMetadata -> (structure)\n\nInformation about the newly created repository.\n\naccountId -> (string)\n\nThe ID of the AWS account associated with the repository.\n\nrepositoryId -> (string)\n\nThe ID of the repository.\n\nrepositoryName -> (string)\n\nThe repository’s name.\n\nrepositoryDescription -> (string)\n\nA comment or description about the repository.\n\ndefaultBranch -> (string)\n\nThe repository’s default branch name.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the repository was last modified, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the repository was created, in timestamp format.\n\ncloneUrlHttp -> (string)\n\nThe URL to use for cloning the repository over HTTPS.\n\ncloneUrlSsh -> (string)\n\nThe URL to use for cloning the repository over SSH.\n\nArn -> (string)\n\nThe Amazon Resource Name (ARN) of the repository.",
      "command_examples": "Examples\n\nTo create a repository\n\nThis example creates a repository and associates it with the user’s AWS account.\n\nCommand:\n\naws codecommit create-repository --repository-name MyDemoRepo --repository-description \"My demonstration repository\"\n\n\nOutput:\n\n{\n    \"repositoryMetadata\": {\n        \"repositoryName\": \"MyDemoRepo\",\n                \"cloneUrlSsh\": \"ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/MyDemoRepo\",\n                \"lastModifiedDate\": 1444766838.027,\n        \"repositoryDescription\": \"My demonstration repository\",\n                \"cloneUrlHttp\": \"https://git-codecommit.us-east-1.amazonaws.com/v1/repos/MyDemoRepo\",\n        \"repositoryId\": \"f7579e13-b83e-4027-aaef-650c0EXAMPLE\",\n                \"Arn\": \"arn:aws:codecommit:us-east-1:111111111111EXAMPLE:MyDemoRepo\",\n        \"accountId\": \"111111111111\"\n    }\n}\n"
    },
    {
      "command_name": "create-unreferenced-merge-commit",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/create-unreferenced-merge-commit.html",
      "command_description": "Description\n\nCreates an unreferenced commit that represents the result of merging two branches using a specified merge strategy. This can help you determine the outcome of a potential merge. This API cannot be used with the fast-forward merge strategy because that strategy does not create a merge commit.\n\nNote\n\nThis unreferenced merge commit can only be accessed using the GetCommit API or through git commands such as git fetch. To retrieve this commit, you must specify its commit ID or otherwise reference it.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  create-unreferenced-merge-commit\n--repository-name <value>\n--source-commit-specifier <value>\n--destination-commit-specifier <value>\n--merge-option <value>\n[--conflict-detail-level <value>]\n[--conflict-resolution-strategy <value>]\n[--author-name <value>]\n[--email <value>]\n[--commit-message <value>]\n[--keep-empty-folders | --no-keep-empty-folders]\n[--conflict-resolution <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--source-commit-specifier <value>",
        "--destination-commit-specifier <value>",
        "--merge-option <value>",
        "[--conflict-detail-level <value>]",
        "[--conflict-resolution-strategy <value>]",
        "[--author-name <value>]",
        "[--email <value>]",
        "[--commit-message <value>]",
        "[--keep-empty-folders | --no-keep-empty-folders]",
        "[--conflict-resolution <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you want to create the unreferenced merge commit.\n\n--source-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--destination-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--merge-option (string)\n\nThe merge option or strategy you want to use to merge the code.\n\nPossible values:\n\nFAST_FORWARD_MERGE\n\nSQUASH_MERGE\n\nTHREE_WAY_MERGE\n\n--conflict-detail-level (string)\n\nThe level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.\n\nPossible values:\n\nFILE_LEVEL\n\nLINE_LEVEL\n\n--conflict-resolution-strategy (string)\n\nSpecifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.\n\nPossible values:\n\nNONE\n\nACCEPT_SOURCE\n\nACCEPT_DESTINATION\n\nAUTOMERGE\n\n--author-name (string)\n\nThe name of the author who created the unreferenced commit. This information is used as both the author and committer for the commit.\n\n--email (string)\n\nThe email address for the person who created the unreferenced commit.\n\n--commit-message (string)\n\nThe commit message for the unreferenced commit.\n\n--keep-empty-folders | --no-keep-empty-folders (boolean)\n\nIf the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false.\n\n--conflict-resolution (structure)\n\nIf AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.\n\nreplaceContents -> (list)\n\nFiles to have content replaced as part of the merge conflict resolution.\n\n(structure)\n\nInformation about a replacement content entry in the conflict of a merge or pull request operation.\n\nfilePath -> (string)\n\nThe path of the conflicting file.\n\nreplacementType -> (string)\n\nThe replacement type to use when determining how to resolve the conflict.\n\ncontent -> (blob)\n\nThe base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.\n\nfileMode -> (string)\n\nThe file mode to apply during conflict resoltion.\n\ndeleteFiles -> (list)\n\nFiles to be deleted as part of the merge conflict resolution.\n\n(structure)\n\nA file that is deleted as part of a commit.\n\nfilePath -> (string)\n\nThe full path of the file to be deleted, including the name of the file.\n\nsetFileModes -> (list)\n\nFile modes that are set as part of the merge conflict resolution.\n\n(structure)\n\nInformation about the file mode changes.\n\nfilePath -> (string)\n\nThe full path to the file, including the name of the file.\n\nfileMode -> (string)\n\nThe file mode for the file.\n\nShorthand Syntax:\n\nreplaceContents=[{filePath=string,replacementType=string,content=blob,fileMode=string},{filePath=string,replacementType=string,content=blob,fileMode=string}],deleteFiles=[{filePath=string},{filePath=string}],setFileModes=[{filePath=string,fileMode=string},{filePath=string,fileMode=string}]\n\n\nJSON Syntax:\n\n{\n  \"replaceContents\": [\n    {\n      \"filePath\": \"string\",\n      \"replacementType\": \"KEEP_BASE\"|\"KEEP_SOURCE\"|\"KEEP_DESTINATION\"|\"USE_NEW_CONTENT\",\n      \"content\": blob,\n      \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n    }\n    ...\n  ],\n  \"deleteFiles\": [\n    {\n      \"filePath\": \"string\"\n    }\n    ...\n  ],\n  \"setFileModes\": [\n    {\n      \"filePath\": \"string\",\n      \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n    }\n    ...\n  ]\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommitId -> (string)\n\nThe full commit ID of the commit that contains your merge results.\n\ntreeId -> (string)\n\nThe full SHA-1 pointer of the tree information for the commit that contains the merge results.",
      "command_examples": "Examples\n\nTo create an unreferenced commit that represents the result of merging two commit specifiers\n\nThe following create-unreferenced-merge-commit example creates a commit that represents the results of a merge between a source branch named bugfix-1234 with a destination branch named main using the THREE_WAY_MERGE strategy in a repository named MyDemoRepo.\n\naws codecommit create-unreferenced-merge-commit \\\n    --source-commit-specifier bugfix-1234 \\\n    --destination-commit-specifier main \\\n    --merge-option THREE_WAY_MERGE \\\n    --repository-name MyDemoRepo \\\n    --name \"Maria Garcia\" \\\n    --email \"maria_garcia@example.com\" \\\n    --commit-message \"Testing the results of this merge.\"\n\n\nOutput:\n\n{\n    \"commitId\": \"4f178133EXAMPLE\",\n    \"treeId\": \"389765daEXAMPLE\"\n}\n\n\nFor more information, see Resolve Conflicts in a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "credential-helper",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/credential-helper/index.html",
      "command_description": "Description\n\nProvide a SigV4 compatible user name and password for git smart HTTP These commands are consumed by git and should not used directly. Erase and Store are no-ops. Get is operation to generate credentials to authenticate AWS CodeCommit. Run “aws codecommit credential-helper help” for details\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\naws codecommit credential-helper\n",
      "command_options": [],
      "command_options_description": "Options\n\nNone\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_examples": "Examples\n\nTo set up the credential helper included in the AWS CLI with AWS CodeCommit\n\nThe credential-helper utility is not designed to be called directly from the AWS CLI. Instead it is intended to be used as a parameter with the git config command to set up your local computer. It enables Git to use HTTPS and a cryptographically signed version of your IAM user credentials or Amazon EC2 instance role whenever Git needs to authenticate with AWS to interact with CodeCommit repositories.\n\ngit config --global credential.helper '!aws codecommit credential-helper $@'\ngit config --global credential.UseHttpPath true\n\n\nOutput:\n\n[credential]\n    helper = !aws codecommit credential-helper $@\n    UseHttpPath = true\n\n\nFor more information, see Setting up for AWS CodeCommit Using Other Methods in the AWS CodeCommit User Guide. Review the content carefully, and then follow the procedures in one of the following topics: For HTTPS Connections on Linux, macOS, or Unix or For HTTPS Connections on Windows in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "delete-approval-rule-template",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/delete-approval-rule-template.html",
      "command_description": "Description\n\nDeletes a specified approval rule template. Deleting a template does not remove approval rules on pull requests already created with the template.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-approval-rule-template\n--approval-rule-template-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--approval-rule-template-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--approval-rule-template-name (string)\n\nThe name of the approval rule template to delete.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRuleTemplateId -> (string)\n\nThe system-generated ID of the deleted approval rule template. If the template has been previously deleted, the only response is a 200 OK.",
      "command_examples": "Examples\n\nTo delete an approval rule template\n\nThe following delete-approval-rule-template example deletes the specified approval rule template.\n\naws codecommit delete-approval-rule-template  \\\n    --approval-rule-template-name 1-approver-for-all-pull-requests\n\n\nOutput:\n\n{\n    \"approvalRuleTemplateId\": \"41de97b7-EXAMPLE\"\n}\n\n\nFor more information, see Delete an Approval Rule Template in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "delete-branch",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/delete-branch.html",
      "command_description": "Description\n\nDeletes a branch from a repository, unless that branch is the default branch for the repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-branch\n--repository-name <value>\n--branch-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--branch-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository that contains the branch to be deleted.\n\n--branch-name (string)\n\nThe name of the branch to delete.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ndeletedBranch -> (structure)\n\nInformation about the branch deleted by the operation, including the branch name and the commit ID that was the tip of the branch.\n\nbranchName -> (string)\n\nThe name of the branch.\n\ncommitId -> (string)\n\nThe ID of the last commit made to the branch.",
      "command_examples": "Examples\n\nTo delete a branch\n\nThis example shows how to delete a branch in an AWS CodeCommit repository.\n\nCommand:\n\naws codecommit delete-branch --repository-name MyDemoRepo --branch-name MyNewBranch\n\n\nOutput:\n\n{\n  \"branch\": {\n      \"commitId\": \"317f8570EXAMPLE\",\n      \"branchName\": \"MyNewBranch\"\n  }\n}\n"
    },
    {
      "command_name": "delete-comment-content",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/delete-comment-content.html",
      "command_description": "Description\n\nDeletes the content of a comment made on a change, file, or commit in a repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-comment-content\n--comment-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--comment-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--comment-id (string)\n\nThe unique, system-generated ID of the comment. To get this ID, use GetCommentsForComparedCommit or GetCommentsForPullRequest .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncomment -> (structure)\n\nInformation about the comment you just deleted.\n\ncommentId -> (string)\n\nThe system-generated comment ID.\n\ncontent -> (string)\n\nThe content of the comment.\n\ninReplyTo -> (string)\n\nThe ID of the comment for which this comment is a reply, if any.\n\ncreationDate -> (timestamp)\n\nThe date and time the comment was created, in timestamp format.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the comment was most recently modified, in timestamp format.\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the person who posted the comment.\n\ndeleted -> (boolean)\n\nA Boolean value indicating whether the comment has been deleted.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\ncallerReactions -> (list)\n\nThe emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API.\n\n(string)\n\nreactionCounts -> (map)\n\nA string to integer map that represents the number of individual users who have responded to a comment with the specified reactions.\n\nkey -> (string)\n\nvalue -> (integer)",
      "command_examples": "Examples\n\nTo delete the content of a comment\n\nYou can only delete the content of a comment if you created the comment. This example demonstrates how to delete the content of a comment with the system-generated ID of ff30b348EXAMPLEb9aa670f.\n\naws codecommit delete-comment-content \\\n    --comment-id ff30b348EXAMPLEb9aa670f\n\n\nOutput:\n\n{\n    \"comment\": {\n        \"creationDate\": 1508369768.142,\n        \"deleted\": true,\n        \"lastModifiedDate\": 1508369842.278,\n        \"clientRequestToken\": \"123Example\",\n        \"commentId\": \"ff30b348EXAMPLEb9aa670f\",\n        \"authorArn\": \"arn:aws:iam::111111111111:user/Li_Juan\",\n        \"callerReactions\": [],\n        \"reactionCounts\":\n        {\n            \"CLAP\" : 1\n        }\n    }\n}\n"
    },
    {
      "command_name": "delete-file",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/delete-file.html",
      "command_description": "Description\n\nDeletes a specified file from a specified branch. A commit is created on the branch that contains the revision. The file still exists in the commits earlier to the commit that contains the deletion.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-file\n--repository-name <value>\n--branch-name <value>\n--file-path <value>\n--parent-commit-id <value>\n[--keep-empty-folders | --no-keep-empty-folders]\n[--commit-message <value>]\n[--name <value>]\n[--email <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--branch-name <value>",
        "--file-path <value>",
        "--parent-commit-id <value>",
        "[--keep-empty-folders | --no-keep-empty-folders]",
        "[--commit-message <value>]",
        "[--name <value>]",
        "[--email <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository that contains the file to delete.\n\n--branch-name (string)\n\nThe name of the branch where the commit that deletes the file is made.\n\n--file-path (string)\n\nThe fully qualified path to the file that to be deleted, including the full name and extension of that file. For example, /examples/file.md is a fully qualified path to a file named file.md in a folder named examples.\n\n--parent-commit-id (string)\n\nThe ID of the commit that is the tip of the branch where you want to create the commit that deletes the file. This must be the HEAD commit for the branch. The commit that deletes the file is created from this commit ID.\n\n--keep-empty-folders | --no-keep-empty-folders (boolean)\n\nIf a file is the only object in the folder or directory, specifies whether to delete the folder or directory that contains the file. By default, empty folders are deleted. This includes empty folders that are part of the directory structure. For example, if the path to a file is dir1/dir2/dir3/dir4, and dir2 and dir3 are empty, deleting the last file in dir4 also deletes the empty folders dir4, dir3, and dir2.\n\n--commit-message (string)\n\nThe commit message you want to include as part of deleting the file. Commit messages are limited to 256 KB. If no message is specified, a default message is used.\n\n--name (string)\n\nThe name of the author of the commit that deletes the file. If no name is specified, the user’s ARN is used as the author name and committer name.\n\n--email (string)\n\nThe email address for the commit that deletes the file. If no email address is specified, the email address is left blank.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommitId -> (string)\n\nThe full commit ID of the commit that contains the change that deletes the file.\n\nblobId -> (string)\n\nThe blob ID removed from the tree as part of deleting the file.\n\ntreeId -> (string)\n\nThe full SHA-1 pointer of the tree information for the commit that contains the delete file change.\n\nfilePath -> (string)\n\nThe fully qualified path to the file to be deleted, including the full name and extension of that file.",
      "command_examples": "Examples\n\nTo delete a file\n\nThe following delete-file example demonstrates how to delete a file named README.md from a branch named main with a most recent commit ID of c5709475EXAMPLE in a repository named MyDemoRepo.\n\naws codecommit delete-file \\\n    --repository-name MyDemoRepo \\\n    --branch-name main \\\n    --file-path README.md \\\n    --parent-commit-id c5709475EXAMPLE\n\n\nOutput:\n\n{\n    \"blobId\":\"559b44fEXAMPLE\",\n    \"commitId\":\"353cf655EXAMPLE\",\n    \"filePath\":\"README.md\",\n    \"treeId\":\"6bc824cEXAMPLE\"\n}\n\n\nFor more information, see Edit or Delete a File in AWS CodeCommit in the AWS CodeCommit API Reference guide."
    },
    {
      "command_name": "delete-pull-request-approval-rule",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/delete-pull-request-approval-rule.html",
      "command_description": "Description\n\nDeletes an approval rule from a specified pull request. Approval rules can be deleted from a pull request only if the pull request is open, and if the approval rule was created specifically for a pull request and not generated from an approval rule template associated with the repository where the pull request was created. You cannot delete an approval rule from a merged or closed pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-pull-request-approval-rule\n--pull-request-id <value>\n--approval-rule-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--approval-rule-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request that contains the approval rule you want to delete.\n\n--approval-rule-name (string)\n\nThe name of the approval rule you want to delete.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRuleId -> (string)\n\nThe ID of the deleted approval rule.\n\nNote\n\nIf the approval rule was deleted in an earlier API call, the response is 200 OK without content.",
      "command_examples": "Examples\n\nTo delete an approval rule for a pull request\n\nThe following delete-pull-request-approval-rule example deletes the approval rule named My Approval Rule for the specified pull request.\n\naws codecommit delete-pull-request-approval-rule  \\\n    --approval-rule-name \"My Approval Rule\"  \\\n    --pull-request-id 15\n\n\nOutput:\n\n{\n    \"approvalRuleId\": \"077d8e8a8-EXAMPLE\"\n}\n\n\nFor more information, see Edit or Delete an Approval Rule in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "delete-repository",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/delete-repository.html",
      "command_description": "Description\n\nDeletes a repository. If a specified repository was already deleted, a null repository ID is returned.\n\nWarning\n\nDeleting a repository also deletes all associated objects and metadata. After a repository is deleted, all future push calls to the deleted repository fail.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  delete-repository\n--repository-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository to delete.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nrepositoryId -> (string)\n\nThe ID of the repository that was deleted.",
      "command_examples": "Examples\n\nTo delete a repository\n\nThis example shows how to delete an AWS CodeCommit repository.\n\nCommand:\n\naws codecommit delete-repository --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n  \"repositoryId\": \"f7579e13-b83e-4027-aaef-650c0EXAMPLE\"\n}\n"
    },
    {
      "command_name": "describe-merge-conflicts",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/describe-merge-conflicts.html",
      "command_description": "Description\n\nReturns information about one or more merge conflicts in the attempted merge of two commit specifiers using the squash or three-way merge strategy. If the merge option for the attempted merge is specified as FAST_FORWARD_MERGE, an exception is thrown.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  describe-merge-conflicts\n--repository-name <value>\n--destination-commit-specifier <value>\n--source-commit-specifier <value>\n--merge-option <value>\n[--max-merge-hunks <value>]\n--file-path <value>\n[--conflict-detail-level <value>]\n[--conflict-resolution-strategy <value>]\n[--next-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--destination-commit-specifier <value>",
        "--source-commit-specifier <value>",
        "--merge-option <value>",
        "[--max-merge-hunks <value>]",
        "--file-path <value>",
        "[--conflict-detail-level <value>]",
        "[--conflict-resolution-strategy <value>]",
        "[--next-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you want to get information about a merge conflict.\n\n--destination-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--source-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--merge-option (string)\n\nThe merge option or strategy you want to use to merge the code.\n\nPossible values:\n\nFAST_FORWARD_MERGE\n\nSQUASH_MERGE\n\nTHREE_WAY_MERGE\n\n--max-merge-hunks (integer)\n\nThe maximum number of merge hunks to include in the output.\n\n--file-path (string)\n\nThe path of the target files used to describe the conflicts.\n\n--conflict-detail-level (string)\n\nThe level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.\n\nPossible values:\n\nFILE_LEVEL\n\nLINE_LEVEL\n\n--conflict-resolution-strategy (string)\n\nSpecifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.\n\nPossible values:\n\nNONE\n\nACCEPT_SOURCE\n\nACCEPT_DESTINATION\n\nAUTOMERGE\n\n--next-token (string)\n\nAn enumeration token that, when provided in a request, returns the next batch of the results.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nconflictMetadata -> (structure)\n\nContains metadata about the conflicts found in the merge.\n\nfilePath -> (string)\n\nThe path of the file that contains conflicts.\n\nfileSizes -> (structure)\n\nThe file sizes of the file in the source, destination, and base of the merge.\n\nsource -> (long)\n\nThe size of a file in the source of a merge or pull request.\n\ndestination -> (long)\n\nThe size of a file in the destination of a merge or pull request.\n\nbase -> (long)\n\nThe size of a file in the base of a merge or pull request.\n\nfileModes -> (structure)\n\nThe file modes of the file in the source, destination, and base of the merge.\n\nsource -> (string)\n\nThe file mode of a file in the source of a merge or pull request.\n\ndestination -> (string)\n\nThe file mode of a file in the destination of a merge or pull request.\n\nbase -> (string)\n\nThe file mode of a file in the base of a merge or pull request.\n\nobjectTypes -> (structure)\n\nInformation about any object type conflicts in a merge operation.\n\nsource -> (string)\n\nThe type of the object in the source branch.\n\ndestination -> (string)\n\nThe type of the object in the destination branch.\n\nbase -> (string)\n\nThe type of the object in the base commit of the merge.\n\nnumberOfConflicts -> (integer)\n\nThe number of conflicts, including both hunk conflicts and metadata conflicts.\n\nisBinaryFile -> (structure)\n\nA boolean value (true or false) indicating whether the file is binary or textual in the source, destination, and base of the merge.\n\nsource -> (boolean)\n\nThe binary or non-binary status of file in the source of a merge or pull request.\n\ndestination -> (boolean)\n\nThe binary or non-binary status of a file in the destination of a merge or pull request.\n\nbase -> (boolean)\n\nThe binary or non-binary status of a file in the base of a merge or pull request.\n\ncontentConflict -> (boolean)\n\nA boolean value indicating whether there are conflicts in the content of a file.\n\nfileModeConflict -> (boolean)\n\nA boolean value indicating whether there are conflicts in the file mode of a file.\n\nobjectTypeConflict -> (boolean)\n\nA boolean value (true or false) indicating whether there are conflicts between the branches in the object type of a file, folder, or submodule.\n\nmergeOperations -> (structure)\n\nWhether an add, modify, or delete operation caused the conflict between the source and destination of the merge.\n\nsource -> (string)\n\nThe operation (add, modify, or delete) on a file in the source of a merge or pull request.\n\ndestination -> (string)\n\nThe operation on a file in the destination of a merge or pull request.\n\nmergeHunks -> (list)\n\nA list of merge hunks of the differences between the files or lines.\n\n(structure)\n\nInformation about merge hunks in a merge or pull request operation.\n\nisConflict -> (boolean)\n\nA Boolean value indicating whether a combination of hunks contains a conflict. Conflicts occur when the same file or the same lines in a file were modified in both the source and destination of a merge or pull request. Valid values include true, false, and null. True when the hunk represents a conflict and one or more files contains a line conflict. File mode conflicts in a merge do not set this to true.\n\nsource -> (structure)\n\nInformation about the merge hunk in the source of a merge or pull request.\n\nstartLine -> (integer)\n\nThe start position of the hunk in the merge result.\n\nendLine -> (integer)\n\nThe end position of the hunk in the merge result.\n\nhunkContent -> (string)\n\nThe base-64 encoded content of the hunk merged region that might contain a conflict.\n\ndestination -> (structure)\n\nInformation about the merge hunk in the destination of a merge or pull request.\n\nstartLine -> (integer)\n\nThe start position of the hunk in the merge result.\n\nendLine -> (integer)\n\nThe end position of the hunk in the merge result.\n\nhunkContent -> (string)\n\nThe base-64 encoded content of the hunk merged region that might contain a conflict.\n\nbase -> (structure)\n\nInformation about the merge hunk in the base of a merge or pull request.\n\nstartLine -> (integer)\n\nThe start position of the hunk in the merge result.\n\nendLine -> (integer)\n\nThe end position of the hunk in the merge result.\n\nhunkContent -> (string)\n\nThe base-64 encoded content of the hunk merged region that might contain a conflict.\n\nnextToken -> (string)\n\nAn enumeration token that can be used in a request to return the next batch of the results.\n\ndestinationCommitId -> (string)\n\nThe commit ID of the destination commit specifier that was used in the merge evaluation.\n\nsourceCommitId -> (string)\n\nThe commit ID of the source commit specifier that was used in the merge evaluation.\n\nbaseCommitId -> (string)\n\nThe commit ID of the merge base.",
      "command_examples": "Examples\n\nTo get detailed information about merge conflicts\n\nThe following describe-merge-conflicts example determines the merge conflicts for a file named readme.md in the specified source branch and destination branch using the THREE_WAY_MERGE strategy.\n\naws codecommit describe-merge-conflicts \\\n    --source-commit-specifier feature-randomizationfeature \\\n    --destination-commit-specifier main \\\n    --merge-option THREE_WAY_MERGE \\\n    --file-path readme.md \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"conflictMetadata\": {\n        \"filePath\": \"readme.md\",\n        \"fileSizes\": {\n            \"source\": 139,\n            \"destination\": 230,\n            \"base\": 85\n        },\n        \"fileModes\": {\n            \"source\": \"NORMAL\",\n            \"destination\": \"NORMAL\",\n            \"base\": \"NORMAL\"\n        },\n        \"objectTypes\": {\n            \"source\": \"FILE\",\n            \"destination\": \"FILE\",\n            \"base\": \"FILE\"\n        },\n        \"numberOfConflicts\": 1,\n        \"isBinaryFile\": {\n            \"source\": false,\n            \"destination\": false,\n            \"base\": false\n        },\n        \"contentConflict\": true,\n        \"fileModeConflict\": false,\n        \"objectTypeConflict\": false,\n        \"mergeOperations\": {\n            \"source\": \"M\",\n            \"destination\": \"M\"\n        }\n    },\n    \"mergeHunks\": [\n        {\n            \"isConflict\": true,\n            \"source\": {\n                \"startLine\": 0,\n                \"endLine\": 3,\n                \"hunkContent\": \"VGhpcyBpEXAMPLE=\"\n            },\n            \"destination\": {\n                \"startLine\": 0,\n                \"endLine\": 1,\n                \"hunkContent\": \"VXNlIHRoEXAMPLE=\"\n            }\n        }\n    ],\n    \"destinationCommitId\": \"86958e0aEXAMPLE\",\n    \"sourceCommitId\": \"6ccd57fdEXAMPLE\",\n    \"baseCommitId\": \"767b69580EXAMPLE\"\n}\n\n\nFor more information, see Resolve Conflicts in a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "describe-pull-request-events",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/describe-pull-request-events.html",
      "command_description": "Description\n\nReturns information about one or more pull request events.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\ndescribe-pull-request-events is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: pullRequestEvents",
      "command_synopsis": "Synopsis\n  describe-pull-request-events\n--pull-request-id <value>\n[--pull-request-event-type <value>]\n[--actor-arn <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "[--pull-request-event-type <value>]",
        "[--actor-arn <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request. To get this ID, use ListPullRequests .\n\n--pull-request-event-type (string)\n\nOptional. The pull request event type about which you want to return information.\n\nPossible values:\n\nPULL_REQUEST_CREATED\n\nPULL_REQUEST_STATUS_CHANGED\n\nPULL_REQUEST_SOURCE_REFERENCE_UPDATED\n\nPULL_REQUEST_MERGE_STATE_CHANGED\n\nPULL_REQUEST_APPROVAL_RULE_CREATED\n\nPULL_REQUEST_APPROVAL_RULE_UPDATED\n\nPULL_REQUEST_APPROVAL_RULE_DELETED\n\nPULL_REQUEST_APPROVAL_RULE_OVERRIDDEN\n\nPULL_REQUEST_APPROVAL_STATE_CHANGED\n\n--actor-arn (string)\n\nThe Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with more commits or changing the status of a pull request.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npullRequestEvents -> (list)\n\nInformation about the pull request events.\n\n(structure)\n\nReturns information about a pull request event.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\neventDate -> (timestamp)\n\nThe day and time of the pull request event, in timestamp format.\n\npullRequestEventType -> (string)\n\nThe type of the pull request event (for example, a status change event (PULL_REQUEST_STATUS_CHANGED) or update event (PULL_REQUEST_SOURCE_REFERENCE_UPDATED)).\n\nactorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the user whose actions resulted in the event. Examples include updating the pull request with more commits or changing the status of a pull request.\n\npullRequestCreatedEventMetadata -> (structure)\n\nInformation about the source and destination branches for the pull request.\n\nrepositoryName -> (string)\n\nThe name of the repository where the pull request was created.\n\nsourceCommitId -> (string)\n\nThe commit ID on the source branch used when the pull request was created.\n\ndestinationCommitId -> (string)\n\nThe commit ID of the tip of the branch specified as the destination branch when the pull request was created.\n\nmergeBase -> (string)\n\nThe commit ID of the most recent commit that the source branch and the destination branch have in common.\n\npullRequestStatusChangedEventMetadata -> (structure)\n\nInformation about the change in status for the pull request event.\n\npullRequestStatus -> (string)\n\nThe changed status of the pull request.\n\npullRequestSourceReferenceUpdatedEventMetadata -> (structure)\n\nInformation about the updated source branch for the pull request event.\n\nrepositoryName -> (string)\n\nThe name of the repository where the pull request was updated.\n\nbeforeCommitId -> (string)\n\nThe full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was updated.\n\nafterCommitId -> (string)\n\nThe full commit ID of the commit in the source branch that was the tip of the branch at the time the pull request was updated.\n\nmergeBase -> (string)\n\nThe commit ID of the most recent commit that the source branch and the destination branch have in common.\n\npullRequestMergedStateChangedEventMetadata -> (structure)\n\nInformation about the change in mergability state for the pull request event.\n\nrepositoryName -> (string)\n\nThe name of the repository where the pull request was created.\n\ndestinationReference -> (string)\n\nThe name of the branch that the pull request is merged into.\n\nmergeMetadata -> (structure)\n\nInformation about the merge state change event.\n\nisMerged -> (boolean)\n\nA Boolean value indicating whether the merge has been made.\n\nmergedBy -> (string)\n\nThe Amazon Resource Name (ARN) of the user who merged the branches.\n\nmergeCommitId -> (string)\n\nThe commit ID for the merge commit, if any.\n\nmergeOption -> (string)\n\nThe merge strategy used in the merge.\n\napprovalRuleEventMetadata -> (structure)\n\nInformation about a pull request event.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\napprovalStateChangedEventMetadata -> (structure)\n\nInformation about an approval state change for a pull request.\n\nrevisionId -> (string)\n\nThe revision ID of the pull request when the approval state changed.\n\napprovalStatus -> (string)\n\nThe approval status for the pull request.\n\napprovalRuleOverriddenEventMetadata -> (structure)\n\nInformation about an approval rule override event for a pull request.\n\nrevisionId -> (string)\n\nThe revision ID of the pull request when the override event occurred.\n\noverrideStatus -> (string)\n\nThe status of the override event.\n\nnextToken -> (string)\n\nAn enumeration token that can be used in a request to return the next batch of the results.",
      "command_examples": "Examples\n\nTo view events in a pull request\n\nThe following describe-pull-request-events example retrieves the events for a pull request with the ID of ‘8’.\n\naws codecommit describe-pull-request-events --pull-request-id 8\n\n\nOutput:\n\n{\n    \"pullRequestEvents\": [\n        {\n            \"pullRequestId\": \"8\",\n            \"pullRequestEventType\": \"PULL_REQUEST_CREATED\",\n            \"eventDate\": 1510341779.53,\n            \"actor\": \"arn:aws:iam::111111111111:user/Zhang_Wei\"\n        },\n        {\n            \"pullRequestStatusChangedEventMetadata\": {\n                \"pullRequestStatus\": \"CLOSED\"\n            },\n            \"pullRequestId\": \"8\",\n            \"pullRequestEventType\": \"PULL_REQUEST_STATUS_CHANGED\",\n            \"eventDate\": 1510341930.72,\n            \"actor\": \"arn:aws:iam::111111111111:user/Jane_Doe\"\n        }\n    ]\n}\n"
    },
    {
      "command_name": "disassociate-approval-rule-template-from-repository",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/disassociate-approval-rule-template-from-repository.html",
      "command_description": "Description\n\nRemoves the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository. This does not delete any approval rules previously created for pull requests through the template association.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  disassociate-approval-rule-template-from-repository\n--approval-rule-template-name <value>\n--repository-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--approval-rule-template-name <value>",
        "--repository-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--approval-rule-template-name (string)\n\nThe name of the approval rule template to disassociate from a specified repository.\n\n--repository-name (string)\n\nThe name of the repository you want to disassociate from the template.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo disassociate an approval rule template from a repository\n\nThe following disassociate-approval-rule-template-from-repository example disassociates the specified approval rule template from a repository named MyDemoRepo.\n\naws codecommit disassociate-approval-rule-template-from-repository \\\n    --repository-name MyDemoRepo  \\\n    --approval-rule-template-name 1-approver-rule-for-all-pull-requests\n\n\nThis command produces no output.\n\nFor more information, see Disassociate an Approval Rule Template in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "evaluate-pull-request-approval-rules",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/evaluate-pull-request-approval-rules.html",
      "command_description": "Description\n\nEvaluates whether a pull request has met all the conditions specified in its associated approval rules.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  evaluate-pull-request-approval-rules\n--pull-request-id <value>\n--revision-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--revision-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request you want to evaluate.\n\n--revision-id (string)\n\nThe system-generated ID for the pull request revision. To retrieve the most recent revision ID for a pull request, use GetPullRequest .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nevaluation -> (structure)\n\nThe result of the evaluation, including the names of the rules whose conditions have been met (if any), the names of the rules whose conditions have not been met (if any), whether the pull request is in the approved state, and whether the pull request approval rule has been set aside by an override.\n\napproved -> (boolean)\n\nWhether the state of the pull request is approved.\n\noverridden -> (boolean)\n\nWhether the approval rule requirements for the pull request have been overridden and no longer need to be met.\n\napprovalRulesSatisfied -> (list)\n\nThe names of the approval rules that have had their conditions met.\n\n(string)\n\napprovalRulesNotSatisfied -> (list)\n\nThe names of the approval rules that have not had their conditions met.\n\n(string)",
      "command_examples": "Examples\n\nTo evaluate whether a pull request has all of its approval rules satisfied\n\nThe following evaluate-pull-request-approval-rules example evaluates the state of approval rules on the specified pull request. In this example, an approval rule has not been satisfied for the pull request, so the output of the command shows an approved value of false.\n\naws codecommit evaluate-pull-request-approval-rules \\\n    --pull-request-id 27  \\\n    --revision-id 9f29d167EXAMPLE\n\n\nOutput:\n\n{\n    \"evaluation\": {\n        \"approved\": false,\n        \"approvalRulesNotSatisfied\": [\n            \"Require two approved approvers\"\n        ],\n        \"overridden\": false,\n        \"approvalRulesSatisfied\": []\n    }\n}\n\n\nFor more information, see Merge a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "get-approval-rule-template",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-approval-rule-template.html",
      "command_description": "Description\n\nReturns information about a specified approval rule template.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-approval-rule-template\n--approval-rule-template-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--approval-rule-template-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--approval-rule-template-name (string)\n\nThe name of the approval rule template for which you want to get information.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRuleTemplate -> (structure)\n\nThe content and structure of the approval rule template.\n\napprovalRuleTemplateId -> (string)\n\nThe system-generated ID of the approval rule template.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the approval rule template.\n\napprovalRuleTemplateDescription -> (string)\n\nThe description of the approval rule template.\n\napprovalRuleTemplateContent -> (string)\n\nThe content of the approval rule template.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule template.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule template was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule template was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule template.",
      "command_examples": "Examples\n\nTo get the content of an approval rule template\n\nThe following get-approval-rule-template example gets the content of an approval rule template named 1-approver-rule-for-all-pull-requests.\n\naws codecommit get-approval-rule-template \\\n    --approval-rule-template-name 1-approver-rule-for-all-pull-requests\n\n\nOutput:\n\n{\n    \"approvalRuleTemplate\": {\n        \"approvalRuleTemplateContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 1,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n        \"ruleContentSha256\": \"621181bbEXAMPLE\",\n        \"lastModifiedDate\": 1571356106.936,\n        \"creationDate\": 1571356106.936,\n        \"approvalRuleTemplateName\": \"1-approver-rule-for-all-pull-requests\",\n        \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Li_Juan\",\n        \"approvalRuleTemplateId\": \"a29abb15-EXAMPLE\",\n        \"approvalRuleTemplateDescription\": \"All pull requests must be approved by one developer on the team.\"\n    }\n}\n\n\nFor more information, see Manage Approval Rule Templates in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "get-blob",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-blob.html",
      "command_description": "Description\n\nReturns the base-64 encoded content of an individual blob in a repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-blob\n--repository-name <value>\n--blob-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--blob-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository that contains the blob.\n\n--blob-id (string)\n\nThe ID of the blob, which is its SHA-1 pointer.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncontent -> (blob)\n\nThe content of the blob, usually a file.",
      "command_examples": "Examples\n\nTo view information about a Git blob object\n\nThe following get-blob example retrieves information about a Git blob with the ID of ‘2eb4af3bEXAMPLE’ in an AWS CodeCommit repository named ‘MyDemoRepo’.\n\naws codecommit get-blob  --repository-name MyDemoRepo  --blob-id 2eb4af3bEXAMPLE\n\n\nOutput:\n\n{\n    \"content\": \"QSBCaW5hcnkgTGFyToEXAMPLE=\"\n}\n"
    },
    {
      "command_name": "get-branch",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-branch.html",
      "command_description": "Description\n\nReturns information about a repository branch, including its name and the last commit ID.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-branch\n[--repository-name <value>]\n[--branch-name <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--repository-name <value>]",
        "[--branch-name <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository that contains the branch for which you want to retrieve information.\n\n--branch-name (string)\n\nThe name of the branch for which you want to retrieve information.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nbranch -> (structure)\n\nThe name of the branch.\n\nbranchName -> (string)\n\nThe name of the branch.\n\ncommitId -> (string)\n\nThe ID of the last commit made to the branch.",
      "command_examples": "Examples\n\nTo get information about a branch\n\nThis example gets information about a branch in an AWS CodeCommit repository.\n\nCommand:\n\naws codecommit get-branch --repository-name MyDemoRepo --branch-name MyNewBranch\n\n\nOutput:\n\n{\n  \"BranchInfo\": {\n        \"commitID\": \"317f8570EXAMPLE\",\n                \"branchName\": \"MyNewBranch\"\n  }\n}\n"
    },
    {
      "command_name": "get-comment",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-comment.html",
      "command_description": "Description\n\nReturns the content of a comment made on a change, file, or commit in a repository.\n\nNote\n\nReaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-comment\n--comment-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--comment-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--comment-id (string)\n\nThe unique, system-generated ID of the comment. To get this ID, use GetCommentsForComparedCommit or GetCommentsForPullRequest .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncomment -> (structure)\n\nThe contents of the comment.\n\ncommentId -> (string)\n\nThe system-generated comment ID.\n\ncontent -> (string)\n\nThe content of the comment.\n\ninReplyTo -> (string)\n\nThe ID of the comment for which this comment is a reply, if any.\n\ncreationDate -> (timestamp)\n\nThe date and time the comment was created, in timestamp format.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the comment was most recently modified, in timestamp format.\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the person who posted the comment.\n\ndeleted -> (boolean)\n\nA Boolean value indicating whether the comment has been deleted.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\ncallerReactions -> (list)\n\nThe emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API.\n\n(string)\n\nreactionCounts -> (map)\n\nA string to integer map that represents the number of individual users who have responded to a comment with the specified reactions.\n\nkey -> (string)\n\nvalue -> (integer)",
      "command_examples": "Examples\n\nTo view details of a comment\n\nThis example demonstrates how to view details of a comment with the system-generated comment ID of ff30b348EXAMPLEb9aa670f.\n\naws codecommit get-comment \\\n    --comment-id ff30b348EXAMPLEb9aa670f\n\n\nOutput:\n\n{\n    \"comment\": {\n        \"authorArn\": \"arn:aws:iam::111111111111:user/Li_Juan\",\n        \"clientRequestToken\": \"123Example\",\n        \"commentId\": \"ff30b348EXAMPLEb9aa670f\",\n        \"content\": \"Whoops - I meant to add this comment to the line, but I don't see how to delete it.\",\n        \"creationDate\": 1508369768.142,\n        \"deleted\": false,\n        \"commentId\": \"\",\n        \"lastModifiedDate\": 1508369842.278,\n        \"callerReactions\": [],\n        \"reactionCounts\":\n        {\n            \"SMILE\" : 6,\n            \"THUMBSUP\" : 1\n        }\n    }\n}\n"
    },
    {
      "command_name": "get-comment-reactions",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-comment-reactions.html",
      "command_description": "Description\n\nReturns information about reactions to a specified comment ID. Reactions from users who have been deleted will not be included in the count.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-comment-reactions\n--comment-id <value>\n[--reaction-user-arn <value>]\n[--next-token <value>]\n[--max-results <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--comment-id <value>",
        "[--reaction-user-arn <value>]",
        "[--next-token <value>]",
        "[--max-results <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--comment-id (string)\n\nThe ID of the comment for which you want to get reactions information.\n\n--reaction-user-arn (string)\n\nOptional. The Amazon Resource Name (ARN) of the user or identity for which you want to get reaction information.\n\n--next-token (string)\n\nAn enumeration token that, when provided in a request, returns the next batch of the results.\n\n--max-results (integer)\n\nA non-zero, non-negative integer used to limit the number of returned results. The default is the same as the allowed maximum, 1,000.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nreactionsForComment -> (list)\n\nAn array of reactions to the specified comment.\n\n(structure)\n\nInformation about the reaction values provided by users on a comment.\n\nreaction -> (structure)\n\nThe reaction for a specified comment.\n\nemoji -> (string)\n\nThe Emoji Version 1.0 graphic of the reaction. These graphics are interpreted slightly differently on different operating systems.\n\nshortCode -> (string)\n\nThe emoji short code for the reaction. Short codes are interpreted slightly differently on different operating systems.\n\nunicode -> (string)\n\nThe Unicode codepoint for the reaction.\n\nreactionUsers -> (list)\n\nThe Amazon Resource Names (ARNs) of users who have provided reactions to the comment.\n\n(string)\n\nreactionsFromDeletedUsersCount -> (integer)\n\nA numerical count of users who reacted with the specified emoji whose identities have been subsequently deleted from IAM. While these IAM users or roles no longer exist, the reactions might still appear in total reaction counts.\n\nnextToken -> (string)\n\nAn enumeration token that can be used in a request to return the next batch of the results.",
      "command_examples": "Examples\n\nTo view emoji reactions to a comment\n\nThe following get-comment-reactions example lists all emoji reactions to a comment with the ID of abcd1234EXAMPLEb5678efgh. If the font for your shell supports displaying Emoji Version 1.0, then in the output for emoji the emoji is displayed.\n\naws codecommit get-comment-reactions \\\n    --comment-id abcd1234EXAMPLEb5678efgh\n\n\nOutput:\n\n{\n    \"reactionsForComment\": {\n        [\n           {\n               \"reaction\": {\n                    \"emoji:\"??\",\n                    \"shortCode\": \"thumbsup\",\n                    \"unicode\": \"U+1F44D\"\n                },\n                \"users\": [\n                    \"arn:aws:iam::123456789012:user/Li_Juan\",\n                    \"arn:aws:iam::123456789012:user/Mary_Major\",\n                    \"arn:aws:iam::123456789012:user/Jorge_Souza\"\n                ]\n            },\n            {\n                \"reaction\": {\n                    \"emoji\": \"??\",\n                    \"shortCode\": \"thumbsdown\",\n                    \"unicode\": \"U+1F44E\"\n                },\n                \"users\": [\n                    \"arn:aws:iam::123456789012:user/Nikhil_Jayashankar\"\n                ]\n            },\n            {\n                \"reaction\": {\n                    \"emoji\": \"??\",\n                    \"shortCode\": \"confused\",\n                    \"unicode\": \"U+1F615\"\n                },\n                \"users\": [\n                    \"arn:aws:iam::123456789012:user/Saanvi_Sarkar\"\n                ]\n            }\n        ]\n    }\n}\n\n\nFor more information, see Comment on a commit in AWS CodeCommit in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "get-comments-for-compared-commit",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-comments-for-compared-commit.html",
      "command_description": "Description\n\nReturns information about comments made on the comparison between two commits.\n\nNote\n\nReaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nget-comments-for-compared-commit is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: commentsForComparedCommitData",
      "command_synopsis": "Synopsis\n  get-comments-for-compared-commit\n--repository-name <value>\n[--before-commit-id <value>]\n--after-commit-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--before-commit-id <value>]",
        "--after-commit-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you want to compare commits.\n\n--before-commit-id (string)\n\nTo establish the directionality of the comparison, the full commit ID of the before commit.\n\n--after-commit-id (string)\n\nTo establish the directionality of the comparison, the full commit ID of the after commit.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommentsForComparedCommitData -> (list)\n\nA list of comment objects on the compared commit.\n\n(structure)\n\nReturns information about comments on the comparison between two commits.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the compared commits.\n\nbeforeCommitId -> (string)\n\nThe full commit ID of the commit used to establish the before of the comparison.\n\nafterCommitId -> (string)\n\nThe full commit ID of the commit used to establish the after of the comparison.\n\nbeforeBlobId -> (string)\n\nThe full blob ID of the commit used to establish the before of the comparison.\n\nafterBlobId -> (string)\n\nThe full blob ID of the commit used to establish the after of the comparison.\n\nlocation -> (structure)\n\nLocation information about the comment on the comparison, including the file name, line number, and whether the version of the file where the comment was made is BEFORE or AFTER.\n\nfilePath -> (string)\n\nThe name of the file being compared, including its extension and subdirectory, if any.\n\nfilePosition -> (long)\n\nThe position of a change in a compared file, in line number format.\n\nrelativeFileVersion -> (string)\n\nIn a comparison of commits or a pull request, whether the change is in the before or after of that comparison.\n\ncomments -> (list)\n\nAn array of comment objects. Each comment object contains information about a comment on the comparison between commits.\n\n(structure)\n\nReturns information about a specific comment.\n\ncommentId -> (string)\n\nThe system-generated comment ID.\n\ncontent -> (string)\n\nThe content of the comment.\n\ninReplyTo -> (string)\n\nThe ID of the comment for which this comment is a reply, if any.\n\ncreationDate -> (timestamp)\n\nThe date and time the comment was created, in timestamp format.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the comment was most recently modified, in timestamp format.\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the person who posted the comment.\n\ndeleted -> (boolean)\n\nA Boolean value indicating whether the comment has been deleted.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\ncallerReactions -> (list)\n\nThe emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API.\n\n(string)\n\nreactionCounts -> (map)\n\nA string to integer map that represents the number of individual users who have responded to a comment with the specified reactions.\n\nkey -> (string)\n\nvalue -> (integer)\n\nnextToken -> (string)\n\nAn enumeration token that can be used in a request to return the next batch of the results.",
      "command_examples": "Examples\n\nTo view comments on a commit\n\nThis example demonstrates how to view view comments made on the comparison between two commits in a repository named MyDemoRepo.\n\naws codecommit get-comments-for-compared-commit \\\n    --repository-name MyDemoRepo \\\n    --before-commit-ID 6e147360EXAMPLE \\\n    --after-commit-id 317f8570EXAMPLE\n\n\nOutput:\n\n{\n    \"commentsForComparedCommitData\": [\n        {\n            \"afterBlobId\": \"1f330709EXAMPLE\",\n            \"afterCommitId\": \"317f8570EXAMPLE\",\n            \"beforeBlobId\": \"80906a4cEXAMPLE\",\n            \"beforeCommitId\": \"6e147360EXAMPLE\",\n            \"comments\": [\n                {\n                    \"authorArn\": \"arn:aws:iam::111111111111:user/Li_Juan\",\n                    \"clientRequestToken\": \"123Example\",\n                    \"commentId\": \"ff30b348EXAMPLEb9aa670f\",\n                    \"content\": \"Whoops - I meant to add this comment to the line, not the file, but I don't see how to delete it.\",\n                    \"creationDate\": 1508369768.142,\n                    \"deleted\": false,\n                    \"CommentId\": \"123abc-EXAMPLE\",\n                    \"lastModifiedDate\": 1508369842.278,\n                    \"callerReactions\": [],\n                    \"reactionCounts\":\n                    {\n                        \"SMILE\" : 6,\n                        \"THUMBSUP\" : 1\n                    }\n                },\n                {\n                    \"authorArn\": \"arn:aws:iam::111111111111:user/Li_Juan\",\n                    \"clientRequestToken\": \"123Example\",\n                    \"commentId\": \"553b509bEXAMPLE56198325\",\n                    \"content\": \"Can you add a test case for this?\",\n                    \"creationDate\": 1508369612.240,\n                    \"deleted\": false,\n                    \"commentId\": \"456def-EXAMPLE\",\n                    \"lastModifiedDate\": 1508369612.240,\n                    \"callerReactions\": [],\n                    \"reactionCounts\":\n                    {\n                        \"THUMBSUP\" : 2\n                    }\n                }\n            ],\n            \"location\": {\n                \"filePath\": \"cl_sample.js\",\n                \"filePosition\": 1232,\n                \"relativeFileVersion\": \"after\"\n            },\n            \"repositoryName\": \"MyDemoRepo\"\n        }\n    ],\n    \"nextToken\": \"exampleToken\"\n}\n"
    },
    {
      "command_name": "get-comments-for-pull-request",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-comments-for-pull-request.html",
      "command_description": "Description\n\nReturns comments made on a pull request.\n\nNote\n\nReaction counts might include numbers from user identities who were deleted after the reaction was made. For a count of reactions from active identities, use GetCommentReactions.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nget-comments-for-pull-request is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: commentsForPullRequestData",
      "command_synopsis": "Synopsis\n  get-comments-for-pull-request\n--pull-request-id <value>\n[--repository-name <value>]\n[--before-commit-id <value>]\n[--after-commit-id <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "[--repository-name <value>]",
        "[--before-commit-id <value>]",
        "[--after-commit-id <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request. To get this ID, use ListPullRequests .\n\n--repository-name (string)\n\nThe name of the repository that contains the pull request.\n\n--before-commit-id (string)\n\nThe full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.\n\n--after-commit-id (string)\n\nThe full commit ID of the commit in the source branch that was the tip of the branch at the time the comment was made.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommentsForPullRequestData -> (list)\n\nAn array of comment objects on the pull request.\n\n(structure)\n\nReturns information about comments on a pull request.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the pull request.\n\nbeforeCommitId -> (string)\n\nThe full commit ID of the commit that was the tip of the destination branch when the pull request was created. This commit is superceded by the after commit in the source branch when and if you merge the source branch into the destination branch.\n\nafterCommitId -> (string)\n\nThe full commit ID of the commit that was the tip of the source branch at the time the comment was made.\n\nbeforeBlobId -> (string)\n\nThe full blob ID of the file on which you want to comment on the destination commit.\n\nafterBlobId -> (string)\n\nThe full blob ID of the file on which you want to comment on the source commit.\n\nlocation -> (structure)\n\nLocation information about the comment on the pull request, including the file name, line number, and whether the version of the file where the comment was made is BEFORE (destination branch) or AFTER (source branch).\n\nfilePath -> (string)\n\nThe name of the file being compared, including its extension and subdirectory, if any.\n\nfilePosition -> (long)\n\nThe position of a change in a compared file, in line number format.\n\nrelativeFileVersion -> (string)\n\nIn a comparison of commits or a pull request, whether the change is in the before or after of that comparison.\n\ncomments -> (list)\n\nAn array of comment objects. Each comment object contains information about a comment on the pull request.\n\n(structure)\n\nReturns information about a specific comment.\n\ncommentId -> (string)\n\nThe system-generated comment ID.\n\ncontent -> (string)\n\nThe content of the comment.\n\ninReplyTo -> (string)\n\nThe ID of the comment for which this comment is a reply, if any.\n\ncreationDate -> (timestamp)\n\nThe date and time the comment was created, in timestamp format.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the comment was most recently modified, in timestamp format.\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the person who posted the comment.\n\ndeleted -> (boolean)\n\nA Boolean value indicating whether the comment has been deleted.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\ncallerReactions -> (list)\n\nThe emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API.\n\n(string)\n\nreactionCounts -> (map)\n\nA string to integer map that represents the number of individual users who have responded to a comment with the specified reactions.\n\nkey -> (string)\n\nvalue -> (integer)\n\nnextToken -> (string)\n\nAn enumeration token that can be used in a request to return the next batch of the results.",
      "command_examples": "Examples\n\nTo view comments for a pull request\n\nThis example demonstrates how to view comments for a pull request in a repository named MyDemoRepo.\n\naws codecommit get-comments-for-pull-request \\\n    --repository-name MyDemoRepo \\\n    --before-commit-ID 317f8570EXAMPLE \\\n    --after-commit-id 5d036259EXAMPLE\n\n\nOutput:\n\n{\n    \"commentsForPullRequestData\": [\n        {\n            \"afterBlobId\": \"1f330709EXAMPLE\",\n            \"afterCommitId\": \"5d036259EXAMPLE\",\n            \"beforeBlobId\": \"80906a4cEXAMPLE\",\n            \"beforeCommitId\": \"317f8570EXAMPLE\",\n            \"comments\": [\n                {\n                    \"authorArn\": \"arn:aws:iam::111111111111:user/Saanvi_Sarkar\",\n                    \"clientRequestToken\": \"\",\n                    \"commentId\": \"abcd1234EXAMPLEb5678efgh\",\n                    \"content\": \"These don't appear to be used anywhere. Can we remove them?\",\n                    \"creationDate\": 1508369622.123,\n                    \"deleted\": false,\n                    \"lastModifiedDate\": 1508369622.123,\n                    \"callerReactions\": [],\n                    \"reactionCounts\":\n                    {\n                        \"THUMBSUP\" : 6,\n                        \"CONFUSED\" : 1\n                    }\n                },\n                {\n                    \"authorArn\": \"arn:aws:iam::111111111111:user/Li_Juan\",\n                    \"clientRequestToken\": \"\",\n                    \"commentId\": \"442b498bEXAMPLE5756813\",\n                    \"content\": \"Good catch. I'll remove them.\",\n                    \"creationDate\": 1508369829.104,\n                    \"deleted\": false,\n                    \"lastModifiedDate\": 150836912.273,\n                    \"callerReactions\": [\"THUMBSUP\"]\n                    \"reactionCounts\":\n                    {\n                        \"THUMBSUP\" : 14\n                    }\n                }\n            ],\n            \"location\": {\n                \"filePath\": \"ahs_count.py\",\n                \"filePosition\": 367,\n                \"relativeFileVersion\": \"AFTER\"\n            },\n            \"repositoryName\": \"MyDemoRepo\",\n            \"pullRequestId\": \"42\"\n        }\n    ],\n    \"nextToken\": \"exampleToken\"\n}\n"
    },
    {
      "command_name": "get-commit",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-commit.html",
      "command_description": "Description\n\nReturns information about a commit, including commit message and committer information.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-commit\n--repository-name <value>\n--commit-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--commit-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository to which the commit was made.\n\n--commit-id (string)\n\nThe commit ID. Commit IDs are the full SHA ID of the commit.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommit -> (structure)\n\nA commit data type object that contains information about the specified commit.\n\ncommitId -> (string)\n\nThe full SHA ID of the specified commit.\n\ntreeId -> (string)\n\nTree information for the specified commit.\n\nparents -> (list)\n\nA list of parent commits for the specified commit. Each parent commit ID is the full commit ID.\n\n(string)\n\nmessage -> (string)\n\nThe commit message associated with the specified commit.\n\nauthor -> (structure)\n\nInformation about the author of the specified commit. Information includes the date in timestamp format with GMT offset, the name of the author, and the email address for the author, as configured in Git.\n\nname -> (string)\n\nThe name of the user who made the specified commit.\n\nemail -> (string)\n\nThe email address associated with the user who made the commit, if any.\n\ndate -> (string)\n\nThe date when the specified commit was commited, in timestamp format with GMT offset.\n\ncommitter -> (structure)\n\nInformation about the person who committed the specified commit, also known as the committer. Information includes the date in timestamp format with GMT offset, the name of the committer, and the email address for the committer, as configured in Git.\n\nFor more information about the difference between an author and a committer in Git, see Viewing the Commit History in Pro Git by Scott Chacon and Ben Straub.\n\nname -> (string)\n\nThe name of the user who made the specified commit.\n\nemail -> (string)\n\nThe email address associated with the user who made the commit, if any.\n\ndate -> (string)\n\nThe date when the specified commit was commited, in timestamp format with GMT offset.\n\nadditionalData -> (string)\n\nAny other data associated with the specified commit.",
      "command_examples": "Examples\n\nTo view information about a commit in a repository\n\nThis example shows details about a commit with the system-generated ID of ‘7e9fd3091thisisanexamplethisisanexample1’ in an AWS CodeCommit repository named ‘MyDemoRepo’.\n\nCommand:\n\naws codecommit get-commit --repository-name MyDemoRepo --commit-id 7e9fd3091thisisanexamplethisisanexample1\n\n\nOutput:\n\n{\n  \"commit\": {\n      \"additionalData\": \"\",\n      \"committer\": {\n          \"date\": \"1484167798 -0800\",\n          \"name\": \"Mary Major\",\n          \"email\": \"mary_major@example.com\"\n      },\n      \"author\": {\n          \"date\": \"1484167798 -0800\",\n          \"name\": \"Mary Major\",\n          \"email\": \"mary_major@example.com\"\n      },\n      \"treeId\": \"347a3408thisisanexampletreeidexample\",\n      \"parents\": [\n          \"7aa87a031thisisanexamplethisisanexample1\"\n      ],\n      \"message\": \"Fix incorrect variable name\"\n  }\n}\n"
    },
    {
      "command_name": "get-differences",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-differences.html",
      "command_description": "Description\n\nReturns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference). Results can be limited to a specified path.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nget-differences is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: differences",
      "command_synopsis": "Synopsis\n  get-differences\n--repository-name <value>\n[--before-commit-specifier <value>]\n--after-commit-specifier <value>\n[--before-path <value>]\n[--after-path <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--before-commit-specifier <value>]",
        "--after-commit-specifier <value>",
        "[--before-path <value>]",
        "[--after-path <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you want to get differences.\n\n--before-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, the full commit ID). Optional. If not specified, all changes before the afterCommitSpecifier value are shown. If you do not use beforeCommitSpecifier in your request, consider limiting the results with maxResults .\n\n--after-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit.\n\n--before-path (string)\n\nThe file path in which to check for differences. Limits the results to this path. Can also be used to specify the previous name of a directory or folder. If beforePath and afterPath are not specified, differences are shown for all paths.\n\n--after-path (string)\n\nThe file path in which to check differences. Limits the results to this path. Can also be used to specify the changed name of a directory or folder, if it has changed. If not specified, differences are shown for all paths.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ndifferences -> (list)\n\nA data type object that contains information about the differences, including whether the difference is added, modified, or deleted (A, D, M).\n\n(structure)\n\nReturns information about a set of differences for a commit specifier.\n\nbeforeBlob -> (structure)\n\nInformation about a beforeBlob data type object, including the ID, the file mode permission code, and the path.\n\nblobId -> (string)\n\nThe full ID of the blob.\n\npath -> (string)\n\nThe path to the blob and associated file name, if any.\n\nmode -> (string)\n\nThe file mode permissions of the blob. File mode permission codes include:\n\n100644 indicates read/write\n\n100755 indicates read/write/execute\n\n160000 indicates a submodule\n\n120000 indicates a symlink\n\nafterBlob -> (structure)\n\nInformation about an afterBlob data type object, including the ID, the file mode permission code, and the path.\n\nblobId -> (string)\n\nThe full ID of the blob.\n\npath -> (string)\n\nThe path to the blob and associated file name, if any.\n\nmode -> (string)\n\nThe file mode permissions of the blob. File mode permission codes include:\n\n100644 indicates read/write\n\n100755 indicates read/write/execute\n\n160000 indicates a submodule\n\n120000 indicates a symlink\n\nchangeType -> (string)\n\nWhether the change type of the difference is an addition (A), deletion (D), or modification (M).\n\nNextToken -> (string)\n\nAn enumeration token that can be used in a request to return the next batch of the results.",
      "command_examples": "Examples\n\nTo get information about differences for a commit specifier in a repository\n\nThis example shows view metadata information about changes between two commit specifiers (branch, tag, HEAD, or other fully qualified references, such as commit IDs) in a renamed folder in AWS CodeCommit repository named MyDemoRepo. The example includes several options that are not required, including –before-commit-specifier, –before-path, and –after-path, in order to more fully illustrate how you can use these options to limit the results. The response includes file mode permissions.\n\nCommand:\n\naws codecommit get-differences --repository-name MyDemoRepo --before-commit-specifier 955bba12thisisanexamplethisisanexample --after-commit-specifier 14a95463thisisanexamplethisisanexample --before-path tmp/example-folder --after-path tmp/renamed-folder\n\n\nOutput:\n\n{\n  \"differences\": [\n      {\n          \"afterBlob\": {\n              \"path\": \"blob.txt\",\n              \"blobId\": \"2eb4af3b1thisisanexamplethisisanexample1\",\n              \"mode\": \"100644\"\n          },\n          \"changeType\": \"M\",\n          \"beforeBlob\": {\n              \"path\": \"blob.txt\",\n              \"blobId\": \"bf7fcf281thisisanexamplethisisanexample1\",\n              \"mode\": \"100644\"\n          }\n      }\n  ]\n}\n"
    },
    {
      "command_name": "get-file",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-file.html",
      "command_description": "Description\n\nReturns the base-64 encoded contents of a specified file and its metadata.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-file\n--repository-name <value>\n[--commit-specifier <value>]\n--file-path <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--commit-specifier <value>]",
        "--file-path <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository that contains the file.\n\n--commit-specifier (string)\n\nThe fully quaified reference that identifies the commit that contains the file. For example, you can specify a full commit ID, a tag, a branch name, or a reference such as refs/heads/master. If none is provided, the head commit is used.\n\n--file-path (string)\n\nThe fully qualified path to the file, including the full name and extension of the file. For example, /examples/file.md is the fully qualified path to a file named file.md in a folder named examples.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommitId -> (string)\n\nThe full commit ID of the commit that contains the content returned by GetFile.\n\nblobId -> (string)\n\nThe blob ID of the object that represents the file content.\n\nfilePath -> (string)\n\nThe fully qualified path to the specified file. Returns the name and extension of the file.\n\nfileMode -> (string)\n\nThe extrapolated file mode permissions of the blob. Valid values include strings such as EXECUTABLE and not numeric values.\n\nNote\n\nThe file mode permissions returned by this API are not the standard file mode permission values, such as 100644, but rather extrapolated values. See the supported return values.\n\nfileSize -> (long)\n\nThe size of the contents of the file, in bytes.\n\nfileContent -> (blob)\n\nThe base-64 encoded binary data object that represents the content of the file.",
      "command_examples": "Examples\n\nTo get the base-64 encoded contents of a file in an AWS CodeCommit repository\n\nThe following get-file example demonstrates how to get the base-64 encoded contents of a file named README.md from a branch named main in a repository named MyDemoRepo.\n\naws codecommit get-file \\\n    --repository-name MyDemoRepo \\\n    --commit-specifier main \\\n    --file-path README.md\n\n\nOutput:\n\n{\n    \"blobId\":\"559b44fEXAMPLE\",\n    \"commitId\":\"c5709475EXAMPLE\",\n    \"fileContent\":\"IyBQaHVzEXAMPLE\",\n    \"filePath\":\"README.md\",\n    \"fileMode\":\"NORMAL\",\n    \"fileSize\":1563\n}\n\n\nFor more information, see GetFile in the AWS CodeCommit API Reference guide."
    },
    {
      "command_name": "get-folder",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-folder.html",
      "command_description": "Description\n\nReturns the contents of a specified folder in a repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-folder\n--repository-name <value>\n[--commit-specifier <value>]\n--folder-path <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--commit-specifier <value>]",
        "--folder-path <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository.\n\n--commit-specifier (string)\n\nA fully qualified reference used to identify a commit that contains the version of the folder’s content to return. A fully qualified reference can be a commit ID, branch name, tag, or reference such as HEAD. If no specifier is provided, the folder content is returned as it exists in the HEAD commit.\n\n--folder-path (string)\n\nThe fully qualified path to the folder whose contents are returned, including the folder name. For example, /examples is a fully-qualified path to a folder named examples that was created off of the root directory (/) of a repository.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommitId -> (string)\n\nThe full commit ID used as a reference for the returned version of the folder content.\n\nfolderPath -> (string)\n\nThe fully qualified path of the folder whose contents are returned.\n\ntreeId -> (string)\n\nThe full SHA-1 pointer of the tree information for the commit that contains the folder.\n\nsubFolders -> (list)\n\nThe list of folders that exist under the specified folder, if any.\n\n(structure)\n\nReturns information about a folder in a repository.\n\ntreeId -> (string)\n\nThe full SHA-1 pointer of the tree information for the commit that contains the folder.\n\nabsolutePath -> (string)\n\nThe fully qualified path of the folder in the repository.\n\nrelativePath -> (string)\n\nThe relative path of the specified folder from the folder where the query originated.\n\nfiles -> (list)\n\nThe list of files in the specified folder, if any.\n\n(structure)\n\nReturns information about a file in a repository.\n\nblobId -> (string)\n\nThe blob ID that contains the file information.\n\nabsolutePath -> (string)\n\nThe fully qualified path to the file in the repository.\n\nrelativePath -> (string)\n\nThe relative path of the file from the folder where the query originated.\n\nfileMode -> (string)\n\nThe extrapolated file mode permissions for the file. Valid values include EXECUTABLE and NORMAL.\n\nsymbolicLinks -> (list)\n\nThe list of symbolic links to other files and folders in the specified folder, if any.\n\n(structure)\n\nReturns information about a symbolic link in a repository folder.\n\nblobId -> (string)\n\nThe blob ID that contains the information about the symbolic link.\n\nabsolutePath -> (string)\n\nThe fully qualified path to the folder that contains the symbolic link.\n\nrelativePath -> (string)\n\nThe relative path of the symbolic link from the folder where the query originated.\n\nfileMode -> (string)\n\nThe file mode permissions of the blob that cotains information about the symbolic link.\n\nsubModules -> (list)\n\nThe list of submodules in the specified folder, if any.\n\n(structure)\n\nReturns information about a submodule reference in a repository folder.\n\ncommitId -> (string)\n\nThe commit ID that contains the reference to the submodule.\n\nabsolutePath -> (string)\n\nThe fully qualified path to the folder that contains the reference to the submodule.\n\nrelativePath -> (string)\n\nThe relative path of the submodule from the folder where the query originated.",
      "command_examples": "Examples\n\nTo get the contents of a folder in an AWS CodeCommit repository\n\nThe following get-folder example demonstrates how to get the contents of a top-level folder from a repository named MyDemoRepo.\n\naws codecommit get-folder --repository-name MyDemoRepo --folder-path \"\"\n\n\nOutput:\n\n{\n    \"commitId\":\"c5709475EXAMPLE\",\n    \"files\":[\n        {\n            \"absolutePath\":\".gitignore\",\n            \"blobId\":\"74094e8bEXAMPLE\",\n            \"fileMode\":\"NORMAL\",\n            \"relativePath\":\".gitignore\"\n        },\n        {\n            \"absolutePath\":\"Gemfile\",\n            \"blobId\":\"9ceb72f6EXAMPLE\",\n            \"fileMode\":\"NORMAL\",\n            \"relativePath\":\"Gemfile\"\n        },\n        {\n            \"absolutePath\":\"Gemfile.lock\",\n            \"blobId\":\"795c4a2aEXAMPLE\",\n            \"fileMode\":\"NORMAL\",\n            \"relativePath\":\"Gemfile.lock\"\n        },\n        {\n            \"absolutePath\":\"LICENSE.txt\",\n            \"blobId\":\"0c7932c8EXAMPLE\",\n            \"fileMode\":\"NORMAL\",\n            \"relativePath\":\"LICENSE.txt\"\n        },\n        {\n            \"absolutePath\":\"README.md\",\n            \"blobId\":\"559b44feEXAMPLE\",\n            \"fileMode\":\"NORMAL\",\n            \"relativePath\":\"README.md\"\n        }\n    ],\n    \"folderPath\":\"\",\n    \"subFolders\":[\n        {\n            \"absolutePath\":\"public\",\n            \"relativePath\":\"public\",\n            \"treeId\":\"d5e92ae3aEXAMPLE\"\n        },\n        {\n            \"absolutePath\":\"tmp\",\n            \"relativePath\":\"tmp\",\n            \"treeId\":\"d564d0bcEXAMPLE\"\n        }\n    ],\n    \"subModules\":[],\n    \"symbolicLinks\":[],\n    \"treeId\":\"7b3c4dadEXAMPLE\"\n}\n\n\nFor more information, see GetFolder in the AWS CodeCommit API Reference guide."
    },
    {
      "command_name": "get-merge-commit",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-merge-commit.html",
      "command_description": "Description\n\nReturns information about a specified merge commit.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-merge-commit\n--repository-name <value>\n--source-commit-specifier <value>\n--destination-commit-specifier <value>\n[--conflict-detail-level <value>]\n[--conflict-resolution-strategy <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--source-commit-specifier <value>",
        "--destination-commit-specifier <value>",
        "[--conflict-detail-level <value>]",
        "[--conflict-resolution-strategy <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository that contains the merge commit about which you want to get information.\n\n--source-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--destination-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--conflict-detail-level (string)\n\nThe level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.\n\nPossible values:\n\nFILE_LEVEL\n\nLINE_LEVEL\n\n--conflict-resolution-strategy (string)\n\nSpecifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.\n\nPossible values:\n\nNONE\n\nACCEPT_SOURCE\n\nACCEPT_DESTINATION\n\nAUTOMERGE\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nsourceCommitId -> (string)\n\nThe commit ID of the source commit specifier that was used in the merge evaluation.\n\ndestinationCommitId -> (string)\n\nThe commit ID of the destination commit specifier that was used in the merge evaluation.\n\nbaseCommitId -> (string)\n\nThe commit ID of the merge base.\n\nmergedCommitId -> (string)\n\nThe commit ID for the merge commit created when the source branch was merged into the destination branch. If the fast-forward merge strategy was used, there is no merge commit.",
      "command_examples": "Examples\n\nTo get detailed information about a merge commit\n\nThe following get-merge-commit example displays details about a merge commit for the source branch named bugfix-bug1234 with a destination branch named main using the THREE_WAY_MERGE strategy in a repository named MyDemoRepo.\n\naws codecommit get-merge-commit \\\n    --source-commit-specifier bugfix-bug1234 \\\n    --destination-commit-specifier main \\\n    --merge-option THREE_WAY_MERGE \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"sourceCommitId\": \"c5709475EXAMPLE\",\n    \"destinationCommitId\": \"317f8570EXAMPLE\",\n    \"baseCommitId\": \"fb12a539EXAMPLE\",\n    \"mergeCommitId\": \"ffc4d608eEXAMPLE\"\n}\n\n\nFor more information, see View Commit Details in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "get-merge-conflicts",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-merge-conflicts.html",
      "command_description": "Description\n\nReturns information about merge conflicts between the before and after commit IDs for a pull request in a repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-merge-conflicts\n--repository-name <value>\n--destination-commit-specifier <value>\n--source-commit-specifier <value>\n--merge-option <value>\n[--conflict-detail-level <value>]\n[--max-conflict-files <value>]\n[--conflict-resolution-strategy <value>]\n[--next-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--destination-commit-specifier <value>",
        "--source-commit-specifier <value>",
        "--merge-option <value>",
        "[--conflict-detail-level <value>]",
        "[--max-conflict-files <value>]",
        "[--conflict-resolution-strategy <value>]",
        "[--next-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where the pull request was created.\n\n--destination-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--source-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--merge-option (string)\n\nThe merge option or strategy you want to use to merge the code.\n\nPossible values:\n\nFAST_FORWARD_MERGE\n\nSQUASH_MERGE\n\nTHREE_WAY_MERGE\n\n--conflict-detail-level (string)\n\nThe level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.\n\nPossible values:\n\nFILE_LEVEL\n\nLINE_LEVEL\n\n--max-conflict-files (integer)\n\nThe maximum number of files to include in the output.\n\n--conflict-resolution-strategy (string)\n\nSpecifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.\n\nPossible values:\n\nNONE\n\nACCEPT_SOURCE\n\nACCEPT_DESTINATION\n\nAUTOMERGE\n\n--next-token (string)\n\nAn enumeration token that, when provided in a request, returns the next batch of the results.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nmergeable -> (boolean)\n\nA Boolean value that indicates whether the code is mergeable by the specified merge option.\n\ndestinationCommitId -> (string)\n\nThe commit ID of the destination commit specifier that was used in the merge evaluation.\n\nsourceCommitId -> (string)\n\nThe commit ID of the source commit specifier that was used in the merge evaluation.\n\nbaseCommitId -> (string)\n\nThe commit ID of the merge base.\n\nconflictMetadataList -> (list)\n\nA list of metadata for any conflicting files. If the specified merge strategy is FAST_FORWARD_MERGE, this list is always empty.\n\n(structure)\n\nInformation about the metadata for a conflict in a merge operation.\n\nfilePath -> (string)\n\nThe path of the file that contains conflicts.\n\nfileSizes -> (structure)\n\nThe file sizes of the file in the source, destination, and base of the merge.\n\nsource -> (long)\n\nThe size of a file in the source of a merge or pull request.\n\ndestination -> (long)\n\nThe size of a file in the destination of a merge or pull request.\n\nbase -> (long)\n\nThe size of a file in the base of a merge or pull request.\n\nfileModes -> (structure)\n\nThe file modes of the file in the source, destination, and base of the merge.\n\nsource -> (string)\n\nThe file mode of a file in the source of a merge or pull request.\n\ndestination -> (string)\n\nThe file mode of a file in the destination of a merge or pull request.\n\nbase -> (string)\n\nThe file mode of a file in the base of a merge or pull request.\n\nobjectTypes -> (structure)\n\nInformation about any object type conflicts in a merge operation.\n\nsource -> (string)\n\nThe type of the object in the source branch.\n\ndestination -> (string)\n\nThe type of the object in the destination branch.\n\nbase -> (string)\n\nThe type of the object in the base commit of the merge.\n\nnumberOfConflicts -> (integer)\n\nThe number of conflicts, including both hunk conflicts and metadata conflicts.\n\nisBinaryFile -> (structure)\n\nA boolean value (true or false) indicating whether the file is binary or textual in the source, destination, and base of the merge.\n\nsource -> (boolean)\n\nThe binary or non-binary status of file in the source of a merge or pull request.\n\ndestination -> (boolean)\n\nThe binary or non-binary status of a file in the destination of a merge or pull request.\n\nbase -> (boolean)\n\nThe binary or non-binary status of a file in the base of a merge or pull request.\n\ncontentConflict -> (boolean)\n\nA boolean value indicating whether there are conflicts in the content of a file.\n\nfileModeConflict -> (boolean)\n\nA boolean value indicating whether there are conflicts in the file mode of a file.\n\nobjectTypeConflict -> (boolean)\n\nA boolean value (true or false) indicating whether there are conflicts between the branches in the object type of a file, folder, or submodule.\n\nmergeOperations -> (structure)\n\nWhether an add, modify, or delete operation caused the conflict between the source and destination of the merge.\n\nsource -> (string)\n\nThe operation (add, modify, or delete) on a file in the source of a merge or pull request.\n\ndestination -> (string)\n\nThe operation on a file in the destination of a merge or pull request.\n\nnextToken -> (string)\n\nAn enumeration token that can be used in a request to return the next batch of the results.",
      "command_examples": "Examples\n\nTo view whether there are any merge conflicts for a pull request\n\nThe following get-merge-conflicts example displays whether there are any merge conflicts between the tip of a source branch named feature-randomizationfeature and a destination branch named ‘main’ in a repository named MyDemoRepo.\n\naws codecommit get-merge-conflicts \\\n    --repository-name MyDemoRepo \\\n    --source-commit-specifier feature-randomizationfeature \\\n    --destination-commit-specifier main \\\n    --merge-option THREE_WAY_MERGE\n\n\nOutput:\n\n{\n    \"mergeable\": false,\n    \"destinationCommitId\": \"86958e0aEXAMPLE\",\n    \"sourceCommitId\": \"6ccd57fdEXAMPLE\",\n    \"baseCommitId\": \"767b6958EXAMPLE\",\n    \"conflictMetadataList\": [\n        {\n            \"filePath\": \"readme.md\",\n            \"fileSizes\": {\n                \"source\": 139,\n                \"destination\": 230,\n                \"base\": 85\n            },\n            \"fileModes\": {\n                \"source\": \"NORMAL\",\n                \"destination\": \"NORMAL\",\n                \"base\": \"NORMAL\"\n            },\n            \"objectTypes\": {\n                \"source\": \"FILE\",\n                \"destination\": \"FILE\",\n                \"base\": \"FILE\"\n            },\n            \"numberOfConflicts\": 1,\n            \"isBinaryFile\": {\n                \"source\": false,\n                \"destination\": false,\n                \"base\": false\n            },\n            \"contentConflict\": true,\n            \"fileModeConflict\": false,\n            \"objectTypeConflict\": false,\n            \"mergeOperations\": {\n                \"source\": \"M\",\n                \"destination\": \"M\"\n            }\n        }\n    ]\n}\n"
    },
    {
      "command_name": "get-merge-options",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-merge-options.html",
      "command_description": "Description\n\nReturns information about the merge options available for merging two specified branches. For details about why a merge option is not available, use GetMergeConflicts or DescribeMergeConflicts.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-merge-options\n--repository-name <value>\n--source-commit-specifier <value>\n--destination-commit-specifier <value>\n[--conflict-detail-level <value>]\n[--conflict-resolution-strategy <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--source-commit-specifier <value>",
        "--destination-commit-specifier <value>",
        "[--conflict-detail-level <value>]",
        "[--conflict-resolution-strategy <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository that contains the commits about which you want to get merge options.\n\n--source-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--destination-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--conflict-detail-level (string)\n\nThe level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.\n\nPossible values:\n\nFILE_LEVEL\n\nLINE_LEVEL\n\n--conflict-resolution-strategy (string)\n\nSpecifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.\n\nPossible values:\n\nNONE\n\nACCEPT_SOURCE\n\nACCEPT_DESTINATION\n\nAUTOMERGE\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nmergeOptions -> (list)\n\nThe merge option or strategy used to merge the code.\n\n(string)\n\nsourceCommitId -> (string)\n\nThe commit ID of the source commit specifier that was used in the merge evaluation.\n\ndestinationCommitId -> (string)\n\nThe commit ID of the destination commit specifier that was used in the merge evaluation.\n\nbaseCommitId -> (string)\n\nThe commit ID of the merge base.",
      "command_examples": "Examples\n\nTo get information about the merge options available for merging two specified branches\n\nThe following get-merge-options example determines the merge options available for merging a source branch named bugfix-bug1234 with a destination branch named main in a repository named MyDemoRepo.\n\naws codecommit get-merge-options \\\n    --source-commit-specifier bugfix-bug1234 \\\n    --destination-commit-specifier main \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"mergeOptions\": [\n        \"FAST_FORWARD_MERGE\",\n        \"SQUASH_MERGE\",\n        \"THREE_WAY_MERGE\"\n    ],\n    \"sourceCommitId\": \"18059494EXAMPLE\",\n    \"destinationCommitId\": \"ffd3311dEXAMPLE\",\n    \"baseCommitId\": \"ffd3311dEXAMPLE\"\n}\n\n\nFor more information, see Resolve Conflicts in a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "get-pull-request",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-pull-request.html",
      "command_description": "Description\n\nGets information about a pull request in a specified repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-pull-request\n--pull-request-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request. To get this ID, use ListPullRequests .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npullRequest -> (structure)\n\nInformation about the specified pull request.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\ntitle -> (string)\n\nThe user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users.\n\ndescription -> (string)\n\nThe user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.\n\nlastActivityDate -> (timestamp)\n\nThe day and time of the last user or system activity on the pull request, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the pull request was originally created, in timestamp format.\n\npullRequestStatus -> (string)\n\nThe status of the pull request. Pull request status can only change from OPEN to CLOSED .\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the user who created the pull request.\n\npullRequestTargets -> (list)\n\nThe targets of the pull request, including the source branch and destination branch for the pull request.\n\n(structure)\n\nReturns information about a pull request target.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the pull request source and destination branches.\n\nsourceReference -> (string)\n\nThe branch of the repository that contains the changes for the pull request. Also known as the source branch.\n\ndestinationReference -> (string)\n\nThe branch of the repository where the pull request changes are merged. Also known as the destination branch.\n\ndestinationCommit -> (string)\n\nThe full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.\n\nsourceCommit -> (string)\n\nThe full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.\n\nmergeBase -> (string)\n\nThe commit ID of the most recent commit that the source branch and the destination branch have in common.\n\nmergeMetadata -> (structure)\n\nReturns metadata about the state of the merge, including whether the merge has been made.\n\nisMerged -> (boolean)\n\nA Boolean value indicating whether the merge has been made.\n\nmergedBy -> (string)\n\nThe Amazon Resource Name (ARN) of the user who merged the branches.\n\nmergeCommitId -> (string)\n\nThe commit ID for the merge commit, if any.\n\nmergeOption -> (string)\n\nThe merge strategy used in the merge.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\nrevisionId -> (string)\n\nThe system-generated revision ID for the pull request.\n\napprovalRules -> (list)\n\nThe approval rules applied to the pull request.\n\n(structure)\n\nReturns information about an approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.\n\noriginApprovalRuleTemplate -> (structure)\n\nThe approval rule template used to create the rule.\n\napprovalRuleTemplateId -> (string)\n\nThe ID of the template that created the approval rule.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the template that created the approval rule.",
      "command_examples": "Examples\n\nTo view details of a pull request\n\nThis example demonstrates how to view information about a pull request with the ID of 27.\n\naws codecommit get-pull-request \\\n    --pull-request-id 27\n\n\nOutput:\n\n{\n    \"pullRequest\": {\n        \"approvalRules\": [\n            {\n                \"approvalRuleContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n                \"approvalRuleId\": \"dd8b17fe-EXAMPLE\",\n                \"approvalRuleName\": \"2-approver-rule-for-main\",\n                \"creationDate\": 1571356106.936,\n                \"lastModifiedDate\": 571356106.936,\n                \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n                \"ruleContentSha256\": \"4711b576EXAMPLE\"\n            }\n        ],\n        \"lastActivityDate\": 1562619583.565,\n        \"pullRequestTargets\": [\n            {\n                \"sourceCommit\": \"ca45e279EXAMPLE\",\n                \"sourceReference\": \"refs/heads/bugfix-1234\",\n                \"mergeBase\": \"a99f5ddbEXAMPLE\",\n                \"destinationReference\": \"refs/heads/main\",\n                \"mergeMetadata\": {\n                    \"isMerged\": false\n                },\n                \"destinationCommit\": \"2abfc6beEXAMPLE\",\n                \"repositoryName\": \"MyDemoRepo\"\n            }\n        ],\n        \"revisionId\": \"e47def21EXAMPLE\",\n        \"title\": \"Quick fix for bug 1234\",\n        \"authorArn\": \"arn:aws:iam::123456789012:user/Nikhil_Jayashankar\",\n        \"clientRequestToken\": \"d8d7612e-EXAMPLE\",\n        \"creationDate\": 1562619583.565,\n        \"pullRequestId\": \"27\",\n        \"pullRequestStatus\": \"OPEN\"\n    }\n}\n"
    },
    {
      "command_name": "get-pull-request-approval-states",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-pull-request-approval-states.html",
      "command_description": "Description\n\nGets information about the approval states for a specified pull request. Approval states only apply to pull requests that have one or more approval rules applied to them.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-pull-request-approval-states\n--pull-request-id <value>\n--revision-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--revision-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID for the pull request.\n\n--revision-id (string)\n\nThe system-generated ID for the pull request revision.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovals -> (list)\n\nInformation about users who have approved the pull request.\n\n(structure)\n\nReturns information about a specific approval on a pull request.\n\nuserArn -> (string)\n\nThe Amazon Resource Name (ARN) of the user.\n\napprovalState -> (string)\n\nThe state of the approval, APPROVE or REVOKE. REVOKE states are not stored.",
      "command_examples": "Examples\n\nTo view approvals on a pull request\n\nThe following get-pull-request-approval-states example returns approvals for the specified pull request.\n\naws codecommit get-pull-request-approval-states \\\n    --pull-request-id 8 \\\n    --revision-id 9f29d167EXAMPLE\n\n\nOutput:\n\n{\n    \"approvals\": [\n        {\n            \"userArn\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n            \"approvalState\": \"APPROVE\"\n        }\n    ]\n}\n\n\nFor more information, see View Pull Requests in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "get-pull-request-override-state",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-pull-request-override-state.html",
      "command_description": "Description\n\nReturns information about whether approval rules have been set aside (overridden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-pull-request-override-state\n--pull-request-id <value>\n--revision-id <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--revision-id <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe ID of the pull request for which you want to get information about whether approval rules have been set aside (overridden).\n\n--revision-id (string)\n\nThe system-generated ID of the revision for the pull request. To retrieve the most recent revision ID, use GetPullRequest .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\noverridden -> (boolean)\n\nA Boolean value that indicates whether a pull request has had its rules set aside (TRUE) or whether all approval rules still apply (FALSE).\n\noverrider -> (string)\n\nThe Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.",
      "command_examples": "Examples\n\nTo get information about the override status of a pull request\n\nThe following get-pull-request-override-state example returns the override state for the specified pull request. In this example, the approval rules for the pull request were overridden by a user named Mary Major, so the output returns a value of true.:\n\naws codecommit get-pull-request-override-state \\\n    --pull-request-id 34  \\\n    --revision-id 9f29d167EXAMPLE\n\n\nOutput:\n\n{\n    \"overridden\": true,\n    \"overrider\": \"arn:aws:iam::123456789012:user/Mary_Major\"\n}\n\n\nFor more information, see Override Approval Rules on a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "get-repository",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-repository.html",
      "command_description": "Description\n\nReturns information about a repository.\n\nNote\n\nThe description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-repository\n--repository-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository to get information about.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nrepositoryMetadata -> (structure)\n\nInformation about the repository.\n\naccountId -> (string)\n\nThe ID of the AWS account associated with the repository.\n\nrepositoryId -> (string)\n\nThe ID of the repository.\n\nrepositoryName -> (string)\n\nThe repository’s name.\n\nrepositoryDescription -> (string)\n\nA comment or description about the repository.\n\ndefaultBranch -> (string)\n\nThe repository’s default branch name.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the repository was last modified, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the repository was created, in timestamp format.\n\ncloneUrlHttp -> (string)\n\nThe URL to use for cloning the repository over HTTPS.\n\ncloneUrlSsh -> (string)\n\nThe URL to use for cloning the repository over SSH.\n\nArn -> (string)\n\nThe Amazon Resource Name (ARN) of the repository.",
      "command_examples": "Examples\n\nTo get information about a repository\n\nThis example shows details about an AWS CodeCommit repository.\n\naws codecommit get-repository \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"repositoryMetadata\": {\n        \"creationDate\": 1429203623.625,\n        \"defaultBranch\": \"main\",\n        \"repositoryName\": \"MyDemoRepo\",\n        \"cloneUrlSsh\": \"ssh://git-codecommit.us-east-1.amazonaws.com/v1/repos/v1/repos/MyDemoRepo\",\n        \"lastModifiedDate\": 1430783812.0869999,\n        \"repositoryDescription\": \"My demonstration repository\",\n        \"cloneUrlHttp\": \"https://codecommit.us-east-1.amazonaws.com/v1/repos/MyDemoRepo\",\n        \"repositoryId\": \"f7579e13-b83e-4027-aaef-650c0EXAMPLE\",\n        \"Arn\": \"arn:aws:codecommit:us-east-1:80398EXAMPLE:MyDemoRepo\n        \"accountId\": \"111111111111\"\n    }\n}\n"
    },
    {
      "command_name": "get-repository-triggers",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/get-repository-triggers.html",
      "command_description": "Description\n\nGets information about triggers configured for a repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  get-repository-triggers\n--repository-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository for which the trigger is configured.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nconfigurationId -> (string)\n\nThe system-generated unique ID for the trigger.\n\ntriggers -> (list)\n\nThe JSON block of configuration information for each trigger.\n\n(structure)\n\nInformation about a trigger for a repository.\n\nname -> (string)\n\nThe name of the trigger.\n\ndestinationArn -> (string)\n\nThe ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS).\n\ncustomData -> (string)\n\nAny custom data associated with the trigger to be included in the information sent to the target of the trigger.\n\nbranches -> (list)\n\nThe branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.\n\nNote\n\nAlthough no content is required in the array, you must include the array itself.\n\n(string)\n\nevents -> (list)\n\nThe repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS.\n\nNote\n\nThe valid value “all” cannot be used with any other values.\n\n(string)",
      "command_examples": "Examples\n\nTo get information about triggers in a repository\n\nThis example shows details about triggers configured for an AWS CodeCommit repository named MyDemoRepo.\n\naws codecommit get-repository-triggers \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"configurationId\": \"f7579e13-b83e-4027-aaef-650c0EXAMPLE\",\n    \"triggers\": [\n        {\n            \"destinationArn\": \"arn:aws:sns:us-east-1:111111111111:MyCodeCommitTopic\",\n            \"branches\": [\n                \"main\",\n                \"preprod\"\n            ],\n            \"name\": \"MyFirstTrigger\",\n            \"customData\": \"\",\n            \"events\": [\n                \"all\"\n            ]\n        },\n        {\n            \"destinationArn\": \"arn:aws:lambda:us-east-1:111111111111:function:MyCodeCommitPythonFunction\",\n            \"branches\": [],\n            \"name\": \"MySecondTrigger\",\n            \"customData\": \"EXAMPLE\",\n            \"events\": [\n                \"all\"\n            ]\n        }\n    ]\n}\n"
    },
    {
      "command_name": "list-approval-rule-templates",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/list-approval-rule-templates.html",
      "command_description": "Description\n\nLists all approval rule templates in the specified AWS Region in your AWS account. If an AWS Region is not specified, the AWS Region where you are signed in is used.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-approval-rule-templates\n[--next-token <value>]\n[--max-results <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--next-token <value>]",
        "[--max-results <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--next-token (string)\n\nAn enumeration token that, when provided in a request, returns the next batch of the results.\n\n--max-results (integer)\n\nA non-zero, non-negative integer used to limit the number of returned results.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRuleTemplateNames -> (list)\n\nThe names of all the approval rule templates found in the AWS Region for your AWS account.\n\n(string)\n\nnextToken -> (string)\n\nAn enumeration token that allows the operation to batch the next results of the operation.",
      "command_examples": "Examples\n\nTo list all approval rule templates in an AWS Region\n\nThe following list-approval-rule-templates example lists all approval rule templates in the specified Region. If no AWS Region is specified as a parameter, the command returns approval rule templates for the region specified in the AWS CLI profile used to run the command.\n\naws codecommit list-approval-rule-templates \\\n    --region us-east-2\n\n\nOutput:\n\n{\n    \"approvalRuleTemplateNames\": [\n        \"2-approver-rule-for-main\",\n        \"1-approver-rule-for-all-pull-requests\"\n    ]\n}\n\n\nFor more information, see Manage Approval Rule Templates in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "list-associated-approval-rule-templates-for-repository",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/list-associated-approval-rule-templates-for-repository.html",
      "command_description": "Description\n\nLists all approval rule templates that are associated with a specified repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-associated-approval-rule-templates-for-repository\n--repository-name <value>\n[--next-token <value>]\n[--max-results <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--next-token <value>]",
        "[--max-results <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository for which you want to list all associated approval rule templates.\n\n--next-token (string)\n\nAn enumeration token that, when provided in a request, returns the next batch of the results.\n\n--max-results (integer)\n\nA non-zero, non-negative integer used to limit the number of returned results.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRuleTemplateNames -> (list)\n\nThe names of all approval rule templates associated with the repository.\n\n(string)\n\nnextToken -> (string)\n\nAn enumeration token that allows the operation to batch the next results of the operation.",
      "command_examples": "Examples\n\nTo list all templates associated with a repository\n\nThe following list-associated-approval-rule-templates-for-repository example lists all approval rule templates associated with a repository named MyDemoRepo.\n\naws codecommit list-associated-approval-rule-templates-for-repository \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n  \"approvalRuleTemplateNames\": [\n    \"2-approver-rule-for-main\",\n    \"1-approver-rule-for-all-pull-requests\"\n  ]\n}\n\n\nFor more information, see Manage Approval Rule Templates in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "list-branches",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/list-branches.html",
      "command_description": "Description\n\nGets information about one or more branches in a repository.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-branches is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: branches",
      "command_synopsis": "Synopsis\n  list-branches\n--repository-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository that contains the branches.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nbranches -> (list)\n\nThe list of branch names.\n\n(string)\n\nnextToken -> (string)\n\nAn enumeration token that returns the batch of the results.",
      "command_examples": "Examples\n\nTo view a list of branch names\n\nThis example lists all branch names in an AWS CodeCommit repository.\n\naws codecommit list-branches \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"branches\": [\n        \"MyNewBranch\",\n        \"main\"\n    ]\n}\n"
    },
    {
      "command_name": "list-pull-requests",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/list-pull-requests.html",
      "command_description": "Description\n\nReturns a list of pull requests for a specified repository. The return list can be refined by pull request status or pull request author ARN.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-pull-requests is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: pullRequestIds",
      "command_synopsis": "Synopsis\n  list-pull-requests\n--repository-name <value>\n[--author-arn <value>]\n[--pull-request-status <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--page-size <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--author-arn <value>]",
        "[--pull-request-status <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--page-size <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository for which you want to list pull requests.\n\n--author-arn (string)\n\nOptional. The Amazon Resource Name (ARN) of the user who created the pull request. If used, this filters the results to pull requests created by that user.\n\n--pull-request-status (string)\n\nOptional. The status of the pull request. If used, this refines the results to the pull requests that match the specified status.\n\nPossible values:\n\nOPEN\n\nCLOSED\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--page-size (integer)\n\nThe size of each page to get in the AWS service call. This does not affect the number of items returned in the command’s output. Setting a smaller page size results in more calls to the AWS service, retrieving fewer items in each call. This can help prevent the AWS service calls from timing out.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npullRequestIds -> (list)\n\nThe system-generated IDs of the pull requests.\n\n(string)\n\nnextToken -> (string)\n\nAn enumeration token that allows the operation to batch the next results of the operation.",
      "command_examples": "Examples\n\nTo view a list of pull requests in a repository\n\nThis example demonstrates how to list pull requests created by an IAM user with the ARN ‘arn:aws:iam::111111111111:user/Li_Juan’ and the status of ‘CLOSED’ in an AWS CodeCommit repository named ‘MyDemoRepo’:\n\naws codecommit list-pull-requests --author-arn arn:aws:iam::111111111111:user/Li_Juan --pull-request-status CLOSED --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n \"nextToken\": \"\",\n \"pullRequestIds\": [\"2\",\"12\",\"16\",\"22\",\"23\",\"35\",\"30\",\"39\",\"47\"]\n}\n"
    },
    {
      "command_name": "list-repositories",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/list-repositories.html",
      "command_description": "Description\n\nGets information about one or more repositories.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.\n\nlist-repositories is a paginated operation. Multiple API calls may be issued in order to retrieve the entire data set of results. You can disable pagination by providing the --no-paginate argument. When using --output text and the --query argument on a paginated response, the --query argument must extract data from the results of the following query expressions: repositories",
      "command_synopsis": "Synopsis\n  list-repositories\n[--sort-by <value>]\n[--order <value>]\n[--cli-input-json | --cli-input-yaml]\n[--starting-token <value>]\n[--max-items <value>]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "[--sort-by <value>]",
        "[--order <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--starting-token <value>]",
        "[--max-items <value>]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--sort-by (string)\n\nThe criteria used to sort the results of a list repositories operation.\n\nPossible values:\n\nrepositoryName\n\nlastModifiedDate\n\n--order (string)\n\nThe order in which to sort the results of a list repositories operation.\n\nPossible values:\n\nascending\n\ndescending\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--starting-token (string)\n\nA token to specify where to start paginating. This is the NextToken from a previously truncated response.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--max-items (integer)\n\nThe total number of items to return in the command’s output. If the total number of items available is more than the value specified, a NextToken is provided in the command’s output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI.\n\nFor usage examples, see Pagination in the AWS Command Line Interface User Guide .\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nrepositories -> (list)\n\nLists the repositories called by the list repositories operation.\n\n(structure)\n\nInformation about a repository name and ID.\n\nrepositoryName -> (string)\n\nThe name associated with the repository.\n\nrepositoryId -> (string)\n\nThe ID associated with the repository.\n\nnextToken -> (string)\n\nAn enumeration token that allows the operation to batch the results of the operation. Batch sizes are 1,000 for list repository operations. When the client sends the token back to AWS CodeCommit, another page of 1,000 records is retrieved.",
      "command_examples": "Examples\n\nTo view a list of repositories\n\nThis example lists all AWS CodeCommit repositories associated with the user’s AWS account.\n\nCommand:\n\naws codecommit list-repositories\n\n\nOutput:\n\n{\n  \"repositories\": [\n      {\n         \"repositoryName\": \"MyDemoRepo\"\n         \"repositoryId\": \"f7579e13-b83e-4027-aaef-650c0EXAMPLE\",\n      },\n      {\n         \"repositoryName\": \"MyOtherDemoRepo\"\n         \"repositoryId\": \"cfc29ac4-b0cb-44dc-9990-f6f51EXAMPLE\"\n      }\n  ]\n}\n"
    },
    {
      "command_name": "list-repositories-for-approval-rule-template",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/list-repositories-for-approval-rule-template.html",
      "command_description": "Description\n\nLists all repositories associated with the specified approval rule template.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-repositories-for-approval-rule-template\n--approval-rule-template-name <value>\n[--next-token <value>]\n[--max-results <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--approval-rule-template-name <value>",
        "[--next-token <value>]",
        "[--max-results <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--approval-rule-template-name (string)\n\nThe name of the approval rule template for which you want to list repositories that are associated with that template.\n\n--next-token (string)\n\nAn enumeration token that, when provided in a request, returns the next batch of the results.\n\n--max-results (integer)\n\nA non-zero, non-negative integer used to limit the number of returned results.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nrepositoryNames -> (list)\n\nA list of repository names that are associated with the specified approval rule template.\n\n(string)\n\nnextToken -> (string)\n\nAn enumeration token that allows the operation to batch the next results of the operation.",
      "command_examples": "Examples\n\nTo list all repositories associated with a template\n\nThe following list-repositories-for-approval-rule-template example lists all repositories associated with the specified approval rule template.\n\naws codecommit list-repositories-for-approval-rule-template \\\n    --approval-rule-template-name 2-approver-rule-for-main\n\n\nOutput:\n\n{\n    \"repositoryNames\": [\n        \"MyDemoRepo\",\n        \"MyClonedRepo\"\n    ]\n}\n\n\nFor more information, see Manage Approval Rule Templates in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "list-tags-for-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/list-tags-for-resource.html",
      "command_description": "Description\n\nGets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see CodeCommit Resources and Operations in the*AWS CodeCommit User Guide* .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  list-tags-for-resource\n--resource-arn <value>\n[--next-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "[--next-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe Amazon Resource Name (ARN) of the resource for which you want to get information about tags, if any.\n\n--next-token (string)\n\nAn enumeration token that, when provided in a request, returns the next batch of the results.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ntags -> (map)\n\nA list of tag key and value pairs associated with the specified resource.\n\nkey -> (string)\n\nvalue -> (string)\n\nnextToken -> (string)\n\nAn enumeration token that allows the operation to batch the next results of the operation.",
      "command_examples": "Examples\n\nTo view the AWS tags for a repository\n\nThe following list-tags-for-resource example lists tag keys and tag values for the specified repository.\n\naws codecommit list-tags-for-resource \\\n    --resource-arn arn:aws:codecommit:us-west-2:111111111111:MyDemoRepo\n\n\nOutput:\n\n{\n    \"tags\": {\n        \"Status\": \"Secret\",\n        \"Team\": \"Saanvi\"\n    }\n}\n\n\nFor more information, see View Tags for a Repository in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "merge-branches-by-fast-forward",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/merge-branches-by-fast-forward.html",
      "command_description": "Description\n\nMerges two branches using the fast-forward merge strategy.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  merge-branches-by-fast-forward\n--repository-name <value>\n--source-commit-specifier <value>\n--destination-commit-specifier <value>\n[--target-branch <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--source-commit-specifier <value>",
        "--destination-commit-specifier <value>",
        "[--target-branch <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you want to merge two branches.\n\n--source-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--destination-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--target-branch (string)\n\nThe branch where the merge is applied.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommitId -> (string)\n\nThe commit ID of the merge in the destination or target branch.\n\ntreeId -> (string)\n\nThe tree ID of the merge in the destination or target branch.",
      "command_examples": "Examples\n\nTo merge two branches using the fast-forward merge strategy\n\nThe following merge-branches-by-fast-forward example merges the specified source branch with the specified destination branch in a repository named MyDemoRepo.\n\naws codecommit merge-branches-by-fast-forward \\\n    --source-commit-specifier bugfix-bug1234 \\\n    --destination-commit-specifier bugfix-bug1233 \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"commitId\": \"4f178133EXAMPLE\",\n    \"treeId\": \"389765daEXAMPLE\"\n}\n\n\nFor more information, see Compare and Merge Branches in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "merge-branches-by-squash",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/merge-branches-by-squash.html",
      "command_description": "Description\n\nMerges two branches using the squash merge strategy.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  merge-branches-by-squash\n--repository-name <value>\n--source-commit-specifier <value>\n--destination-commit-specifier <value>\n[--target-branch <value>]\n[--conflict-detail-level <value>]\n[--conflict-resolution-strategy <value>]\n[--author-name <value>]\n[--email <value>]\n[--commit-message <value>]\n[--keep-empty-folders | --no-keep-empty-folders]\n[--conflict-resolution <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--source-commit-specifier <value>",
        "--destination-commit-specifier <value>",
        "[--target-branch <value>]",
        "[--conflict-detail-level <value>]",
        "[--conflict-resolution-strategy <value>]",
        "[--author-name <value>]",
        "[--email <value>]",
        "[--commit-message <value>]",
        "[--keep-empty-folders | --no-keep-empty-folders]",
        "[--conflict-resolution <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you want to merge two branches.\n\n--source-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--destination-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--target-branch (string)\n\nThe branch where the merge is applied.\n\n--conflict-detail-level (string)\n\nThe level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.\n\nPossible values:\n\nFILE_LEVEL\n\nLINE_LEVEL\n\n--conflict-resolution-strategy (string)\n\nSpecifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.\n\nPossible values:\n\nNONE\n\nACCEPT_SOURCE\n\nACCEPT_DESTINATION\n\nAUTOMERGE\n\n--author-name (string)\n\nThe name of the author who created the commit. This information is used as both the author and committer for the commit.\n\n--email (string)\n\nThe email address of the person merging the branches. This information is used in the commit information for the merge.\n\n--commit-message (string)\n\nThe commit message for the merge.\n\n--keep-empty-folders | --no-keep-empty-folders (boolean)\n\nIf the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If this is specified as true, a .gitkeep file is created for empty folders. The default is false.\n\n--conflict-resolution (structure)\n\nIf AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.\n\nreplaceContents -> (list)\n\nFiles to have content replaced as part of the merge conflict resolution.\n\n(structure)\n\nInformation about a replacement content entry in the conflict of a merge or pull request operation.\n\nfilePath -> (string)\n\nThe path of the conflicting file.\n\nreplacementType -> (string)\n\nThe replacement type to use when determining how to resolve the conflict.\n\ncontent -> (blob)\n\nThe base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.\n\nfileMode -> (string)\n\nThe file mode to apply during conflict resoltion.\n\ndeleteFiles -> (list)\n\nFiles to be deleted as part of the merge conflict resolution.\n\n(structure)\n\nA file that is deleted as part of a commit.\n\nfilePath -> (string)\n\nThe full path of the file to be deleted, including the name of the file.\n\nsetFileModes -> (list)\n\nFile modes that are set as part of the merge conflict resolution.\n\n(structure)\n\nInformation about the file mode changes.\n\nfilePath -> (string)\n\nThe full path to the file, including the name of the file.\n\nfileMode -> (string)\n\nThe file mode for the file.\n\nShorthand Syntax:\n\nreplaceContents=[{filePath=string,replacementType=string,content=blob,fileMode=string},{filePath=string,replacementType=string,content=blob,fileMode=string}],deleteFiles=[{filePath=string},{filePath=string}],setFileModes=[{filePath=string,fileMode=string},{filePath=string,fileMode=string}]\n\n\nJSON Syntax:\n\n{\n  \"replaceContents\": [\n    {\n      \"filePath\": \"string\",\n      \"replacementType\": \"KEEP_BASE\"|\"KEEP_SOURCE\"|\"KEEP_DESTINATION\"|\"USE_NEW_CONTENT\",\n      \"content\": blob,\n      \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n    }\n    ...\n  ],\n  \"deleteFiles\": [\n    {\n      \"filePath\": \"string\"\n    }\n    ...\n  ],\n  \"setFileModes\": [\n    {\n      \"filePath\": \"string\",\n      \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n    }\n    ...\n  ]\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommitId -> (string)\n\nThe commit ID of the merge in the destination or target branch.\n\ntreeId -> (string)\n\nThe tree ID of the merge in the destination or target branch.",
      "command_examples": "Examples\n\nTo merge two branches using the squash merge strategy\n\nThe following merge-branches-by-squash example merges the specified source branch with the specified destination branch in a repository named MyDemoRepo.\n\naws codecommit merge-branches-by-squash \\\n    --source-commit-specifier bugfix-bug1234 \\\n    --destination-commit-specifier bugfix-bug1233 \\\n    --author-name \"Maria Garcia\" \\\n    --email \"maria_garcia@example.com\" \\\n    --commit-message \"Merging two fix branches to prepare for a general patch.\" \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"commitId\": \"4f178133EXAMPLE\",\n    \"treeId\": \"389765daEXAMPLE\"\n}\n\n\nFor more information, see Compare and Merge Branches in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "merge-branches-by-three-way",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/merge-branches-by-three-way.html",
      "command_description": "Description\n\nMerges two specified branches using the three-way merge strategy.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  merge-branches-by-three-way\n--repository-name <value>\n--source-commit-specifier <value>\n--destination-commit-specifier <value>\n[--target-branch <value>]\n[--conflict-detail-level <value>]\n[--conflict-resolution-strategy <value>]\n[--author-name <value>]\n[--email <value>]\n[--commit-message <value>]\n[--keep-empty-folders | --no-keep-empty-folders]\n[--conflict-resolution <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--source-commit-specifier <value>",
        "--destination-commit-specifier <value>",
        "[--target-branch <value>]",
        "[--conflict-detail-level <value>]",
        "[--conflict-resolution-strategy <value>]",
        "[--author-name <value>]",
        "[--email <value>]",
        "[--commit-message <value>]",
        "[--keep-empty-folders | --no-keep-empty-folders]",
        "[--conflict-resolution <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you want to merge two branches.\n\n--source-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--destination-commit-specifier (string)\n\nThe branch, tag, HEAD, or other fully qualified reference used to identify a commit (for example, a branch name or a full commit ID).\n\n--target-branch (string)\n\nThe branch where the merge is applied.\n\n--conflict-detail-level (string)\n\nThe level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.\n\nPossible values:\n\nFILE_LEVEL\n\nLINE_LEVEL\n\n--conflict-resolution-strategy (string)\n\nSpecifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.\n\nPossible values:\n\nNONE\n\nACCEPT_SOURCE\n\nACCEPT_DESTINATION\n\nAUTOMERGE\n\n--author-name (string)\n\nThe name of the author who created the commit. This information is used as both the author and committer for the commit.\n\n--email (string)\n\nThe email address of the person merging the branches. This information is used in the commit information for the merge.\n\n--commit-message (string)\n\nThe commit message to include in the commit information for the merge.\n\n--keep-empty-folders | --no-keep-empty-folders (boolean)\n\nIf the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false.\n\n--conflict-resolution (structure)\n\nIf AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.\n\nreplaceContents -> (list)\n\nFiles to have content replaced as part of the merge conflict resolution.\n\n(structure)\n\nInformation about a replacement content entry in the conflict of a merge or pull request operation.\n\nfilePath -> (string)\n\nThe path of the conflicting file.\n\nreplacementType -> (string)\n\nThe replacement type to use when determining how to resolve the conflict.\n\ncontent -> (blob)\n\nThe base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.\n\nfileMode -> (string)\n\nThe file mode to apply during conflict resoltion.\n\ndeleteFiles -> (list)\n\nFiles to be deleted as part of the merge conflict resolution.\n\n(structure)\n\nA file that is deleted as part of a commit.\n\nfilePath -> (string)\n\nThe full path of the file to be deleted, including the name of the file.\n\nsetFileModes -> (list)\n\nFile modes that are set as part of the merge conflict resolution.\n\n(structure)\n\nInformation about the file mode changes.\n\nfilePath -> (string)\n\nThe full path to the file, including the name of the file.\n\nfileMode -> (string)\n\nThe file mode for the file.\n\nShorthand Syntax:\n\nreplaceContents=[{filePath=string,replacementType=string,content=blob,fileMode=string},{filePath=string,replacementType=string,content=blob,fileMode=string}],deleteFiles=[{filePath=string},{filePath=string}],setFileModes=[{filePath=string,fileMode=string},{filePath=string,fileMode=string}]\n\n\nJSON Syntax:\n\n{\n  \"replaceContents\": [\n    {\n      \"filePath\": \"string\",\n      \"replacementType\": \"KEEP_BASE\"|\"KEEP_SOURCE\"|\"KEEP_DESTINATION\"|\"USE_NEW_CONTENT\",\n      \"content\": blob,\n      \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n    }\n    ...\n  ],\n  \"deleteFiles\": [\n    {\n      \"filePath\": \"string\"\n    }\n    ...\n  ],\n  \"setFileModes\": [\n    {\n      \"filePath\": \"string\",\n      \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n    }\n    ...\n  ]\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommitId -> (string)\n\nThe commit ID of the merge in the destination or target branch.\n\ntreeId -> (string)\n\nThe tree ID of the merge in the destination or target branch.",
      "command_examples": "Examples\n\nTo merge two branches using the three-way merge strategy\n\nThe following merge-branches-by-three-way example merges the specified source branch with the specified destination branch in a repository named MyDemoRepo.\n\naws codecommit merge-branches-by-three-way \\\n    --source-commit-specifier main \\\n    --destination-commit-specifier bugfix-bug1234 \\\n    --author-name \"Jorge Souza\" --email \"jorge_souza@example.com\" \\\n    --commit-message \"Merging changes from main to bugfix branch before additional testing.\" \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"commitId\": \"4f178133EXAMPLE\",\n    \"treeId\": \"389765daEXAMPLE\"\n}\n\n\nFor more information, see Compare and Merge Branches in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "merge-pull-request-by-fast-forward",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/merge-pull-request-by-fast-forward.html",
      "command_description": "Description\n\nAttempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the fast-forward merge strategy. If the merge is successful, it closes the pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  merge-pull-request-by-fast-forward\n--pull-request-id <value>\n--repository-name <value>\n[--source-commit-id <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--repository-name <value>",
        "[--source-commit-id <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request. To get this ID, use ListPullRequests .\n\n--repository-name (string)\n\nThe name of the repository where the pull request was created.\n\n--source-commit-id (string)\n\nThe full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npullRequest -> (structure)\n\nInformation about the specified pull request, including the merge.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\ntitle -> (string)\n\nThe user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users.\n\ndescription -> (string)\n\nThe user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.\n\nlastActivityDate -> (timestamp)\n\nThe day and time of the last user or system activity on the pull request, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the pull request was originally created, in timestamp format.\n\npullRequestStatus -> (string)\n\nThe status of the pull request. Pull request status can only change from OPEN to CLOSED .\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the user who created the pull request.\n\npullRequestTargets -> (list)\n\nThe targets of the pull request, including the source branch and destination branch for the pull request.\n\n(structure)\n\nReturns information about a pull request target.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the pull request source and destination branches.\n\nsourceReference -> (string)\n\nThe branch of the repository that contains the changes for the pull request. Also known as the source branch.\n\ndestinationReference -> (string)\n\nThe branch of the repository where the pull request changes are merged. Also known as the destination branch.\n\ndestinationCommit -> (string)\n\nThe full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.\n\nsourceCommit -> (string)\n\nThe full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.\n\nmergeBase -> (string)\n\nThe commit ID of the most recent commit that the source branch and the destination branch have in common.\n\nmergeMetadata -> (structure)\n\nReturns metadata about the state of the merge, including whether the merge has been made.\n\nisMerged -> (boolean)\n\nA Boolean value indicating whether the merge has been made.\n\nmergedBy -> (string)\n\nThe Amazon Resource Name (ARN) of the user who merged the branches.\n\nmergeCommitId -> (string)\n\nThe commit ID for the merge commit, if any.\n\nmergeOption -> (string)\n\nThe merge strategy used in the merge.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\nrevisionId -> (string)\n\nThe system-generated revision ID for the pull request.\n\napprovalRules -> (list)\n\nThe approval rules applied to the pull request.\n\n(structure)\n\nReturns information about an approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.\n\noriginApprovalRuleTemplate -> (structure)\n\nThe approval rule template used to create the rule.\n\napprovalRuleTemplateId -> (string)\n\nThe ID of the template that created the approval rule.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the template that created the approval rule.",
      "command_examples": "Examples\n\nTo merge and close a pull request\n\nThis example demonstrates how to merge and close a pull request with the ID of ‘47’ and a source commit ID of ‘99132ab0EXAMPLE’ in a repository named MyDemoRepo.\n\naws codecommit merge-pull-request-by-fast-forward \\\n    --pull-request-id 47 \\\n    --source-commit-id 99132ab0EXAMPLE \\\n    --repository-name MyDemoRepo\n\n\nOutput:\n\n{\n    \"pullRequest\": {\n        \"approvalRules\": [\n            {\n                \"approvalRuleContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 1,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n                \"approvalRuleId\": \"dd8b17fe-EXAMPLE\",\n                \"approvalRuleName\": \"I want one approver for this pull request\",\n                \"creationDate\": 1571356106.936,\n                \"lastModifiedDate\": 571356106.936,\n                \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n                \"ruleContentSha256\": \"4711b576EXAMPLE\"\n            }\n        ],\n        \"authorArn\": \"arn:aws:iam::123456789012:user/Li_Juan\",\n        \"clientRequestToken\": \"\",\n        \"creationDate\": 1508530823.142,\n        \"description\": \"Review the latest changes and updates to the global variables\",\n        \"lastActivityDate\": 1508887223.155,\n        \"pullRequestId\": \"47\",\n        \"pullRequestStatus\": \"CLOSED\",\n        \"pullRequestTargets\": [\n            {\n                \"destinationCommit\": \"9f31c968EXAMPLE\",\n                \"destinationReference\": \"refs/heads/main\",\n                \"mergeMetadata\": {\n                    \"isMerged\": true,\n                    \"mergedBy\": \"arn:aws:iam::123456789012:user/Mary_Major\"\n                },\n                \"repositoryName\": \"MyDemoRepo\",\n                \"sourceCommit\": \"99132ab0EXAMPLE\",\n                \"sourceReference\": \"refs/heads/variables-branch\"\n            }\n        ],\n        \"title\": \"Consolidation of global variables\"\n    }\n}\n\n\nFor more information, see Merge a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "merge-pull-request-by-squash",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/merge-pull-request-by-squash.html",
      "command_description": "Description\n\nAttempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the squash merge strategy. If the merge is successful, it closes the pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  merge-pull-request-by-squash\n--pull-request-id <value>\n--repository-name <value>\n[--source-commit-id <value>]\n[--conflict-detail-level <value>]\n[--conflict-resolution-strategy <value>]\n[--commit-message <value>]\n[--author-name <value>]\n[--email <value>]\n[--keep-empty-folders | --no-keep-empty-folders]\n[--conflict-resolution <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--repository-name <value>",
        "[--source-commit-id <value>]",
        "[--conflict-detail-level <value>]",
        "[--conflict-resolution-strategy <value>]",
        "[--commit-message <value>]",
        "[--author-name <value>]",
        "[--email <value>]",
        "[--keep-empty-folders | --no-keep-empty-folders]",
        "[--conflict-resolution <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request. To get this ID, use ListPullRequests .\n\n--repository-name (string)\n\nThe name of the repository where the pull request was created.\n\n--source-commit-id (string)\n\nThe full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.\n\n--conflict-detail-level (string)\n\nThe level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.\n\nPossible values:\n\nFILE_LEVEL\n\nLINE_LEVEL\n\n--conflict-resolution-strategy (string)\n\nSpecifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.\n\nPossible values:\n\nNONE\n\nACCEPT_SOURCE\n\nACCEPT_DESTINATION\n\nAUTOMERGE\n\n--commit-message (string)\n\nThe commit message to include in the commit information for the merge.\n\n--author-name (string)\n\nThe name of the author who created the commit. This information is used as both the author and committer for the commit.\n\n--email (string)\n\nThe email address of the person merging the branches. This information is used in the commit information for the merge.\n\n--keep-empty-folders | --no-keep-empty-folders (boolean)\n\nIf the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false.\n\n--conflict-resolution (structure)\n\nIf AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.\n\nreplaceContents -> (list)\n\nFiles to have content replaced as part of the merge conflict resolution.\n\n(structure)\n\nInformation about a replacement content entry in the conflict of a merge or pull request operation.\n\nfilePath -> (string)\n\nThe path of the conflicting file.\n\nreplacementType -> (string)\n\nThe replacement type to use when determining how to resolve the conflict.\n\ncontent -> (blob)\n\nThe base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.\n\nfileMode -> (string)\n\nThe file mode to apply during conflict resoltion.\n\ndeleteFiles -> (list)\n\nFiles to be deleted as part of the merge conflict resolution.\n\n(structure)\n\nA file that is deleted as part of a commit.\n\nfilePath -> (string)\n\nThe full path of the file to be deleted, including the name of the file.\n\nsetFileModes -> (list)\n\nFile modes that are set as part of the merge conflict resolution.\n\n(structure)\n\nInformation about the file mode changes.\n\nfilePath -> (string)\n\nThe full path to the file, including the name of the file.\n\nfileMode -> (string)\n\nThe file mode for the file.\n\nShorthand Syntax:\n\nreplaceContents=[{filePath=string,replacementType=string,content=blob,fileMode=string},{filePath=string,replacementType=string,content=blob,fileMode=string}],deleteFiles=[{filePath=string},{filePath=string}],setFileModes=[{filePath=string,fileMode=string},{filePath=string,fileMode=string}]\n\n\nJSON Syntax:\n\n{\n  \"replaceContents\": [\n    {\n      \"filePath\": \"string\",\n      \"replacementType\": \"KEEP_BASE\"|\"KEEP_SOURCE\"|\"KEEP_DESTINATION\"|\"USE_NEW_CONTENT\",\n      \"content\": blob,\n      \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n    }\n    ...\n  ],\n  \"deleteFiles\": [\n    {\n      \"filePath\": \"string\"\n    }\n    ...\n  ],\n  \"setFileModes\": [\n    {\n      \"filePath\": \"string\",\n      \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n    }\n    ...\n  ]\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npullRequest -> (structure)\n\nReturns information about a pull request.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\ntitle -> (string)\n\nThe user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users.\n\ndescription -> (string)\n\nThe user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.\n\nlastActivityDate -> (timestamp)\n\nThe day and time of the last user or system activity on the pull request, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the pull request was originally created, in timestamp format.\n\npullRequestStatus -> (string)\n\nThe status of the pull request. Pull request status can only change from OPEN to CLOSED .\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the user who created the pull request.\n\npullRequestTargets -> (list)\n\nThe targets of the pull request, including the source branch and destination branch for the pull request.\n\n(structure)\n\nReturns information about a pull request target.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the pull request source and destination branches.\n\nsourceReference -> (string)\n\nThe branch of the repository that contains the changes for the pull request. Also known as the source branch.\n\ndestinationReference -> (string)\n\nThe branch of the repository where the pull request changes are merged. Also known as the destination branch.\n\ndestinationCommit -> (string)\n\nThe full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.\n\nsourceCommit -> (string)\n\nThe full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.\n\nmergeBase -> (string)\n\nThe commit ID of the most recent commit that the source branch and the destination branch have in common.\n\nmergeMetadata -> (structure)\n\nReturns metadata about the state of the merge, including whether the merge has been made.\n\nisMerged -> (boolean)\n\nA Boolean value indicating whether the merge has been made.\n\nmergedBy -> (string)\n\nThe Amazon Resource Name (ARN) of the user who merged the branches.\n\nmergeCommitId -> (string)\n\nThe commit ID for the merge commit, if any.\n\nmergeOption -> (string)\n\nThe merge strategy used in the merge.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\nrevisionId -> (string)\n\nThe system-generated revision ID for the pull request.\n\napprovalRules -> (list)\n\nThe approval rules applied to the pull request.\n\n(structure)\n\nReturns information about an approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.\n\noriginApprovalRuleTemplate -> (structure)\n\nThe approval rule template used to create the rule.\n\napprovalRuleTemplateId -> (string)\n\nThe ID of the template that created the approval rule.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the template that created the approval rule.",
      "command_examples": "Examples\n\nTo merge a pull request using the squash merge strategy\n\nThe following merge-pull-request-by-squash example merges and closes the specified pull request using the conflict resolution strategy of ACCEPT_SOURCE in a repository named MyDemoRepo.\n\naws codecommit merge-pull-request-by-squash \\\n    --pull-request-id 47 \\\n    --source-commit-id 99132ab0EXAMPLE \\\n    --repository-name MyDemoRepo \\\n    --conflict-detail-level LINE_LEVEL \\\n    --conflict-resolution-strategy ACCEPT_SOURCE \\\n    --name \"Jorge Souza\" --email \"jorge_souza@example.com\" \\\n    --commit-message \"Merging pull request 47 by squash and accepting source in merge conflicts\"\n\n\nOutput:\n\n{\n    \"pullRequest\": {\n        \"approvalRules\": [\n            {\n                \"approvalRuleContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"DestinationReferences\\\": [\\\"refs/heads/main\\\"],\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n                \"approvalRuleId\": \"dd8b17fe-EXAMPLE\",\n                \"approvalRuleName\": \"2-approver-rule-for-main\",\n                \"creationDate\": 1571356106.936,\n                \"lastModifiedDate\": 571356106.936,\n                \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n                \"originApprovalRuleTemplate\": {\n                    \"approvalRuleTemplateId\": \"dd8b17fe-EXAMPLE\",\n                    \"approvalRuleTemplateName\": \"2-approver-rule-for-main\"\n                },\n                \"ruleContentSha256\": \"4711b576EXAMPLE\"\n            }\n        ],\n        \"authorArn\": \"arn:aws:iam::123456789012:user/Li_Juan\",\n        \"clientRequestToken\": \"\",\n        \"creationDate\": 1508530823.142,\n        \"description\": \"Review the latest changes and updates to the global variables\",\n        \"lastActivityDate\": 1508887223.155,\n        \"pullRequestId\": \"47\",\n        \"pullRequestStatus\": \"CLOSED\",\n        \"pullRequestTargets\": [\n            {\n                \"destinationCommit\": \"9f31c968EXAMPLE\",\n                \"destinationReference\": \"refs/heads/main\",\n                \"mergeMetadata\": {\n                    \"isMerged\": true,\n                    \"mergedBy\": \"arn:aws:iam::123456789012:user/Mary_Major\"\n                },\n                \"repositoryName\": \"MyDemoRepo\",\n                \"sourceCommit\": \"99132ab0EXAMPLE\",\n                \"sourceReference\": \"refs/heads/variables-branch\"\n            }\n        ],\n        \"title\": \"Consolidation of global variables\"\n    }\n}\n\n\nFor more information, see Merge a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "merge-pull-request-by-three-way",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/merge-pull-request-by-three-way.html",
      "command_description": "Description\n\nAttempts to merge the source commit of a pull request into the specified destination branch for that pull request at the specified commit using the three-way merge strategy. If the merge is successful, it closes the pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  merge-pull-request-by-three-way\n--pull-request-id <value>\n--repository-name <value>\n[--source-commit-id <value>]\n[--conflict-detail-level <value>]\n[--conflict-resolution-strategy <value>]\n[--commit-message <value>]\n[--author-name <value>]\n[--email <value>]\n[--keep-empty-folders | --no-keep-empty-folders]\n[--conflict-resolution <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--repository-name <value>",
        "[--source-commit-id <value>]",
        "[--conflict-detail-level <value>]",
        "[--conflict-resolution-strategy <value>]",
        "[--commit-message <value>]",
        "[--author-name <value>]",
        "[--email <value>]",
        "[--keep-empty-folders | --no-keep-empty-folders]",
        "[--conflict-resolution <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request. To get this ID, use ListPullRequests .\n\n--repository-name (string)\n\nThe name of the repository where the pull request was created.\n\n--source-commit-id (string)\n\nThe full commit ID of the original or updated commit in the pull request source branch. Pass this value if you want an exception thrown if the current commit ID of the tip of the source branch does not match this commit ID.\n\n--conflict-detail-level (string)\n\nThe level of conflict detail to use. If unspecified, the default FILE_LEVEL is used, which returns a not-mergeable result if the same file has differences in both branches. If LINE_LEVEL is specified, a conflict is considered not mergeable if the same file in both branches has differences on the same line.\n\nPossible values:\n\nFILE_LEVEL\n\nLINE_LEVEL\n\n--conflict-resolution-strategy (string)\n\nSpecifies which branch to use when resolving conflicts, or whether to attempt automatically merging two versions of a file. The default is NONE, which requires any conflicts to be resolved manually before the merge operation is successful.\n\nPossible values:\n\nNONE\n\nACCEPT_SOURCE\n\nACCEPT_DESTINATION\n\nAUTOMERGE\n\n--commit-message (string)\n\nThe commit message to include in the commit information for the merge.\n\n--author-name (string)\n\nThe name of the author who created the commit. This information is used as both the author and committer for the commit.\n\n--email (string)\n\nThe email address of the person merging the branches. This information is used in the commit information for the merge.\n\n--keep-empty-folders | --no-keep-empty-folders (boolean)\n\nIf the commit contains deletions, whether to keep a folder or folder structure if the changes leave the folders empty. If true, a .gitkeep file is created for empty folders. The default is false.\n\n--conflict-resolution (structure)\n\nIf AUTOMERGE is the conflict resolution strategy, a list of inputs to use when resolving conflicts during a merge.\n\nreplaceContents -> (list)\n\nFiles to have content replaced as part of the merge conflict resolution.\n\n(structure)\n\nInformation about a replacement content entry in the conflict of a merge or pull request operation.\n\nfilePath -> (string)\n\nThe path of the conflicting file.\n\nreplacementType -> (string)\n\nThe replacement type to use when determining how to resolve the conflict.\n\ncontent -> (blob)\n\nThe base-64 encoded content to use when the replacement type is USE_NEW_CONTENT.\n\nfileMode -> (string)\n\nThe file mode to apply during conflict resoltion.\n\ndeleteFiles -> (list)\n\nFiles to be deleted as part of the merge conflict resolution.\n\n(structure)\n\nA file that is deleted as part of a commit.\n\nfilePath -> (string)\n\nThe full path of the file to be deleted, including the name of the file.\n\nsetFileModes -> (list)\n\nFile modes that are set as part of the merge conflict resolution.\n\n(structure)\n\nInformation about the file mode changes.\n\nfilePath -> (string)\n\nThe full path to the file, including the name of the file.\n\nfileMode -> (string)\n\nThe file mode for the file.\n\nShorthand Syntax:\n\nreplaceContents=[{filePath=string,replacementType=string,content=blob,fileMode=string},{filePath=string,replacementType=string,content=blob,fileMode=string}],deleteFiles=[{filePath=string},{filePath=string}],setFileModes=[{filePath=string,fileMode=string},{filePath=string,fileMode=string}]\n\n\nJSON Syntax:\n\n{\n  \"replaceContents\": [\n    {\n      \"filePath\": \"string\",\n      \"replacementType\": \"KEEP_BASE\"|\"KEEP_SOURCE\"|\"KEEP_DESTINATION\"|\"USE_NEW_CONTENT\",\n      \"content\": blob,\n      \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n    }\n    ...\n  ],\n  \"deleteFiles\": [\n    {\n      \"filePath\": \"string\"\n    }\n    ...\n  ],\n  \"setFileModes\": [\n    {\n      \"filePath\": \"string\",\n      \"fileMode\": \"EXECUTABLE\"|\"NORMAL\"|\"SYMLINK\"\n    }\n    ...\n  ]\n}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npullRequest -> (structure)\n\nReturns information about a pull request.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\ntitle -> (string)\n\nThe user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users.\n\ndescription -> (string)\n\nThe user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.\n\nlastActivityDate -> (timestamp)\n\nThe day and time of the last user or system activity on the pull request, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the pull request was originally created, in timestamp format.\n\npullRequestStatus -> (string)\n\nThe status of the pull request. Pull request status can only change from OPEN to CLOSED .\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the user who created the pull request.\n\npullRequestTargets -> (list)\n\nThe targets of the pull request, including the source branch and destination branch for the pull request.\n\n(structure)\n\nReturns information about a pull request target.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the pull request source and destination branches.\n\nsourceReference -> (string)\n\nThe branch of the repository that contains the changes for the pull request. Also known as the source branch.\n\ndestinationReference -> (string)\n\nThe branch of the repository where the pull request changes are merged. Also known as the destination branch.\n\ndestinationCommit -> (string)\n\nThe full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.\n\nsourceCommit -> (string)\n\nThe full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.\n\nmergeBase -> (string)\n\nThe commit ID of the most recent commit that the source branch and the destination branch have in common.\n\nmergeMetadata -> (structure)\n\nReturns metadata about the state of the merge, including whether the merge has been made.\n\nisMerged -> (boolean)\n\nA Boolean value indicating whether the merge has been made.\n\nmergedBy -> (string)\n\nThe Amazon Resource Name (ARN) of the user who merged the branches.\n\nmergeCommitId -> (string)\n\nThe commit ID for the merge commit, if any.\n\nmergeOption -> (string)\n\nThe merge strategy used in the merge.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\nrevisionId -> (string)\n\nThe system-generated revision ID for the pull request.\n\napprovalRules -> (list)\n\nThe approval rules applied to the pull request.\n\n(structure)\n\nReturns information about an approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.\n\noriginApprovalRuleTemplate -> (structure)\n\nThe approval rule template used to create the rule.\n\napprovalRuleTemplateId -> (string)\n\nThe ID of the template that created the approval rule.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the template that created the approval rule.",
      "command_examples": "Examples\n\nTo merge a pull request using the three-way merge strategy\n\nThe following merge-pull-request-by-three-way example merges and closes the specified pull request using the default options for conflict detail and conflict resolution strategy in a repository named MyDemoRepo.\n\naws codecommit merge-pull-request-by-three-way \\\n    --pull-request-id 47 \\\n    --source-commit-id 99132ab0EXAMPLE \\\n    --repository-name MyDemoRepo \\\n    --name \"Maria Garcia\" \\\n    --email \"maria_garcia@example.com\" \\\n    --commit-message \"Merging pull request 47 by three-way with default options\"\n\n\nOutput:\n\n{\n    \"pullRequest\": {\n        \"approvalRules\": [\n            {\n                \"approvalRuleContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"DestinationReferences\\\": [\\\"refs/heads/main\\\"],\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n                \"approvalRuleId\": \"dd8b17fe-EXAMPLE\",\n                \"approvalRuleName\": \"2-approver-rule-for-main\",\n                \"creationDate\": 1571356106.936,\n                \"lastModifiedDate\": 571356106.936,\n                \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n                \"originApprovalRuleTemplate\": {\n                    \"approvalRuleTemplateId\": \"dd8b17fe-EXAMPLE\",\n                    \"approvalRuleTemplateName\": \"2-approver-rule-for-main\"\n                },\n                \"ruleContentSha256\": \"4711b576EXAMPLE\"\n            }\n        ],\n        \"authorArn\": \"arn:aws:iam::123456789012:user/Li_Juan\",\n        \"clientRequestToken\": \"\",\n        \"creationDate\": 1508530823.142,\n        \"description\": \"Review the latest changes and updates to the global variables\",\n        \"lastActivityDate\": 1508887223.155,\n        \"pullRequestId\": \"47\",\n        \"pullRequestStatus\": \"CLOSED\",\n        \"pullRequestTargets\": [\n            {\n                \"destinationCommit\": \"9f31c968EXAMPLE\",\n                \"destinationReference\": \"refs/heads/main\",\n                \"mergeMetadata\": {\n                    \"isMerged\": true,\n                    \"mergedBy\": \"arn:aws:iam::123456789012:user/Mary_Major\"\n                },\n                \"repositoryName\": \"MyDemoRepo\",\n                \"sourceCommit\": \"99132ab0EXAMPLE\",\n                \"sourceReference\": \"refs/heads/variables-branch\"\n            }\n        ],\n        \"title\": \"Consolidation of global variables\"\n    }\n}\n\n\nFor more information, see Merge a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "override-pull-request-approval-rules",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/override-pull-request-approval-rules.html",
      "command_description": "Description\n\nSets aside (overrides) all approval rule requirements for a specified pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  override-pull-request-approval-rules\n--pull-request-id <value>\n--revision-id <value>\n--override-status <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--revision-id <value>",
        "--override-status <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request for which you want to override all approval rule requirements. To get this information, use GetPullRequest .\n\n--revision-id (string)\n\nThe system-generated ID of the most recent revision of the pull request. You cannot override approval rules for anything but the most recent revision of a pull request. To get the revision ID, use GetPullRequest.\n\n--override-status (string)\n\nWhether you want to set aside approval rule requirements for the pull request (OVERRIDE) or revoke a previous override and apply approval rule requirements (REVOKE). REVOKE status is not stored.\n\nPossible values:\n\nOVERRIDE\n\nREVOKE\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo override approval rule requirements on a pull request\n\nThe following override-pull-request-approval-rules example overrides approval rules on the specified pull request. To revoke an override instead, set the --override-status parameter value to REVOKE.\n\naws codecommit override-pull-request-approval-rules \\\n    --pull-request-id 34  \\\n    --revision-id 927df8d8EXAMPLE \\\n    --override-status OVERRIDE\n\n\nThis command produces no output.\n\nFor more information, see Override Approval Rules on a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "post-comment-for-compared-commit",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/post-comment-for-compared-commit.html",
      "command_description": "Description\n\nPosts a comment on the comparison between two commits.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  post-comment-for-compared-commit\n--repository-name <value>\n[--before-commit-id <value>]\n--after-commit-id <value>\n[--location <value>]\n--content <value>\n[--client-request-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--before-commit-id <value>]",
        "--after-commit-id <value>",
        "[--location <value>]",
        "--content <value>",
        "[--client-request-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you want to post a comment on the comparison between commits.\n\n--before-commit-id (string)\n\nTo establish the directionality of the comparison, the full commit ID of the before commit. Required for commenting on any commit unless that commit is the initial commit.\n\n--after-commit-id (string)\n\nTo establish the directionality of the comparison, the full commit ID of the after commit.\n\n--location (structure)\n\nThe location of the comparison where you want to comment.\n\nfilePath -> (string)\n\nThe name of the file being compared, including its extension and subdirectory, if any.\n\nfilePosition -> (long)\n\nThe position of a change in a compared file, in line number format.\n\nrelativeFileVersion -> (string)\n\nIn a comparison of commits or a pull request, whether the change is in the before or after of that comparison.\n\nShorthand Syntax:\n\nfilePath=string,filePosition=long,relativeFileVersion=string\n\n\nJSON Syntax:\n\n{\n  \"filePath\": \"string\",\n  \"filePosition\": long,\n  \"relativeFileVersion\": \"BEFORE\"|\"AFTER\"\n}\n\n\n--content (string)\n\nThe content of the comment you want to make.\n\n--client-request-token (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nrepositoryName -> (string)\n\nThe name of the repository where you posted a comment on the comparison between commits.\n\nbeforeCommitId -> (string)\n\nIn the directionality you established, the full commit ID of the before commit.\n\nafterCommitId -> (string)\n\nIn the directionality you established, the full commit ID of the after commit.\n\nbeforeBlobId -> (string)\n\nIn the directionality you established, the blob ID of the before blob.\n\nafterBlobId -> (string)\n\nIn the directionality you established, the blob ID of the after blob.\n\nlocation -> (structure)\n\nThe location of the comment in the comparison between the two commits.\n\nfilePath -> (string)\n\nThe name of the file being compared, including its extension and subdirectory, if any.\n\nfilePosition -> (long)\n\nThe position of a change in a compared file, in line number format.\n\nrelativeFileVersion -> (string)\n\nIn a comparison of commits or a pull request, whether the change is in the before or after of that comparison.\n\ncomment -> (structure)\n\nThe content of the comment you posted.\n\ncommentId -> (string)\n\nThe system-generated comment ID.\n\ncontent -> (string)\n\nThe content of the comment.\n\ninReplyTo -> (string)\n\nThe ID of the comment for which this comment is a reply, if any.\n\ncreationDate -> (timestamp)\n\nThe date and time the comment was created, in timestamp format.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the comment was most recently modified, in timestamp format.\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the person who posted the comment.\n\ndeleted -> (boolean)\n\nA Boolean value indicating whether the comment has been deleted.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\ncallerReactions -> (list)\n\nThe emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API.\n\n(string)\n\nreactionCounts -> (map)\n\nA string to integer map that represents the number of individual users who have responded to a comment with the specified reactions.\n\nkey -> (string)\n\nvalue -> (integer)",
      "command_examples": "Examples\n\nTo create a comment on a commit\n\nThis example demonstrates how to add the comment \"Can you add a test case for this?\" on the change to the cl_sample.js file in the comparison between two commits in a repository named MyDemoRepo.\n\naws codecommit post-comment-for-compared-commit \\\n    --repository-name MyDemoRepo \\\n    --before-commit-id 317f8570EXAMPLE \\\n    --after-commit-id 5d036259EXAMPLE \\\n    --client-request-token 123Example \\\n    --content \"Can you add a test case for this?\" \\\n    --location filePath=cl_sample.js,filePosition=1232,relativeFileVersion=AFTER\n\n\nOutput:\n\n{\n    \"afterBlobId\": \"1f330709EXAMPLE\",\n    \"afterCommitId\": \"317f8570EXAMPLE\",\n    \"beforeBlobId\": \"80906a4cEXAMPLE\",\n    \"beforeCommitId\": \"6e147360EXAMPLE\",\n    \"comment\": {\n        \"authorArn\": \"arn:aws:iam::111111111111:user/Li_Juan\",\n        \"clientRequestToken\": \"\",\n        \"commentId\": \"553b509bEXAMPLE56198325\",\n        \"content\": \"Can you add a test case for this?\",\n        \"creationDate\": 1508369612.203,\n        \"deleted\": false,\n        \"commentId\": \"abc123-EXAMPLE\",\n        \"lastModifiedDate\": 1508369612.203,\n        \"callerReactions\": [],\n        \"reactionCounts\": []\n    },\n    \"location\": {\n        \"filePath\": \"cl_sample.js\",\n        \"filePosition\": 1232,\n        \"relativeFileVersion\": \"AFTER\"\n    ,\n    \"repositoryName\": \"MyDemoRepo\"\n    }\n}\n"
    },
    {
      "command_name": "post-comment-for-pull-request",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/post-comment-for-pull-request.html",
      "command_description": "Description\n\nPosts a comment on a pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  post-comment-for-pull-request\n--pull-request-id <value>\n--repository-name <value>\n--before-commit-id <value>\n--after-commit-id <value>\n[--location <value>]\n--content <value>\n[--client-request-token <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--repository-name <value>",
        "--before-commit-id <value>",
        "--after-commit-id <value>",
        "[--location <value>]",
        "--content <value>",
        "[--client-request-token <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request. To get this ID, use ListPullRequests .\n\n--repository-name (string)\n\nThe name of the repository where you want to post a comment on a pull request.\n\n--before-commit-id (string)\n\nThe full commit ID of the commit in the destination branch that was the tip of the branch at the time the pull request was created.\n\n--after-commit-id (string)\n\nThe full commit ID of the commit in the source branch that is the current tip of the branch for the pull request when you post the comment.\n\n--location (structure)\n\nThe location of the change where you want to post your comment. If no location is provided, the comment is posted as a general comment on the pull request difference between the before commit ID and the after commit ID.\n\nfilePath -> (string)\n\nThe name of the file being compared, including its extension and subdirectory, if any.\n\nfilePosition -> (long)\n\nThe position of a change in a compared file, in line number format.\n\nrelativeFileVersion -> (string)\n\nIn a comparison of commits or a pull request, whether the change is in the before or after of that comparison.\n\nShorthand Syntax:\n\nfilePath=string,filePosition=long,relativeFileVersion=string\n\n\nJSON Syntax:\n\n{\n  \"filePath\": \"string\",\n  \"filePosition\": long,\n  \"relativeFileVersion\": \"BEFORE\"|\"AFTER\"\n}\n\n\n--content (string)\n\nThe content of your comment on the change.\n\n--client-request-token (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nrepositoryName -> (string)\n\nThe name of the repository where you posted a comment on a pull request.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\nbeforeCommitId -> (string)\n\nThe full commit ID of the commit in the source branch used to create the pull request, or in the case of an updated pull request, the full commit ID of the commit used to update the pull request.\n\nafterCommitId -> (string)\n\nThe full commit ID of the commit in the destination branch where the pull request is merged.\n\nbeforeBlobId -> (string)\n\nIn the directionality of the pull request, the blob ID of the before blob.\n\nafterBlobId -> (string)\n\nIn the directionality of the pull request, the blob ID of the after blob.\n\nlocation -> (structure)\n\nThe location of the change where you posted your comment.\n\nfilePath -> (string)\n\nThe name of the file being compared, including its extension and subdirectory, if any.\n\nfilePosition -> (long)\n\nThe position of a change in a compared file, in line number format.\n\nrelativeFileVersion -> (string)\n\nIn a comparison of commits or a pull request, whether the change is in the before or after of that comparison.\n\ncomment -> (structure)\n\nThe content of the comment you posted.\n\ncommentId -> (string)\n\nThe system-generated comment ID.\n\ncontent -> (string)\n\nThe content of the comment.\n\ninReplyTo -> (string)\n\nThe ID of the comment for which this comment is a reply, if any.\n\ncreationDate -> (timestamp)\n\nThe date and time the comment was created, in timestamp format.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the comment was most recently modified, in timestamp format.\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the person who posted the comment.\n\ndeleted -> (boolean)\n\nA Boolean value indicating whether the comment has been deleted.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\ncallerReactions -> (list)\n\nThe emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API.\n\n(string)\n\nreactionCounts -> (map)\n\nA string to integer map that represents the number of individual users who have responded to a comment with the specified reactions.\n\nkey -> (string)\n\nvalue -> (integer)",
      "command_examples": "Examples\n\nTo add a comment to a pull request\n\nThe following post-comment-for-pull-request example adds the comment “These don’t appear to be used anywhere. Can we remove them?” on the change to the ahs_count.py file in a pull request with the ID of 47 in a repository named MyDemoRepo.\n\naws codecommit post-comment-for-pull-request \\\n    --pull-request-id \"47\" \\\n    --repository-name MyDemoRepo \\\n    --before-commit-id 317f8570EXAMPLE \\\n    --after-commit-id 5d036259EXAMPLE \\\n    --client-request-token 123Example \\\n    --content \"These don't appear to be used anywhere. Can we remove them?\" \\\n    --location filePath=ahs_count.py,filePosition=367,relativeFileVersion=AFTER\n\n\nOutput:\n\n{\n     \"afterBlobId\": \"1f330709EXAMPLE\",\n     \"afterCommitId\": \"5d036259EXAMPLE\",\n     \"beforeBlobId\": \"80906a4cEXAMPLE\",\n     \"beforeCommitId\": \"317f8570EXAMPLE\",\n     \"comment\": {\n            \"authorArn\": \"arn:aws:iam::111111111111:user/Saanvi_Sarkar\",\n            \"clientRequestToken\": \"123Example\",\n            \"commentId\": \"abcd1234EXAMPLEb5678efgh\",\n            \"content\": \"These don't appear to be used anywhere. Can we remove them?\",\n            \"creationDate\": 1508369622.123,\n            \"deleted\": false,\n            \"CommentId\": \"\",\n            \"lastModifiedDate\": 1508369622.123,\n            \"callerReactions\": [],\n            \"reactionCounts\": []\n        },\n        \"location\": {\n            \"filePath\": \"ahs_count.py\",\n            \"filePosition\": 367,\n            \"relativeFileVersion\": \"AFTER\"\n         },\n     \"repositoryName\": \"MyDemoRepo\",\n     \"pullRequestId\": \"47\"\n}\n"
    },
    {
      "command_name": "post-comment-reply",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/post-comment-reply.html",
      "command_description": "Description\n\nPosts a comment in reply to an existing comment on a comparison between commits or a pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  post-comment-reply\n--in-reply-to <value>\n[--client-request-token <value>]\n--content <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--in-reply-to <value>",
        "[--client-request-token <value>]",
        "--content <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--in-reply-to (string)\n\nThe system-generated ID of the comment to which you want to reply. To get this ID, use GetCommentsForComparedCommit or GetCommentsForPullRequest .\n\n--client-request-token (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\n--content (string)\n\nThe contents of your reply to a comment.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncomment -> (structure)\n\nInformation about the reply to a comment.\n\ncommentId -> (string)\n\nThe system-generated comment ID.\n\ncontent -> (string)\n\nThe content of the comment.\n\ninReplyTo -> (string)\n\nThe ID of the comment for which this comment is a reply, if any.\n\ncreationDate -> (timestamp)\n\nThe date and time the comment was created, in timestamp format.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the comment was most recently modified, in timestamp format.\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the person who posted the comment.\n\ndeleted -> (boolean)\n\nA Boolean value indicating whether the comment has been deleted.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\ncallerReactions -> (list)\n\nThe emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API.\n\n(string)\n\nreactionCounts -> (map)\n\nA string to integer map that represents the number of individual users who have responded to a comment with the specified reactions.\n\nkey -> (string)\n\nvalue -> (integer)",
      "command_examples": "Examples\n\nTo reply to a comment on a commit or in a pull request\n\nThis example demonstrates how to add the reply \"Good catch. I'll remove them.\" to the comment with the system-generated ID of abcd1234EXAMPLEb5678efgh.\n\naws codecommit post-comment-reply \\\n    --in-reply-to abcd1234EXAMPLEb5678efgh \\\n    --content \"Good catch. I'll remove them.\" \\\n    --client-request-token 123Example\n\n\nOutput:\n\n{\n    \"comment\": {\n        \"authorArn\": \"arn:aws:iam::111111111111:user/Li_Juan\",\n        \"clientRequestToken\": \"123Example\",\n        \"commentId\": \"442b498bEXAMPLE5756813\",\n        \"content\": \"Good catch. I'll remove them.\",\n        \"creationDate\": 1508369829.136,\n        \"deleted\": false,\n        \"CommentId\": \"abcd1234EXAMPLEb5678efgh\",\n        \"lastModifiedDate\": 150836912.221,\n        \"callerReactions\": [],\n        \"reactionCounts\": []\n    }\n}\n"
    },
    {
      "command_name": "put-comment-reaction",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/put-comment-reaction.html",
      "command_description": "Description\n\nAdds or updates a reaction to a specified comment for the user whose identity is used to make the request. You can only add or update a reaction for yourself. You cannot add, modify, or delete a reaction for another user.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-comment-reaction\n--comment-id <value>\n--reaction-value <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--comment-id <value>",
        "--reaction-value <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--comment-id (string)\n\nThe ID of the comment to which you want to add or update a reaction.\n\n--reaction-value (string)\n\nThe emoji reaction you want to add or update. To remove a reaction, provide a value of blank or null. You can also provide the value of none. For information about emoji reaction values supported in AWS CodeCommit, see the AWS CodeCommit User Guide .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo reply to a comment on a commit with an emoji\n\nThe following put-comment-reaction example replies to a comment with the ID of abcd1234EXAMPLEb5678efgh with an emoji reaction value of :thumbsup:.\n\naws codecommit put-comment-reaction \\\n    --comment-id abcd1234EXAMPLEb5678efgh \\\n    --reaction-value :thumbsup:\n\n\nThis command produces no output.\n\nFor more information, see Comment on a commit in AWS CodeCommit in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "put-file",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/put-file.html",
      "command_description": "Description\n\nAdds or updates a file in a branch in an AWS CodeCommit repository, and generates a commit for the addition in the specified branch.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-file\n--repository-name <value>\n--branch-name <value>\n--file-content <value>\n--file-path <value>\n[--file-mode <value>]\n[--parent-commit-id <value>]\n[--commit-message <value>]\n[--name <value>]\n[--email <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--branch-name <value>",
        "--file-content <value>",
        "--file-path <value>",
        "[--file-mode <value>]",
        "[--parent-commit-id <value>]",
        "[--commit-message <value>]",
        "[--name <value>]",
        "[--email <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you want to add or update the file.\n\n--branch-name (string)\n\nThe name of the branch where you want to add or update the file. If this is an empty repository, this branch is created.\n\n--file-content (blob)\n\nThe content of the file, in binary object format.\n\n--file-path (string)\n\nThe name of the file you want to add or update, including the relative path to the file in the repository.\n\nNote\n\nIf the path does not currently exist in the repository, the path is created as part of adding the file.\n\n--file-mode (string)\n\nThe file mode permissions of the blob. Valid file mode permissions are listed here.\n\nPossible values:\n\nEXECUTABLE\n\nNORMAL\n\nSYMLINK\n\n--parent-commit-id (string)\n\nThe full commit ID of the head commit in the branch where you want to add or update the file. If this is an empty repository, no commit ID is required. If this is not an empty repository, a commit ID is required.\n\nThe commit ID must match the ID of the head commit at the time of the operation. Otherwise, an error occurs, and the file is not added or updated.\n\n--commit-message (string)\n\nA message about why this file was added or updated. Although it is optional, a message makes the commit history for your repository more useful.\n\n--name (string)\n\nThe name of the person adding or updating the file. Although it is optional, a name makes the commit history for your repository more useful.\n\n--email (string)\n\nAn email address for the person adding or updating the file.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncommitId -> (string)\n\nThe full SHA ID of the commit that contains this file change.\n\nblobId -> (string)\n\nThe ID of the blob, which is its SHA-1 pointer.\n\ntreeId -> (string)\n\nThe full SHA-1 pointer of the tree information for the commit that contains this file change.",
      "command_examples": "Examples\n\nTo add a file to a repository\n\nThe following put-file example adds a file named ‘ExampleSolution.py’ to a repository named ‘MyDemoRepo’ to a branch named ‘feature-randomizationfeature’ whose most recent commit has an ID of ‘4c925148EXAMPLE’.\n\naws codecommit put-file \\\n    --repository-name MyDemoRepo \\\n    --branch-name feature-randomizationfeature \\\n    --file-content fileb://MyDirectory/ExampleSolution.py \\\n    --file-path /solutions/ExampleSolution.py \\\n    --parent-commit-id 4c925148EXAMPLE \\\n    --name \"Maria Garcia\" \\\n    --email \"maria_garcia@example.com\" \\\n    --commit-message \"I added a third randomization routine.\"\n\n\nOutput:\n\n{\n    \"blobId\": \"2eb4af3bEXAMPLE\",\n    \"commitId\": \"317f8570EXAMPLE\",\n    \"treeId\": \"347a3408EXAMPLE\"\n}\n"
    },
    {
      "command_name": "put-repository-triggers",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/put-repository-triggers.html",
      "command_description": "Description\n\nReplaces all triggers for a repository. Used to create or delete triggers.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  put-repository-triggers\n--repository-name <value>\n--triggers <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--triggers <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository where you want to create or update the trigger.\n\n--triggers (list)\n\nThe JSON block of configuration information for each trigger.\n\n(structure)\n\nInformation about a trigger for a repository.\n\nname -> (string)\n\nThe name of the trigger.\n\ndestinationArn -> (string)\n\nThe ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS).\n\ncustomData -> (string)\n\nAny custom data associated with the trigger to be included in the information sent to the target of the trigger.\n\nbranches -> (list)\n\nThe branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.\n\nNote\n\nAlthough no content is required in the array, you must include the array itself.\n\n(string)\n\nevents -> (list)\n\nThe repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS.\n\nNote\n\nThe valid value “all” cannot be used with any other values.\n\n(string)\n\nShorthand Syntax:\n\nname=string,destinationArn=string,customData=string,branches=string,string,events=string,string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"name\": \"string\",\n    \"destinationArn\": \"string\",\n    \"customData\": \"string\",\n    \"branches\": [\"string\", ...],\n    \"events\": [\"all\"|\"updateReference\"|\"createReference\"|\"deleteReference\", ...]\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nconfigurationId -> (string)\n\nThe system-generated unique ID for the create or update operation.",
      "command_examples": "Examples\n\nTo add or update a trigger in a repository\n\nThis example demonstrates how to update triggers named ‘MyFirstTrigger’ and ‘MySecondTrigger’ using an already-created JSON file (here named MyTriggers.json) that contains the structure of all the triggers for a repository named MyDemoRepo. To learn how to get the JSON for existing triggers, see the get-repository-triggers command.\n\naws codecommit put-repository-triggers \\\n    --repository-name MyDemoRepo file://MyTriggers.json\n\n\nContents of MyTriggers.json:\n\n{\n    \"repositoryName\": \"MyDemoRepo\",\n    \"triggers\": [\n        {\n            \"destinationArn\": \"arn:aws:sns:us-east-1:80398EXAMPLE:MyCodeCommitTopic\",\n            \"branches\": [\n                \"main\",\n                \"preprod\"\n            ],\n            \"name\": \"MyFirstTrigger\",\n            \"customData\": \"\",\n            \"events\": [\n                \"all\"\n            ]\n        },\n        {\n            \"destinationArn\": \"arn:aws:lambda:us-east-1:111111111111:function:MyCodeCommitPythonFunction\",\n            \"branches\": [],\n            \"name\": \"MySecondTrigger\",\n            \"customData\": \"EXAMPLE\",\n            \"events\": [\n                \"all\"\n            ]\n        }\n    ]\n}\n\n\nOutput:\n\n{\n    \"configurationId\": \"6fa51cd8-35c1-EXAMPLE\"\n}\n"
    },
    {
      "command_name": "tag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/tag-resource.html",
      "command_description": "Description\n\nAdds or updates tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see CodeCommit Resources and Operations in the AWS CodeCommit User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  tag-resource\n--resource-arn <value>\n--tags <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--tags <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe Amazon Resource Name (ARN) of the resource to which you want to add or update tags.\n\n--tags (map)\n\nThe key-value pair to use when tagging this repository.\n\nkey -> (string)\n\nvalue -> (string)\n\nShorthand Syntax:\n\nKeyName1=string,KeyName2=string\n\n\nJSON Syntax:\n\n{\"string\": \"string\"\n  ...}\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo add AWS tags to an existing repository\n\nThe following tag-resource example tags the specified repository with two tags.\n\naws codecommit tag-resource \\\n    --resource-arn arn:aws:codecommit:us-west-2:111111111111:MyDemoRepo \\\n    --tags Status=Secret,Team=Saanvi\n\n\nThis command produces no output.\n\nFor more information, see Add a Tag to a Repository in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "test-repository-triggers",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/test-repository-triggers.html",
      "command_description": "Description\n\nTests the functionality of repository triggers by sending information to the trigger target. If real data is available in the repository, the test sends data from the last commit. If no data is available, sample data is generated.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  test-repository-triggers\n--repository-name <value>\n--triggers <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--triggers <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository in which to test the triggers.\n\n--triggers (list)\n\nThe list of triggers to test.\n\n(structure)\n\nInformation about a trigger for a repository.\n\nname -> (string)\n\nThe name of the trigger.\n\ndestinationArn -> (string)\n\nThe ARN of the resource that is the target for a trigger (for example, the ARN of a topic in Amazon SNS).\n\ncustomData -> (string)\n\nAny custom data associated with the trigger to be included in the information sent to the target of the trigger.\n\nbranches -> (list)\n\nThe branches to be included in the trigger configuration. If you specify an empty array, the trigger applies to all branches.\n\nNote\n\nAlthough no content is required in the array, you must include the array itself.\n\n(string)\n\nevents -> (list)\n\nThe repository events that cause the trigger to run actions in another service, such as sending a notification through Amazon SNS.\n\nNote\n\nThe valid value “all” cannot be used with any other values.\n\n(string)\n\nShorthand Syntax:\n\nname=string,destinationArn=string,customData=string,branches=string,string,events=string,string ...\n\n\nJSON Syntax:\n\n[\n  {\n    \"name\": \"string\",\n    \"destinationArn\": \"string\",\n    \"customData\": \"string\",\n    \"branches\": [\"string\", ...],\n    \"events\": [\"all\"|\"updateReference\"|\"createReference\"|\"deleteReference\", ...]\n  }\n  ...\n]\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nsuccessfulExecutions -> (list)\n\nThe list of triggers that were successfully tested. This list provides the names of the triggers that were successfully tested, separated by commas.\n\n(string)\n\nfailedExecutions -> (list)\n\nThe list of triggers that were not tested. This list provides the names of the triggers that could not be tested, separated by commas.\n\n(structure)\n\nA trigger failed to run.\n\ntrigger -> (string)\n\nThe name of the trigger that did not run.\n\nfailureMessage -> (string)\n\nMessage information about the trigger that did not run.",
      "command_examples": "Examples\n\nTo test triggers in a repository\n\nThis example demonstrates how to test a trigger named ‘MyFirstTrigger’ in an AWS CodeCommit repository named MyDemoRepo. In this example, events in the repository trigger notifications from an Amazon Simple Notification Service (Amazon SNS) topic.\n\nCommand:\n\naws codecommit test-repository-triggers --repository-name MyDemoRepo --triggers name=MyFirstTrigger,destinationArn=arn:aws:sns:us-east-1:111111111111:MyCodeCommitTopic,branches=mainline,preprod,events=all\n\n\nOutput:\n\n{\n  \"successfulExecutions\": [\n      \"MyFirstTrigger\"\n  ],\n  \"failedExecutions\": []\n}\n"
    },
    {
      "command_name": "untag-resource",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/untag-resource.html",
      "command_description": "Description\n\nRemoves tags for a resource in AWS CodeCommit. For a list of valid resources in AWS CodeCommit, see CodeCommit Resources and Operations in the AWS CodeCommit User Guide .\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  untag-resource\n--resource-arn <value>\n--tag-keys <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--resource-arn <value>",
        "--tag-keys <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--resource-arn (string)\n\nThe Amazon Resource Name (ARN) of the resource to which you want to remove tags.\n\n--tag-keys (list)\n\nThe tag key for each tag that you want to remove from the resource.\n\n(string)\n\nSyntax:\n\n\"string\" \"string\" ...\n\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo remove AWS tags from a repository\n\nThe following untag-resource example removes the tag with the specified key from the repository named MyDemoRepo.\n\naws codecommit untag-resource \\\n    --resource-arn arn:aws:codecommit:us-west-2:111111111111:MyDemoRepo \\\n    --tag-keys Status\n\n\nThis command produces no output.\n\nFor more information, see Remove a Tag from a Repository in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "update-approval-rule-template-content",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-approval-rule-template-content.html",
      "command_description": "Description\n\nUpdates the content of an approval rule template. You can change the number of required approvals, the membership of the approval rule, and whether an approval pool is defined.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-approval-rule-template-content\n--approval-rule-template-name <value>\n--new-rule-content <value>\n[--existing-rule-content-sha256 <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--approval-rule-template-name <value>",
        "--new-rule-content <value>",
        "[--existing-rule-content-sha256 <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--approval-rule-template-name (string)\n\nThe name of the approval rule template where you want to update the content of the rule.\n\n--new-rule-content (string)\n\nThe content that replaces the existing content of the rule. Content statements must be complete. You cannot provide only the changes.\n\n--existing-rule-content-sha256 (string)\n\nThe SHA-256 hash signature for the content of the approval rule. You can retrieve this information by using GetPullRequest .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRuleTemplate -> (structure)\n\nReturns information about an approval rule template.\n\napprovalRuleTemplateId -> (string)\n\nThe system-generated ID of the approval rule template.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the approval rule template.\n\napprovalRuleTemplateDescription -> (string)\n\nThe description of the approval rule template.\n\napprovalRuleTemplateContent -> (string)\n\nThe content of the approval rule template.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule template.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule template was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule template was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule template.",
      "command_examples": "Examples\n\nTo update the content of an approval rule template\n\nThe following update-approval-rule-template-content example changes the content of the specified approval rule template to redefine the approval pool to users who assume the role of CodeCommitReview.\n\naws codecommit update-approval-rule-template-content \\\n    --approval-rule-template-name 1-approver-rule  \\\n    --new-rule-content \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"DestinationReferences\\\": [\\\"refs/heads/main\\\"],\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\"\n\n\nOutput:\n\n{\n    \"approvalRuleTemplate\": {\n        \"creationDate\": 1571352720.773,\n        \"approvalRuleTemplateDescription\": \"Requires 1 approval for all pull requests from the CodeCommitReview pool\",\n        \"lastModifiedDate\": 1571358728.41,\n        \"approvalRuleTemplateId\": \"41de97b7-EXAMPLE\",\n        \"approvalRuleTemplateContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 1,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n        \"approvalRuleTemplateName\": \"1-approver-rule-for-all-pull-requests\",\n        \"ruleContentSha256\": \"2f6c21a5EXAMPLE\",\n        \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Li_Juan\"\n    }\n}\n\n\nFor more information, see Manage Approval Rule Templates in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "update-approval-rule-template-description",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-approval-rule-template-description.html",
      "command_description": "Description\n\nUpdates the description for a specified approval rule template.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-approval-rule-template-description\n--approval-rule-template-name <value>\n--approval-rule-template-description <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--approval-rule-template-name <value>",
        "--approval-rule-template-description <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--approval-rule-template-name (string)\n\nThe name of the template for which you want to update the description.\n\n--approval-rule-template-description (string)\n\nThe updated description of the approval rule template.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRuleTemplate -> (structure)\n\nThe structure and content of the updated approval rule template.\n\napprovalRuleTemplateId -> (string)\n\nThe system-generated ID of the approval rule template.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the approval rule template.\n\napprovalRuleTemplateDescription -> (string)\n\nThe description of the approval rule template.\n\napprovalRuleTemplateContent -> (string)\n\nThe content of the approval rule template.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule template.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule template was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule template was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule template.",
      "command_examples": "Examples\n\nTo update the description of an approval rule template\n\nThe following update-approval-rule-template-description example changes the description of the specified approval rule template to Requires 1 approval for all pull requests from the CodeCommitReview pool.:\n\naws codecommit update-approval-rule-template-description \\\n    --approval-rule-template-name 1-approver-rule-for-all-pull-requests  \\\n    --approval-rule-template-description \"Requires 1 approval for all pull requests from the CodeCommitReview pool\"\n\n\nOutput:\n\n{\n  \"approvalRuleTemplate\": {\n    \"creationDate\": 1571352720.773,\n    \"approvalRuleTemplateDescription\": \"Requires 1 approval for all pull requests from the CodeCommitReview pool\",\n    \"lastModifiedDate\": 1571358728.41,\n    \"approvalRuleTemplateId\": \"41de97b7-EXAMPLE\",\n    \"approvalRuleTemplateContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 1,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n    \"approvalRuleTemplateName\": \"1-approver-rule-for-all-pull-requests\",\n    \"ruleContentSha256\": \"2f6c21a5EXAMPLE\",\n    \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Li_Juan\"\n  }\n}\n\n\nFor more information, see Manage Approval Rule Templates in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "update-approval-rule-template-name",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-approval-rule-template-name.html",
      "command_description": "Description\n\nUpdates the name of a specified approval rule template.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-approval-rule-template-name\n--old-approval-rule-template-name <value>\n--new-approval-rule-template-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--old-approval-rule-template-name <value>",
        "--new-approval-rule-template-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--old-approval-rule-template-name (string)\n\nThe current name of the approval rule template.\n\n--new-approval-rule-template-name (string)\n\nThe new name you want to apply to the approval rule template.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRuleTemplate -> (structure)\n\nThe structure and content of the updated approval rule template.\n\napprovalRuleTemplateId -> (string)\n\nThe system-generated ID of the approval rule template.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the approval rule template.\n\napprovalRuleTemplateDescription -> (string)\n\nThe description of the approval rule template.\n\napprovalRuleTemplateContent -> (string)\n\nThe content of the approval rule template.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule template.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule template was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule template was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule template.",
      "command_examples": "Examples\n\nTo update the name of an approval rule template\n\nThe following update-approval-rule-template-name example changes the name of an approval rule template from 1-approver-rule to 1-approver-rule-for-all-pull-requests`.\n\naws codecommit update-approval-rule-template-name \\\n    --old-approval-rule-template-name 1-approver-rule  \\\n    --new-approval-rule-template-name 1-approver-rule-for-all-pull-requests\n\n\nOutput:\n\n{\n  \"approvalRuleTemplate\": {\n    \"approvalRuleTemplateName\": \"1-approver-rule-for-all-pull-requests\",\n    \"lastModifiedDate\": 1571358241.619,\n    \"approvalRuleTemplateId\": \"41de97b7-EXAMPLE\",\n    \"approvalRuleTemplateContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 1,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n    \"creationDate\": 1571352720.773,\n    \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n    \"approvalRuleTemplateDescription\": \"All pull requests must be approved by one developer on the team.\",\n    \"ruleContentSha256\": \"2f6c21a5cEXAMPLE\"\n  }\n}\n\n\nFor more information, see Manage Approval Rule Templates in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "update-comment",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-comment.html",
      "command_description": "Description\n\nReplaces the contents of a comment.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-comment\n--comment-id <value>\n--content <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--comment-id <value>",
        "--content <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--comment-id (string)\n\nThe system-generated ID of the comment you want to update. To get this ID, use GetCommentsForComparedCommit or GetCommentsForPullRequest .\n\n--content (string)\n\nThe updated content to replace the existing content of the comment.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\ncomment -> (structure)\n\nInformation about the updated comment.\n\ncommentId -> (string)\n\nThe system-generated comment ID.\n\ncontent -> (string)\n\nThe content of the comment.\n\ninReplyTo -> (string)\n\nThe ID of the comment for which this comment is a reply, if any.\n\ncreationDate -> (timestamp)\n\nThe date and time the comment was created, in timestamp format.\n\nlastModifiedDate -> (timestamp)\n\nThe date and time the comment was most recently modified, in timestamp format.\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the person who posted the comment.\n\ndeleted -> (boolean)\n\nA Boolean value indicating whether the comment has been deleted.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\ncallerReactions -> (list)\n\nThe emoji reactions to a comment, if any, submitted by the user whose credentials are associated with the call to the API.\n\n(string)\n\nreactionCounts -> (map)\n\nA string to integer map that represents the number of individual users who have responded to a comment with the specified reactions.\n\nkey -> (string)\n\nvalue -> (integer)",
      "command_examples": "Examples\n\nTo update a comment on a commit\n\nThis example demonstrates how to add the content \"Fixed as requested. I'll update the pull request.\" to a comment with an ID of 442b498bEXAMPLE5756813.\n\naws codecommit update-comment \\\n    --comment-id 442b498bEXAMPLE5756813 \\\n    --content \"Fixed as requested. I'll update the pull request.\"\n\n\nOutput:\n\n{\n    \"comment\": {\n        \"authorArn\": \"arn:aws:iam::111111111111:user/Li_Juan\",\n        \"clientRequestToken\": \"\",\n        \"commentId\": \"442b498bEXAMPLE5756813\",\n        \"content\": \"Fixed as requested. I'll update the pull request.\",\n        \"creationDate\": 1508369929.783,\n        \"deleted\": false,\n        \"lastModifiedDate\": 1508369929.287,\n        \"callerReactions\": [],\n        \"reactionCounts\":\n            {\n                \"THUMBSUP\" : 2\n            }\n    }\n}\n"
    },
    {
      "command_name": "update-default-branch",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-default-branch.html",
      "command_description": "Description\n\nSets or changes the default branch name for the specified repository.\n\nNote\n\nIf you use this operation to change the default branch name to the current default branch name, a success message is returned even though the default branch did not change.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-default-branch\n--repository-name <value>\n--default-branch-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "--default-branch-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository to set or change the default branch for.\n\n--default-branch-name (string)\n\nThe name of the branch to set as the default.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo change the default branch for a repository\n\nThis example changes the default branch for an AWS CodeCommit repository. This command produces output only if there are errors.\n\nCommand:\n\naws codecommit update-default-branch --repository-name MyDemoRepo --default-branch-name MyNewBranch\n\n\nOutput:\n\nNone.\n"
    },
    {
      "command_name": "update-pull-request-approval-rule-content",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-pull-request-approval-rule-content.html",
      "command_description": "Description\n\nUpdates the structure of an approval rule created specifically for a pull request. For example, you can change the number of required approvers and the approval pool for approvers.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-pull-request-approval-rule-content\n--pull-request-id <value>\n--approval-rule-name <value>\n[--existing-rule-content-sha256 <value>]\n--new-rule-content <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--approval-rule-name <value>",
        "[--existing-rule-content-sha256 <value>]",
        "--new-rule-content <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request.\n\n--approval-rule-name (string)\n\nThe name of the approval rule you want to update.\n\n--existing-rule-content-sha256 (string)\n\nThe SHA-256 hash signature for the content of the approval rule. You can retrieve this information by using GetPullRequest .\n\n--new-rule-content (string)\n\nThe updated content for the approval rule.\n\nNote\n\nWhen you update the content of the approval rule, you can specify approvers in an approval pool in one of two ways:\n\nCodeCommitApprovers : This option only requires an AWS account and a resource. It can be used for both IAM users and federated access users whose name matches the provided resource name. This is a very powerful option that offers a great deal of flexibility. For example, if you specify the AWS account 123456789012 and Mary_Major , all of the following are counted as approvals coming from that user:\n\nAn IAM user in the account (arn:aws:iam::123456789012 :user/Mary_Major )\n\nA federated user identified in IAM as Mary_Major (arn:aws:sts::123456789012 :federated-user/Mary_Major )\n\nThis option does not recognize an active session of someone assuming the role of CodeCommitReview with a role session name of Mary_Major (arn:aws:sts::123456789012 :assumed-role/CodeCommitReview/Mary_Major ) unless you include a wildcard (*Mary_Major).\n\nFully qualified ARN : This option allows you to specify the fully qualified Amazon Resource Name (ARN) of the IAM user or role.\n\nFor more information about IAM ARNs, wildcards, and formats, see IAM Identifiers in the IAM User Guide .\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\napprovalRule -> (structure)\n\nInformation about the updated approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.\n\noriginApprovalRuleTemplate -> (structure)\n\nThe approval rule template used to create the rule.\n\napprovalRuleTemplateId -> (string)\n\nThe ID of the template that created the approval rule.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the template that created the approval rule.",
      "command_examples": "Examples\n\nTo edit an approval rule for a pull request\n\nThe following update-pull-request-approval-rule-content example updates she specified approval rule to require one user approval from an approval pool that includes any IAM user in the 123456789012 AWS account.\n\naws codecommit update-pull-request-approval-rule-content \\\n    --pull-request-id 27  \\\n    --approval-rule-name \"Require two approved approvers\" \\\n    --approval-rule-content \"{Version: 2018-11-08, Statements: [{Type: \\\"Approvers\\\", NumberOfApprovalsNeeded: 1, ApprovalPoolMembers:[\\\"CodeCommitApprovers:123456789012:user/*\\\"]}]}}\"\n\n\nOutput:\n\n{\n    \"approvalRule\": {\n        \"approvalRuleContent\": \"{Version: 2018-11-08, Statements: [{Type: \\\"Approvers\\\", NumberOfApprovalsNeeded: 1, ApprovalPoolMembers:[\\\"CodeCommitApprovers:123456789012:user/*\\\"]}]}}\",\n        \"approvalRuleId\": \"aac33506-EXAMPLE\",\n        \"originApprovalRuleTemplate\": {},\n        \"creationDate\": 1570752871.932,\n        \"lastModifiedDate\": 1570754058.333,\n        \"approvalRuleName\": Require two approved approvers\",\n        \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n        \"ruleContentSha256\": \"cd93921cEXAMPLE\",\n    }\n}\n\n\nFor more information, see Edit or Delete an Approval Rule in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "update-pull-request-approval-state",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-pull-request-approval-state.html",
      "command_description": "Description\n\nUpdates the state of a user’s approval on a pull request. The user is derived from the signed-in account when the request is made.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-pull-request-approval-state\n--pull-request-id <value>\n--revision-id <value>\n--approval-state <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--revision-id <value>",
        "--approval-state <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request.\n\n--revision-id (string)\n\nThe system-generated ID of the revision.\n\n--approval-state (string)\n\nThe approval state to associate with the user on the pull request.\n\nPossible values:\n\nAPPROVE\n\nREVOKE\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo approve or revoke approval for a pull request\n\nThe following update-pull-request-approval-state example approves a pull request with the ID of 27 and a revision ID of 9f29d167EXAMPLE. If you wanted to revoke approval instead, then set the --approval-state parameter value to REVOKE.\n\naws codecommit update-pull-request-approval-state \\\n    --pull-request-id 27  \\\n    --revision-id 9f29d167EXAMPLE  \\\n    --approval-state \"APPROVE\"\n\n\nThis command produces no output.\n\nFor more information, see Review a Pull Request in the AWS CodeCommit User Guide."
    },
    {
      "command_name": "update-pull-request-description",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-pull-request-description.html",
      "command_description": "Description\n\nReplaces the contents of the description of a pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-pull-request-description\n--pull-request-id <value>\n--description <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--description <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request. To get this ID, use ListPullRequests .\n\n--description (string)\n\nThe updated content of the description for the pull request. This content replaces the existing description.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npullRequest -> (structure)\n\nInformation about the updated pull request.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\ntitle -> (string)\n\nThe user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users.\n\ndescription -> (string)\n\nThe user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.\n\nlastActivityDate -> (timestamp)\n\nThe day and time of the last user or system activity on the pull request, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the pull request was originally created, in timestamp format.\n\npullRequestStatus -> (string)\n\nThe status of the pull request. Pull request status can only change from OPEN to CLOSED .\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the user who created the pull request.\n\npullRequestTargets -> (list)\n\nThe targets of the pull request, including the source branch and destination branch for the pull request.\n\n(structure)\n\nReturns information about a pull request target.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the pull request source and destination branches.\n\nsourceReference -> (string)\n\nThe branch of the repository that contains the changes for the pull request. Also known as the source branch.\n\ndestinationReference -> (string)\n\nThe branch of the repository where the pull request changes are merged. Also known as the destination branch.\n\ndestinationCommit -> (string)\n\nThe full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.\n\nsourceCommit -> (string)\n\nThe full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.\n\nmergeBase -> (string)\n\nThe commit ID of the most recent commit that the source branch and the destination branch have in common.\n\nmergeMetadata -> (structure)\n\nReturns metadata about the state of the merge, including whether the merge has been made.\n\nisMerged -> (boolean)\n\nA Boolean value indicating whether the merge has been made.\n\nmergedBy -> (string)\n\nThe Amazon Resource Name (ARN) of the user who merged the branches.\n\nmergeCommitId -> (string)\n\nThe commit ID for the merge commit, if any.\n\nmergeOption -> (string)\n\nThe merge strategy used in the merge.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\nrevisionId -> (string)\n\nThe system-generated revision ID for the pull request.\n\napprovalRules -> (list)\n\nThe approval rules applied to the pull request.\n\n(structure)\n\nReturns information about an approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.\n\noriginApprovalRuleTemplate -> (structure)\n\nThe approval rule template used to create the rule.\n\napprovalRuleTemplateId -> (string)\n\nThe ID of the template that created the approval rule.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the template that created the approval rule.",
      "command_examples": "Examples\n\nTo change the description of a pull request\n\nThis example demonstrates how to change the description of a pull request with the ID of 47.\n\naws codecommit update-pull-request-description \\\n    --pull-request-id 47 \\\n    --description \"Updated the pull request to remove unused global variable.\"\n\n\nOutput:\n\n{\n    \"pullRequest\": {\n        \"authorArn\": \"arn:aws:iam::111111111111:user/Li_Juan\",\n        \"clientRequestToken\": \"\",\n        \"creationDate\": 1508530823.155,\n        \"description\": \"Updated the pull request to remove unused global variable.\",\n        \"lastActivityDate\": 1508372423.204,\n        \"pullRequestId\": \"47\",\n        \"pullRequestStatus\": \"OPEN\",\n        \"pullRequestTargets\": [\n            {\n                \"destinationCommit\": \"9f31c968EXAMPLE\",\n                \"destinationReference\": \"refs/heads/main\",\n                \"mergeMetadata\": {\n                    \"isMerged\": false,\n                },\n                \"repositoryName\": \"MyDemoRepo\",\n                \"sourceCommit\": \"99132ab0EXAMPLE\",\n                \"sourceReference\": \"refs/heads/variables-branch\"\n            }\n        ],\n        \"title\": \"Consolidation of global variables\"\n    }\n}\n"
    },
    {
      "command_name": "update-pull-request-status",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-pull-request-status.html",
      "command_description": "Description\n\nUpdates the status of a pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-pull-request-status\n--pull-request-id <value>\n--pull-request-status <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--pull-request-status <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request. To get this ID, use ListPullRequests .\n\n--pull-request-status (string)\n\nThe status of the pull request. The only valid operations are to update the status from OPEN to OPEN , OPEN to CLOSED or from CLOSED to CLOSED .\n\nPossible values:\n\nOPEN\n\nCLOSED\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npullRequest -> (structure)\n\nInformation about the pull request.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\ntitle -> (string)\n\nThe user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users.\n\ndescription -> (string)\n\nThe user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.\n\nlastActivityDate -> (timestamp)\n\nThe day and time of the last user or system activity on the pull request, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the pull request was originally created, in timestamp format.\n\npullRequestStatus -> (string)\n\nThe status of the pull request. Pull request status can only change from OPEN to CLOSED .\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the user who created the pull request.\n\npullRequestTargets -> (list)\n\nThe targets of the pull request, including the source branch and destination branch for the pull request.\n\n(structure)\n\nReturns information about a pull request target.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the pull request source and destination branches.\n\nsourceReference -> (string)\n\nThe branch of the repository that contains the changes for the pull request. Also known as the source branch.\n\ndestinationReference -> (string)\n\nThe branch of the repository where the pull request changes are merged. Also known as the destination branch.\n\ndestinationCommit -> (string)\n\nThe full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.\n\nsourceCommit -> (string)\n\nThe full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.\n\nmergeBase -> (string)\n\nThe commit ID of the most recent commit that the source branch and the destination branch have in common.\n\nmergeMetadata -> (structure)\n\nReturns metadata about the state of the merge, including whether the merge has been made.\n\nisMerged -> (boolean)\n\nA Boolean value indicating whether the merge has been made.\n\nmergedBy -> (string)\n\nThe Amazon Resource Name (ARN) of the user who merged the branches.\n\nmergeCommitId -> (string)\n\nThe commit ID for the merge commit, if any.\n\nmergeOption -> (string)\n\nThe merge strategy used in the merge.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\nrevisionId -> (string)\n\nThe system-generated revision ID for the pull request.\n\napprovalRules -> (list)\n\nThe approval rules applied to the pull request.\n\n(structure)\n\nReturns information about an approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.\n\noriginApprovalRuleTemplate -> (structure)\n\nThe approval rule template used to create the rule.\n\napprovalRuleTemplateId -> (string)\n\nThe ID of the template that created the approval rule.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the template that created the approval rule.",
      "command_examples": "Examples\n\nTo change the status of a pull request\n\nThis example demonstrates how to to change the status of a pull request with the ID of 42 to a status of CLOSED in an AWS CodeCommit repository named MyDemoRepo.\n\naws codecommit update-pull-request-status \\\n    --pull-request-id 42 \\\n    --pull-request-status CLOSED\n\n\nOutput:\n\n{\n    \"pullRequest\": {\n        \"approvalRules\": [\n            {\n                \"approvalRuleContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n                \"approvalRuleId\": \"dd8b17fe-EXAMPLE\",\n                \"approvalRuleName\": \"2-approvers-needed-for-this-change\",\n                \"creationDate\": 1571356106.936,\n                \"lastModifiedDate\": 571356106.936,\n                \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n                \"ruleContentSha256\": \"4711b576EXAMPLE\"\n            }\n        ],\n        \"authorArn\": \"arn:aws:iam::123456789012:user/Li_Juan\",\n        \"clientRequestToken\": \"\",\n        \"creationDate\": 1508530823.165,\n        \"description\": \"Updated the pull request to remove unused global variable.\",\n        \"lastActivityDate\": 1508372423.12,\n        \"pullRequestId\": \"47\",\n        \"pullRequestStatus\": \"CLOSED\",\n        \"pullRequestTargets\": [\n            {\n                \"destinationCommit\": \"9f31c968EXAMPLE\",\n                \"destinationReference\": \"refs/heads/main\",\n                \"mergeMetadata\": {\n                    \"isMerged\": false,\n                },\n                \"repositoryName\": \"MyDemoRepo\",\n                \"sourceCommit\": \"99132ab0EXAMPLE\",\n                \"sourceReference\": \"refs/heads/variables-branch\"\n            }\n        ],\n        \"title\": \"Consolidation of global variables\"\n    }\n}\n"
    },
    {
      "command_name": "update-pull-request-title",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-pull-request-title.html",
      "command_description": "Description\n\nReplaces the title of a pull request.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-pull-request-title\n--pull-request-id <value>\n--title <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--pull-request-id <value>",
        "--title <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--pull-request-id (string)\n\nThe system-generated ID of the pull request. To get this ID, use ListPullRequests .\n\n--title (string)\n\nThe updated title of the pull request. This replaces the existing title.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\npullRequest -> (structure)\n\nInformation about the updated pull request.\n\npullRequestId -> (string)\n\nThe system-generated ID of the pull request.\n\ntitle -> (string)\n\nThe user-defined title of the pull request. This title is displayed in the list of pull requests to other repository users.\n\ndescription -> (string)\n\nThe user-defined description of the pull request. This description can be used to clarify what should be reviewed and other details of the request.\n\nlastActivityDate -> (timestamp)\n\nThe day and time of the last user or system activity on the pull request, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date and time the pull request was originally created, in timestamp format.\n\npullRequestStatus -> (string)\n\nThe status of the pull request. Pull request status can only change from OPEN to CLOSED .\n\nauthorArn -> (string)\n\nThe Amazon Resource Name (ARN) of the user who created the pull request.\n\npullRequestTargets -> (list)\n\nThe targets of the pull request, including the source branch and destination branch for the pull request.\n\n(structure)\n\nReturns information about a pull request target.\n\nrepositoryName -> (string)\n\nThe name of the repository that contains the pull request source and destination branches.\n\nsourceReference -> (string)\n\nThe branch of the repository that contains the changes for the pull request. Also known as the source branch.\n\ndestinationReference -> (string)\n\nThe branch of the repository where the pull request changes are merged. Also known as the destination branch.\n\ndestinationCommit -> (string)\n\nThe full commit ID that is the tip of the destination branch. This is the commit where the pull request was or will be merged.\n\nsourceCommit -> (string)\n\nThe full commit ID of the tip of the source branch used to create the pull request. If the pull request branch is updated by a push while the pull request is open, the commit ID changes to reflect the new tip of the branch.\n\nmergeBase -> (string)\n\nThe commit ID of the most recent commit that the source branch and the destination branch have in common.\n\nmergeMetadata -> (structure)\n\nReturns metadata about the state of the merge, including whether the merge has been made.\n\nisMerged -> (boolean)\n\nA Boolean value indicating whether the merge has been made.\n\nmergedBy -> (string)\n\nThe Amazon Resource Name (ARN) of the user who merged the branches.\n\nmergeCommitId -> (string)\n\nThe commit ID for the merge commit, if any.\n\nmergeOption -> (string)\n\nThe merge strategy used in the merge.\n\nclientRequestToken -> (string)\n\nA unique, client-generated idempotency token that, when provided in a request, ensures the request cannot be repeated with a changed parameter. If a request is received with the same parameters and a token is included, the request returns information about the initial request that used that token.\n\nrevisionId -> (string)\n\nThe system-generated revision ID for the pull request.\n\napprovalRules -> (list)\n\nThe approval rules applied to the pull request.\n\n(structure)\n\nReturns information about an approval rule.\n\napprovalRuleId -> (string)\n\nThe system-generated ID of the approval rule.\n\napprovalRuleName -> (string)\n\nThe name of the approval rule.\n\napprovalRuleContent -> (string)\n\nThe content of the approval rule.\n\nruleContentSha256 -> (string)\n\nThe SHA-256 hash signature for the content of the approval rule.\n\nlastModifiedDate -> (timestamp)\n\nThe date the approval rule was most recently changed, in timestamp format.\n\ncreationDate -> (timestamp)\n\nThe date the approval rule was created, in timestamp format.\n\nlastModifiedUser -> (string)\n\nThe Amazon Resource Name (ARN) of the user who made the most recent changes to the approval rule.\n\noriginApprovalRuleTemplate -> (structure)\n\nThe approval rule template used to create the rule.\n\napprovalRuleTemplateId -> (string)\n\nThe ID of the template that created the approval rule.\n\napprovalRuleTemplateName -> (string)\n\nThe name of the template that created the approval rule.",
      "command_examples": "Examples\n\nTo change the title of a pull request\n\nThis example demonstrates how to change the title of a pull request with the ID of 47.\n\naws codecommit update-pull-request-title \\\n    --pull-request-id 47 \\\n    --title \"Consolidation of global variables - updated review\"\n\n\nOutput:\n\n{\n    \"pullRequest\": {\n        \"approvalRules\": [\n            {\n                \"approvalRuleContent\": \"{\\\"Version\\\": \\\"2018-11-08\\\",\\\"DestinationReferences\\\": [\\\"refs/heads/main\\\"],\\\"Statements\\\": [{\\\"Type\\\": \\\"Approvers\\\",\\\"NumberOfApprovalsNeeded\\\": 2,\\\"ApprovalPoolMembers\\\": [\\\"arn:aws:sts::123456789012:assumed-role/CodeCommitReview/*\\\"]}]}\",\n                \"approvalRuleId\": \"dd8b17fe-EXAMPLE\",\n                \"approvalRuleName\": \"2-approver-rule-for-main\",\n                \"creationDate\": 1571356106.936,\n                \"lastModifiedDate\": 571356106.936,\n                \"lastModifiedUser\": \"arn:aws:iam::123456789012:user/Mary_Major\",\n                \"originApprovalRuleTemplate\": {\n                    \"approvalRuleTemplateId\": \"dd8b26gr-EXAMPLE\",\n                    \"approvalRuleTemplateName\": \"2-approver-rule-for-main\"\n                },\n                \"ruleContentSha256\": \"4711b576EXAMPLE\"\n            }\n        ],\n        \"authorArn\": \"arn:aws:iam::123456789012:user/Li_Juan\",\n        \"clientRequestToken\": \"\",\n        \"creationDate\": 1508530823.12,\n        \"description\": \"Review the latest changes and updates to the global variables. I have updated this request with some changes, including removing some unused variables.\",\n        \"lastActivityDate\": 1508372657.188,\n        \"pullRequestId\": \"47\",\n        \"pullRequestStatus\": \"OPEN\",\n        \"pullRequestTargets\": [\n            {\n                \"destinationCommit\": \"9f31c968EXAMPLE\",\n                \"destinationReference\": \"refs/heads/main\",\n                \"mergeMetadata\": {\n                    \"isMerged\": false,\n                },\n                \"repositoryName\": \"MyDemoRepo\",\n                \"sourceCommit\": \"99132ab0EXAMPLE\",\n                \"sourceReference\": \"refs/heads/variables-branch\"\n            }\n        ],\n        \"title\": \"Consolidation of global variables - updated review\"\n    }\n}\n"
    },
    {
      "command_name": "update-repository-description",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-repository-description.html",
      "command_description": "Description\n\nSets or changes the comment or description for a repository.\n\nNote\n\nThe description field for a repository accepts all HTML characters and all valid Unicode characters. Applications that do not HTML-encode the description and display it in a webpage can expose users to potentially malicious code. Make sure that you HTML-encode the description field in any application that uses this API to display the repository description on a webpage.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-repository-description\n--repository-name <value>\n[--repository-description <value>]\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--repository-name <value>",
        "[--repository-description <value>]",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--repository-name (string)\n\nThe name of the repository to set or change the comment or description for.\n\n--repository-description (string)\n\nThe new comment or description for the specified repository. Repository descriptions are limited to 1,000 characters.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo change the description for a repository\n\nThis example changes the description for an AWS CodeCommit repository. This command produces output only if there are errors.\n\nCommand:\n\naws codecommit update-repository-description --repository-name MyDemoRepo --repository-description \"This description was changed\"\n\n\nOutput:\n\nNone.\n"
    },
    {
      "command_name": "update-repository-name",
      "command_url": "https://awscli.amazonaws.com/v2/documentation/api/latest/reference/codecommit/update-repository-name.html",
      "command_description": "Description\n\nRenames a repository. The repository name must be unique across the calling AWS account. Repository names are limited to 100 alphanumeric, dash, and underscore characters, and cannot include certain characters. The suffix .git is prohibited. For more information about the limits on repository names, see Limits in the AWS CodeCommit User Guide.\n\nSee also: AWS API Documentation\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_synopsis": "Synopsis\n  update-repository-name\n--old-name <value>\n--new-name <value>\n[--cli-input-json | --cli-input-yaml]\n[--generate-cli-skeleton <value>]\n",
      "command_options": [
        "--old-name <value>",
        "--new-name <value>",
        "[--cli-input-json | --cli-input-yaml]",
        "[--generate-cli-skeleton <value>]"
      ],
      "command_options_description": "Options\n\n--old-name (string)\n\nThe current name of the repository.\n\n--new-name (string)\n\nThe new name for the repository.\n\n--cli-input-json | --cli-input-yaml (string) Reads arguments from the JSON string provided. The JSON string follows the format provided by --generate-cli-skeleton. If other arguments are provided on the command line, those values will override the JSON-provided values. It is not possible to pass arbitrary binary values using a JSON-provided value as the string will be taken literally. This may not be specified along with --cli-input-yaml.\n\n--generate-cli-skeleton (string) Prints a JSON skeleton to standard output without sending an API request. If provided with no value or the value input, prints a sample input JSON that can be used as an argument for --cli-input-json. Similarly, if provided yaml-input it will print a sample input YAML that can be used with --cli-input-yaml. If provided with the value output, it validates the command inputs and returns a sample output JSON for that command.\n\nSee ‘aws help’ for descriptions of global parameters.",
      "command_output": "Output\n\nNone",
      "command_examples": "Examples\n\nTo change the name of a repository\n\nThis example changes the name of an AWS CodeCommit repository. This command produces output only if there are errors. Changing the name of the AWS CodeCommit repository will change the SSH and HTTPS URLs that users need to connect to the repository. Users will not be able to connect to this repository until they update their connection settings. Also, because the repository’s ARN will change, changing the repository name will invalidate any IAM user policies that rely on this repository’s ARN.\n\nCommand:\n\naws codecommit update-repository-name --old-name MyDemoRepo --new-name MyRenamedDemoRepo\n\n\nOutput:\n\nNone.\n"
    }
  ],
  "service_description": "Description\n\nThis is the AWS CodeCommit API Reference . This reference provides descriptions of the operations and data types for AWS CodeCommit API along with usage examples.\n\nYou can use the AWS CodeCommit API to work with the following objects:\n\nRepositories, by calling the following:\n\nBatchGetRepositories , which returns information about one or more repositories associated with your AWS account.\n\nCreateRepository , which creates an AWS CodeCommit repository.\n\nDeleteRepository , which deletes an AWS CodeCommit repository.\n\nGetRepository , which returns information about a specified repository.\n\nListRepositories , which lists all AWS CodeCommit repositories associated with your AWS account.\n\nUpdateRepositoryDescription , which sets or updates the description of the repository.\n\nUpdateRepositoryName , which changes the name of the repository. If you change the name of a repository, no other users of that repository can access it until you send them the new HTTPS or SSH URL to use.\n\nBranches, by calling the following:\n\nCreateBranch , which creates a branch in a specified repository.\n\nDeleteBranch , which deletes the specified branch in a repository unless it is the default branch.\n\nGetBranch , which returns information about a specified branch.\n\nListBranches , which lists all branches for a specified repository.\n\nUpdateDefaultBranch , which changes the default branch for a repository.\n\nFiles, by calling the following:\n\nDeleteFile , which deletes the content of a specified file from a specified branch.\n\nGetBlob , which returns the base-64 encoded content of an individual Git blob object in a repository.\n\nGetFile , which returns the base-64 encoded content of a specified file.\n\nGetFolder , which returns the contents of a specified folder or directory.\n\nPutFile , which adds or modifies a single file in a specified repository and branch.\n\nCommits, by calling the following:\n\nBatchGetCommits , which returns information about one or more commits in a repository.\n\nCreateCommit , which creates a commit for changes to a repository.\n\nGetCommit , which returns information about a commit, including commit messages and author and committer information.\n\nGetDifferences , which returns information about the differences in a valid commit specifier (such as a branch, tag, HEAD, commit ID, or other fully qualified reference).\n\nMerges, by calling the following:\n\nBatchDescribeMergeConflicts , which returns information about conflicts in a merge between commits in a repository.\n\nCreateUnreferencedMergeCommit , which creates an unreferenced commit between two branches or commits for the purpose of comparing them and identifying any potential conflicts.\n\nDescribeMergeConflicts , which returns information about merge conflicts between the base, source, and destination versions of a file in a potential merge.\n\nGetMergeCommit , which returns information about the merge between a source and destination commit.\n\nGetMergeConflicts , which returns information about merge conflicts between the source and destination branch in a pull request.\n\nGetMergeOptions , which returns information about the available merge options between two branches or commit specifiers.\n\nMergeBranchesByFastForward , which merges two branches using the fast-forward merge option.\n\nMergeBranchesBySquash , which merges two branches using the squash merge option.\n\nMergeBranchesByThreeWay , which merges two branches using the three-way merge option.\n\nPull requests, by calling the following:\n\nCreatePullRequest , which creates a pull request in a specified repository.\n\nCreatePullRequestApprovalRule , which creates an approval rule for a specified pull request.\n\nDeletePullRequestApprovalRule , which deletes an approval rule for a specified pull request.\n\nDescribePullRequestEvents , which returns information about one or more pull request events.\n\nEvaluatePullRequestApprovalRules , which evaluates whether a pull request has met all the conditions specified in its associated approval rules.\n\nGetCommentsForPullRequest , which returns information about comments on a specified pull request.\n\nGetPullRequest , which returns information about a specified pull request.\n\nGetPullRequestApprovalStates , which returns information about the approval states for a specified pull request.\n\nGetPullRequestOverrideState , which returns information about whether approval rules have been set aside (overriden) for a pull request, and if so, the Amazon Resource Name (ARN) of the user or identity that overrode the rules and their requirements for the pull request.\n\nListPullRequests , which lists all pull requests for a repository.\n\nMergePullRequestByFastForward , which merges the source destination branch of a pull request into the specified destination branch for that pull request using the fast-forward merge option.\n\nMergePullRequestBySquash , which merges the source destination branch of a pull request into the specified destination branch for that pull request using the squash merge option.\n\nMergePullRequestByThreeWay . which merges the source destination branch of a pull request into the specified destination branch for that pull request using the three-way merge option.\n\nOverridePullRequestApprovalRules , which sets aside all approval rule requirements for a pull request.\n\nPostCommentForPullRequest , which posts a comment to a pull request at the specified line, file, or request.\n\nUpdatePullRequestApprovalRuleContent , which updates the structure of an approval rule for a pull request.\n\nUpdatePullRequestApprovalState , which updates the state of an approval on a pull request.\n\nUpdatePullRequestDescription , which updates the description of a pull request.\n\nUpdatePullRequestStatus , which updates the status of a pull request.\n\nUpdatePullRequestTitle , which updates the title of a pull request.\n\nApproval rule templates, by calling the following:\n\nAssociateApprovalRuleTemplateWithRepository , which associates a template with a specified repository. After the template is associated with a repository, AWS CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repository.\n\nBatchAssociateApprovalRuleTemplateWithRepositories , which associates a template with one or more specified repositories. After the template is associated with a repository, AWS CodeCommit creates approval rules that match the template conditions on every pull request created in the specified repositories.\n\nBatchDisassociateApprovalRuleTemplateFromRepositories , which removes the association between a template and specified repositories so that approval rules based on the template are not automatically created when pull requests are created in those repositories.\n\nCreateApprovalRuleTemplate , which creates a template for approval rules that can then be associated with one or more repositories in your AWS account.\n\nDeleteApprovalRuleTemplate , which deletes the specified template. It does not remove approval rules on pull requests already created with the template.\n\nDisassociateApprovalRuleTemplateFromRepository , which removes the association between a template and a repository so that approval rules based on the template are not automatically created when pull requests are created in the specified repository.\n\nGetApprovalRuleTemplate , which returns information about an approval rule template.\n\nListApprovalRuleTemplates , which lists all approval rule templates in the AWS Region in your AWS account.\n\nListAssociatedApprovalRuleTemplatesForRepository , which lists all approval rule templates that are associated with a specified repository.\n\nListRepositoriesForApprovalRuleTemplate , which lists all repositories associated with the specified approval rule template.\n\nUpdateApprovalRuleTemplateDescription , which updates the description of an approval rule template.\n\nUpdateApprovalRuleTemplateName , which updates the name of an approval rule template.\n\nUpdateApprovalRuleTemplateContent , which updates the content of an approval rule template.\n\nComments in a repository, by calling the following:\n\nDeleteCommentContent , which deletes the content of a comment on a commit in a repository.\n\nGetComment , which returns information about a comment on a commit.\n\nGetCommentReactions , which returns information about emoji reactions to comments.\n\nGetCommentsForComparedCommit , which returns information about comments on the comparison between two commit specifiers in a repository.\n\nPostCommentForComparedCommit , which creates a comment on the comparison between two commit specifiers in a repository.\n\nPostCommentReply , which creates a reply to a comment.\n\nPutCommentReaction , which creates or updates an emoji reaction to a comment.\n\nUpdateComment , which updates the content of a comment on a commit in a repository.\n\nTags used to tag resources in AWS CodeCommit (not Git tags), by calling the following:\n\nListTagsForResource , which gets information about AWS tags for a specified Amazon Resource Name (ARN) in AWS CodeCommit.\n\nTagResource , which adds or updates tags for a resource in AWS CodeCommit.\n\nUntagResource , which removes tags for a resource in AWS CodeCommit.\n\nTriggers, by calling the following:\n\nGetRepositoryTriggers , which returns information about triggers configured for a repository.\n\nPutRepositoryTriggers , which replaces all triggers for a repository and can be used to create or delete triggers.\n\nTestRepositoryTriggers , which tests the functionality of a repository trigger by sending data to the trigger target.\n\nFor information about how to use AWS CodeCommit, see the AWS CodeCommit User Guide ."
}